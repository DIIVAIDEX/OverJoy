
OverJoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009278  08009278  00019278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  20000000  080096f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008c0  20000198  08009884  00020198  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000a58  08009884  00020a58  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023690  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000442b  00000000  00000000  0004384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c9b5  00000000  00000000  00047c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001158  00000000  00000000  00054630  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001108  00000000  00000000  00055788  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000093ae  00000000  00000000  00056890  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f19  00000000  00000000  0005fc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00064b57  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003338  00000000  00000000  00064bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000198 	.word	0x20000198
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009260 	.word	0x08009260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000019c 	.word	0x2000019c
 8000104:	08009260 	.word	0x08009260

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fc4b 	bl	8001cb4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fba5 	bl	8001b78 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fc3d 	bl	8001cb4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc33 	bl	8001cb4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbc5 	bl	8001bec <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fbbb 	bl	8001bec <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	1c08      	adds	r0, r1, #0
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 f9e1 	bl	8000854 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 f973 	bl	8000788 <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f9d3 	bl	8000854 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f9c9 	bl	8000854 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f97f 	bl	80007d4 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 f975 	bl	80007d4 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fdiv>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	4657      	mov	r7, sl
 80004fc:	464e      	mov	r6, r9
 80004fe:	46de      	mov	lr, fp
 8000500:	4645      	mov	r5, r8
 8000502:	b5e0      	push	{r5, r6, r7, lr}
 8000504:	0244      	lsls	r4, r0, #9
 8000506:	0043      	lsls	r3, r0, #1
 8000508:	0fc6      	lsrs	r6, r0, #31
 800050a:	b083      	sub	sp, #12
 800050c:	1c0f      	adds	r7, r1, #0
 800050e:	0a64      	lsrs	r4, r4, #9
 8000510:	0e1b      	lsrs	r3, r3, #24
 8000512:	46b2      	mov	sl, r6
 8000514:	d053      	beq.n	80005be <__aeabi_fdiv+0xc6>
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d027      	beq.n	800056a <__aeabi_fdiv+0x72>
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	00e4      	lsls	r4, r4, #3
 800051e:	04d2      	lsls	r2, r2, #19
 8000520:	4314      	orrs	r4, r2
 8000522:	227f      	movs	r2, #127	; 0x7f
 8000524:	4252      	negs	r2, r2
 8000526:	4690      	mov	r8, r2
 8000528:	4498      	add	r8, r3
 800052a:	2300      	movs	r3, #0
 800052c:	4699      	mov	r9, r3
 800052e:	469b      	mov	fp, r3
 8000530:	027d      	lsls	r5, r7, #9
 8000532:	0078      	lsls	r0, r7, #1
 8000534:	0ffb      	lsrs	r3, r7, #31
 8000536:	0a6d      	lsrs	r5, r5, #9
 8000538:	0e00      	lsrs	r0, r0, #24
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	d024      	beq.n	8000588 <__aeabi_fdiv+0x90>
 800053e:	28ff      	cmp	r0, #255	; 0xff
 8000540:	d046      	beq.n	80005d0 <__aeabi_fdiv+0xd8>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	2100      	movs	r1, #0
 8000546:	00ed      	lsls	r5, r5, #3
 8000548:	04db      	lsls	r3, r3, #19
 800054a:	431d      	orrs	r5, r3
 800054c:	387f      	subs	r0, #127	; 0x7f
 800054e:	4647      	mov	r7, r8
 8000550:	1a38      	subs	r0, r7, r0
 8000552:	464f      	mov	r7, r9
 8000554:	430f      	orrs	r7, r1
 8000556:	00bf      	lsls	r7, r7, #2
 8000558:	46b9      	mov	r9, r7
 800055a:	0033      	movs	r3, r6
 800055c:	9a00      	ldr	r2, [sp, #0]
 800055e:	4f87      	ldr	r7, [pc, #540]	; (800077c <__aeabi_fdiv+0x284>)
 8000560:	4053      	eors	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	58ba      	ldr	r2, [r7, r2]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	4697      	mov	pc, r2
 800056a:	2c00      	cmp	r4, #0
 800056c:	d14e      	bne.n	800060c <__aeabi_fdiv+0x114>
 800056e:	2308      	movs	r3, #8
 8000570:	4699      	mov	r9, r3
 8000572:	33f7      	adds	r3, #247	; 0xf7
 8000574:	4698      	mov	r8, r3
 8000576:	3bfd      	subs	r3, #253	; 0xfd
 8000578:	469b      	mov	fp, r3
 800057a:	027d      	lsls	r5, r7, #9
 800057c:	0078      	lsls	r0, r7, #1
 800057e:	0ffb      	lsrs	r3, r7, #31
 8000580:	0a6d      	lsrs	r5, r5, #9
 8000582:	0e00      	lsrs	r0, r0, #24
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	d1da      	bne.n	800053e <__aeabi_fdiv+0x46>
 8000588:	2d00      	cmp	r5, #0
 800058a:	d126      	bne.n	80005da <__aeabi_fdiv+0xe2>
 800058c:	2000      	movs	r0, #0
 800058e:	2101      	movs	r1, #1
 8000590:	0033      	movs	r3, r6
 8000592:	9a00      	ldr	r2, [sp, #0]
 8000594:	4f7a      	ldr	r7, [pc, #488]	; (8000780 <__aeabi_fdiv+0x288>)
 8000596:	4053      	eors	r3, r2
 8000598:	4642      	mov	r2, r8
 800059a:	1a10      	subs	r0, r2, r0
 800059c:	464a      	mov	r2, r9
 800059e:	430a      	orrs	r2, r1
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	58ba      	ldr	r2, [r7, r2]
 80005a4:	001d      	movs	r5, r3
 80005a6:	4697      	mov	pc, r2
 80005a8:	9b00      	ldr	r3, [sp, #0]
 80005aa:	002c      	movs	r4, r5
 80005ac:	469a      	mov	sl, r3
 80005ae:	468b      	mov	fp, r1
 80005b0:	465b      	mov	r3, fp
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d131      	bne.n	800061a <__aeabi_fdiv+0x122>
 80005b6:	4653      	mov	r3, sl
 80005b8:	21ff      	movs	r1, #255	; 0xff
 80005ba:	2400      	movs	r4, #0
 80005bc:	e038      	b.n	8000630 <__aeabi_fdiv+0x138>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d117      	bne.n	80005f2 <__aeabi_fdiv+0xfa>
 80005c2:	2304      	movs	r3, #4
 80005c4:	4699      	mov	r9, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	4698      	mov	r8, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	469b      	mov	fp, r3
 80005ce:	e7af      	b.n	8000530 <__aeabi_fdiv+0x38>
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d10b      	bne.n	80005ee <__aeabi_fdiv+0xf6>
 80005d6:	2102      	movs	r1, #2
 80005d8:	e7da      	b.n	8000590 <__aeabi_fdiv+0x98>
 80005da:	0028      	movs	r0, r5
 80005dc:	f002 fab4 	bl	8002b48 <__clzsi2>
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409d      	lsls	r5, r3
 80005e4:	2376      	movs	r3, #118	; 0x76
 80005e6:	425b      	negs	r3, r3
 80005e8:	1a18      	subs	r0, r3, r0
 80005ea:	2100      	movs	r1, #0
 80005ec:	e7af      	b.n	800054e <__aeabi_fdiv+0x56>
 80005ee:	2103      	movs	r1, #3
 80005f0:	e7ad      	b.n	800054e <__aeabi_fdiv+0x56>
 80005f2:	0020      	movs	r0, r4
 80005f4:	f002 faa8 	bl	8002b48 <__clzsi2>
 80005f8:	1f43      	subs	r3, r0, #5
 80005fa:	409c      	lsls	r4, r3
 80005fc:	2376      	movs	r3, #118	; 0x76
 80005fe:	425b      	negs	r3, r3
 8000600:	1a1b      	subs	r3, r3, r0
 8000602:	4698      	mov	r8, r3
 8000604:	2300      	movs	r3, #0
 8000606:	4699      	mov	r9, r3
 8000608:	469b      	mov	fp, r3
 800060a:	e791      	b.n	8000530 <__aeabi_fdiv+0x38>
 800060c:	230c      	movs	r3, #12
 800060e:	4699      	mov	r9, r3
 8000610:	33f3      	adds	r3, #243	; 0xf3
 8000612:	4698      	mov	r8, r3
 8000614:	3bfc      	subs	r3, #252	; 0xfc
 8000616:	469b      	mov	fp, r3
 8000618:	e78a      	b.n	8000530 <__aeabi_fdiv+0x38>
 800061a:	2b03      	cmp	r3, #3
 800061c:	d100      	bne.n	8000620 <__aeabi_fdiv+0x128>
 800061e:	e0a5      	b.n	800076c <__aeabi_fdiv+0x274>
 8000620:	4655      	mov	r5, sl
 8000622:	2b01      	cmp	r3, #1
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0x130>
 8000626:	e081      	b.n	800072c <__aeabi_fdiv+0x234>
 8000628:	2301      	movs	r3, #1
 800062a:	2100      	movs	r1, #0
 800062c:	2400      	movs	r4, #0
 800062e:	402b      	ands	r3, r5
 8000630:	0264      	lsls	r4, r4, #9
 8000632:	05c9      	lsls	r1, r1, #23
 8000634:	0a60      	lsrs	r0, r4, #9
 8000636:	07db      	lsls	r3, r3, #31
 8000638:	4308      	orrs	r0, r1
 800063a:	4318      	orrs	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bc3c      	pop	{r2, r3, r4, r5}
 8000640:	4690      	mov	r8, r2
 8000642:	4699      	mov	r9, r3
 8000644:	46a2      	mov	sl, r4
 8000646:	46ab      	mov	fp, r5
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064a:	2480      	movs	r4, #128	; 0x80
 800064c:	2300      	movs	r3, #0
 800064e:	03e4      	lsls	r4, r4, #15
 8000650:	21ff      	movs	r1, #255	; 0xff
 8000652:	e7ed      	b.n	8000630 <__aeabi_fdiv+0x138>
 8000654:	21ff      	movs	r1, #255	; 0xff
 8000656:	2400      	movs	r4, #0
 8000658:	e7ea      	b.n	8000630 <__aeabi_fdiv+0x138>
 800065a:	2301      	movs	r3, #1
 800065c:	1a59      	subs	r1, r3, r1
 800065e:	291b      	cmp	r1, #27
 8000660:	dd66      	ble.n	8000730 <__aeabi_fdiv+0x238>
 8000662:	9a01      	ldr	r2, [sp, #4]
 8000664:	4013      	ands	r3, r2
 8000666:	2100      	movs	r1, #0
 8000668:	2400      	movs	r4, #0
 800066a:	e7e1      	b.n	8000630 <__aeabi_fdiv+0x138>
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	03db      	lsls	r3, r3, #15
 8000670:	421c      	tst	r4, r3
 8000672:	d038      	beq.n	80006e6 <__aeabi_fdiv+0x1ee>
 8000674:	421d      	tst	r5, r3
 8000676:	d051      	beq.n	800071c <__aeabi_fdiv+0x224>
 8000678:	431c      	orrs	r4, r3
 800067a:	0264      	lsls	r4, r4, #9
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	0033      	movs	r3, r6
 8000680:	21ff      	movs	r1, #255	; 0xff
 8000682:	e7d5      	b.n	8000630 <__aeabi_fdiv+0x138>
 8000684:	0163      	lsls	r3, r4, #5
 8000686:	016c      	lsls	r4, r5, #5
 8000688:	42a3      	cmp	r3, r4
 800068a:	d23b      	bcs.n	8000704 <__aeabi_fdiv+0x20c>
 800068c:	261b      	movs	r6, #27
 800068e:	2100      	movs	r1, #0
 8000690:	3801      	subs	r0, #1
 8000692:	2501      	movs	r5, #1
 8000694:	001f      	movs	r7, r3
 8000696:	0049      	lsls	r1, r1, #1
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	2f00      	cmp	r7, #0
 800069c:	db01      	blt.n	80006a2 <__aeabi_fdiv+0x1aa>
 800069e:	429c      	cmp	r4, r3
 80006a0:	d801      	bhi.n	80006a6 <__aeabi_fdiv+0x1ae>
 80006a2:	1b1b      	subs	r3, r3, r4
 80006a4:	4329      	orrs	r1, r5
 80006a6:	3e01      	subs	r6, #1
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d1f3      	bne.n	8000694 <__aeabi_fdiv+0x19c>
 80006ac:	001c      	movs	r4, r3
 80006ae:	1e63      	subs	r3, r4, #1
 80006b0:	419c      	sbcs	r4, r3
 80006b2:	430c      	orrs	r4, r1
 80006b4:	0001      	movs	r1, r0
 80006b6:	317f      	adds	r1, #127	; 0x7f
 80006b8:	2900      	cmp	r1, #0
 80006ba:	ddce      	ble.n	800065a <__aeabi_fdiv+0x162>
 80006bc:	0763      	lsls	r3, r4, #29
 80006be:	d004      	beq.n	80006ca <__aeabi_fdiv+0x1d2>
 80006c0:	230f      	movs	r3, #15
 80006c2:	4023      	ands	r3, r4
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d000      	beq.n	80006ca <__aeabi_fdiv+0x1d2>
 80006c8:	3404      	adds	r4, #4
 80006ca:	0123      	lsls	r3, r4, #4
 80006cc:	d503      	bpl.n	80006d6 <__aeabi_fdiv+0x1de>
 80006ce:	0001      	movs	r1, r0
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <__aeabi_fdiv+0x28c>)
 80006d2:	3180      	adds	r1, #128	; 0x80
 80006d4:	401c      	ands	r4, r3
 80006d6:	29fe      	cmp	r1, #254	; 0xfe
 80006d8:	dd0d      	ble.n	80006f6 <__aeabi_fdiv+0x1fe>
 80006da:	2301      	movs	r3, #1
 80006dc:	9a01      	ldr	r2, [sp, #4]
 80006de:	21ff      	movs	r1, #255	; 0xff
 80006e0:	4013      	ands	r3, r2
 80006e2:	2400      	movs	r4, #0
 80006e4:	e7a4      	b.n	8000630 <__aeabi_fdiv+0x138>
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	03db      	lsls	r3, r3, #15
 80006ea:	431c      	orrs	r4, r3
 80006ec:	0264      	lsls	r4, r4, #9
 80006ee:	0a64      	lsrs	r4, r4, #9
 80006f0:	0033      	movs	r3, r6
 80006f2:	21ff      	movs	r1, #255	; 0xff
 80006f4:	e79c      	b.n	8000630 <__aeabi_fdiv+0x138>
 80006f6:	2301      	movs	r3, #1
 80006f8:	9a01      	ldr	r2, [sp, #4]
 80006fa:	01a4      	lsls	r4, r4, #6
 80006fc:	0a64      	lsrs	r4, r4, #9
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4013      	ands	r3, r2
 8000702:	e795      	b.n	8000630 <__aeabi_fdiv+0x138>
 8000704:	1b1b      	subs	r3, r3, r4
 8000706:	261a      	movs	r6, #26
 8000708:	2101      	movs	r1, #1
 800070a:	e7c2      	b.n	8000692 <__aeabi_fdiv+0x19a>
 800070c:	9b00      	ldr	r3, [sp, #0]
 800070e:	468b      	mov	fp, r1
 8000710:	469a      	mov	sl, r3
 8000712:	2400      	movs	r4, #0
 8000714:	e74c      	b.n	80005b0 <__aeabi_fdiv+0xb8>
 8000716:	0263      	lsls	r3, r4, #9
 8000718:	d5e5      	bpl.n	80006e6 <__aeabi_fdiv+0x1ee>
 800071a:	2500      	movs	r5, #0
 800071c:	2480      	movs	r4, #128	; 0x80
 800071e:	03e4      	lsls	r4, r4, #15
 8000720:	432c      	orrs	r4, r5
 8000722:	0264      	lsls	r4, r4, #9
 8000724:	0a64      	lsrs	r4, r4, #9
 8000726:	9b00      	ldr	r3, [sp, #0]
 8000728:	21ff      	movs	r1, #255	; 0xff
 800072a:	e781      	b.n	8000630 <__aeabi_fdiv+0x138>
 800072c:	9501      	str	r5, [sp, #4]
 800072e:	e7c1      	b.n	80006b4 <__aeabi_fdiv+0x1bc>
 8000730:	0023      	movs	r3, r4
 8000732:	2020      	movs	r0, #32
 8000734:	40cb      	lsrs	r3, r1
 8000736:	1a41      	subs	r1, r0, r1
 8000738:	408c      	lsls	r4, r1
 800073a:	1e61      	subs	r1, r4, #1
 800073c:	418c      	sbcs	r4, r1
 800073e:	431c      	orrs	r4, r3
 8000740:	0763      	lsls	r3, r4, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fdiv+0x256>
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fdiv+0x256>
 800074c:	3404      	adds	r4, #4
 800074e:	0163      	lsls	r3, r4, #5
 8000750:	d505      	bpl.n	800075e <__aeabi_fdiv+0x266>
 8000752:	2301      	movs	r3, #1
 8000754:	9a01      	ldr	r2, [sp, #4]
 8000756:	2101      	movs	r1, #1
 8000758:	4013      	ands	r3, r2
 800075a:	2400      	movs	r4, #0
 800075c:	e768      	b.n	8000630 <__aeabi_fdiv+0x138>
 800075e:	2301      	movs	r3, #1
 8000760:	9a01      	ldr	r2, [sp, #4]
 8000762:	01a4      	lsls	r4, r4, #6
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	4013      	ands	r3, r2
 8000768:	2100      	movs	r1, #0
 800076a:	e761      	b.n	8000630 <__aeabi_fdiv+0x138>
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	03db      	lsls	r3, r3, #15
 8000770:	431c      	orrs	r4, r3
 8000772:	0264      	lsls	r4, r4, #9
 8000774:	0a64      	lsrs	r4, r4, #9
 8000776:	4653      	mov	r3, sl
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	e759      	b.n	8000630 <__aeabi_fdiv+0x138>
 800077c:	08009298 	.word	0x08009298
 8000780:	080092d8 	.word	0x080092d8
 8000784:	f7ffffff 	.word	0xf7ffffff

08000788 <__eqsf2>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	0042      	lsls	r2, r0, #1
 800078c:	0245      	lsls	r5, r0, #9
 800078e:	024e      	lsls	r6, r1, #9
 8000790:	004c      	lsls	r4, r1, #1
 8000792:	0fc3      	lsrs	r3, r0, #31
 8000794:	0a6d      	lsrs	r5, r5, #9
 8000796:	0e12      	lsrs	r2, r2, #24
 8000798:	0a76      	lsrs	r6, r6, #9
 800079a:	0e24      	lsrs	r4, r4, #24
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	2001      	movs	r0, #1
 80007a0:	2aff      	cmp	r2, #255	; 0xff
 80007a2:	d006      	beq.n	80007b2 <__eqsf2+0x2a>
 80007a4:	2cff      	cmp	r4, #255	; 0xff
 80007a6:	d003      	beq.n	80007b0 <__eqsf2+0x28>
 80007a8:	42a2      	cmp	r2, r4
 80007aa:	d101      	bne.n	80007b0 <__eqsf2+0x28>
 80007ac:	42b5      	cmp	r5, r6
 80007ae:	d006      	beq.n	80007be <__eqsf2+0x36>
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d1fc      	bne.n	80007b0 <__eqsf2+0x28>
 80007b6:	2cff      	cmp	r4, #255	; 0xff
 80007b8:	d1fa      	bne.n	80007b0 <__eqsf2+0x28>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d1f8      	bne.n	80007b0 <__eqsf2+0x28>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d006      	beq.n	80007d0 <__eqsf2+0x48>
 80007c2:	2001      	movs	r0, #1
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d1f3      	bne.n	80007b0 <__eqsf2+0x28>
 80007c8:	0028      	movs	r0, r5
 80007ca:	1e45      	subs	r5, r0, #1
 80007cc:	41a8      	sbcs	r0, r5
 80007ce:	e7ef      	b.n	80007b0 <__eqsf2+0x28>
 80007d0:	2000      	movs	r0, #0
 80007d2:	e7ed      	b.n	80007b0 <__eqsf2+0x28>

080007d4 <__gesf2>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	0042      	lsls	r2, r0, #1
 80007d8:	0245      	lsls	r5, r0, #9
 80007da:	024c      	lsls	r4, r1, #9
 80007dc:	0fc3      	lsrs	r3, r0, #31
 80007de:	0048      	lsls	r0, r1, #1
 80007e0:	0a6d      	lsrs	r5, r5, #9
 80007e2:	0e12      	lsrs	r2, r2, #24
 80007e4:	0a64      	lsrs	r4, r4, #9
 80007e6:	0e00      	lsrs	r0, r0, #24
 80007e8:	0fc9      	lsrs	r1, r1, #31
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d01e      	beq.n	800082c <__gesf2+0x58>
 80007ee:	28ff      	cmp	r0, #255	; 0xff
 80007f0:	d021      	beq.n	8000836 <__gesf2+0x62>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d10a      	bne.n	800080c <__gesf2+0x38>
 80007f6:	426e      	negs	r6, r5
 80007f8:	416e      	adcs	r6, r5
 80007fa:	b2f6      	uxtb	r6, r6
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d10f      	bne.n	8000820 <__gesf2+0x4c>
 8000800:	2c00      	cmp	r4, #0
 8000802:	d10d      	bne.n	8000820 <__gesf2+0x4c>
 8000804:	2000      	movs	r0, #0
 8000806:	2d00      	cmp	r5, #0
 8000808:	d009      	beq.n	800081e <__gesf2+0x4a>
 800080a:	e005      	b.n	8000818 <__gesf2+0x44>
 800080c:	2800      	cmp	r0, #0
 800080e:	d101      	bne.n	8000814 <__gesf2+0x40>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d001      	beq.n	8000818 <__gesf2+0x44>
 8000814:	428b      	cmp	r3, r1
 8000816:	d011      	beq.n	800083c <__gesf2+0x68>
 8000818:	2101      	movs	r1, #1
 800081a:	4258      	negs	r0, r3
 800081c:	4308      	orrs	r0, r1
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	2e00      	cmp	r6, #0
 8000822:	d0f7      	beq.n	8000814 <__gesf2+0x40>
 8000824:	2001      	movs	r0, #1
 8000826:	3901      	subs	r1, #1
 8000828:	4308      	orrs	r0, r1
 800082a:	e7f8      	b.n	800081e <__gesf2+0x4a>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0de      	beq.n	80007ee <__gesf2+0x1a>
 8000830:	2002      	movs	r0, #2
 8000832:	4240      	negs	r0, r0
 8000834:	e7f3      	b.n	800081e <__gesf2+0x4a>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d0db      	beq.n	80007f2 <__gesf2+0x1e>
 800083a:	e7f9      	b.n	8000830 <__gesf2+0x5c>
 800083c:	4282      	cmp	r2, r0
 800083e:	dceb      	bgt.n	8000818 <__gesf2+0x44>
 8000840:	db04      	blt.n	800084c <__gesf2+0x78>
 8000842:	42a5      	cmp	r5, r4
 8000844:	d8e8      	bhi.n	8000818 <__gesf2+0x44>
 8000846:	2000      	movs	r0, #0
 8000848:	42a5      	cmp	r5, r4
 800084a:	d2e8      	bcs.n	800081e <__gesf2+0x4a>
 800084c:	2101      	movs	r1, #1
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4308      	orrs	r0, r1
 8000852:	e7e4      	b.n	800081e <__gesf2+0x4a>

08000854 <__lesf2>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	0042      	lsls	r2, r0, #1
 8000858:	024d      	lsls	r5, r1, #9
 800085a:	004c      	lsls	r4, r1, #1
 800085c:	0246      	lsls	r6, r0, #9
 800085e:	0a76      	lsrs	r6, r6, #9
 8000860:	0e12      	lsrs	r2, r2, #24
 8000862:	0fc3      	lsrs	r3, r0, #31
 8000864:	0a6d      	lsrs	r5, r5, #9
 8000866:	0e24      	lsrs	r4, r4, #24
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d016      	beq.n	800089c <__lesf2+0x48>
 800086e:	2cff      	cmp	r4, #255	; 0xff
 8000870:	d018      	beq.n	80008a4 <__lesf2+0x50>
 8000872:	2a00      	cmp	r2, #0
 8000874:	d10a      	bne.n	800088c <__lesf2+0x38>
 8000876:	4270      	negs	r0, r6
 8000878:	4170      	adcs	r0, r6
 800087a:	b2c0      	uxtb	r0, r0
 800087c:	2c00      	cmp	r4, #0
 800087e:	d015      	beq.n	80008ac <__lesf2+0x58>
 8000880:	2800      	cmp	r0, #0
 8000882:	d005      	beq.n	8000890 <__lesf2+0x3c>
 8000884:	2001      	movs	r0, #1
 8000886:	3901      	subs	r1, #1
 8000888:	4308      	orrs	r0, r1
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	2c00      	cmp	r4, #0
 800088e:	d013      	beq.n	80008b8 <__lesf2+0x64>
 8000890:	4299      	cmp	r1, r3
 8000892:	d014      	beq.n	80008be <__lesf2+0x6a>
 8000894:	2001      	movs	r0, #1
 8000896:	425b      	negs	r3, r3
 8000898:	4318      	orrs	r0, r3
 800089a:	e7f6      	b.n	800088a <__lesf2+0x36>
 800089c:	2002      	movs	r0, #2
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d1f3      	bne.n	800088a <__lesf2+0x36>
 80008a2:	e7e4      	b.n	800086e <__lesf2+0x1a>
 80008a4:	2002      	movs	r0, #2
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d1ef      	bne.n	800088a <__lesf2+0x36>
 80008aa:	e7e2      	b.n	8000872 <__lesf2+0x1e>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d1e7      	bne.n	8000880 <__lesf2+0x2c>
 80008b0:	2000      	movs	r0, #0
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0e9      	beq.n	800088a <__lesf2+0x36>
 80008b6:	e7ed      	b.n	8000894 <__lesf2+0x40>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d1e9      	bne.n	8000890 <__lesf2+0x3c>
 80008bc:	e7ea      	b.n	8000894 <__lesf2+0x40>
 80008be:	42a2      	cmp	r2, r4
 80008c0:	dc06      	bgt.n	80008d0 <__lesf2+0x7c>
 80008c2:	dbdf      	blt.n	8000884 <__lesf2+0x30>
 80008c4:	42ae      	cmp	r6, r5
 80008c6:	d803      	bhi.n	80008d0 <__lesf2+0x7c>
 80008c8:	2000      	movs	r0, #0
 80008ca:	42ae      	cmp	r6, r5
 80008cc:	d3da      	bcc.n	8000884 <__lesf2+0x30>
 80008ce:	e7dc      	b.n	800088a <__lesf2+0x36>
 80008d0:	2001      	movs	r0, #1
 80008d2:	4249      	negs	r1, r1
 80008d4:	4308      	orrs	r0, r1
 80008d6:	e7d8      	b.n	800088a <__lesf2+0x36>

080008d8 <__aeabi_fmul>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	4657      	mov	r7, sl
 80008dc:	464e      	mov	r6, r9
 80008de:	4645      	mov	r5, r8
 80008e0:	46de      	mov	lr, fp
 80008e2:	b5e0      	push	{r5, r6, r7, lr}
 80008e4:	0247      	lsls	r7, r0, #9
 80008e6:	0046      	lsls	r6, r0, #1
 80008e8:	4688      	mov	r8, r1
 80008ea:	0a7f      	lsrs	r7, r7, #9
 80008ec:	0e36      	lsrs	r6, r6, #24
 80008ee:	0fc4      	lsrs	r4, r0, #31
 80008f0:	2e00      	cmp	r6, #0
 80008f2:	d047      	beq.n	8000984 <__aeabi_fmul+0xac>
 80008f4:	2eff      	cmp	r6, #255	; 0xff
 80008f6:	d024      	beq.n	8000942 <__aeabi_fmul+0x6a>
 80008f8:	00fb      	lsls	r3, r7, #3
 80008fa:	2780      	movs	r7, #128	; 0x80
 80008fc:	04ff      	lsls	r7, r7, #19
 80008fe:	431f      	orrs	r7, r3
 8000900:	2300      	movs	r3, #0
 8000902:	4699      	mov	r9, r3
 8000904:	469a      	mov	sl, r3
 8000906:	3e7f      	subs	r6, #127	; 0x7f
 8000908:	4643      	mov	r3, r8
 800090a:	025d      	lsls	r5, r3, #9
 800090c:	0058      	lsls	r0, r3, #1
 800090e:	0fdb      	lsrs	r3, r3, #31
 8000910:	0a6d      	lsrs	r5, r5, #9
 8000912:	0e00      	lsrs	r0, r0, #24
 8000914:	4698      	mov	r8, r3
 8000916:	d043      	beq.n	80009a0 <__aeabi_fmul+0xc8>
 8000918:	28ff      	cmp	r0, #255	; 0xff
 800091a:	d03b      	beq.n	8000994 <__aeabi_fmul+0xbc>
 800091c:	00eb      	lsls	r3, r5, #3
 800091e:	2580      	movs	r5, #128	; 0x80
 8000920:	2200      	movs	r2, #0
 8000922:	04ed      	lsls	r5, r5, #19
 8000924:	431d      	orrs	r5, r3
 8000926:	387f      	subs	r0, #127	; 0x7f
 8000928:	1836      	adds	r6, r6, r0
 800092a:	1c73      	adds	r3, r6, #1
 800092c:	4641      	mov	r1, r8
 800092e:	469b      	mov	fp, r3
 8000930:	464b      	mov	r3, r9
 8000932:	4061      	eors	r1, r4
 8000934:	4313      	orrs	r3, r2
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d864      	bhi.n	8000a04 <__aeabi_fmul+0x12c>
 800093a:	4875      	ldr	r0, [pc, #468]	; (8000b10 <__aeabi_fmul+0x238>)
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	58c3      	ldr	r3, [r0, r3]
 8000940:	469f      	mov	pc, r3
 8000942:	2f00      	cmp	r7, #0
 8000944:	d142      	bne.n	80009cc <__aeabi_fmul+0xf4>
 8000946:	2308      	movs	r3, #8
 8000948:	4699      	mov	r9, r3
 800094a:	3b06      	subs	r3, #6
 800094c:	26ff      	movs	r6, #255	; 0xff
 800094e:	469a      	mov	sl, r3
 8000950:	e7da      	b.n	8000908 <__aeabi_fmul+0x30>
 8000952:	4641      	mov	r1, r8
 8000954:	2a02      	cmp	r2, #2
 8000956:	d028      	beq.n	80009aa <__aeabi_fmul+0xd2>
 8000958:	2a03      	cmp	r2, #3
 800095a:	d100      	bne.n	800095e <__aeabi_fmul+0x86>
 800095c:	e0ce      	b.n	8000afc <__aeabi_fmul+0x224>
 800095e:	2a01      	cmp	r2, #1
 8000960:	d000      	beq.n	8000964 <__aeabi_fmul+0x8c>
 8000962:	e0ac      	b.n	8000abe <__aeabi_fmul+0x1e6>
 8000964:	4011      	ands	r1, r2
 8000966:	2000      	movs	r0, #0
 8000968:	2200      	movs	r2, #0
 800096a:	b2cc      	uxtb	r4, r1
 800096c:	0240      	lsls	r0, r0, #9
 800096e:	05d2      	lsls	r2, r2, #23
 8000970:	0a40      	lsrs	r0, r0, #9
 8000972:	07e4      	lsls	r4, r4, #31
 8000974:	4310      	orrs	r0, r2
 8000976:	4320      	orrs	r0, r4
 8000978:	bc3c      	pop	{r2, r3, r4, r5}
 800097a:	4690      	mov	r8, r2
 800097c:	4699      	mov	r9, r3
 800097e:	46a2      	mov	sl, r4
 8000980:	46ab      	mov	fp, r5
 8000982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000984:	2f00      	cmp	r7, #0
 8000986:	d115      	bne.n	80009b4 <__aeabi_fmul+0xdc>
 8000988:	2304      	movs	r3, #4
 800098a:	4699      	mov	r9, r3
 800098c:	3b03      	subs	r3, #3
 800098e:	2600      	movs	r6, #0
 8000990:	469a      	mov	sl, r3
 8000992:	e7b9      	b.n	8000908 <__aeabi_fmul+0x30>
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	2202      	movs	r2, #2
 8000998:	2d00      	cmp	r5, #0
 800099a:	d0c5      	beq.n	8000928 <__aeabi_fmul+0x50>
 800099c:	2203      	movs	r2, #3
 800099e:	e7c3      	b.n	8000928 <__aeabi_fmul+0x50>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d119      	bne.n	80009d8 <__aeabi_fmul+0x100>
 80009a4:	2000      	movs	r0, #0
 80009a6:	2201      	movs	r2, #1
 80009a8:	e7be      	b.n	8000928 <__aeabi_fmul+0x50>
 80009aa:	2401      	movs	r4, #1
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	400c      	ands	r4, r1
 80009b0:	2000      	movs	r0, #0
 80009b2:	e7db      	b.n	800096c <__aeabi_fmul+0x94>
 80009b4:	0038      	movs	r0, r7
 80009b6:	f002 f8c7 	bl	8002b48 <__clzsi2>
 80009ba:	2676      	movs	r6, #118	; 0x76
 80009bc:	1f43      	subs	r3, r0, #5
 80009be:	409f      	lsls	r7, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	4276      	negs	r6, r6
 80009c4:	1a36      	subs	r6, r6, r0
 80009c6:	4699      	mov	r9, r3
 80009c8:	469a      	mov	sl, r3
 80009ca:	e79d      	b.n	8000908 <__aeabi_fmul+0x30>
 80009cc:	230c      	movs	r3, #12
 80009ce:	4699      	mov	r9, r3
 80009d0:	3b09      	subs	r3, #9
 80009d2:	26ff      	movs	r6, #255	; 0xff
 80009d4:	469a      	mov	sl, r3
 80009d6:	e797      	b.n	8000908 <__aeabi_fmul+0x30>
 80009d8:	0028      	movs	r0, r5
 80009da:	f002 f8b5 	bl	8002b48 <__clzsi2>
 80009de:	1f43      	subs	r3, r0, #5
 80009e0:	409d      	lsls	r5, r3
 80009e2:	2376      	movs	r3, #118	; 0x76
 80009e4:	425b      	negs	r3, r3
 80009e6:	1a18      	subs	r0, r3, r0
 80009e8:	2200      	movs	r2, #0
 80009ea:	e79d      	b.n	8000928 <__aeabi_fmul+0x50>
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	2400      	movs	r4, #0
 80009f0:	03c0      	lsls	r0, r0, #15
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	e7ba      	b.n	800096c <__aeabi_fmul+0x94>
 80009f6:	003d      	movs	r5, r7
 80009f8:	4652      	mov	r2, sl
 80009fa:	e7ab      	b.n	8000954 <__aeabi_fmul+0x7c>
 80009fc:	003d      	movs	r5, r7
 80009fe:	0021      	movs	r1, r4
 8000a00:	4652      	mov	r2, sl
 8000a02:	e7a7      	b.n	8000954 <__aeabi_fmul+0x7c>
 8000a04:	0c3b      	lsrs	r3, r7, #16
 8000a06:	469c      	mov	ip, r3
 8000a08:	042a      	lsls	r2, r5, #16
 8000a0a:	0c12      	lsrs	r2, r2, #16
 8000a0c:	0c2b      	lsrs	r3, r5, #16
 8000a0e:	0014      	movs	r4, r2
 8000a10:	4660      	mov	r0, ip
 8000a12:	4665      	mov	r5, ip
 8000a14:	043f      	lsls	r7, r7, #16
 8000a16:	0c3f      	lsrs	r7, r7, #16
 8000a18:	437c      	muls	r4, r7
 8000a1a:	4342      	muls	r2, r0
 8000a1c:	435d      	muls	r5, r3
 8000a1e:	437b      	muls	r3, r7
 8000a20:	0c27      	lsrs	r7, r4, #16
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	18ff      	adds	r7, r7, r3
 8000a26:	42ba      	cmp	r2, r7
 8000a28:	d903      	bls.n	8000a32 <__aeabi_fmul+0x15a>
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	469c      	mov	ip, r3
 8000a30:	4465      	add	r5, ip
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	043a      	lsls	r2, r7, #16
 8000a36:	0c24      	lsrs	r4, r4, #16
 8000a38:	1912      	adds	r2, r2, r4
 8000a3a:	0193      	lsls	r3, r2, #6
 8000a3c:	1e5c      	subs	r4, r3, #1
 8000a3e:	41a3      	sbcs	r3, r4
 8000a40:	0c3f      	lsrs	r7, r7, #16
 8000a42:	0e92      	lsrs	r2, r2, #26
 8000a44:	197d      	adds	r5, r7, r5
 8000a46:	431a      	orrs	r2, r3
 8000a48:	01ad      	lsls	r5, r5, #6
 8000a4a:	4315      	orrs	r5, r2
 8000a4c:	012b      	lsls	r3, r5, #4
 8000a4e:	d504      	bpl.n	8000a5a <__aeabi_fmul+0x182>
 8000a50:	2301      	movs	r3, #1
 8000a52:	465e      	mov	r6, fp
 8000a54:	086a      	lsrs	r2, r5, #1
 8000a56:	401d      	ands	r5, r3
 8000a58:	4315      	orrs	r5, r2
 8000a5a:	0032      	movs	r2, r6
 8000a5c:	327f      	adds	r2, #127	; 0x7f
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	dd25      	ble.n	8000aae <__aeabi_fmul+0x1d6>
 8000a62:	076b      	lsls	r3, r5, #29
 8000a64:	d004      	beq.n	8000a70 <__aeabi_fmul+0x198>
 8000a66:	230f      	movs	r3, #15
 8000a68:	402b      	ands	r3, r5
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fmul+0x198>
 8000a6e:	3504      	adds	r5, #4
 8000a70:	012b      	lsls	r3, r5, #4
 8000a72:	d503      	bpl.n	8000a7c <__aeabi_fmul+0x1a4>
 8000a74:	0032      	movs	r2, r6
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <__aeabi_fmul+0x23c>)
 8000a78:	3280      	adds	r2, #128	; 0x80
 8000a7a:	401d      	ands	r5, r3
 8000a7c:	2afe      	cmp	r2, #254	; 0xfe
 8000a7e:	dc94      	bgt.n	80009aa <__aeabi_fmul+0xd2>
 8000a80:	2401      	movs	r4, #1
 8000a82:	01a8      	lsls	r0, r5, #6
 8000a84:	0a40      	lsrs	r0, r0, #9
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	400c      	ands	r4, r1
 8000a8a:	e76f      	b.n	800096c <__aeabi_fmul+0x94>
 8000a8c:	2080      	movs	r0, #128	; 0x80
 8000a8e:	03c0      	lsls	r0, r0, #15
 8000a90:	4207      	tst	r7, r0
 8000a92:	d007      	beq.n	8000aa4 <__aeabi_fmul+0x1cc>
 8000a94:	4205      	tst	r5, r0
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_fmul+0x1cc>
 8000a98:	4328      	orrs	r0, r5
 8000a9a:	0240      	lsls	r0, r0, #9
 8000a9c:	0a40      	lsrs	r0, r0, #9
 8000a9e:	4644      	mov	r4, r8
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	e763      	b.n	800096c <__aeabi_fmul+0x94>
 8000aa4:	4338      	orrs	r0, r7
 8000aa6:	0240      	lsls	r0, r0, #9
 8000aa8:	0a40      	lsrs	r0, r0, #9
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	e75e      	b.n	800096c <__aeabi_fmul+0x94>
 8000aae:	2401      	movs	r4, #1
 8000ab0:	1aa3      	subs	r3, r4, r2
 8000ab2:	2b1b      	cmp	r3, #27
 8000ab4:	dd05      	ble.n	8000ac2 <__aeabi_fmul+0x1ea>
 8000ab6:	400c      	ands	r4, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	e756      	b.n	800096c <__aeabi_fmul+0x94>
 8000abe:	465e      	mov	r6, fp
 8000ac0:	e7cb      	b.n	8000a5a <__aeabi_fmul+0x182>
 8000ac2:	002a      	movs	r2, r5
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	40da      	lsrs	r2, r3
 8000ac8:	1ac3      	subs	r3, r0, r3
 8000aca:	409d      	lsls	r5, r3
 8000acc:	002b      	movs	r3, r5
 8000ace:	1e5d      	subs	r5, r3, #1
 8000ad0:	41ab      	sbcs	r3, r5
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fmul+0x20a>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	401a      	ands	r2, r3
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fmul+0x20a>
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	d504      	bpl.n	8000af0 <__aeabi_fmul+0x218>
 8000ae6:	2401      	movs	r4, #1
 8000ae8:	2201      	movs	r2, #1
 8000aea:	400c      	ands	r4, r1
 8000aec:	2000      	movs	r0, #0
 8000aee:	e73d      	b.n	800096c <__aeabi_fmul+0x94>
 8000af0:	2401      	movs	r4, #1
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	0a58      	lsrs	r0, r3, #9
 8000af6:	400c      	ands	r4, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	e737      	b.n	800096c <__aeabi_fmul+0x94>
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	2401      	movs	r4, #1
 8000b00:	03c0      	lsls	r0, r0, #15
 8000b02:	4328      	orrs	r0, r5
 8000b04:	0240      	lsls	r0, r0, #9
 8000b06:	0a40      	lsrs	r0, r0, #9
 8000b08:	400c      	ands	r4, r1
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	e72e      	b.n	800096c <__aeabi_fmul+0x94>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	08009318 	.word	0x08009318
 8000b14:	f7ffffff 	.word	0xf7ffffff

08000b18 <__aeabi_fsub>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	464f      	mov	r7, r9
 8000b1c:	46d6      	mov	lr, sl
 8000b1e:	4646      	mov	r6, r8
 8000b20:	0044      	lsls	r4, r0, #1
 8000b22:	b5c0      	push	{r6, r7, lr}
 8000b24:	0fc2      	lsrs	r2, r0, #31
 8000b26:	0247      	lsls	r7, r0, #9
 8000b28:	0248      	lsls	r0, r1, #9
 8000b2a:	0a40      	lsrs	r0, r0, #9
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4666      	mov	r6, ip
 8000b30:	0a7b      	lsrs	r3, r7, #9
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	0fc9      	lsrs	r1, r1, #31
 8000b36:	469a      	mov	sl, r3
 8000b38:	0e24      	lsrs	r4, r4, #24
 8000b3a:	0015      	movs	r5, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	0e00      	lsrs	r0, r0, #24
 8000b40:	4689      	mov	r9, r1
 8000b42:	00f6      	lsls	r6, r6, #3
 8000b44:	28ff      	cmp	r0, #255	; 0xff
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fsub+0x32>
 8000b48:	e08f      	b.n	8000c6a <__aeabi_fsub+0x152>
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	464f      	mov	r7, r9
 8000b4e:	404f      	eors	r7, r1
 8000b50:	0039      	movs	r1, r7
 8000b52:	4291      	cmp	r1, r2
 8000b54:	d066      	beq.n	8000c24 <__aeabi_fsub+0x10c>
 8000b56:	1a22      	subs	r2, r4, r0
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_fsub+0x46>
 8000b5c:	e09d      	b.n	8000c9a <__aeabi_fsub+0x182>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d13d      	bne.n	8000bde <__aeabi_fsub+0xc6>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0x50>
 8000b66:	e08b      	b.n	8000c80 <__aeabi_fsub+0x168>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_fsub+0x58>
 8000b6e:	e0b5      	b.n	8000cdc <__aeabi_fsub+0x1c4>
 8000b70:	2401      	movs	r4, #1
 8000b72:	1b9b      	subs	r3, r3, r6
 8000b74:	015a      	lsls	r2, r3, #5
 8000b76:	d544      	bpl.n	8000c02 <__aeabi_fsub+0xea>
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	099f      	lsrs	r7, r3, #6
 8000b7c:	0038      	movs	r0, r7
 8000b7e:	f001 ffe3 	bl	8002b48 <__clzsi2>
 8000b82:	3805      	subs	r0, #5
 8000b84:	4087      	lsls	r7, r0
 8000b86:	4284      	cmp	r4, r0
 8000b88:	dd00      	ble.n	8000b8c <__aeabi_fsub+0x74>
 8000b8a:	e096      	b.n	8000cba <__aeabi_fsub+0x1a2>
 8000b8c:	1b04      	subs	r4, r0, r4
 8000b8e:	003a      	movs	r2, r7
 8000b90:	2020      	movs	r0, #32
 8000b92:	3401      	adds	r4, #1
 8000b94:	40e2      	lsrs	r2, r4
 8000b96:	1b04      	subs	r4, r0, r4
 8000b98:	40a7      	lsls	r7, r4
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	1e5f      	subs	r7, r3, #1
 8000b9e:	41bb      	sbcs	r3, r7
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	075a      	lsls	r2, r3, #29
 8000ba6:	d004      	beq.n	8000bb2 <__aeabi_fsub+0x9a>
 8000ba8:	220f      	movs	r2, #15
 8000baa:	401a      	ands	r2, r3
 8000bac:	2a04      	cmp	r2, #4
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_fsub+0x9a>
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	015a      	lsls	r2, r3, #5
 8000bb4:	d527      	bpl.n	8000c06 <__aeabi_fsub+0xee>
 8000bb6:	3401      	adds	r4, #1
 8000bb8:	2cff      	cmp	r4, #255	; 0xff
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0xa6>
 8000bbc:	e079      	b.n	8000cb2 <__aeabi_fsub+0x19a>
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	0a5b      	lsrs	r3, r3, #9
 8000bc4:	b2e4      	uxtb	r4, r4
 8000bc6:	402a      	ands	r2, r5
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	05e4      	lsls	r4, r4, #23
 8000bcc:	0a58      	lsrs	r0, r3, #9
 8000bce:	07d2      	lsls	r2, r2, #31
 8000bd0:	4320      	orrs	r0, r4
 8000bd2:	4310      	orrs	r0, r2
 8000bd4:	bc1c      	pop	{r2, r3, r4}
 8000bd6:	4690      	mov	r8, r2
 8000bd8:	4699      	mov	r9, r3
 8000bda:	46a2      	mov	sl, r4
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2cff      	cmp	r4, #255	; 0xff
 8000be0:	d0e0      	beq.n	8000ba4 <__aeabi_fsub+0x8c>
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	04c9      	lsls	r1, r1, #19
 8000be6:	430e      	orrs	r6, r1
 8000be8:	2a1b      	cmp	r2, #27
 8000bea:	dc7b      	bgt.n	8000ce4 <__aeabi_fsub+0x1cc>
 8000bec:	0031      	movs	r1, r6
 8000bee:	2020      	movs	r0, #32
 8000bf0:	40d1      	lsrs	r1, r2
 8000bf2:	1a82      	subs	r2, r0, r2
 8000bf4:	4096      	lsls	r6, r2
 8000bf6:	1e72      	subs	r2, r6, #1
 8000bf8:	4196      	sbcs	r6, r2
 8000bfa:	430e      	orrs	r6, r1
 8000bfc:	1b9b      	subs	r3, r3, r6
 8000bfe:	015a      	lsls	r2, r3, #5
 8000c00:	d4ba      	bmi.n	8000b78 <__aeabi_fsub+0x60>
 8000c02:	075a      	lsls	r2, r3, #29
 8000c04:	d1d0      	bne.n	8000ba8 <__aeabi_fsub+0x90>
 8000c06:	2201      	movs	r2, #1
 8000c08:	08df      	lsrs	r7, r3, #3
 8000c0a:	402a      	ands	r2, r5
 8000c0c:	2cff      	cmp	r4, #255	; 0xff
 8000c0e:	d133      	bne.n	8000c78 <__aeabi_fsub+0x160>
 8000c10:	2f00      	cmp	r7, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0xfe>
 8000c14:	e0a8      	b.n	8000d68 <__aeabi_fsub+0x250>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	03db      	lsls	r3, r3, #15
 8000c1a:	433b      	orrs	r3, r7
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	0a5b      	lsrs	r3, r3, #9
 8000c20:	24ff      	movs	r4, #255	; 0xff
 8000c22:	e7d1      	b.n	8000bc8 <__aeabi_fsub+0xb0>
 8000c24:	1a21      	subs	r1, r4, r0
 8000c26:	2900      	cmp	r1, #0
 8000c28:	dd4c      	ble.n	8000cc4 <__aeabi_fsub+0x1ac>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d02a      	beq.n	8000c84 <__aeabi_fsub+0x16c>
 8000c2e:	2cff      	cmp	r4, #255	; 0xff
 8000c30:	d0b8      	beq.n	8000ba4 <__aeabi_fsub+0x8c>
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	04c0      	lsls	r0, r0, #19
 8000c36:	4306      	orrs	r6, r0
 8000c38:	291b      	cmp	r1, #27
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_fsub+0x126>
 8000c3c:	e0af      	b.n	8000d9e <__aeabi_fsub+0x286>
 8000c3e:	0030      	movs	r0, r6
 8000c40:	2720      	movs	r7, #32
 8000c42:	40c8      	lsrs	r0, r1
 8000c44:	1a79      	subs	r1, r7, r1
 8000c46:	408e      	lsls	r6, r1
 8000c48:	1e71      	subs	r1, r6, #1
 8000c4a:	418e      	sbcs	r6, r1
 8000c4c:	4306      	orrs	r6, r0
 8000c4e:	199b      	adds	r3, r3, r6
 8000c50:	0159      	lsls	r1, r3, #5
 8000c52:	d5d6      	bpl.n	8000c02 <__aeabi_fsub+0xea>
 8000c54:	3401      	adds	r4, #1
 8000c56:	2cff      	cmp	r4, #255	; 0xff
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x144>
 8000c5a:	e085      	b.n	8000d68 <__aeabi_fsub+0x250>
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	497a      	ldr	r1, [pc, #488]	; (8000e48 <__aeabi_fsub+0x330>)
 8000c60:	401a      	ands	r2, r3
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	400b      	ands	r3, r1
 8000c66:	4313      	orrs	r3, r2
 8000c68:	e79c      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fsub+0x158>
 8000c6e:	e770      	b.n	8000b52 <__aeabi_fsub+0x3a>
 8000c70:	e76b      	b.n	8000b4a <__aeabi_fsub+0x32>
 8000c72:	1e3b      	subs	r3, r7, #0
 8000c74:	d1c5      	bne.n	8000c02 <__aeabi_fsub+0xea>
 8000c76:	2200      	movs	r2, #0
 8000c78:	027b      	lsls	r3, r7, #9
 8000c7a:	0a5b      	lsrs	r3, r3, #9
 8000c7c:	b2e4      	uxtb	r4, r4
 8000c7e:	e7a3      	b.n	8000bc8 <__aeabi_fsub+0xb0>
 8000c80:	0014      	movs	r4, r2
 8000c82:	e78f      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d04d      	beq.n	8000d24 <__aeabi_fsub+0x20c>
 8000c88:	1e48      	subs	r0, r1, #1
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d157      	bne.n	8000d3e <__aeabi_fsub+0x226>
 8000c8e:	199b      	adds	r3, r3, r6
 8000c90:	2401      	movs	r4, #1
 8000c92:	015a      	lsls	r2, r3, #5
 8000c94:	d5b5      	bpl.n	8000c02 <__aeabi_fsub+0xea>
 8000c96:	2402      	movs	r4, #2
 8000c98:	e7e0      	b.n	8000c5c <__aeabi_fsub+0x144>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d125      	bne.n	8000cea <__aeabi_fsub+0x1d2>
 8000c9e:	1c62      	adds	r2, r4, #1
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	2a01      	cmp	r2, #1
 8000ca4:	dd72      	ble.n	8000d8c <__aeabi_fsub+0x274>
 8000ca6:	1b9f      	subs	r7, r3, r6
 8000ca8:	017a      	lsls	r2, r7, #5
 8000caa:	d535      	bpl.n	8000d18 <__aeabi_fsub+0x200>
 8000cac:	1af7      	subs	r7, r6, r3
 8000cae:	000d      	movs	r5, r1
 8000cb0:	e764      	b.n	8000b7c <__aeabi_fsub+0x64>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	402a      	ands	r2, r5
 8000cb8:	e786      	b.n	8000bc8 <__aeabi_fsub+0xb0>
 8000cba:	003b      	movs	r3, r7
 8000cbc:	4a63      	ldr	r2, [pc, #396]	; (8000e4c <__aeabi_fsub+0x334>)
 8000cbe:	1a24      	subs	r4, r4, r0
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	e76f      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d16c      	bne.n	8000da2 <__aeabi_fsub+0x28a>
 8000cc8:	1c61      	adds	r1, r4, #1
 8000cca:	b2c8      	uxtb	r0, r1
 8000ccc:	2801      	cmp	r0, #1
 8000cce:	dd4e      	ble.n	8000d6e <__aeabi_fsub+0x256>
 8000cd0:	29ff      	cmp	r1, #255	; 0xff
 8000cd2:	d049      	beq.n	8000d68 <__aeabi_fsub+0x250>
 8000cd4:	199b      	adds	r3, r3, r6
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	000c      	movs	r4, r1
 8000cda:	e763      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000cdc:	2aff      	cmp	r2, #255	; 0xff
 8000cde:	d041      	beq.n	8000d64 <__aeabi_fsub+0x24c>
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	e781      	b.n	8000be8 <__aeabi_fsub+0xd0>
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	1b9b      	subs	r3, r3, r6
 8000ce8:	e789      	b.n	8000bfe <__aeabi_fsub+0xe6>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d01c      	beq.n	8000d28 <__aeabi_fsub+0x210>
 8000cee:	28ff      	cmp	r0, #255	; 0xff
 8000cf0:	d021      	beq.n	8000d36 <__aeabi_fsub+0x21e>
 8000cf2:	2480      	movs	r4, #128	; 0x80
 8000cf4:	04e4      	lsls	r4, r4, #19
 8000cf6:	4252      	negs	r2, r2
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	2a1b      	cmp	r2, #27
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_fsub+0x1e8>
 8000cfe:	e096      	b.n	8000e2e <__aeabi_fsub+0x316>
 8000d00:	001c      	movs	r4, r3
 8000d02:	2520      	movs	r5, #32
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	1aaa      	subs	r2, r5, r2
 8000d08:	4093      	lsls	r3, r2
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4193      	sbcs	r3, r2
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	1af3      	subs	r3, r6, r3
 8000d12:	0004      	movs	r4, r0
 8000d14:	000d      	movs	r5, r1
 8000d16:	e72d      	b.n	8000b74 <__aeabi_fsub+0x5c>
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fsub+0x206>
 8000d1c:	e72e      	b.n	8000b7c <__aeabi_fsub+0x64>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	e7a9      	b.n	8000c78 <__aeabi_fsub+0x160>
 8000d24:	000c      	movs	r4, r1
 8000d26:	e73d      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d058      	beq.n	8000dde <__aeabi_fsub+0x2c6>
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d0ee      	beq.n	8000d10 <__aeabi_fsub+0x1f8>
 8000d32:	28ff      	cmp	r0, #255	; 0xff
 8000d34:	d1e1      	bne.n	8000cfa <__aeabi_fsub+0x1e2>
 8000d36:	0033      	movs	r3, r6
 8000d38:	24ff      	movs	r4, #255	; 0xff
 8000d3a:	000d      	movs	r5, r1
 8000d3c:	e732      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d3e:	29ff      	cmp	r1, #255	; 0xff
 8000d40:	d010      	beq.n	8000d64 <__aeabi_fsub+0x24c>
 8000d42:	0001      	movs	r1, r0
 8000d44:	e778      	b.n	8000c38 <__aeabi_fsub+0x120>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d06e      	beq.n	8000e28 <__aeabi_fsub+0x310>
 8000d4a:	24ff      	movs	r4, #255	; 0xff
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_fsub+0x23a>
 8000d50:	e728      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	4651      	mov	r1, sl
 8000d56:	03d2      	lsls	r2, r2, #15
 8000d58:	4211      	tst	r1, r2
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_fsub+0x24c>
 8000d5c:	4661      	mov	r1, ip
 8000d5e:	4211      	tst	r1, r2
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x24c>
 8000d62:	0033      	movs	r3, r6
 8000d64:	24ff      	movs	r4, #255	; 0xff
 8000d66:	e71d      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d68:	24ff      	movs	r4, #255	; 0xff
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e72c      	b.n	8000bc8 <__aeabi_fsub+0xb0>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d1e9      	bne.n	8000d46 <__aeabi_fsub+0x22e>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d063      	beq.n	8000e3e <__aeabi_fsub+0x326>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0x264>
 8000d7a:	e713      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d7c:	199b      	adds	r3, r3, r6
 8000d7e:	015a      	lsls	r2, r3, #5
 8000d80:	d400      	bmi.n	8000d84 <__aeabi_fsub+0x26c>
 8000d82:	e73e      	b.n	8000c02 <__aeabi_fsub+0xea>
 8000d84:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <__aeabi_fsub+0x334>)
 8000d86:	000c      	movs	r4, r1
 8000d88:	4013      	ands	r3, r2
 8000d8a:	e70b      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d11e      	bne.n	8000dce <__aeabi_fsub+0x2b6>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d12f      	bne.n	8000df4 <__aeabi_fsub+0x2dc>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d04f      	beq.n	8000e38 <__aeabi_fsub+0x320>
 8000d98:	0033      	movs	r3, r6
 8000d9a:	000d      	movs	r5, r1
 8000d9c:	e702      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000d9e:	2601      	movs	r6, #1
 8000da0:	e755      	b.n	8000c4e <__aeabi_fsub+0x136>
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d11f      	bne.n	8000de6 <__aeabi_fsub+0x2ce>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d043      	beq.n	8000e32 <__aeabi_fsub+0x31a>
 8000daa:	43c9      	mvns	r1, r1
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d00b      	beq.n	8000dc8 <__aeabi_fsub+0x2b0>
 8000db0:	28ff      	cmp	r0, #255	; 0xff
 8000db2:	d039      	beq.n	8000e28 <__aeabi_fsub+0x310>
 8000db4:	291b      	cmp	r1, #27
 8000db6:	dc44      	bgt.n	8000e42 <__aeabi_fsub+0x32a>
 8000db8:	001c      	movs	r4, r3
 8000dba:	2720      	movs	r7, #32
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	1a79      	subs	r1, r7, r1
 8000dc0:	408b      	lsls	r3, r1
 8000dc2:	1e59      	subs	r1, r3, #1
 8000dc4:	418b      	sbcs	r3, r1
 8000dc6:	4323      	orrs	r3, r4
 8000dc8:	199b      	adds	r3, r3, r6
 8000dca:	0004      	movs	r4, r0
 8000dcc:	e740      	b.n	8000c50 <__aeabi_fsub+0x138>
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d11a      	bne.n	8000e08 <__aeabi_fsub+0x2f0>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d124      	bne.n	8000e20 <__aeabi_fsub+0x308>
 8000dd6:	2780      	movs	r7, #128	; 0x80
 8000dd8:	2200      	movs	r2, #0
 8000dda:	03ff      	lsls	r7, r7, #15
 8000ddc:	e71b      	b.n	8000c16 <__aeabi_fsub+0xfe>
 8000dde:	0033      	movs	r3, r6
 8000de0:	0004      	movs	r4, r0
 8000de2:	000d      	movs	r5, r1
 8000de4:	e6de      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000de6:	28ff      	cmp	r0, #255	; 0xff
 8000de8:	d01e      	beq.n	8000e28 <__aeabi_fsub+0x310>
 8000dea:	2480      	movs	r4, #128	; 0x80
 8000dec:	04e4      	lsls	r4, r4, #19
 8000dee:	4249      	negs	r1, r1
 8000df0:	4323      	orrs	r3, r4
 8000df2:	e7df      	b.n	8000db4 <__aeabi_fsub+0x29c>
 8000df4:	2e00      	cmp	r6, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x2e2>
 8000df8:	e6d4      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000dfa:	1b9f      	subs	r7, r3, r6
 8000dfc:	017a      	lsls	r2, r7, #5
 8000dfe:	d400      	bmi.n	8000e02 <__aeabi_fsub+0x2ea>
 8000e00:	e737      	b.n	8000c72 <__aeabi_fsub+0x15a>
 8000e02:	1af3      	subs	r3, r6, r3
 8000e04:	000d      	movs	r5, r1
 8000e06:	e6cd      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e08:	24ff      	movs	r4, #255	; 0xff
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x2f8>
 8000e0e:	e6c9      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	4650      	mov	r0, sl
 8000e14:	03d2      	lsls	r2, r2, #15
 8000e16:	4210      	tst	r0, r2
 8000e18:	d0a4      	beq.n	8000d64 <__aeabi_fsub+0x24c>
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	4210      	tst	r0, r2
 8000e1e:	d1a1      	bne.n	8000d64 <__aeabi_fsub+0x24c>
 8000e20:	0033      	movs	r3, r6
 8000e22:	000d      	movs	r5, r1
 8000e24:	24ff      	movs	r4, #255	; 0xff
 8000e26:	e6bd      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e28:	0033      	movs	r3, r6
 8000e2a:	24ff      	movs	r4, #255	; 0xff
 8000e2c:	e6ba      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e76e      	b.n	8000d10 <__aeabi_fsub+0x1f8>
 8000e32:	0033      	movs	r3, r6
 8000e34:	0004      	movs	r4, r0
 8000e36:	e6b5      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e38:	2700      	movs	r7, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	e71c      	b.n	8000c78 <__aeabi_fsub+0x160>
 8000e3e:	0033      	movs	r3, r6
 8000e40:	e6b0      	b.n	8000ba4 <__aeabi_fsub+0x8c>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e7c0      	b.n	8000dc8 <__aeabi_fsub+0x2b0>
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	7dffffff 	.word	0x7dffffff
 8000e4c:	fbffffff 	.word	0xfbffffff

08000e50 <__aeabi_i2f>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d030      	beq.n	8000eb8 <__aeabi_i2f+0x68>
 8000e56:	17c3      	asrs	r3, r0, #31
 8000e58:	18c4      	adds	r4, r0, r3
 8000e5a:	405c      	eors	r4, r3
 8000e5c:	0fc5      	lsrs	r5, r0, #31
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fe72 	bl	8002b48 <__clzsi2>
 8000e64:	239e      	movs	r3, #158	; 0x9e
 8000e66:	1a1b      	subs	r3, r3, r0
 8000e68:	2b96      	cmp	r3, #150	; 0x96
 8000e6a:	dc0d      	bgt.n	8000e88 <__aeabi_i2f+0x38>
 8000e6c:	2296      	movs	r2, #150	; 0x96
 8000e6e:	1ad2      	subs	r2, r2, r3
 8000e70:	4094      	lsls	r4, r2
 8000e72:	002a      	movs	r2, r5
 8000e74:	0264      	lsls	r4, r4, #9
 8000e76:	0a64      	lsrs	r4, r4, #9
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	0264      	lsls	r4, r4, #9
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0a60      	lsrs	r0, r4, #9
 8000e80:	07d2      	lsls	r2, r2, #31
 8000e82:	4318      	orrs	r0, r3
 8000e84:	4310      	orrs	r0, r2
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	2b99      	cmp	r3, #153	; 0x99
 8000e8a:	dc19      	bgt.n	8000ec0 <__aeabi_i2f+0x70>
 8000e8c:	2299      	movs	r2, #153	; 0x99
 8000e8e:	1ad2      	subs	r2, r2, r3
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	dd29      	ble.n	8000ee8 <__aeabi_i2f+0x98>
 8000e94:	4094      	lsls	r4, r2
 8000e96:	0022      	movs	r2, r4
 8000e98:	4c14      	ldr	r4, [pc, #80]	; (8000eec <__aeabi_i2f+0x9c>)
 8000e9a:	4014      	ands	r4, r2
 8000e9c:	0751      	lsls	r1, r2, #29
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_i2f+0x5a>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	2a04      	cmp	r2, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_i2f+0x5a>
 8000ea8:	3404      	adds	r4, #4
 8000eaa:	0162      	lsls	r2, r4, #5
 8000eac:	d413      	bmi.n	8000ed6 <__aeabi_i2f+0x86>
 8000eae:	01a4      	lsls	r4, r4, #6
 8000eb0:	0a64      	lsrs	r4, r4, #9
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	002a      	movs	r2, r5
 8000eb6:	e7e0      	b.n	8000e7a <__aeabi_i2f+0x2a>
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	e7dc      	b.n	8000e7a <__aeabi_i2f+0x2a>
 8000ec0:	2205      	movs	r2, #5
 8000ec2:	0021      	movs	r1, r4
 8000ec4:	1a12      	subs	r2, r2, r0
 8000ec6:	40d1      	lsrs	r1, r2
 8000ec8:	22b9      	movs	r2, #185	; 0xb9
 8000eca:	1ad2      	subs	r2, r2, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	1e62      	subs	r2, r4, #1
 8000ed0:	4194      	sbcs	r4, r2
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	e7da      	b.n	8000e8c <__aeabi_i2f+0x3c>
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <__aeabi_i2f+0x9c>)
 8000ed8:	002a      	movs	r2, r5
 8000eda:	401c      	ands	r4, r3
 8000edc:	239f      	movs	r3, #159	; 0x9f
 8000ede:	01a4      	lsls	r4, r4, #6
 8000ee0:	1a1b      	subs	r3, r3, r0
 8000ee2:	0a64      	lsrs	r4, r4, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	e7c8      	b.n	8000e7a <__aeabi_i2f+0x2a>
 8000ee8:	0022      	movs	r2, r4
 8000eea:	e7d5      	b.n	8000e98 <__aeabi_i2f+0x48>
 8000eec:	fbffffff 	.word	0xfbffffff

08000ef0 <__aeabi_dadd>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	4657      	mov	r7, sl
 8000ef8:	464e      	mov	r6, r9
 8000efa:	030c      	lsls	r4, r1, #12
 8000efc:	b5e0      	push	{r5, r6, r7, lr}
 8000efe:	004e      	lsls	r6, r1, #1
 8000f00:	0fc9      	lsrs	r1, r1, #31
 8000f02:	4688      	mov	r8, r1
 8000f04:	000d      	movs	r5, r1
 8000f06:	0a61      	lsrs	r1, r4, #9
 8000f08:	0f44      	lsrs	r4, r0, #29
 8000f0a:	430c      	orrs	r4, r1
 8000f0c:	00c7      	lsls	r7, r0, #3
 8000f0e:	0319      	lsls	r1, r3, #12
 8000f10:	0058      	lsls	r0, r3, #1
 8000f12:	0fdb      	lsrs	r3, r3, #31
 8000f14:	469b      	mov	fp, r3
 8000f16:	0a4b      	lsrs	r3, r1, #9
 8000f18:	0f51      	lsrs	r1, r2, #29
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	0d76      	lsrs	r6, r6, #21
 8000f1e:	0d40      	lsrs	r0, r0, #21
 8000f20:	0019      	movs	r1, r3
 8000f22:	00d2      	lsls	r2, r2, #3
 8000f24:	45d8      	cmp	r8, fp
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x3a>
 8000f28:	e0ae      	b.n	8001088 <__aeabi_dadd+0x198>
 8000f2a:	1a35      	subs	r5, r6, r0
 8000f2c:	2d00      	cmp	r5, #0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_dadd+0x42>
 8000f30:	e0f6      	b.n	8001120 <__aeabi_dadd+0x230>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d10f      	bne.n	8000f56 <__aeabi_dadd+0x66>
 8000f36:	4313      	orrs	r3, r2
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x4c>
 8000f3a:	e0db      	b.n	80010f4 <__aeabi_dadd+0x204>
 8000f3c:	1e6b      	subs	r3, r5, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d000      	beq.n	8000f44 <__aeabi_dadd+0x54>
 8000f42:	e137      	b.n	80011b4 <__aeabi_dadd+0x2c4>
 8000f44:	1aba      	subs	r2, r7, r2
 8000f46:	4297      	cmp	r7, r2
 8000f48:	41bf      	sbcs	r7, r7
 8000f4a:	1a64      	subs	r4, r4, r1
 8000f4c:	427f      	negs	r7, r7
 8000f4e:	1be4      	subs	r4, r4, r7
 8000f50:	2601      	movs	r6, #1
 8000f52:	0017      	movs	r7, r2
 8000f54:	e024      	b.n	8000fa0 <__aeabi_dadd+0xb0>
 8000f56:	4bc6      	ldr	r3, [pc, #792]	; (8001270 <__aeabi_dadd+0x380>)
 8000f58:	429e      	cmp	r6, r3
 8000f5a:	d04d      	beq.n	8000ff8 <__aeabi_dadd+0x108>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	041b      	lsls	r3, r3, #16
 8000f60:	4319      	orrs	r1, r3
 8000f62:	2d38      	cmp	r5, #56	; 0x38
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x78>
 8000f66:	e107      	b.n	8001178 <__aeabi_dadd+0x288>
 8000f68:	2d1f      	cmp	r5, #31
 8000f6a:	dd00      	ble.n	8000f6e <__aeabi_dadd+0x7e>
 8000f6c:	e138      	b.n	80011e0 <__aeabi_dadd+0x2f0>
 8000f6e:	2020      	movs	r0, #32
 8000f70:	1b43      	subs	r3, r0, r5
 8000f72:	469a      	mov	sl, r3
 8000f74:	000b      	movs	r3, r1
 8000f76:	4650      	mov	r0, sl
 8000f78:	4083      	lsls	r3, r0
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	4648      	mov	r0, r9
 8000f80:	40eb      	lsrs	r3, r5
 8000f82:	4318      	orrs	r0, r3
 8000f84:	0003      	movs	r3, r0
 8000f86:	4650      	mov	r0, sl
 8000f88:	4082      	lsls	r2, r0
 8000f8a:	1e50      	subs	r0, r2, #1
 8000f8c:	4182      	sbcs	r2, r0
 8000f8e:	40e9      	lsrs	r1, r5
 8000f90:	431a      	orrs	r2, r3
 8000f92:	1aba      	subs	r2, r7, r2
 8000f94:	1a61      	subs	r1, r4, r1
 8000f96:	4297      	cmp	r7, r2
 8000f98:	41a4      	sbcs	r4, r4
 8000f9a:	0017      	movs	r7, r2
 8000f9c:	4264      	negs	r4, r4
 8000f9e:	1b0c      	subs	r4, r1, r4
 8000fa0:	0223      	lsls	r3, r4, #8
 8000fa2:	d562      	bpl.n	800106a <__aeabi_dadd+0x17a>
 8000fa4:	0264      	lsls	r4, r4, #9
 8000fa6:	0a65      	lsrs	r5, r4, #9
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0xbe>
 8000fac:	e0df      	b.n	800116e <__aeabi_dadd+0x27e>
 8000fae:	0028      	movs	r0, r5
 8000fb0:	f001 fdca 	bl	8002b48 <__clzsi2>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	3b08      	subs	r3, #8
 8000fb8:	2b1f      	cmp	r3, #31
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_dadd+0xce>
 8000fbc:	e0d2      	b.n	8001164 <__aeabi_dadd+0x274>
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	003c      	movs	r4, r7
 8000fc2:	1ad2      	subs	r2, r2, r3
 8000fc4:	409d      	lsls	r5, r3
 8000fc6:	40d4      	lsrs	r4, r2
 8000fc8:	409f      	lsls	r7, r3
 8000fca:	4325      	orrs	r5, r4
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dadd+0xe2>
 8000fd0:	e0c4      	b.n	800115c <__aeabi_dadd+0x26c>
 8000fd2:	1b9e      	subs	r6, r3, r6
 8000fd4:	1c73      	adds	r3, r6, #1
 8000fd6:	2b1f      	cmp	r3, #31
 8000fd8:	dd00      	ble.n	8000fdc <__aeabi_dadd+0xec>
 8000fda:	e0f1      	b.n	80011c0 <__aeabi_dadd+0x2d0>
 8000fdc:	2220      	movs	r2, #32
 8000fde:	0038      	movs	r0, r7
 8000fe0:	0029      	movs	r1, r5
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	40d8      	lsrs	r0, r3
 8000fe6:	4091      	lsls	r1, r2
 8000fe8:	4097      	lsls	r7, r2
 8000fea:	002c      	movs	r4, r5
 8000fec:	4301      	orrs	r1, r0
 8000fee:	1e78      	subs	r0, r7, #1
 8000ff0:	4187      	sbcs	r7, r0
 8000ff2:	40dc      	lsrs	r4, r3
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	430f      	orrs	r7, r1
 8000ff8:	077b      	lsls	r3, r7, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_dadd+0x120>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	403b      	ands	r3, r7
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_dadd+0x120>
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	42bb      	cmp	r3, r7
 8001008:	41bf      	sbcs	r7, r7
 800100a:	427f      	negs	r7, r7
 800100c:	19e4      	adds	r4, r4, r7
 800100e:	001f      	movs	r7, r3
 8001010:	0223      	lsls	r3, r4, #8
 8001012:	d52c      	bpl.n	800106e <__aeabi_dadd+0x17e>
 8001014:	4b96      	ldr	r3, [pc, #600]	; (8001270 <__aeabi_dadd+0x380>)
 8001016:	3601      	adds	r6, #1
 8001018:	429e      	cmp	r6, r3
 800101a:	d100      	bne.n	800101e <__aeabi_dadd+0x12e>
 800101c:	e09a      	b.n	8001154 <__aeabi_dadd+0x264>
 800101e:	4645      	mov	r5, r8
 8001020:	4b94      	ldr	r3, [pc, #592]	; (8001274 <__aeabi_dadd+0x384>)
 8001022:	08ff      	lsrs	r7, r7, #3
 8001024:	401c      	ands	r4, r3
 8001026:	0760      	lsls	r0, r4, #29
 8001028:	0576      	lsls	r6, r6, #21
 800102a:	0264      	lsls	r4, r4, #9
 800102c:	4307      	orrs	r7, r0
 800102e:	0b24      	lsrs	r4, r4, #12
 8001030:	0d76      	lsrs	r6, r6, #21
 8001032:	2100      	movs	r1, #0
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	0b23      	lsrs	r3, r4, #12
 8001038:	0d0c      	lsrs	r4, r1, #20
 800103a:	4a8f      	ldr	r2, [pc, #572]	; (8001278 <__aeabi_dadd+0x388>)
 800103c:	0524      	lsls	r4, r4, #20
 800103e:	431c      	orrs	r4, r3
 8001040:	4014      	ands	r4, r2
 8001042:	0533      	lsls	r3, r6, #20
 8001044:	4323      	orrs	r3, r4
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	07ed      	lsls	r5, r5, #31
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	432b      	orrs	r3, r5
 800104e:	0038      	movs	r0, r7
 8001050:	0019      	movs	r1, r3
 8001052:	bc3c      	pop	{r2, r3, r4, r5}
 8001054:	4690      	mov	r8, r2
 8001056:	4699      	mov	r9, r3
 8001058:	46a2      	mov	sl, r4
 800105a:	46ab      	mov	fp, r5
 800105c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800105e:	4664      	mov	r4, ip
 8001060:	4304      	orrs	r4, r0
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x176>
 8001064:	e211      	b.n	800148a <__aeabi_dadd+0x59a>
 8001066:	0004      	movs	r4, r0
 8001068:	4667      	mov	r7, ip
 800106a:	077b      	lsls	r3, r7, #29
 800106c:	d1c6      	bne.n	8000ffc <__aeabi_dadd+0x10c>
 800106e:	4645      	mov	r5, r8
 8001070:	0760      	lsls	r0, r4, #29
 8001072:	08ff      	lsrs	r7, r7, #3
 8001074:	4307      	orrs	r7, r0
 8001076:	08e4      	lsrs	r4, r4, #3
 8001078:	4b7d      	ldr	r3, [pc, #500]	; (8001270 <__aeabi_dadd+0x380>)
 800107a:	429e      	cmp	r6, r3
 800107c:	d030      	beq.n	80010e0 <__aeabi_dadd+0x1f0>
 800107e:	0324      	lsls	r4, r4, #12
 8001080:	0576      	lsls	r6, r6, #21
 8001082:	0b24      	lsrs	r4, r4, #12
 8001084:	0d76      	lsrs	r6, r6, #21
 8001086:	e7d4      	b.n	8001032 <__aeabi_dadd+0x142>
 8001088:	1a33      	subs	r3, r6, r0
 800108a:	469a      	mov	sl, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd78      	ble.n	8001182 <__aeabi_dadd+0x292>
 8001090:	2800      	cmp	r0, #0
 8001092:	d031      	beq.n	80010f8 <__aeabi_dadd+0x208>
 8001094:	4876      	ldr	r0, [pc, #472]	; (8001270 <__aeabi_dadd+0x380>)
 8001096:	4286      	cmp	r6, r0
 8001098:	d0ae      	beq.n	8000ff8 <__aeabi_dadd+0x108>
 800109a:	2080      	movs	r0, #128	; 0x80
 800109c:	0400      	lsls	r0, r0, #16
 800109e:	4301      	orrs	r1, r0
 80010a0:	4653      	mov	r3, sl
 80010a2:	2b38      	cmp	r3, #56	; 0x38
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_dadd+0x1b8>
 80010a6:	e0e9      	b.n	800127c <__aeabi_dadd+0x38c>
 80010a8:	430a      	orrs	r2, r1
 80010aa:	1e51      	subs	r1, r2, #1
 80010ac:	418a      	sbcs	r2, r1
 80010ae:	2100      	movs	r1, #0
 80010b0:	19d2      	adds	r2, r2, r7
 80010b2:	42ba      	cmp	r2, r7
 80010b4:	41bf      	sbcs	r7, r7
 80010b6:	1909      	adds	r1, r1, r4
 80010b8:	427c      	negs	r4, r7
 80010ba:	0017      	movs	r7, r2
 80010bc:	190c      	adds	r4, r1, r4
 80010be:	0223      	lsls	r3, r4, #8
 80010c0:	d5d3      	bpl.n	800106a <__aeabi_dadd+0x17a>
 80010c2:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <__aeabi_dadd+0x380>)
 80010c4:	3601      	adds	r6, #1
 80010c6:	429e      	cmp	r6, r3
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x1dc>
 80010ca:	e13a      	b.n	8001342 <__aeabi_dadd+0x452>
 80010cc:	2001      	movs	r0, #1
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <__aeabi_dadd+0x384>)
 80010d0:	401c      	ands	r4, r3
 80010d2:	087b      	lsrs	r3, r7, #1
 80010d4:	4007      	ands	r7, r0
 80010d6:	431f      	orrs	r7, r3
 80010d8:	07e0      	lsls	r0, r4, #31
 80010da:	4307      	orrs	r7, r0
 80010dc:	0864      	lsrs	r4, r4, #1
 80010de:	e78b      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80010e0:	0023      	movs	r3, r4
 80010e2:	433b      	orrs	r3, r7
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x1f8>
 80010e6:	e1cb      	b.n	8001480 <__aeabi_dadd+0x590>
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	0312      	lsls	r2, r2, #12
 80010ec:	4314      	orrs	r4, r2
 80010ee:	0324      	lsls	r4, r4, #12
 80010f0:	0b24      	lsrs	r4, r4, #12
 80010f2:	e79e      	b.n	8001032 <__aeabi_dadd+0x142>
 80010f4:	002e      	movs	r6, r5
 80010f6:	e77f      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80010f8:	0008      	movs	r0, r1
 80010fa:	4310      	orrs	r0, r2
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x210>
 80010fe:	e0b4      	b.n	800126a <__aeabi_dadd+0x37a>
 8001100:	1e58      	subs	r0, r3, #1
 8001102:	2800      	cmp	r0, #0
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x218>
 8001106:	e0de      	b.n	80012c6 <__aeabi_dadd+0x3d6>
 8001108:	18ba      	adds	r2, r7, r2
 800110a:	42ba      	cmp	r2, r7
 800110c:	419b      	sbcs	r3, r3
 800110e:	1864      	adds	r4, r4, r1
 8001110:	425b      	negs	r3, r3
 8001112:	18e4      	adds	r4, r4, r3
 8001114:	0017      	movs	r7, r2
 8001116:	2601      	movs	r6, #1
 8001118:	0223      	lsls	r3, r4, #8
 800111a:	d5a6      	bpl.n	800106a <__aeabi_dadd+0x17a>
 800111c:	2602      	movs	r6, #2
 800111e:	e7d5      	b.n	80010cc <__aeabi_dadd+0x1dc>
 8001120:	2d00      	cmp	r5, #0
 8001122:	d16e      	bne.n	8001202 <__aeabi_dadd+0x312>
 8001124:	1c70      	adds	r0, r6, #1
 8001126:	0540      	lsls	r0, r0, #21
 8001128:	0d40      	lsrs	r0, r0, #21
 800112a:	2801      	cmp	r0, #1
 800112c:	dc00      	bgt.n	8001130 <__aeabi_dadd+0x240>
 800112e:	e0f9      	b.n	8001324 <__aeabi_dadd+0x434>
 8001130:	1ab8      	subs	r0, r7, r2
 8001132:	4684      	mov	ip, r0
 8001134:	4287      	cmp	r7, r0
 8001136:	4180      	sbcs	r0, r0
 8001138:	1ae5      	subs	r5, r4, r3
 800113a:	4240      	negs	r0, r0
 800113c:	1a2d      	subs	r5, r5, r0
 800113e:	0228      	lsls	r0, r5, #8
 8001140:	d400      	bmi.n	8001144 <__aeabi_dadd+0x254>
 8001142:	e089      	b.n	8001258 <__aeabi_dadd+0x368>
 8001144:	1bd7      	subs	r7, r2, r7
 8001146:	42ba      	cmp	r2, r7
 8001148:	4192      	sbcs	r2, r2
 800114a:	1b1c      	subs	r4, r3, r4
 800114c:	4252      	negs	r2, r2
 800114e:	1aa5      	subs	r5, r4, r2
 8001150:	46d8      	mov	r8, fp
 8001152:	e729      	b.n	8000fa8 <__aeabi_dadd+0xb8>
 8001154:	4645      	mov	r5, r8
 8001156:	2400      	movs	r4, #0
 8001158:	2700      	movs	r7, #0
 800115a:	e76a      	b.n	8001032 <__aeabi_dadd+0x142>
 800115c:	4c45      	ldr	r4, [pc, #276]	; (8001274 <__aeabi_dadd+0x384>)
 800115e:	1af6      	subs	r6, r6, r3
 8001160:	402c      	ands	r4, r5
 8001162:	e749      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001164:	003d      	movs	r5, r7
 8001166:	3828      	subs	r0, #40	; 0x28
 8001168:	4085      	lsls	r5, r0
 800116a:	2700      	movs	r7, #0
 800116c:	e72e      	b.n	8000fcc <__aeabi_dadd+0xdc>
 800116e:	0038      	movs	r0, r7
 8001170:	f001 fcea 	bl	8002b48 <__clzsi2>
 8001174:	3020      	adds	r0, #32
 8001176:	e71d      	b.n	8000fb4 <__aeabi_dadd+0xc4>
 8001178:	430a      	orrs	r2, r1
 800117a:	1e51      	subs	r1, r2, #1
 800117c:	418a      	sbcs	r2, r1
 800117e:	2100      	movs	r1, #0
 8001180:	e707      	b.n	8000f92 <__aeabi_dadd+0xa2>
 8001182:	2b00      	cmp	r3, #0
 8001184:	d000      	beq.n	8001188 <__aeabi_dadd+0x298>
 8001186:	e0f3      	b.n	8001370 <__aeabi_dadd+0x480>
 8001188:	1c70      	adds	r0, r6, #1
 800118a:	0543      	lsls	r3, r0, #21
 800118c:	0d5b      	lsrs	r3, r3, #21
 800118e:	2b01      	cmp	r3, #1
 8001190:	dc00      	bgt.n	8001194 <__aeabi_dadd+0x2a4>
 8001192:	e0ad      	b.n	80012f0 <__aeabi_dadd+0x400>
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <__aeabi_dadd+0x380>)
 8001196:	4298      	cmp	r0, r3
 8001198:	d100      	bne.n	800119c <__aeabi_dadd+0x2ac>
 800119a:	e0d1      	b.n	8001340 <__aeabi_dadd+0x450>
 800119c:	18ba      	adds	r2, r7, r2
 800119e:	42ba      	cmp	r2, r7
 80011a0:	41bf      	sbcs	r7, r7
 80011a2:	1864      	adds	r4, r4, r1
 80011a4:	427f      	negs	r7, r7
 80011a6:	19e4      	adds	r4, r4, r7
 80011a8:	07e7      	lsls	r7, r4, #31
 80011aa:	0852      	lsrs	r2, r2, #1
 80011ac:	4317      	orrs	r7, r2
 80011ae:	0864      	lsrs	r4, r4, #1
 80011b0:	0006      	movs	r6, r0
 80011b2:	e721      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80011b4:	482e      	ldr	r0, [pc, #184]	; (8001270 <__aeabi_dadd+0x380>)
 80011b6:	4285      	cmp	r5, r0
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x2cc>
 80011ba:	e093      	b.n	80012e4 <__aeabi_dadd+0x3f4>
 80011bc:	001d      	movs	r5, r3
 80011be:	e6d0      	b.n	8000f62 <__aeabi_dadd+0x72>
 80011c0:	0029      	movs	r1, r5
 80011c2:	3e1f      	subs	r6, #31
 80011c4:	40f1      	lsrs	r1, r6
 80011c6:	2b20      	cmp	r3, #32
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x2dc>
 80011ca:	e08d      	b.n	80012e8 <__aeabi_dadd+0x3f8>
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	409d      	lsls	r5, r3
 80011d2:	432f      	orrs	r7, r5
 80011d4:	1e7d      	subs	r5, r7, #1
 80011d6:	41af      	sbcs	r7, r5
 80011d8:	2400      	movs	r4, #0
 80011da:	430f      	orrs	r7, r1
 80011dc:	2600      	movs	r6, #0
 80011de:	e744      	b.n	800106a <__aeabi_dadd+0x17a>
 80011e0:	002b      	movs	r3, r5
 80011e2:	0008      	movs	r0, r1
 80011e4:	3b20      	subs	r3, #32
 80011e6:	40d8      	lsrs	r0, r3
 80011e8:	0003      	movs	r3, r0
 80011ea:	2d20      	cmp	r5, #32
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x300>
 80011ee:	e07d      	b.n	80012ec <__aeabi_dadd+0x3fc>
 80011f0:	2040      	movs	r0, #64	; 0x40
 80011f2:	1b45      	subs	r5, r0, r5
 80011f4:	40a9      	lsls	r1, r5
 80011f6:	430a      	orrs	r2, r1
 80011f8:	1e51      	subs	r1, r2, #1
 80011fa:	418a      	sbcs	r2, r1
 80011fc:	2100      	movs	r1, #0
 80011fe:	431a      	orrs	r2, r3
 8001200:	e6c7      	b.n	8000f92 <__aeabi_dadd+0xa2>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d050      	beq.n	80012a8 <__aeabi_dadd+0x3b8>
 8001206:	4e1a      	ldr	r6, [pc, #104]	; (8001270 <__aeabi_dadd+0x380>)
 8001208:	42b0      	cmp	r0, r6
 800120a:	d057      	beq.n	80012bc <__aeabi_dadd+0x3cc>
 800120c:	2680      	movs	r6, #128	; 0x80
 800120e:	426b      	negs	r3, r5
 8001210:	4699      	mov	r9, r3
 8001212:	0436      	lsls	r6, r6, #16
 8001214:	4334      	orrs	r4, r6
 8001216:	464b      	mov	r3, r9
 8001218:	2b38      	cmp	r3, #56	; 0x38
 800121a:	dd00      	ble.n	800121e <__aeabi_dadd+0x32e>
 800121c:	e0d6      	b.n	80013cc <__aeabi_dadd+0x4dc>
 800121e:	2b1f      	cmp	r3, #31
 8001220:	dd00      	ble.n	8001224 <__aeabi_dadd+0x334>
 8001222:	e135      	b.n	8001490 <__aeabi_dadd+0x5a0>
 8001224:	2620      	movs	r6, #32
 8001226:	1af5      	subs	r5, r6, r3
 8001228:	0026      	movs	r6, r4
 800122a:	40ae      	lsls	r6, r5
 800122c:	46b2      	mov	sl, r6
 800122e:	003e      	movs	r6, r7
 8001230:	40de      	lsrs	r6, r3
 8001232:	46ac      	mov	ip, r5
 8001234:	0035      	movs	r5, r6
 8001236:	4656      	mov	r6, sl
 8001238:	432e      	orrs	r6, r5
 800123a:	4665      	mov	r5, ip
 800123c:	40af      	lsls	r7, r5
 800123e:	1e7d      	subs	r5, r7, #1
 8001240:	41af      	sbcs	r7, r5
 8001242:	40dc      	lsrs	r4, r3
 8001244:	4337      	orrs	r7, r6
 8001246:	1bd7      	subs	r7, r2, r7
 8001248:	42ba      	cmp	r2, r7
 800124a:	4192      	sbcs	r2, r2
 800124c:	1b0c      	subs	r4, r1, r4
 800124e:	4252      	negs	r2, r2
 8001250:	1aa4      	subs	r4, r4, r2
 8001252:	0006      	movs	r6, r0
 8001254:	46d8      	mov	r8, fp
 8001256:	e6a3      	b.n	8000fa0 <__aeabi_dadd+0xb0>
 8001258:	4664      	mov	r4, ip
 800125a:	4667      	mov	r7, ip
 800125c:	432c      	orrs	r4, r5
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x372>
 8001260:	e6a2      	b.n	8000fa8 <__aeabi_dadd+0xb8>
 8001262:	2500      	movs	r5, #0
 8001264:	2600      	movs	r6, #0
 8001266:	2700      	movs	r7, #0
 8001268:	e706      	b.n	8001078 <__aeabi_dadd+0x188>
 800126a:	001e      	movs	r6, r3
 800126c:	e6c4      	b.n	8000ff8 <__aeabi_dadd+0x108>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	000007ff 	.word	0x000007ff
 8001274:	ff7fffff 	.word	0xff7fffff
 8001278:	800fffff 	.word	0x800fffff
 800127c:	2b1f      	cmp	r3, #31
 800127e:	dc63      	bgt.n	8001348 <__aeabi_dadd+0x458>
 8001280:	2020      	movs	r0, #32
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	0008      	movs	r0, r1
 8001286:	4098      	lsls	r0, r3
 8001288:	469c      	mov	ip, r3
 800128a:	4683      	mov	fp, r0
 800128c:	4653      	mov	r3, sl
 800128e:	0010      	movs	r0, r2
 8001290:	40d8      	lsrs	r0, r3
 8001292:	0003      	movs	r3, r0
 8001294:	4658      	mov	r0, fp
 8001296:	4318      	orrs	r0, r3
 8001298:	4663      	mov	r3, ip
 800129a:	409a      	lsls	r2, r3
 800129c:	1e53      	subs	r3, r2, #1
 800129e:	419a      	sbcs	r2, r3
 80012a0:	4653      	mov	r3, sl
 80012a2:	4302      	orrs	r2, r0
 80012a4:	40d9      	lsrs	r1, r3
 80012a6:	e703      	b.n	80010b0 <__aeabi_dadd+0x1c0>
 80012a8:	0026      	movs	r6, r4
 80012aa:	433e      	orrs	r6, r7
 80012ac:	d006      	beq.n	80012bc <__aeabi_dadd+0x3cc>
 80012ae:	43eb      	mvns	r3, r5
 80012b0:	4699      	mov	r9, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0c7      	beq.n	8001246 <__aeabi_dadd+0x356>
 80012b6:	4e94      	ldr	r6, [pc, #592]	; (8001508 <__aeabi_dadd+0x618>)
 80012b8:	42b0      	cmp	r0, r6
 80012ba:	d1ac      	bne.n	8001216 <__aeabi_dadd+0x326>
 80012bc:	000c      	movs	r4, r1
 80012be:	0017      	movs	r7, r2
 80012c0:	0006      	movs	r6, r0
 80012c2:	46d8      	mov	r8, fp
 80012c4:	e698      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80012c6:	4b90      	ldr	r3, [pc, #576]	; (8001508 <__aeabi_dadd+0x618>)
 80012c8:	459a      	cmp	sl, r3
 80012ca:	d00b      	beq.n	80012e4 <__aeabi_dadd+0x3f4>
 80012cc:	4682      	mov	sl, r0
 80012ce:	e6e7      	b.n	80010a0 <__aeabi_dadd+0x1b0>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d000      	beq.n	80012d6 <__aeabi_dadd+0x3e6>
 80012d4:	e09e      	b.n	8001414 <__aeabi_dadd+0x524>
 80012d6:	0018      	movs	r0, r3
 80012d8:	4310      	orrs	r0, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x3ee>
 80012dc:	e0e9      	b.n	80014b2 <__aeabi_dadd+0x5c2>
 80012de:	001c      	movs	r4, r3
 80012e0:	0017      	movs	r7, r2
 80012e2:	46d8      	mov	r8, fp
 80012e4:	4e88      	ldr	r6, [pc, #544]	; (8001508 <__aeabi_dadd+0x618>)
 80012e6:	e687      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80012e8:	2500      	movs	r5, #0
 80012ea:	e772      	b.n	80011d2 <__aeabi_dadd+0x2e2>
 80012ec:	2100      	movs	r1, #0
 80012ee:	e782      	b.n	80011f6 <__aeabi_dadd+0x306>
 80012f0:	0023      	movs	r3, r4
 80012f2:	433b      	orrs	r3, r7
 80012f4:	2e00      	cmp	r6, #0
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x40a>
 80012f8:	e0ab      	b.n	8001452 <__aeabi_dadd+0x562>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x410>
 80012fe:	e0e7      	b.n	80014d0 <__aeabi_dadd+0x5e0>
 8001300:	000b      	movs	r3, r1
 8001302:	4313      	orrs	r3, r2
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x418>
 8001306:	e677      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001308:	18ba      	adds	r2, r7, r2
 800130a:	42ba      	cmp	r2, r7
 800130c:	41bf      	sbcs	r7, r7
 800130e:	1864      	adds	r4, r4, r1
 8001310:	427f      	negs	r7, r7
 8001312:	19e4      	adds	r4, r4, r7
 8001314:	0223      	lsls	r3, r4, #8
 8001316:	d400      	bmi.n	800131a <__aeabi_dadd+0x42a>
 8001318:	e0f2      	b.n	8001500 <__aeabi_dadd+0x610>
 800131a:	4b7c      	ldr	r3, [pc, #496]	; (800150c <__aeabi_dadd+0x61c>)
 800131c:	0017      	movs	r7, r2
 800131e:	401c      	ands	r4, r3
 8001320:	0006      	movs	r6, r0
 8001322:	e669      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001324:	0020      	movs	r0, r4
 8001326:	4338      	orrs	r0, r7
 8001328:	2e00      	cmp	r6, #0
 800132a:	d1d1      	bne.n	80012d0 <__aeabi_dadd+0x3e0>
 800132c:	2800      	cmp	r0, #0
 800132e:	d15b      	bne.n	80013e8 <__aeabi_dadd+0x4f8>
 8001330:	001c      	movs	r4, r3
 8001332:	4314      	orrs	r4, r2
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x448>
 8001336:	e0a8      	b.n	800148a <__aeabi_dadd+0x59a>
 8001338:	001c      	movs	r4, r3
 800133a:	0017      	movs	r7, r2
 800133c:	46d8      	mov	r8, fp
 800133e:	e65b      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001340:	0006      	movs	r6, r0
 8001342:	2400      	movs	r4, #0
 8001344:	2700      	movs	r7, #0
 8001346:	e697      	b.n	8001078 <__aeabi_dadd+0x188>
 8001348:	4650      	mov	r0, sl
 800134a:	000b      	movs	r3, r1
 800134c:	3820      	subs	r0, #32
 800134e:	40c3      	lsrs	r3, r0
 8001350:	4699      	mov	r9, r3
 8001352:	4653      	mov	r3, sl
 8001354:	2b20      	cmp	r3, #32
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x46a>
 8001358:	e095      	b.n	8001486 <__aeabi_dadd+0x596>
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	4650      	mov	r0, sl
 800135e:	1a1b      	subs	r3, r3, r0
 8001360:	4099      	lsls	r1, r3
 8001362:	430a      	orrs	r2, r1
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	418a      	sbcs	r2, r1
 8001368:	464b      	mov	r3, r9
 800136a:	2100      	movs	r1, #0
 800136c:	431a      	orrs	r2, r3
 800136e:	e69f      	b.n	80010b0 <__aeabi_dadd+0x1c0>
 8001370:	2e00      	cmp	r6, #0
 8001372:	d130      	bne.n	80013d6 <__aeabi_dadd+0x4e6>
 8001374:	0026      	movs	r6, r4
 8001376:	433e      	orrs	r6, r7
 8001378:	d067      	beq.n	800144a <__aeabi_dadd+0x55a>
 800137a:	43db      	mvns	r3, r3
 800137c:	469a      	mov	sl, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01c      	beq.n	80013bc <__aeabi_dadd+0x4cc>
 8001382:	4e61      	ldr	r6, [pc, #388]	; (8001508 <__aeabi_dadd+0x618>)
 8001384:	42b0      	cmp	r0, r6
 8001386:	d060      	beq.n	800144a <__aeabi_dadd+0x55a>
 8001388:	4653      	mov	r3, sl
 800138a:	2b38      	cmp	r3, #56	; 0x38
 800138c:	dd00      	ble.n	8001390 <__aeabi_dadd+0x4a0>
 800138e:	e096      	b.n	80014be <__aeabi_dadd+0x5ce>
 8001390:	2b1f      	cmp	r3, #31
 8001392:	dd00      	ble.n	8001396 <__aeabi_dadd+0x4a6>
 8001394:	e09f      	b.n	80014d6 <__aeabi_dadd+0x5e6>
 8001396:	2620      	movs	r6, #32
 8001398:	1af3      	subs	r3, r6, r3
 800139a:	0026      	movs	r6, r4
 800139c:	409e      	lsls	r6, r3
 800139e:	469c      	mov	ip, r3
 80013a0:	46b3      	mov	fp, r6
 80013a2:	4653      	mov	r3, sl
 80013a4:	003e      	movs	r6, r7
 80013a6:	40de      	lsrs	r6, r3
 80013a8:	0033      	movs	r3, r6
 80013aa:	465e      	mov	r6, fp
 80013ac:	431e      	orrs	r6, r3
 80013ae:	4663      	mov	r3, ip
 80013b0:	409f      	lsls	r7, r3
 80013b2:	1e7b      	subs	r3, r7, #1
 80013b4:	419f      	sbcs	r7, r3
 80013b6:	4653      	mov	r3, sl
 80013b8:	40dc      	lsrs	r4, r3
 80013ba:	4337      	orrs	r7, r6
 80013bc:	18bf      	adds	r7, r7, r2
 80013be:	4297      	cmp	r7, r2
 80013c0:	4192      	sbcs	r2, r2
 80013c2:	1864      	adds	r4, r4, r1
 80013c4:	4252      	negs	r2, r2
 80013c6:	18a4      	adds	r4, r4, r2
 80013c8:	0006      	movs	r6, r0
 80013ca:	e678      	b.n	80010be <__aeabi_dadd+0x1ce>
 80013cc:	4327      	orrs	r7, r4
 80013ce:	1e7c      	subs	r4, r7, #1
 80013d0:	41a7      	sbcs	r7, r4
 80013d2:	2400      	movs	r4, #0
 80013d4:	e737      	b.n	8001246 <__aeabi_dadd+0x356>
 80013d6:	4e4c      	ldr	r6, [pc, #304]	; (8001508 <__aeabi_dadd+0x618>)
 80013d8:	42b0      	cmp	r0, r6
 80013da:	d036      	beq.n	800144a <__aeabi_dadd+0x55a>
 80013dc:	2680      	movs	r6, #128	; 0x80
 80013de:	425b      	negs	r3, r3
 80013e0:	0436      	lsls	r6, r6, #16
 80013e2:	469a      	mov	sl, r3
 80013e4:	4334      	orrs	r4, r6
 80013e6:	e7cf      	b.n	8001388 <__aeabi_dadd+0x498>
 80013e8:	0018      	movs	r0, r3
 80013ea:	4310      	orrs	r0, r2
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x500>
 80013ee:	e603      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80013f0:	1ab8      	subs	r0, r7, r2
 80013f2:	4684      	mov	ip, r0
 80013f4:	4567      	cmp	r7, ip
 80013f6:	41ad      	sbcs	r5, r5
 80013f8:	1ae0      	subs	r0, r4, r3
 80013fa:	426d      	negs	r5, r5
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	0205      	lsls	r5, r0, #8
 8001400:	d400      	bmi.n	8001404 <__aeabi_dadd+0x514>
 8001402:	e62c      	b.n	800105e <__aeabi_dadd+0x16e>
 8001404:	1bd7      	subs	r7, r2, r7
 8001406:	42ba      	cmp	r2, r7
 8001408:	4192      	sbcs	r2, r2
 800140a:	1b1c      	subs	r4, r3, r4
 800140c:	4252      	negs	r2, r2
 800140e:	1aa4      	subs	r4, r4, r2
 8001410:	46d8      	mov	r8, fp
 8001412:	e5f1      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001414:	0018      	movs	r0, r3
 8001416:	4310      	orrs	r0, r2
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x52c>
 800141a:	e763      	b.n	80012e4 <__aeabi_dadd+0x3f4>
 800141c:	08f8      	lsrs	r0, r7, #3
 800141e:	0767      	lsls	r7, r4, #29
 8001420:	4307      	orrs	r7, r0
 8001422:	2080      	movs	r0, #128	; 0x80
 8001424:	08e4      	lsrs	r4, r4, #3
 8001426:	0300      	lsls	r0, r0, #12
 8001428:	4204      	tst	r4, r0
 800142a:	d008      	beq.n	800143e <__aeabi_dadd+0x54e>
 800142c:	08dd      	lsrs	r5, r3, #3
 800142e:	4205      	tst	r5, r0
 8001430:	d105      	bne.n	800143e <__aeabi_dadd+0x54e>
 8001432:	08d2      	lsrs	r2, r2, #3
 8001434:	0759      	lsls	r1, r3, #29
 8001436:	4311      	orrs	r1, r2
 8001438:	000f      	movs	r7, r1
 800143a:	002c      	movs	r4, r5
 800143c:	46d8      	mov	r8, fp
 800143e:	0f7b      	lsrs	r3, r7, #29
 8001440:	00e4      	lsls	r4, r4, #3
 8001442:	431c      	orrs	r4, r3
 8001444:	00ff      	lsls	r7, r7, #3
 8001446:	4e30      	ldr	r6, [pc, #192]	; (8001508 <__aeabi_dadd+0x618>)
 8001448:	e5d6      	b.n	8000ff8 <__aeabi_dadd+0x108>
 800144a:	000c      	movs	r4, r1
 800144c:	0017      	movs	r7, r2
 800144e:	0006      	movs	r6, r0
 8001450:	e5d2      	b.n	8000ff8 <__aeabi_dadd+0x108>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d038      	beq.n	80014c8 <__aeabi_dadd+0x5d8>
 8001456:	000b      	movs	r3, r1
 8001458:	4313      	orrs	r3, r2
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x56e>
 800145c:	e742      	b.n	80012e4 <__aeabi_dadd+0x3f4>
 800145e:	08f8      	lsrs	r0, r7, #3
 8001460:	0767      	lsls	r7, r4, #29
 8001462:	4307      	orrs	r7, r0
 8001464:	2080      	movs	r0, #128	; 0x80
 8001466:	08e4      	lsrs	r4, r4, #3
 8001468:	0300      	lsls	r0, r0, #12
 800146a:	4204      	tst	r4, r0
 800146c:	d0e7      	beq.n	800143e <__aeabi_dadd+0x54e>
 800146e:	08cb      	lsrs	r3, r1, #3
 8001470:	4203      	tst	r3, r0
 8001472:	d1e4      	bne.n	800143e <__aeabi_dadd+0x54e>
 8001474:	08d2      	lsrs	r2, r2, #3
 8001476:	0749      	lsls	r1, r1, #29
 8001478:	4311      	orrs	r1, r2
 800147a:	000f      	movs	r7, r1
 800147c:	001c      	movs	r4, r3
 800147e:	e7de      	b.n	800143e <__aeabi_dadd+0x54e>
 8001480:	2700      	movs	r7, #0
 8001482:	2400      	movs	r4, #0
 8001484:	e5d5      	b.n	8001032 <__aeabi_dadd+0x142>
 8001486:	2100      	movs	r1, #0
 8001488:	e76b      	b.n	8001362 <__aeabi_dadd+0x472>
 800148a:	2500      	movs	r5, #0
 800148c:	2700      	movs	r7, #0
 800148e:	e5f3      	b.n	8001078 <__aeabi_dadd+0x188>
 8001490:	464e      	mov	r6, r9
 8001492:	0025      	movs	r5, r4
 8001494:	3e20      	subs	r6, #32
 8001496:	40f5      	lsrs	r5, r6
 8001498:	464b      	mov	r3, r9
 800149a:	002e      	movs	r6, r5
 800149c:	2b20      	cmp	r3, #32
 800149e:	d02d      	beq.n	80014fc <__aeabi_dadd+0x60c>
 80014a0:	2540      	movs	r5, #64	; 0x40
 80014a2:	1aed      	subs	r5, r5, r3
 80014a4:	40ac      	lsls	r4, r5
 80014a6:	4327      	orrs	r7, r4
 80014a8:	1e7c      	subs	r4, r7, #1
 80014aa:	41a7      	sbcs	r7, r4
 80014ac:	2400      	movs	r4, #0
 80014ae:	4337      	orrs	r7, r6
 80014b0:	e6c9      	b.n	8001246 <__aeabi_dadd+0x356>
 80014b2:	2480      	movs	r4, #128	; 0x80
 80014b4:	2500      	movs	r5, #0
 80014b6:	0324      	lsls	r4, r4, #12
 80014b8:	4e13      	ldr	r6, [pc, #76]	; (8001508 <__aeabi_dadd+0x618>)
 80014ba:	2700      	movs	r7, #0
 80014bc:	e5dc      	b.n	8001078 <__aeabi_dadd+0x188>
 80014be:	4327      	orrs	r7, r4
 80014c0:	1e7c      	subs	r4, r7, #1
 80014c2:	41a7      	sbcs	r7, r4
 80014c4:	2400      	movs	r4, #0
 80014c6:	e779      	b.n	80013bc <__aeabi_dadd+0x4cc>
 80014c8:	000c      	movs	r4, r1
 80014ca:	0017      	movs	r7, r2
 80014cc:	4e0e      	ldr	r6, [pc, #56]	; (8001508 <__aeabi_dadd+0x618>)
 80014ce:	e593      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80014d0:	000c      	movs	r4, r1
 80014d2:	0017      	movs	r7, r2
 80014d4:	e590      	b.n	8000ff8 <__aeabi_dadd+0x108>
 80014d6:	4656      	mov	r6, sl
 80014d8:	0023      	movs	r3, r4
 80014da:	3e20      	subs	r6, #32
 80014dc:	40f3      	lsrs	r3, r6
 80014de:	4699      	mov	r9, r3
 80014e0:	4653      	mov	r3, sl
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d00e      	beq.n	8001504 <__aeabi_dadd+0x614>
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	4656      	mov	r6, sl
 80014ea:	1b9b      	subs	r3, r3, r6
 80014ec:	409c      	lsls	r4, r3
 80014ee:	4327      	orrs	r7, r4
 80014f0:	1e7c      	subs	r4, r7, #1
 80014f2:	41a7      	sbcs	r7, r4
 80014f4:	464b      	mov	r3, r9
 80014f6:	2400      	movs	r4, #0
 80014f8:	431f      	orrs	r7, r3
 80014fa:	e75f      	b.n	80013bc <__aeabi_dadd+0x4cc>
 80014fc:	2400      	movs	r4, #0
 80014fe:	e7d2      	b.n	80014a6 <__aeabi_dadd+0x5b6>
 8001500:	0017      	movs	r7, r2
 8001502:	e5b2      	b.n	800106a <__aeabi_dadd+0x17a>
 8001504:	2400      	movs	r4, #0
 8001506:	e7f2      	b.n	80014ee <__aeabi_dadd+0x5fe>
 8001508:	000007ff 	.word	0x000007ff
 800150c:	ff7fffff 	.word	0xff7fffff

08001510 <__aeabi_ddiv>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4657      	mov	r7, sl
 8001514:	4645      	mov	r5, r8
 8001516:	46de      	mov	lr, fp
 8001518:	464e      	mov	r6, r9
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	004c      	lsls	r4, r1, #1
 800151e:	030e      	lsls	r6, r1, #12
 8001520:	b087      	sub	sp, #28
 8001522:	4683      	mov	fp, r0
 8001524:	4692      	mov	sl, r2
 8001526:	001d      	movs	r5, r3
 8001528:	4680      	mov	r8, r0
 800152a:	0b36      	lsrs	r6, r6, #12
 800152c:	0d64      	lsrs	r4, r4, #21
 800152e:	0fcf      	lsrs	r7, r1, #31
 8001530:	2c00      	cmp	r4, #0
 8001532:	d04f      	beq.n	80015d4 <__aeabi_ddiv+0xc4>
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <__aeabi_ddiv+0x1e4>)
 8001536:	429c      	cmp	r4, r3
 8001538:	d035      	beq.n	80015a6 <__aeabi_ddiv+0x96>
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	0f42      	lsrs	r2, r0, #29
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	00f6      	lsls	r6, r6, #3
 8001542:	4313      	orrs	r3, r2
 8001544:	4333      	orrs	r3, r6
 8001546:	4699      	mov	r9, r3
 8001548:	00c3      	lsls	r3, r0, #3
 800154a:	4698      	mov	r8, r3
 800154c:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <__aeabi_ddiv+0x1e8>)
 800154e:	2600      	movs	r6, #0
 8001550:	469c      	mov	ip, r3
 8001552:	2300      	movs	r3, #0
 8001554:	4464      	add	r4, ip
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	032b      	lsls	r3, r5, #12
 800155a:	0b1b      	lsrs	r3, r3, #12
 800155c:	469b      	mov	fp, r3
 800155e:	006b      	lsls	r3, r5, #1
 8001560:	0fed      	lsrs	r5, r5, #31
 8001562:	4650      	mov	r0, sl
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	9501      	str	r5, [sp, #4]
 8001568:	d05e      	beq.n	8001628 <__aeabi_ddiv+0x118>
 800156a:	4a62      	ldr	r2, [pc, #392]	; (80016f4 <__aeabi_ddiv+0x1e4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d053      	beq.n	8001618 <__aeabi_ddiv+0x108>
 8001570:	465a      	mov	r2, fp
 8001572:	00d1      	lsls	r1, r2, #3
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0f40      	lsrs	r0, r0, #29
 8001578:	0412      	lsls	r2, r2, #16
 800157a:	4302      	orrs	r2, r0
 800157c:	430a      	orrs	r2, r1
 800157e:	4693      	mov	fp, r2
 8001580:	4652      	mov	r2, sl
 8001582:	00d1      	lsls	r1, r2, #3
 8001584:	4a5c      	ldr	r2, [pc, #368]	; (80016f8 <__aeabi_ddiv+0x1e8>)
 8001586:	4694      	mov	ip, r2
 8001588:	2200      	movs	r2, #0
 800158a:	4463      	add	r3, ip
 800158c:	0038      	movs	r0, r7
 800158e:	4068      	eors	r0, r5
 8001590:	4684      	mov	ip, r0
 8001592:	9002      	str	r0, [sp, #8]
 8001594:	1ae4      	subs	r4, r4, r3
 8001596:	4316      	orrs	r6, r2
 8001598:	2e0f      	cmp	r6, #15
 800159a:	d900      	bls.n	800159e <__aeabi_ddiv+0x8e>
 800159c:	e0b4      	b.n	8001708 <__aeabi_ddiv+0x1f8>
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <__aeabi_ddiv+0x1ec>)
 80015a0:	00b6      	lsls	r6, r6, #2
 80015a2:	599b      	ldr	r3, [r3, r6]
 80015a4:	469f      	mov	pc, r3
 80015a6:	0003      	movs	r3, r0
 80015a8:	4333      	orrs	r3, r6
 80015aa:	4699      	mov	r9, r3
 80015ac:	d16c      	bne.n	8001688 <__aeabi_ddiv+0x178>
 80015ae:	2300      	movs	r3, #0
 80015b0:	4698      	mov	r8, r3
 80015b2:	3302      	adds	r3, #2
 80015b4:	2608      	movs	r6, #8
 80015b6:	9303      	str	r3, [sp, #12]
 80015b8:	e7ce      	b.n	8001558 <__aeabi_ddiv+0x48>
 80015ba:	46cb      	mov	fp, r9
 80015bc:	4641      	mov	r1, r8
 80015be:	9a03      	ldr	r2, [sp, #12]
 80015c0:	9701      	str	r7, [sp, #4]
 80015c2:	2a02      	cmp	r2, #2
 80015c4:	d165      	bne.n	8001692 <__aeabi_ddiv+0x182>
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	4c4a      	ldr	r4, [pc, #296]	; (80016f4 <__aeabi_ddiv+0x1e4>)
 80015ca:	469c      	mov	ip, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	4698      	mov	r8, r3
 80015d2:	e06b      	b.n	80016ac <__aeabi_ddiv+0x19c>
 80015d4:	0003      	movs	r3, r0
 80015d6:	4333      	orrs	r3, r6
 80015d8:	4699      	mov	r9, r3
 80015da:	d04e      	beq.n	800167a <__aeabi_ddiv+0x16a>
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_ddiv+0xd2>
 80015e0:	e1bc      	b.n	800195c <__aeabi_ddiv+0x44c>
 80015e2:	0030      	movs	r0, r6
 80015e4:	f001 fab0 	bl	8002b48 <__clzsi2>
 80015e8:	0003      	movs	r3, r0
 80015ea:	3b0b      	subs	r3, #11
 80015ec:	2b1c      	cmp	r3, #28
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_ddiv+0xe2>
 80015f0:	e1ac      	b.n	800194c <__aeabi_ddiv+0x43c>
 80015f2:	221d      	movs	r2, #29
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	465a      	mov	r2, fp
 80015f8:	0001      	movs	r1, r0
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	3908      	subs	r1, #8
 80015fe:	408e      	lsls	r6, r1
 8001600:	0013      	movs	r3, r2
 8001602:	4333      	orrs	r3, r6
 8001604:	4699      	mov	r9, r3
 8001606:	465b      	mov	r3, fp
 8001608:	408b      	lsls	r3, r1
 800160a:	4698      	mov	r8, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4c3c      	ldr	r4, [pc, #240]	; (8001700 <__aeabi_ddiv+0x1f0>)
 8001610:	2600      	movs	r6, #0
 8001612:	1a24      	subs	r4, r4, r0
 8001614:	9303      	str	r3, [sp, #12]
 8001616:	e79f      	b.n	8001558 <__aeabi_ddiv+0x48>
 8001618:	4651      	mov	r1, sl
 800161a:	465a      	mov	r2, fp
 800161c:	4311      	orrs	r1, r2
 800161e:	d129      	bne.n	8001674 <__aeabi_ddiv+0x164>
 8001620:	2200      	movs	r2, #0
 8001622:	4693      	mov	fp, r2
 8001624:	3202      	adds	r2, #2
 8001626:	e7b1      	b.n	800158c <__aeabi_ddiv+0x7c>
 8001628:	4659      	mov	r1, fp
 800162a:	4301      	orrs	r1, r0
 800162c:	d01e      	beq.n	800166c <__aeabi_ddiv+0x15c>
 800162e:	465b      	mov	r3, fp
 8001630:	2b00      	cmp	r3, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_ddiv+0x126>
 8001634:	e19e      	b.n	8001974 <__aeabi_ddiv+0x464>
 8001636:	4658      	mov	r0, fp
 8001638:	f001 fa86 	bl	8002b48 <__clzsi2>
 800163c:	0003      	movs	r3, r0
 800163e:	3b0b      	subs	r3, #11
 8001640:	2b1c      	cmp	r3, #28
 8001642:	dd00      	ble.n	8001646 <__aeabi_ddiv+0x136>
 8001644:	e18f      	b.n	8001966 <__aeabi_ddiv+0x456>
 8001646:	0002      	movs	r2, r0
 8001648:	4659      	mov	r1, fp
 800164a:	3a08      	subs	r2, #8
 800164c:	4091      	lsls	r1, r2
 800164e:	468b      	mov	fp, r1
 8001650:	211d      	movs	r1, #29
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	4651      	mov	r1, sl
 8001656:	40d9      	lsrs	r1, r3
 8001658:	000b      	movs	r3, r1
 800165a:	4659      	mov	r1, fp
 800165c:	430b      	orrs	r3, r1
 800165e:	4651      	mov	r1, sl
 8001660:	469b      	mov	fp, r3
 8001662:	4091      	lsls	r1, r2
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <__aeabi_ddiv+0x1f0>)
 8001666:	2200      	movs	r2, #0
 8001668:	1a1b      	subs	r3, r3, r0
 800166a:	e78f      	b.n	800158c <__aeabi_ddiv+0x7c>
 800166c:	2300      	movs	r3, #0
 800166e:	2201      	movs	r2, #1
 8001670:	469b      	mov	fp, r3
 8001672:	e78b      	b.n	800158c <__aeabi_ddiv+0x7c>
 8001674:	4651      	mov	r1, sl
 8001676:	2203      	movs	r2, #3
 8001678:	e788      	b.n	800158c <__aeabi_ddiv+0x7c>
 800167a:	2300      	movs	r3, #0
 800167c:	4698      	mov	r8, r3
 800167e:	3301      	adds	r3, #1
 8001680:	2604      	movs	r6, #4
 8001682:	2400      	movs	r4, #0
 8001684:	9303      	str	r3, [sp, #12]
 8001686:	e767      	b.n	8001558 <__aeabi_ddiv+0x48>
 8001688:	2303      	movs	r3, #3
 800168a:	46b1      	mov	r9, r6
 800168c:	9303      	str	r3, [sp, #12]
 800168e:	260c      	movs	r6, #12
 8001690:	e762      	b.n	8001558 <__aeabi_ddiv+0x48>
 8001692:	2a03      	cmp	r2, #3
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x188>
 8001696:	e25c      	b.n	8001b52 <__aeabi_ddiv+0x642>
 8001698:	9b01      	ldr	r3, [sp, #4]
 800169a:	2a01      	cmp	r2, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_ddiv+0x190>
 800169e:	e1e4      	b.n	8001a6a <__aeabi_ddiv+0x55a>
 80016a0:	4013      	ands	r3, r2
 80016a2:	469c      	mov	ip, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	2400      	movs	r4, #0
 80016a8:	2200      	movs	r2, #0
 80016aa:	4698      	mov	r8, r3
 80016ac:	2100      	movs	r1, #0
 80016ae:	0312      	lsls	r2, r2, #12
 80016b0:	0b13      	lsrs	r3, r2, #12
 80016b2:	0d0a      	lsrs	r2, r1, #20
 80016b4:	0512      	lsls	r2, r2, #20
 80016b6:	431a      	orrs	r2, r3
 80016b8:	0523      	lsls	r3, r4, #20
 80016ba:	4c12      	ldr	r4, [pc, #72]	; (8001704 <__aeabi_ddiv+0x1f4>)
 80016bc:	4640      	mov	r0, r8
 80016be:	4022      	ands	r2, r4
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4662      	mov	r2, ip
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	07d2      	lsls	r2, r2, #31
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	4313      	orrs	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	b007      	add	sp, #28
 80016d0:	bc3c      	pop	{r2, r3, r4, r5}
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	46a2      	mov	sl, r4
 80016d8:	46ab      	mov	fp, r5
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016dc:	2300      	movs	r3, #0
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	469c      	mov	ip, r3
 80016e2:	0312      	lsls	r2, r2, #12
 80016e4:	4698      	mov	r8, r3
 80016e6:	4c03      	ldr	r4, [pc, #12]	; (80016f4 <__aeabi_ddiv+0x1e4>)
 80016e8:	e7e0      	b.n	80016ac <__aeabi_ddiv+0x19c>
 80016ea:	2300      	movs	r3, #0
 80016ec:	4c01      	ldr	r4, [pc, #4]	; (80016f4 <__aeabi_ddiv+0x1e4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	4698      	mov	r8, r3
 80016f2:	e7db      	b.n	80016ac <__aeabi_ddiv+0x19c>
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	fffffc01 	.word	0xfffffc01
 80016fc:	08009358 	.word	0x08009358
 8001700:	fffffc0d 	.word	0xfffffc0d
 8001704:	800fffff 	.word	0x800fffff
 8001708:	45d9      	cmp	r9, fp
 800170a:	d900      	bls.n	800170e <__aeabi_ddiv+0x1fe>
 800170c:	e139      	b.n	8001982 <__aeabi_ddiv+0x472>
 800170e:	d100      	bne.n	8001712 <__aeabi_ddiv+0x202>
 8001710:	e134      	b.n	800197c <__aeabi_ddiv+0x46c>
 8001712:	2300      	movs	r3, #0
 8001714:	4646      	mov	r6, r8
 8001716:	464d      	mov	r5, r9
 8001718:	469a      	mov	sl, r3
 800171a:	3c01      	subs	r4, #1
 800171c:	465b      	mov	r3, fp
 800171e:	0e0a      	lsrs	r2, r1, #24
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	431a      	orrs	r2, r3
 8001724:	020b      	lsls	r3, r1, #8
 8001726:	0c17      	lsrs	r7, r2, #16
 8001728:	9303      	str	r3, [sp, #12]
 800172a:	0413      	lsls	r3, r2, #16
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	0039      	movs	r1, r7
 8001730:	0028      	movs	r0, r5
 8001732:	4690      	mov	r8, r2
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	f7fe fcf1 	bl	800011c <__udivsi3>
 800173a:	0002      	movs	r2, r0
 800173c:	9b01      	ldr	r3, [sp, #4]
 800173e:	4683      	mov	fp, r0
 8001740:	435a      	muls	r2, r3
 8001742:	0028      	movs	r0, r5
 8001744:	0039      	movs	r1, r7
 8001746:	4691      	mov	r9, r2
 8001748:	f7fe fd6e 	bl	8000228 <__aeabi_uidivmod>
 800174c:	0c35      	lsrs	r5, r6, #16
 800174e:	0409      	lsls	r1, r1, #16
 8001750:	430d      	orrs	r5, r1
 8001752:	45a9      	cmp	r9, r5
 8001754:	d90d      	bls.n	8001772 <__aeabi_ddiv+0x262>
 8001756:	465b      	mov	r3, fp
 8001758:	4445      	add	r5, r8
 800175a:	3b01      	subs	r3, #1
 800175c:	45a8      	cmp	r8, r5
 800175e:	d900      	bls.n	8001762 <__aeabi_ddiv+0x252>
 8001760:	e13a      	b.n	80019d8 <__aeabi_ddiv+0x4c8>
 8001762:	45a9      	cmp	r9, r5
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x258>
 8001766:	e137      	b.n	80019d8 <__aeabi_ddiv+0x4c8>
 8001768:	2302      	movs	r3, #2
 800176a:	425b      	negs	r3, r3
 800176c:	469c      	mov	ip, r3
 800176e:	4445      	add	r5, r8
 8001770:	44e3      	add	fp, ip
 8001772:	464b      	mov	r3, r9
 8001774:	1aeb      	subs	r3, r5, r3
 8001776:	0039      	movs	r1, r7
 8001778:	0018      	movs	r0, r3
 800177a:	9304      	str	r3, [sp, #16]
 800177c:	f7fe fcce 	bl	800011c <__udivsi3>
 8001780:	9b01      	ldr	r3, [sp, #4]
 8001782:	0005      	movs	r5, r0
 8001784:	4343      	muls	r3, r0
 8001786:	0039      	movs	r1, r7
 8001788:	9804      	ldr	r0, [sp, #16]
 800178a:	4699      	mov	r9, r3
 800178c:	f7fe fd4c 	bl	8000228 <__aeabi_uidivmod>
 8001790:	0433      	lsls	r3, r6, #16
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	430b      	orrs	r3, r1
 8001798:	4599      	cmp	r9, r3
 800179a:	d909      	bls.n	80017b0 <__aeabi_ddiv+0x2a0>
 800179c:	4443      	add	r3, r8
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4598      	cmp	r8, r3
 80017a2:	d900      	bls.n	80017a6 <__aeabi_ddiv+0x296>
 80017a4:	e11a      	b.n	80019dc <__aeabi_ddiv+0x4cc>
 80017a6:	4599      	cmp	r9, r3
 80017a8:	d800      	bhi.n	80017ac <__aeabi_ddiv+0x29c>
 80017aa:	e117      	b.n	80019dc <__aeabi_ddiv+0x4cc>
 80017ac:	3d02      	subs	r5, #2
 80017ae:	4443      	add	r3, r8
 80017b0:	464a      	mov	r2, r9
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	465a      	mov	r2, fp
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	432a      	orrs	r2, r5
 80017ba:	9903      	ldr	r1, [sp, #12]
 80017bc:	4693      	mov	fp, r2
 80017be:	0c10      	lsrs	r0, r2, #16
 80017c0:	0c0a      	lsrs	r2, r1, #16
 80017c2:	4691      	mov	r9, r2
 80017c4:	0409      	lsls	r1, r1, #16
 80017c6:	465a      	mov	r2, fp
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	464e      	mov	r6, r9
 80017cc:	000d      	movs	r5, r1
 80017ce:	0412      	lsls	r2, r2, #16
 80017d0:	0c12      	lsrs	r2, r2, #16
 80017d2:	4345      	muls	r5, r0
 80017d4:	9105      	str	r1, [sp, #20]
 80017d6:	4351      	muls	r1, r2
 80017d8:	4372      	muls	r2, r6
 80017da:	4370      	muls	r0, r6
 80017dc:	1952      	adds	r2, r2, r5
 80017de:	0c0e      	lsrs	r6, r1, #16
 80017e0:	18b2      	adds	r2, r6, r2
 80017e2:	4295      	cmp	r5, r2
 80017e4:	d903      	bls.n	80017ee <__aeabi_ddiv+0x2de>
 80017e6:	2580      	movs	r5, #128	; 0x80
 80017e8:	026d      	lsls	r5, r5, #9
 80017ea:	46ac      	mov	ip, r5
 80017ec:	4460      	add	r0, ip
 80017ee:	0c15      	lsrs	r5, r2, #16
 80017f0:	0409      	lsls	r1, r1, #16
 80017f2:	0412      	lsls	r2, r2, #16
 80017f4:	0c09      	lsrs	r1, r1, #16
 80017f6:	1828      	adds	r0, r5, r0
 80017f8:	1852      	adds	r2, r2, r1
 80017fa:	4283      	cmp	r3, r0
 80017fc:	d200      	bcs.n	8001800 <__aeabi_ddiv+0x2f0>
 80017fe:	e0ce      	b.n	800199e <__aeabi_ddiv+0x48e>
 8001800:	d100      	bne.n	8001804 <__aeabi_ddiv+0x2f4>
 8001802:	e0c8      	b.n	8001996 <__aeabi_ddiv+0x486>
 8001804:	1a1d      	subs	r5, r3, r0
 8001806:	4653      	mov	r3, sl
 8001808:	1a9e      	subs	r6, r3, r2
 800180a:	45b2      	cmp	sl, r6
 800180c:	4192      	sbcs	r2, r2
 800180e:	4252      	negs	r2, r2
 8001810:	1aab      	subs	r3, r5, r2
 8001812:	469a      	mov	sl, r3
 8001814:	4598      	cmp	r8, r3
 8001816:	d100      	bne.n	800181a <__aeabi_ddiv+0x30a>
 8001818:	e117      	b.n	8001a4a <__aeabi_ddiv+0x53a>
 800181a:	0039      	movs	r1, r7
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe fc7d 	bl	800011c <__udivsi3>
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	0005      	movs	r5, r0
 8001826:	4343      	muls	r3, r0
 8001828:	0039      	movs	r1, r7
 800182a:	4650      	mov	r0, sl
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	f7fe fcfb 	bl	8000228 <__aeabi_uidivmod>
 8001832:	9804      	ldr	r0, [sp, #16]
 8001834:	040b      	lsls	r3, r1, #16
 8001836:	0c31      	lsrs	r1, r6, #16
 8001838:	4319      	orrs	r1, r3
 800183a:	4288      	cmp	r0, r1
 800183c:	d909      	bls.n	8001852 <__aeabi_ddiv+0x342>
 800183e:	4441      	add	r1, r8
 8001840:	1e6b      	subs	r3, r5, #1
 8001842:	4588      	cmp	r8, r1
 8001844:	d900      	bls.n	8001848 <__aeabi_ddiv+0x338>
 8001846:	e107      	b.n	8001a58 <__aeabi_ddiv+0x548>
 8001848:	4288      	cmp	r0, r1
 800184a:	d800      	bhi.n	800184e <__aeabi_ddiv+0x33e>
 800184c:	e104      	b.n	8001a58 <__aeabi_ddiv+0x548>
 800184e:	3d02      	subs	r5, #2
 8001850:	4441      	add	r1, r8
 8001852:	9b04      	ldr	r3, [sp, #16]
 8001854:	1acb      	subs	r3, r1, r3
 8001856:	0018      	movs	r0, r3
 8001858:	0039      	movs	r1, r7
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	f7fe fc5e 	bl	800011c <__udivsi3>
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	4682      	mov	sl, r0
 8001864:	4343      	muls	r3, r0
 8001866:	0039      	movs	r1, r7
 8001868:	9804      	ldr	r0, [sp, #16]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f7fe fcdc 	bl	8000228 <__aeabi_uidivmod>
 8001870:	9801      	ldr	r0, [sp, #4]
 8001872:	040b      	lsls	r3, r1, #16
 8001874:	0431      	lsls	r1, r6, #16
 8001876:	0c09      	lsrs	r1, r1, #16
 8001878:	4319      	orrs	r1, r3
 800187a:	4288      	cmp	r0, r1
 800187c:	d90d      	bls.n	800189a <__aeabi_ddiv+0x38a>
 800187e:	4653      	mov	r3, sl
 8001880:	4441      	add	r1, r8
 8001882:	3b01      	subs	r3, #1
 8001884:	4588      	cmp	r8, r1
 8001886:	d900      	bls.n	800188a <__aeabi_ddiv+0x37a>
 8001888:	e0e8      	b.n	8001a5c <__aeabi_ddiv+0x54c>
 800188a:	4288      	cmp	r0, r1
 800188c:	d800      	bhi.n	8001890 <__aeabi_ddiv+0x380>
 800188e:	e0e5      	b.n	8001a5c <__aeabi_ddiv+0x54c>
 8001890:	2302      	movs	r3, #2
 8001892:	425b      	negs	r3, r3
 8001894:	469c      	mov	ip, r3
 8001896:	4441      	add	r1, r8
 8001898:	44e2      	add	sl, ip
 800189a:	9b01      	ldr	r3, [sp, #4]
 800189c:	042d      	lsls	r5, r5, #16
 800189e:	1ace      	subs	r6, r1, r3
 80018a0:	4651      	mov	r1, sl
 80018a2:	4329      	orrs	r1, r5
 80018a4:	9d05      	ldr	r5, [sp, #20]
 80018a6:	464f      	mov	r7, r9
 80018a8:	002a      	movs	r2, r5
 80018aa:	040b      	lsls	r3, r1, #16
 80018ac:	0c08      	lsrs	r0, r1, #16
 80018ae:	0c1b      	lsrs	r3, r3, #16
 80018b0:	435a      	muls	r2, r3
 80018b2:	4345      	muls	r5, r0
 80018b4:	437b      	muls	r3, r7
 80018b6:	4378      	muls	r0, r7
 80018b8:	195b      	adds	r3, r3, r5
 80018ba:	0c17      	lsrs	r7, r2, #16
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	429d      	cmp	r5, r3
 80018c0:	d903      	bls.n	80018ca <__aeabi_ddiv+0x3ba>
 80018c2:	2580      	movs	r5, #128	; 0x80
 80018c4:	026d      	lsls	r5, r5, #9
 80018c6:	46ac      	mov	ip, r5
 80018c8:	4460      	add	r0, ip
 80018ca:	0c1d      	lsrs	r5, r3, #16
 80018cc:	0412      	lsls	r2, r2, #16
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	0c12      	lsrs	r2, r2, #16
 80018d2:	1828      	adds	r0, r5, r0
 80018d4:	189b      	adds	r3, r3, r2
 80018d6:	4286      	cmp	r6, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x3cc>
 80018da:	e093      	b.n	8001a04 <__aeabi_ddiv+0x4f4>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x3d0>
 80018de:	e08e      	b.n	80019fe <__aeabi_ddiv+0x4ee>
 80018e0:	2301      	movs	r3, #1
 80018e2:	4319      	orrs	r1, r3
 80018e4:	4ba0      	ldr	r3, [pc, #640]	; (8001b68 <__aeabi_ddiv+0x658>)
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dc00      	bgt.n	80018ee <__aeabi_ddiv+0x3de>
 80018ec:	e099      	b.n	8001a22 <__aeabi_ddiv+0x512>
 80018ee:	074a      	lsls	r2, r1, #29
 80018f0:	d000      	beq.n	80018f4 <__aeabi_ddiv+0x3e4>
 80018f2:	e09e      	b.n	8001a32 <__aeabi_ddiv+0x522>
 80018f4:	465a      	mov	r2, fp
 80018f6:	01d2      	lsls	r2, r2, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_ddiv+0x3f8>
 80018fa:	465a      	mov	r2, fp
 80018fc:	4b9b      	ldr	r3, [pc, #620]	; (8001b6c <__aeabi_ddiv+0x65c>)
 80018fe:	401a      	ands	r2, r3
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	4693      	mov	fp, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	18e3      	adds	r3, r4, r3
 8001908:	4a99      	ldr	r2, [pc, #612]	; (8001b70 <__aeabi_ddiv+0x660>)
 800190a:	4293      	cmp	r3, r2
 800190c:	dd68      	ble.n	80019e0 <__aeabi_ddiv+0x4d0>
 800190e:	2301      	movs	r3, #1
 8001910:	9a02      	ldr	r2, [sp, #8]
 8001912:	4c98      	ldr	r4, [pc, #608]	; (8001b74 <__aeabi_ddiv+0x664>)
 8001914:	401a      	ands	r2, r3
 8001916:	2300      	movs	r3, #0
 8001918:	4694      	mov	ip, r2
 800191a:	4698      	mov	r8, r3
 800191c:	2200      	movs	r2, #0
 800191e:	e6c5      	b.n	80016ac <__aeabi_ddiv+0x19c>
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	464b      	mov	r3, r9
 8001924:	0312      	lsls	r2, r2, #12
 8001926:	4213      	tst	r3, r2
 8001928:	d00a      	beq.n	8001940 <__aeabi_ddiv+0x430>
 800192a:	465b      	mov	r3, fp
 800192c:	4213      	tst	r3, r2
 800192e:	d106      	bne.n	800193e <__aeabi_ddiv+0x42e>
 8001930:	431a      	orrs	r2, r3
 8001932:	0312      	lsls	r2, r2, #12
 8001934:	0b12      	lsrs	r2, r2, #12
 8001936:	46ac      	mov	ip, r5
 8001938:	4688      	mov	r8, r1
 800193a:	4c8e      	ldr	r4, [pc, #568]	; (8001b74 <__aeabi_ddiv+0x664>)
 800193c:	e6b6      	b.n	80016ac <__aeabi_ddiv+0x19c>
 800193e:	464b      	mov	r3, r9
 8001940:	431a      	orrs	r2, r3
 8001942:	0312      	lsls	r2, r2, #12
 8001944:	0b12      	lsrs	r2, r2, #12
 8001946:	46bc      	mov	ip, r7
 8001948:	4c8a      	ldr	r4, [pc, #552]	; (8001b74 <__aeabi_ddiv+0x664>)
 800194a:	e6af      	b.n	80016ac <__aeabi_ddiv+0x19c>
 800194c:	0003      	movs	r3, r0
 800194e:	465a      	mov	r2, fp
 8001950:	3b28      	subs	r3, #40	; 0x28
 8001952:	409a      	lsls	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	4691      	mov	r9, r2
 8001958:	4698      	mov	r8, r3
 800195a:	e657      	b.n	800160c <__aeabi_ddiv+0xfc>
 800195c:	4658      	mov	r0, fp
 800195e:	f001 f8f3 	bl	8002b48 <__clzsi2>
 8001962:	3020      	adds	r0, #32
 8001964:	e640      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 8001966:	0003      	movs	r3, r0
 8001968:	4652      	mov	r2, sl
 800196a:	3b28      	subs	r3, #40	; 0x28
 800196c:	409a      	lsls	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	4693      	mov	fp, r2
 8001972:	e677      	b.n	8001664 <__aeabi_ddiv+0x154>
 8001974:	f001 f8e8 	bl	8002b48 <__clzsi2>
 8001978:	3020      	adds	r0, #32
 800197a:	e65f      	b.n	800163c <__aeabi_ddiv+0x12c>
 800197c:	4588      	cmp	r8, r1
 800197e:	d200      	bcs.n	8001982 <__aeabi_ddiv+0x472>
 8001980:	e6c7      	b.n	8001712 <__aeabi_ddiv+0x202>
 8001982:	464b      	mov	r3, r9
 8001984:	07de      	lsls	r6, r3, #31
 8001986:	085d      	lsrs	r5, r3, #1
 8001988:	4643      	mov	r3, r8
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	431e      	orrs	r6, r3
 800198e:	4643      	mov	r3, r8
 8001990:	07db      	lsls	r3, r3, #31
 8001992:	469a      	mov	sl, r3
 8001994:	e6c2      	b.n	800171c <__aeabi_ddiv+0x20c>
 8001996:	2500      	movs	r5, #0
 8001998:	4592      	cmp	sl, r2
 800199a:	d300      	bcc.n	800199e <__aeabi_ddiv+0x48e>
 800199c:	e733      	b.n	8001806 <__aeabi_ddiv+0x2f6>
 800199e:	9e03      	ldr	r6, [sp, #12]
 80019a0:	4659      	mov	r1, fp
 80019a2:	46b4      	mov	ip, r6
 80019a4:	44e2      	add	sl, ip
 80019a6:	45b2      	cmp	sl, r6
 80019a8:	41ad      	sbcs	r5, r5
 80019aa:	426d      	negs	r5, r5
 80019ac:	4445      	add	r5, r8
 80019ae:	18eb      	adds	r3, r5, r3
 80019b0:	3901      	subs	r1, #1
 80019b2:	4598      	cmp	r8, r3
 80019b4:	d207      	bcs.n	80019c6 <__aeabi_ddiv+0x4b6>
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d900      	bls.n	80019bc <__aeabi_ddiv+0x4ac>
 80019ba:	e07f      	b.n	8001abc <__aeabi_ddiv+0x5ac>
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x4b0>
 80019be:	e0bc      	b.n	8001b3a <__aeabi_ddiv+0x62a>
 80019c0:	1a1d      	subs	r5, r3, r0
 80019c2:	468b      	mov	fp, r1
 80019c4:	e71f      	b.n	8001806 <__aeabi_ddiv+0x2f6>
 80019c6:	4598      	cmp	r8, r3
 80019c8:	d1fa      	bne.n	80019c0 <__aeabi_ddiv+0x4b0>
 80019ca:	9d03      	ldr	r5, [sp, #12]
 80019cc:	4555      	cmp	r5, sl
 80019ce:	d9f2      	bls.n	80019b6 <__aeabi_ddiv+0x4a6>
 80019d0:	4643      	mov	r3, r8
 80019d2:	468b      	mov	fp, r1
 80019d4:	1a1d      	subs	r5, r3, r0
 80019d6:	e716      	b.n	8001806 <__aeabi_ddiv+0x2f6>
 80019d8:	469b      	mov	fp, r3
 80019da:	e6ca      	b.n	8001772 <__aeabi_ddiv+0x262>
 80019dc:	0015      	movs	r5, r2
 80019de:	e6e7      	b.n	80017b0 <__aeabi_ddiv+0x2a0>
 80019e0:	465a      	mov	r2, fp
 80019e2:	08c9      	lsrs	r1, r1, #3
 80019e4:	0752      	lsls	r2, r2, #29
 80019e6:	430a      	orrs	r2, r1
 80019e8:	055b      	lsls	r3, r3, #21
 80019ea:	4690      	mov	r8, r2
 80019ec:	0d5c      	lsrs	r4, r3, #21
 80019ee:	465a      	mov	r2, fp
 80019f0:	2301      	movs	r3, #1
 80019f2:	9902      	ldr	r1, [sp, #8]
 80019f4:	0252      	lsls	r2, r2, #9
 80019f6:	4019      	ands	r1, r3
 80019f8:	0b12      	lsrs	r2, r2, #12
 80019fa:	468c      	mov	ip, r1
 80019fc:	e656      	b.n	80016ac <__aeabi_ddiv+0x19c>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x4f4>
 8001a02:	e76f      	b.n	80018e4 <__aeabi_ddiv+0x3d4>
 8001a04:	4446      	add	r6, r8
 8001a06:	1e4a      	subs	r2, r1, #1
 8001a08:	45b0      	cmp	r8, r6
 8001a0a:	d929      	bls.n	8001a60 <__aeabi_ddiv+0x550>
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	4286      	cmp	r6, r0
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0x504>
 8001a12:	e765      	b.n	80018e0 <__aeabi_ddiv+0x3d0>
 8001a14:	9a03      	ldr	r2, [sp, #12]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d000      	beq.n	8001a1c <__aeabi_ddiv+0x50c>
 8001a1a:	e761      	b.n	80018e0 <__aeabi_ddiv+0x3d0>
 8001a1c:	e762      	b.n	80018e4 <__aeabi_ddiv+0x3d4>
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4249      	negs	r1, r1
 8001a22:	2001      	movs	r0, #1
 8001a24:	1ac2      	subs	r2, r0, r3
 8001a26:	2a38      	cmp	r2, #56	; 0x38
 8001a28:	dd21      	ble.n	8001a6e <__aeabi_ddiv+0x55e>
 8001a2a:	9b02      	ldr	r3, [sp, #8]
 8001a2c:	4003      	ands	r3, r0
 8001a2e:	469c      	mov	ip, r3
 8001a30:	e638      	b.n	80016a4 <__aeabi_ddiv+0x194>
 8001a32:	220f      	movs	r2, #15
 8001a34:	400a      	ands	r2, r1
 8001a36:	2a04      	cmp	r2, #4
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x52c>
 8001a3a:	e75b      	b.n	80018f4 <__aeabi_ddiv+0x3e4>
 8001a3c:	000a      	movs	r2, r1
 8001a3e:	1d11      	adds	r1, r2, #4
 8001a40:	4291      	cmp	r1, r2
 8001a42:	4192      	sbcs	r2, r2
 8001a44:	4252      	negs	r2, r2
 8001a46:	4493      	add	fp, r2
 8001a48:	e754      	b.n	80018f4 <__aeabi_ddiv+0x3e4>
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <__aeabi_ddiv+0x658>)
 8001a4c:	18e3      	adds	r3, r4, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dde5      	ble.n	8001a1e <__aeabi_ddiv+0x50e>
 8001a52:	2201      	movs	r2, #1
 8001a54:	4252      	negs	r2, r2
 8001a56:	e7f2      	b.n	8001a3e <__aeabi_ddiv+0x52e>
 8001a58:	001d      	movs	r5, r3
 8001a5a:	e6fa      	b.n	8001852 <__aeabi_ddiv+0x342>
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	e71c      	b.n	800189a <__aeabi_ddiv+0x38a>
 8001a60:	42b0      	cmp	r0, r6
 8001a62:	d839      	bhi.n	8001ad8 <__aeabi_ddiv+0x5c8>
 8001a64:	d06e      	beq.n	8001b44 <__aeabi_ddiv+0x634>
 8001a66:	0011      	movs	r1, r2
 8001a68:	e73a      	b.n	80018e0 <__aeabi_ddiv+0x3d0>
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	e73a      	b.n	80018e4 <__aeabi_ddiv+0x3d4>
 8001a6e:	2a1f      	cmp	r2, #31
 8001a70:	dc3c      	bgt.n	8001aec <__aeabi_ddiv+0x5dc>
 8001a72:	2320      	movs	r3, #32
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	000c      	movs	r4, r1
 8001a78:	4658      	mov	r0, fp
 8001a7a:	4099      	lsls	r1, r3
 8001a7c:	4098      	lsls	r0, r3
 8001a7e:	1e4b      	subs	r3, r1, #1
 8001a80:	4199      	sbcs	r1, r3
 8001a82:	465b      	mov	r3, fp
 8001a84:	40d4      	lsrs	r4, r2
 8001a86:	40d3      	lsrs	r3, r2
 8001a88:	4320      	orrs	r0, r4
 8001a8a:	4308      	orrs	r0, r1
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	0743      	lsls	r3, r0, #29
 8001a90:	d009      	beq.n	8001aa6 <__aeabi_ddiv+0x596>
 8001a92:	230f      	movs	r3, #15
 8001a94:	4003      	ands	r3, r0
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d005      	beq.n	8001aa6 <__aeabi_ddiv+0x596>
 8001a9a:	0001      	movs	r1, r0
 8001a9c:	1d08      	adds	r0, r1, #4
 8001a9e:	4288      	cmp	r0, r1
 8001aa0:	419b      	sbcs	r3, r3
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	18d2      	adds	r2, r2, r3
 8001aa6:	0213      	lsls	r3, r2, #8
 8001aa8:	d53a      	bpl.n	8001b20 <__aeabi_ddiv+0x610>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9a02      	ldr	r2, [sp, #8]
 8001aae:	2401      	movs	r4, #1
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	e5f7      	b.n	80016ac <__aeabi_ddiv+0x19c>
 8001abc:	2102      	movs	r1, #2
 8001abe:	4249      	negs	r1, r1
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	9d03      	ldr	r5, [sp, #12]
 8001ac4:	44e3      	add	fp, ip
 8001ac6:	46ac      	mov	ip, r5
 8001ac8:	44e2      	add	sl, ip
 8001aca:	45aa      	cmp	sl, r5
 8001acc:	41ad      	sbcs	r5, r5
 8001ace:	426d      	negs	r5, r5
 8001ad0:	4445      	add	r5, r8
 8001ad2:	18ed      	adds	r5, r5, r3
 8001ad4:	1a2d      	subs	r5, r5, r0
 8001ad6:	e696      	b.n	8001806 <__aeabi_ddiv+0x2f6>
 8001ad8:	1e8a      	subs	r2, r1, #2
 8001ada:	9903      	ldr	r1, [sp, #12]
 8001adc:	004d      	lsls	r5, r1, #1
 8001ade:	428d      	cmp	r5, r1
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	4441      	add	r1, r8
 8001ae6:	1876      	adds	r6, r6, r1
 8001ae8:	9503      	str	r5, [sp, #12]
 8001aea:	e78f      	b.n	8001a0c <__aeabi_ddiv+0x4fc>
 8001aec:	201f      	movs	r0, #31
 8001aee:	4240      	negs	r0, r0
 8001af0:	1ac3      	subs	r3, r0, r3
 8001af2:	4658      	mov	r0, fp
 8001af4:	40d8      	lsrs	r0, r3
 8001af6:	0003      	movs	r3, r0
 8001af8:	2a20      	cmp	r2, #32
 8001afa:	d028      	beq.n	8001b4e <__aeabi_ddiv+0x63e>
 8001afc:	2040      	movs	r0, #64	; 0x40
 8001afe:	465d      	mov	r5, fp
 8001b00:	1a82      	subs	r2, r0, r2
 8001b02:	4095      	lsls	r5, r2
 8001b04:	4329      	orrs	r1, r5
 8001b06:	1e4a      	subs	r2, r1, #1
 8001b08:	4191      	sbcs	r1, r2
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	400b      	ands	r3, r1
 8001b12:	d009      	beq.n	8001b28 <__aeabi_ddiv+0x618>
 8001b14:	230f      	movs	r3, #15
 8001b16:	2200      	movs	r2, #0
 8001b18:	400b      	ands	r3, r1
 8001b1a:	0008      	movs	r0, r1
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d1bd      	bne.n	8001a9c <__aeabi_ddiv+0x58c>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0753      	lsls	r3, r2, #29
 8001b24:	0252      	lsls	r2, r2, #9
 8001b26:	0b12      	lsrs	r2, r2, #12
 8001b28:	08c9      	lsrs	r1, r1, #3
 8001b2a:	4319      	orrs	r1, r3
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4688      	mov	r8, r1
 8001b30:	9902      	ldr	r1, [sp, #8]
 8001b32:	2400      	movs	r4, #0
 8001b34:	4019      	ands	r1, r3
 8001b36:	468c      	mov	ip, r1
 8001b38:	e5b8      	b.n	80016ac <__aeabi_ddiv+0x19c>
 8001b3a:	4552      	cmp	r2, sl
 8001b3c:	d8be      	bhi.n	8001abc <__aeabi_ddiv+0x5ac>
 8001b3e:	468b      	mov	fp, r1
 8001b40:	2500      	movs	r5, #0
 8001b42:	e660      	b.n	8001806 <__aeabi_ddiv+0x2f6>
 8001b44:	9d03      	ldr	r5, [sp, #12]
 8001b46:	429d      	cmp	r5, r3
 8001b48:	d3c6      	bcc.n	8001ad8 <__aeabi_ddiv+0x5c8>
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	e762      	b.n	8001a14 <__aeabi_ddiv+0x504>
 8001b4e:	2500      	movs	r5, #0
 8001b50:	e7d8      	b.n	8001b04 <__aeabi_ddiv+0x5f4>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	465b      	mov	r3, fp
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	0312      	lsls	r2, r2, #12
 8001b5e:	0b12      	lsrs	r2, r2, #12
 8001b60:	469c      	mov	ip, r3
 8001b62:	4688      	mov	r8, r1
 8001b64:	4c03      	ldr	r4, [pc, #12]	; (8001b74 <__aeabi_ddiv+0x664>)
 8001b66:	e5a1      	b.n	80016ac <__aeabi_ddiv+0x19c>
 8001b68:	000003ff 	.word	0x000003ff
 8001b6c:	feffffff 	.word	0xfeffffff
 8001b70:	000007fe 	.word	0x000007fe
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__eqdf2>:
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	464f      	mov	r7, r9
 8001b7c:	4646      	mov	r6, r8
 8001b7e:	46d6      	mov	lr, sl
 8001b80:	005c      	lsls	r4, r3, #1
 8001b82:	b5c0      	push	{r6, r7, lr}
 8001b84:	031f      	lsls	r7, r3, #12
 8001b86:	0fdb      	lsrs	r3, r3, #31
 8001b88:	469a      	mov	sl, r3
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <__eqdf2+0x70>)
 8001b8c:	030e      	lsls	r6, r1, #12
 8001b8e:	004d      	lsls	r5, r1, #1
 8001b90:	4684      	mov	ip, r0
 8001b92:	4680      	mov	r8, r0
 8001b94:	0b36      	lsrs	r6, r6, #12
 8001b96:	0d6d      	lsrs	r5, r5, #21
 8001b98:	0fc9      	lsrs	r1, r1, #31
 8001b9a:	4691      	mov	r9, r2
 8001b9c:	0b3f      	lsrs	r7, r7, #12
 8001b9e:	0d64      	lsrs	r4, r4, #21
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	429d      	cmp	r5, r3
 8001ba4:	d008      	beq.n	8001bb8 <__eqdf2+0x40>
 8001ba6:	429c      	cmp	r4, r3
 8001ba8:	d001      	beq.n	8001bae <__eqdf2+0x36>
 8001baa:	42a5      	cmp	r5, r4
 8001bac:	d00b      	beq.n	8001bc6 <__eqdf2+0x4e>
 8001bae:	bc1c      	pop	{r2, r3, r4}
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	46a2      	mov	sl, r4
 8001bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb8:	4663      	mov	r3, ip
 8001bba:	4333      	orrs	r3, r6
 8001bbc:	d1f7      	bne.n	8001bae <__eqdf2+0x36>
 8001bbe:	42ac      	cmp	r4, r5
 8001bc0:	d1f5      	bne.n	8001bae <__eqdf2+0x36>
 8001bc2:	433a      	orrs	r2, r7
 8001bc4:	d1f3      	bne.n	8001bae <__eqdf2+0x36>
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	42be      	cmp	r6, r7
 8001bca:	d1f0      	bne.n	8001bae <__eqdf2+0x36>
 8001bcc:	45c8      	cmp	r8, r9
 8001bce:	d1ee      	bne.n	8001bae <__eqdf2+0x36>
 8001bd0:	4551      	cmp	r1, sl
 8001bd2:	d007      	beq.n	8001be4 <__eqdf2+0x6c>
 8001bd4:	2d00      	cmp	r5, #0
 8001bd6:	d1ea      	bne.n	8001bae <__eqdf2+0x36>
 8001bd8:	4663      	mov	r3, ip
 8001bda:	431e      	orrs	r6, r3
 8001bdc:	0030      	movs	r0, r6
 8001bde:	1e46      	subs	r6, r0, #1
 8001be0:	41b0      	sbcs	r0, r6
 8001be2:	e7e4      	b.n	8001bae <__eqdf2+0x36>
 8001be4:	2000      	movs	r0, #0
 8001be6:	e7e2      	b.n	8001bae <__eqdf2+0x36>
 8001be8:	000007ff 	.word	0x000007ff

08001bec <__gedf2>:
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	4645      	mov	r5, r8
 8001bf0:	46de      	mov	lr, fp
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	b5e0      	push	{r5, r6, r7, lr}
 8001bf8:	031f      	lsls	r7, r3, #12
 8001bfa:	0b3d      	lsrs	r5, r7, #12
 8001bfc:	4f2c      	ldr	r7, [pc, #176]	; (8001cb0 <__gedf2+0xc4>)
 8001bfe:	030e      	lsls	r6, r1, #12
 8001c00:	004c      	lsls	r4, r1, #1
 8001c02:	46ab      	mov	fp, r5
 8001c04:	005d      	lsls	r5, r3, #1
 8001c06:	4684      	mov	ip, r0
 8001c08:	0b36      	lsrs	r6, r6, #12
 8001c0a:	0d64      	lsrs	r4, r4, #21
 8001c0c:	0fc9      	lsrs	r1, r1, #31
 8001c0e:	4690      	mov	r8, r2
 8001c10:	0d6d      	lsrs	r5, r5, #21
 8001c12:	0fdb      	lsrs	r3, r3, #31
 8001c14:	42bc      	cmp	r4, r7
 8001c16:	d02a      	beq.n	8001c6e <__gedf2+0x82>
 8001c18:	4f25      	ldr	r7, [pc, #148]	; (8001cb0 <__gedf2+0xc4>)
 8001c1a:	42bd      	cmp	r5, r7
 8001c1c:	d02d      	beq.n	8001c7a <__gedf2+0x8e>
 8001c1e:	2c00      	cmp	r4, #0
 8001c20:	d10f      	bne.n	8001c42 <__gedf2+0x56>
 8001c22:	4330      	orrs	r0, r6
 8001c24:	0007      	movs	r7, r0
 8001c26:	4681      	mov	r9, r0
 8001c28:	4278      	negs	r0, r7
 8001c2a:	4178      	adcs	r0, r7
 8001c2c:	b2c0      	uxtb	r0, r0
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	d117      	bne.n	8001c62 <__gedf2+0x76>
 8001c32:	465f      	mov	r7, fp
 8001c34:	433a      	orrs	r2, r7
 8001c36:	d114      	bne.n	8001c62 <__gedf2+0x76>
 8001c38:	464b      	mov	r3, r9
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <__gedf2+0x6a>
 8001c40:	e006      	b.n	8001c50 <__gedf2+0x64>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	d102      	bne.n	8001c4c <__gedf2+0x60>
 8001c46:	4658      	mov	r0, fp
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	d001      	beq.n	8001c50 <__gedf2+0x64>
 8001c4c:	4299      	cmp	r1, r3
 8001c4e:	d018      	beq.n	8001c82 <__gedf2+0x96>
 8001c50:	4248      	negs	r0, r1
 8001c52:	2101      	movs	r1, #1
 8001c54:	4308      	orrs	r0, r1
 8001c56:	bc3c      	pop	{r2, r3, r4, r5}
 8001c58:	4690      	mov	r8, r2
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	46a2      	mov	sl, r4
 8001c5e:	46ab      	mov	fp, r5
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0f2      	beq.n	8001c4c <__gedf2+0x60>
 8001c66:	2001      	movs	r0, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4318      	orrs	r0, r3
 8001c6c:	e7f3      	b.n	8001c56 <__gedf2+0x6a>
 8001c6e:	0037      	movs	r7, r6
 8001c70:	4307      	orrs	r7, r0
 8001c72:	d0d1      	beq.n	8001c18 <__gedf2+0x2c>
 8001c74:	2002      	movs	r0, #2
 8001c76:	4240      	negs	r0, r0
 8001c78:	e7ed      	b.n	8001c56 <__gedf2+0x6a>
 8001c7a:	465f      	mov	r7, fp
 8001c7c:	4317      	orrs	r7, r2
 8001c7e:	d0ce      	beq.n	8001c1e <__gedf2+0x32>
 8001c80:	e7f8      	b.n	8001c74 <__gedf2+0x88>
 8001c82:	42ac      	cmp	r4, r5
 8001c84:	dce4      	bgt.n	8001c50 <__gedf2+0x64>
 8001c86:	da03      	bge.n	8001c90 <__gedf2+0xa4>
 8001c88:	1e48      	subs	r0, r1, #1
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4308      	orrs	r0, r1
 8001c8e:	e7e2      	b.n	8001c56 <__gedf2+0x6a>
 8001c90:	455e      	cmp	r6, fp
 8001c92:	d8dd      	bhi.n	8001c50 <__gedf2+0x64>
 8001c94:	d006      	beq.n	8001ca4 <__gedf2+0xb8>
 8001c96:	2000      	movs	r0, #0
 8001c98:	455e      	cmp	r6, fp
 8001c9a:	d2dc      	bcs.n	8001c56 <__gedf2+0x6a>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	1e48      	subs	r0, r1, #1
 8001ca0:	4318      	orrs	r0, r3
 8001ca2:	e7d8      	b.n	8001c56 <__gedf2+0x6a>
 8001ca4:	45c4      	cmp	ip, r8
 8001ca6:	d8d3      	bhi.n	8001c50 <__gedf2+0x64>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	45c4      	cmp	ip, r8
 8001cac:	d3f6      	bcc.n	8001c9c <__gedf2+0xb0>
 8001cae:	e7d2      	b.n	8001c56 <__gedf2+0x6a>
 8001cb0:	000007ff 	.word	0x000007ff

08001cb4 <__ledf2>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	464e      	mov	r6, r9
 8001cb8:	4645      	mov	r5, r8
 8001cba:	46de      	mov	lr, fp
 8001cbc:	4657      	mov	r7, sl
 8001cbe:	005c      	lsls	r4, r3, #1
 8001cc0:	b5e0      	push	{r5, r6, r7, lr}
 8001cc2:	031f      	lsls	r7, r3, #12
 8001cc4:	0fdb      	lsrs	r3, r3, #31
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <__ledf2+0xc0>)
 8001cca:	030e      	lsls	r6, r1, #12
 8001ccc:	004d      	lsls	r5, r1, #1
 8001cce:	0fc9      	lsrs	r1, r1, #31
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	0b36      	lsrs	r6, r6, #12
 8001cd4:	0d6d      	lsrs	r5, r5, #21
 8001cd6:	468b      	mov	fp, r1
 8001cd8:	4690      	mov	r8, r2
 8001cda:	0b3f      	lsrs	r7, r7, #12
 8001cdc:	0d64      	lsrs	r4, r4, #21
 8001cde:	429d      	cmp	r5, r3
 8001ce0:	d020      	beq.n	8001d24 <__ledf2+0x70>
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <__ledf2+0xc0>)
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	d022      	beq.n	8001d2e <__ledf2+0x7a>
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d112      	bne.n	8001d12 <__ledf2+0x5e>
 8001cec:	4330      	orrs	r0, r6
 8001cee:	4243      	negs	r3, r0
 8001cf0:	4143      	adcs	r3, r0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d01f      	beq.n	8001d38 <__ledf2+0x84>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00c      	beq.n	8001d16 <__ledf2+0x62>
 8001cfc:	464b      	mov	r3, r9
 8001cfe:	2001      	movs	r0, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	4303      	orrs	r3, r0
 8001d04:	0018      	movs	r0, r3
 8001d06:	bc3c      	pop	{r2, r3, r4, r5}
 8001d08:	4690      	mov	r8, r2
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	46a2      	mov	sl, r4
 8001d0e:	46ab      	mov	fp, r5
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d016      	beq.n	8001d44 <__ledf2+0x90>
 8001d16:	45cb      	cmp	fp, r9
 8001d18:	d017      	beq.n	8001d4a <__ledf2+0x96>
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	4259      	negs	r1, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	430b      	orrs	r3, r1
 8001d22:	e7ef      	b.n	8001d04 <__ledf2+0x50>
 8001d24:	0031      	movs	r1, r6
 8001d26:	2302      	movs	r3, #2
 8001d28:	4301      	orrs	r1, r0
 8001d2a:	d1eb      	bne.n	8001d04 <__ledf2+0x50>
 8001d2c:	e7d9      	b.n	8001ce2 <__ledf2+0x2e>
 8001d2e:	0039      	movs	r1, r7
 8001d30:	2302      	movs	r3, #2
 8001d32:	4311      	orrs	r1, r2
 8001d34:	d1e6      	bne.n	8001d04 <__ledf2+0x50>
 8001d36:	e7d7      	b.n	8001ce8 <__ledf2+0x34>
 8001d38:	433a      	orrs	r2, r7
 8001d3a:	d1dd      	bne.n	8001cf8 <__ledf2+0x44>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d0e0      	beq.n	8001d04 <__ledf2+0x50>
 8001d42:	e7ea      	b.n	8001d1a <__ledf2+0x66>
 8001d44:	433a      	orrs	r2, r7
 8001d46:	d1e6      	bne.n	8001d16 <__ledf2+0x62>
 8001d48:	e7e7      	b.n	8001d1a <__ledf2+0x66>
 8001d4a:	42a5      	cmp	r5, r4
 8001d4c:	dce5      	bgt.n	8001d1a <__ledf2+0x66>
 8001d4e:	db05      	blt.n	8001d5c <__ledf2+0xa8>
 8001d50:	42be      	cmp	r6, r7
 8001d52:	d8e2      	bhi.n	8001d1a <__ledf2+0x66>
 8001d54:	d007      	beq.n	8001d66 <__ledf2+0xb2>
 8001d56:	2300      	movs	r3, #0
 8001d58:	42be      	cmp	r6, r7
 8001d5a:	d2d3      	bcs.n	8001d04 <__ledf2+0x50>
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	2301      	movs	r3, #1
 8001d60:	3901      	subs	r1, #1
 8001d62:	430b      	orrs	r3, r1
 8001d64:	e7ce      	b.n	8001d04 <__ledf2+0x50>
 8001d66:	45c4      	cmp	ip, r8
 8001d68:	d8d7      	bhi.n	8001d1a <__ledf2+0x66>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	45c4      	cmp	ip, r8
 8001d6e:	d3f5      	bcc.n	8001d5c <__ledf2+0xa8>
 8001d70:	e7c8      	b.n	8001d04 <__ledf2+0x50>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__aeabi_dmul>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4657      	mov	r7, sl
 8001d7c:	4645      	mov	r5, r8
 8001d7e:	46de      	mov	lr, fp
 8001d80:	464e      	mov	r6, r9
 8001d82:	b5e0      	push	{r5, r6, r7, lr}
 8001d84:	030c      	lsls	r4, r1, #12
 8001d86:	4698      	mov	r8, r3
 8001d88:	004e      	lsls	r6, r1, #1
 8001d8a:	0b23      	lsrs	r3, r4, #12
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	0007      	movs	r7, r0
 8001d90:	4692      	mov	sl, r2
 8001d92:	469b      	mov	fp, r3
 8001d94:	0d76      	lsrs	r6, r6, #21
 8001d96:	0fcd      	lsrs	r5, r1, #31
 8001d98:	2e00      	cmp	r6, #0
 8001d9a:	d06b      	beq.n	8001e74 <__aeabi_dmul+0xfc>
 8001d9c:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <__aeabi_dmul+0x1dc>)
 8001d9e:	429e      	cmp	r6, r3
 8001da0:	d035      	beq.n	8001e0e <__aeabi_dmul+0x96>
 8001da2:	2480      	movs	r4, #128	; 0x80
 8001da4:	465b      	mov	r3, fp
 8001da6:	0f42      	lsrs	r2, r0, #29
 8001da8:	0424      	lsls	r4, r4, #16
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4314      	orrs	r4, r2
 8001dae:	431c      	orrs	r4, r3
 8001db0:	00c3      	lsls	r3, r0, #3
 8001db2:	4699      	mov	r9, r3
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <__aeabi_dmul+0x1e0>)
 8001db6:	46a3      	mov	fp, r4
 8001db8:	469c      	mov	ip, r3
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2700      	movs	r7, #0
 8001dbe:	4466      	add	r6, ip
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	4643      	mov	r3, r8
 8001dc4:	031c      	lsls	r4, r3, #12
 8001dc6:	005a      	lsls	r2, r3, #1
 8001dc8:	0fdb      	lsrs	r3, r3, #31
 8001dca:	4650      	mov	r0, sl
 8001dcc:	0b24      	lsrs	r4, r4, #12
 8001dce:	0d52      	lsrs	r2, r2, #21
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dmul+0x5e>
 8001dd4:	e076      	b.n	8001ec4 <__aeabi_dmul+0x14c>
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <__aeabi_dmul+0x1dc>)
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d06d      	beq.n	8001eb8 <__aeabi_dmul+0x140>
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	0f41      	lsrs	r1, r0, #29
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	430b      	orrs	r3, r1
 8001de4:	495c      	ldr	r1, [pc, #368]	; (8001f58 <__aeabi_dmul+0x1e0>)
 8001de6:	00e4      	lsls	r4, r4, #3
 8001de8:	468c      	mov	ip, r1
 8001dea:	431c      	orrs	r4, r3
 8001dec:	00c3      	lsls	r3, r0, #3
 8001dee:	2000      	movs	r0, #0
 8001df0:	4462      	add	r2, ip
 8001df2:	4641      	mov	r1, r8
 8001df4:	18b6      	adds	r6, r6, r2
 8001df6:	4069      	eors	r1, r5
 8001df8:	1c72      	adds	r2, r6, #1
 8001dfa:	9101      	str	r1, [sp, #4]
 8001dfc:	4694      	mov	ip, r2
 8001dfe:	4307      	orrs	r7, r0
 8001e00:	2f0f      	cmp	r7, #15
 8001e02:	d900      	bls.n	8001e06 <__aeabi_dmul+0x8e>
 8001e04:	e0b0      	b.n	8001f68 <__aeabi_dmul+0x1f0>
 8001e06:	4a55      	ldr	r2, [pc, #340]	; (8001f5c <__aeabi_dmul+0x1e4>)
 8001e08:	00bf      	lsls	r7, r7, #2
 8001e0a:	59d2      	ldr	r2, [r2, r7]
 8001e0c:	4697      	mov	pc, r2
 8001e0e:	465b      	mov	r3, fp
 8001e10:	4303      	orrs	r3, r0
 8001e12:	4699      	mov	r9, r3
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dmul+0xa0>
 8001e16:	e087      	b.n	8001f28 <__aeabi_dmul+0x1b0>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	469b      	mov	fp, r3
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	2708      	movs	r7, #8
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	e7ce      	b.n	8001dc2 <__aeabi_dmul+0x4a>
 8001e24:	4642      	mov	r2, r8
 8001e26:	9201      	str	r2, [sp, #4]
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	d067      	beq.n	8001efc <__aeabi_dmul+0x184>
 8001e2c:	2803      	cmp	r0, #3
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dmul+0xba>
 8001e30:	e20e      	b.n	8002250 <__aeabi_dmul+0x4d8>
 8001e32:	2801      	cmp	r0, #1
 8001e34:	d000      	beq.n	8001e38 <__aeabi_dmul+0xc0>
 8001e36:	e162      	b.n	80020fe <__aeabi_dmul+0x386>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4699      	mov	r9, r3
 8001e40:	9901      	ldr	r1, [sp, #4]
 8001e42:	4001      	ands	r1, r0
 8001e44:	b2cd      	uxtb	r5, r1
 8001e46:	2100      	movs	r1, #0
 8001e48:	0312      	lsls	r2, r2, #12
 8001e4a:	0d0b      	lsrs	r3, r1, #20
 8001e4c:	0b12      	lsrs	r2, r2, #12
 8001e4e:	051b      	lsls	r3, r3, #20
 8001e50:	4313      	orrs	r3, r2
 8001e52:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <__aeabi_dmul+0x1e8>)
 8001e54:	0524      	lsls	r4, r4, #20
 8001e56:	4013      	ands	r3, r2
 8001e58:	431c      	orrs	r4, r3
 8001e5a:	0064      	lsls	r4, r4, #1
 8001e5c:	07ed      	lsls	r5, r5, #31
 8001e5e:	0864      	lsrs	r4, r4, #1
 8001e60:	432c      	orrs	r4, r5
 8001e62:	4648      	mov	r0, r9
 8001e64:	0021      	movs	r1, r4
 8001e66:	b007      	add	sp, #28
 8001e68:	bc3c      	pop	{r2, r3, r4, r5}
 8001e6a:	4690      	mov	r8, r2
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	46a2      	mov	sl, r4
 8001e70:	46ab      	mov	fp, r5
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e74:	4303      	orrs	r3, r0
 8001e76:	4699      	mov	r9, r3
 8001e78:	d04f      	beq.n	8001f1a <__aeabi_dmul+0x1a2>
 8001e7a:	465b      	mov	r3, fp
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dmul+0x10a>
 8001e80:	e189      	b.n	8002196 <__aeabi_dmul+0x41e>
 8001e82:	4658      	mov	r0, fp
 8001e84:	f000 fe60 	bl	8002b48 <__clzsi2>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	3b0b      	subs	r3, #11
 8001e8c:	2b1c      	cmp	r3, #28
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_dmul+0x11a>
 8001e90:	e17a      	b.n	8002188 <__aeabi_dmul+0x410>
 8001e92:	221d      	movs	r2, #29
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	003a      	movs	r2, r7
 8001e98:	0001      	movs	r1, r0
 8001e9a:	465c      	mov	r4, fp
 8001e9c:	40da      	lsrs	r2, r3
 8001e9e:	3908      	subs	r1, #8
 8001ea0:	408c      	lsls	r4, r1
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	408f      	lsls	r7, r1
 8001ea6:	4323      	orrs	r3, r4
 8001ea8:	469b      	mov	fp, r3
 8001eaa:	46b9      	mov	r9, r7
 8001eac:	2300      	movs	r3, #0
 8001eae:	4e2d      	ldr	r6, [pc, #180]	; (8001f64 <__aeabi_dmul+0x1ec>)
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	1a36      	subs	r6, r6, r0
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	e784      	b.n	8001dc2 <__aeabi_dmul+0x4a>
 8001eb8:	4653      	mov	r3, sl
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	d12a      	bne.n	8001f14 <__aeabi_dmul+0x19c>
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	e796      	b.n	8001df2 <__aeabi_dmul+0x7a>
 8001ec4:	4653      	mov	r3, sl
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	d020      	beq.n	8001f0c <__aeabi_dmul+0x194>
 8001eca:	2c00      	cmp	r4, #0
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dmul+0x158>
 8001ece:	e157      	b.n	8002180 <__aeabi_dmul+0x408>
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	f000 fe39 	bl	8002b48 <__clzsi2>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	3b0b      	subs	r3, #11
 8001eda:	2b1c      	cmp	r3, #28
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dmul+0x168>
 8001ede:	e149      	b.n	8002174 <__aeabi_dmul+0x3fc>
 8001ee0:	211d      	movs	r1, #29
 8001ee2:	1acb      	subs	r3, r1, r3
 8001ee4:	4651      	mov	r1, sl
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	40d9      	lsrs	r1, r3
 8001eea:	4653      	mov	r3, sl
 8001eec:	3a08      	subs	r2, #8
 8001eee:	4094      	lsls	r4, r2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	430c      	orrs	r4, r1
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <__aeabi_dmul+0x1ec>)
 8001ef6:	1a12      	subs	r2, r2, r0
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e77a      	b.n	8001df2 <__aeabi_dmul+0x7a>
 8001efc:	2501      	movs	r5, #1
 8001efe:	9b01      	ldr	r3, [sp, #4]
 8001f00:	4c14      	ldr	r4, [pc, #80]	; (8001f54 <__aeabi_dmul+0x1dc>)
 8001f02:	401d      	ands	r5, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	4699      	mov	r9, r3
 8001f0a:	e79c      	b.n	8001e46 <__aeabi_dmul+0xce>
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2001      	movs	r0, #1
 8001f12:	e76e      	b.n	8001df2 <__aeabi_dmul+0x7a>
 8001f14:	4653      	mov	r3, sl
 8001f16:	2003      	movs	r0, #3
 8001f18:	e76b      	b.n	8001df2 <__aeabi_dmul+0x7a>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	2704      	movs	r7, #4
 8001f22:	2600      	movs	r6, #0
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	e74c      	b.n	8001dc2 <__aeabi_dmul+0x4a>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	4681      	mov	r9, r0
 8001f2c:	270c      	movs	r7, #12
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	e747      	b.n	8001dc2 <__aeabi_dmul+0x4a>
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	2300      	movs	r3, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	0312      	lsls	r2, r2, #12
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	4c05      	ldr	r4, [pc, #20]	; (8001f54 <__aeabi_dmul+0x1dc>)
 8001f3e:	e782      	b.n	8001e46 <__aeabi_dmul+0xce>
 8001f40:	465c      	mov	r4, fp
 8001f42:	464b      	mov	r3, r9
 8001f44:	9802      	ldr	r0, [sp, #8]
 8001f46:	e76f      	b.n	8001e28 <__aeabi_dmul+0xb0>
 8001f48:	465c      	mov	r4, fp
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	9501      	str	r5, [sp, #4]
 8001f4e:	9802      	ldr	r0, [sp, #8]
 8001f50:	e76a      	b.n	8001e28 <__aeabi_dmul+0xb0>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	000007ff 	.word	0x000007ff
 8001f58:	fffffc01 	.word	0xfffffc01
 8001f5c:	08009398 	.word	0x08009398
 8001f60:	800fffff 	.word	0x800fffff
 8001f64:	fffffc0d 	.word	0xfffffc0d
 8001f68:	464a      	mov	r2, r9
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	0c17      	lsrs	r7, r2, #16
 8001f6e:	0c1a      	lsrs	r2, r3, #16
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	0c1b      	lsrs	r3, r3, #16
 8001f74:	0408      	lsls	r0, r1, #16
 8001f76:	0019      	movs	r1, r3
 8001f78:	0c00      	lsrs	r0, r0, #16
 8001f7a:	4341      	muls	r1, r0
 8001f7c:	0015      	movs	r5, r2
 8001f7e:	4688      	mov	r8, r1
 8001f80:	0019      	movs	r1, r3
 8001f82:	437d      	muls	r5, r7
 8001f84:	4379      	muls	r1, r7
 8001f86:	9503      	str	r5, [sp, #12]
 8001f88:	4689      	mov	r9, r1
 8001f8a:	0029      	movs	r1, r5
 8001f8c:	0015      	movs	r5, r2
 8001f8e:	4345      	muls	r5, r0
 8001f90:	444d      	add	r5, r9
 8001f92:	9502      	str	r5, [sp, #8]
 8001f94:	4645      	mov	r5, r8
 8001f96:	0c2d      	lsrs	r5, r5, #16
 8001f98:	46aa      	mov	sl, r5
 8001f9a:	9d02      	ldr	r5, [sp, #8]
 8001f9c:	4455      	add	r5, sl
 8001f9e:	45a9      	cmp	r9, r5
 8001fa0:	d906      	bls.n	8001fb0 <__aeabi_dmul+0x238>
 8001fa2:	468a      	mov	sl, r1
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0249      	lsls	r1, r1, #9
 8001fa8:	4689      	mov	r9, r1
 8001faa:	44ca      	add	sl, r9
 8001fac:	4651      	mov	r1, sl
 8001fae:	9103      	str	r1, [sp, #12]
 8001fb0:	0c29      	lsrs	r1, r5, #16
 8001fb2:	9104      	str	r1, [sp, #16]
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	0409      	lsls	r1, r1, #16
 8001fb8:	042d      	lsls	r5, r5, #16
 8001fba:	0c09      	lsrs	r1, r1, #16
 8001fbc:	4688      	mov	r8, r1
 8001fbe:	0029      	movs	r1, r5
 8001fc0:	0c25      	lsrs	r5, r4, #16
 8001fc2:	0424      	lsls	r4, r4, #16
 8001fc4:	4441      	add	r1, r8
 8001fc6:	0c24      	lsrs	r4, r4, #16
 8001fc8:	9105      	str	r1, [sp, #20]
 8001fca:	0021      	movs	r1, r4
 8001fcc:	4341      	muls	r1, r0
 8001fce:	4688      	mov	r8, r1
 8001fd0:	0021      	movs	r1, r4
 8001fd2:	4379      	muls	r1, r7
 8001fd4:	468a      	mov	sl, r1
 8001fd6:	4368      	muls	r0, r5
 8001fd8:	4641      	mov	r1, r8
 8001fda:	4450      	add	r0, sl
 8001fdc:	4681      	mov	r9, r0
 8001fde:	0c08      	lsrs	r0, r1, #16
 8001fe0:	4448      	add	r0, r9
 8001fe2:	436f      	muls	r7, r5
 8001fe4:	4582      	cmp	sl, r0
 8001fe6:	d903      	bls.n	8001ff0 <__aeabi_dmul+0x278>
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0249      	lsls	r1, r1, #9
 8001fec:	4689      	mov	r9, r1
 8001fee:	444f      	add	r7, r9
 8001ff0:	0c01      	lsrs	r1, r0, #16
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	0039      	movs	r1, r7
 8001ff6:	4449      	add	r1, r9
 8001ff8:	9102      	str	r1, [sp, #8]
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	040f      	lsls	r7, r1, #16
 8001ffe:	9904      	ldr	r1, [sp, #16]
 8002000:	0c3f      	lsrs	r7, r7, #16
 8002002:	4688      	mov	r8, r1
 8002004:	0400      	lsls	r0, r0, #16
 8002006:	19c0      	adds	r0, r0, r7
 8002008:	4480      	add	r8, r0
 800200a:	4641      	mov	r1, r8
 800200c:	9104      	str	r1, [sp, #16]
 800200e:	4659      	mov	r1, fp
 8002010:	0c0f      	lsrs	r7, r1, #16
 8002012:	0409      	lsls	r1, r1, #16
 8002014:	0c09      	lsrs	r1, r1, #16
 8002016:	4688      	mov	r8, r1
 8002018:	4359      	muls	r1, r3
 800201a:	468a      	mov	sl, r1
 800201c:	0039      	movs	r1, r7
 800201e:	4351      	muls	r1, r2
 8002020:	4689      	mov	r9, r1
 8002022:	4641      	mov	r1, r8
 8002024:	434a      	muls	r2, r1
 8002026:	4651      	mov	r1, sl
 8002028:	0c09      	lsrs	r1, r1, #16
 800202a:	468b      	mov	fp, r1
 800202c:	437b      	muls	r3, r7
 800202e:	18d2      	adds	r2, r2, r3
 8002030:	445a      	add	r2, fp
 8002032:	4293      	cmp	r3, r2
 8002034:	d903      	bls.n	800203e <__aeabi_dmul+0x2c6>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	469b      	mov	fp, r3
 800203c:	44d9      	add	r9, fp
 800203e:	4651      	mov	r1, sl
 8002040:	0409      	lsls	r1, r1, #16
 8002042:	0c09      	lsrs	r1, r1, #16
 8002044:	468a      	mov	sl, r1
 8002046:	4641      	mov	r1, r8
 8002048:	4361      	muls	r1, r4
 800204a:	437c      	muls	r4, r7
 800204c:	0c13      	lsrs	r3, r2, #16
 800204e:	0412      	lsls	r2, r2, #16
 8002050:	444b      	add	r3, r9
 8002052:	4452      	add	r2, sl
 8002054:	46a1      	mov	r9, r4
 8002056:	468a      	mov	sl, r1
 8002058:	003c      	movs	r4, r7
 800205a:	4641      	mov	r1, r8
 800205c:	436c      	muls	r4, r5
 800205e:	434d      	muls	r5, r1
 8002060:	4651      	mov	r1, sl
 8002062:	444d      	add	r5, r9
 8002064:	0c0f      	lsrs	r7, r1, #16
 8002066:	197d      	adds	r5, r7, r5
 8002068:	45a9      	cmp	r9, r5
 800206a:	d903      	bls.n	8002074 <__aeabi_dmul+0x2fc>
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0249      	lsls	r1, r1, #9
 8002070:	4688      	mov	r8, r1
 8002072:	4444      	add	r4, r8
 8002074:	9f04      	ldr	r7, [sp, #16]
 8002076:	9903      	ldr	r1, [sp, #12]
 8002078:	46b8      	mov	r8, r7
 800207a:	4441      	add	r1, r8
 800207c:	468b      	mov	fp, r1
 800207e:	4583      	cmp	fp, r0
 8002080:	4180      	sbcs	r0, r0
 8002082:	4241      	negs	r1, r0
 8002084:	4688      	mov	r8, r1
 8002086:	4651      	mov	r1, sl
 8002088:	0408      	lsls	r0, r1, #16
 800208a:	042f      	lsls	r7, r5, #16
 800208c:	0c00      	lsrs	r0, r0, #16
 800208e:	183f      	adds	r7, r7, r0
 8002090:	4658      	mov	r0, fp
 8002092:	9902      	ldr	r1, [sp, #8]
 8002094:	1810      	adds	r0, r2, r0
 8002096:	4689      	mov	r9, r1
 8002098:	4290      	cmp	r0, r2
 800209a:	4192      	sbcs	r2, r2
 800209c:	444f      	add	r7, r9
 800209e:	46ba      	mov	sl, r7
 80020a0:	4252      	negs	r2, r2
 80020a2:	4699      	mov	r9, r3
 80020a4:	4693      	mov	fp, r2
 80020a6:	44c2      	add	sl, r8
 80020a8:	44d1      	add	r9, sl
 80020aa:	44cb      	add	fp, r9
 80020ac:	428f      	cmp	r7, r1
 80020ae:	41bf      	sbcs	r7, r7
 80020b0:	45c2      	cmp	sl, r8
 80020b2:	4189      	sbcs	r1, r1
 80020b4:	4599      	cmp	r9, r3
 80020b6:	419b      	sbcs	r3, r3
 80020b8:	4593      	cmp	fp, r2
 80020ba:	4192      	sbcs	r2, r2
 80020bc:	427f      	negs	r7, r7
 80020be:	4249      	negs	r1, r1
 80020c0:	0c2d      	lsrs	r5, r5, #16
 80020c2:	4252      	negs	r2, r2
 80020c4:	430f      	orrs	r7, r1
 80020c6:	425b      	negs	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	197f      	adds	r7, r7, r5
 80020cc:	18ff      	adds	r7, r7, r3
 80020ce:	465b      	mov	r3, fp
 80020d0:	193c      	adds	r4, r7, r4
 80020d2:	0ddb      	lsrs	r3, r3, #23
 80020d4:	9a05      	ldr	r2, [sp, #20]
 80020d6:	0264      	lsls	r4, r4, #9
 80020d8:	431c      	orrs	r4, r3
 80020da:	0243      	lsls	r3, r0, #9
 80020dc:	4313      	orrs	r3, r2
 80020de:	1e5d      	subs	r5, r3, #1
 80020e0:	41ab      	sbcs	r3, r5
 80020e2:	465a      	mov	r2, fp
 80020e4:	0dc0      	lsrs	r0, r0, #23
 80020e6:	4303      	orrs	r3, r0
 80020e8:	0252      	lsls	r2, r2, #9
 80020ea:	4313      	orrs	r3, r2
 80020ec:	01e2      	lsls	r2, r4, #7
 80020ee:	d556      	bpl.n	800219e <__aeabi_dmul+0x426>
 80020f0:	2001      	movs	r0, #1
 80020f2:	085a      	lsrs	r2, r3, #1
 80020f4:	4003      	ands	r3, r0
 80020f6:	4313      	orrs	r3, r2
 80020f8:	07e2      	lsls	r2, r4, #31
 80020fa:	4313      	orrs	r3, r2
 80020fc:	0864      	lsrs	r4, r4, #1
 80020fe:	485a      	ldr	r0, [pc, #360]	; (8002268 <__aeabi_dmul+0x4f0>)
 8002100:	4460      	add	r0, ip
 8002102:	2800      	cmp	r0, #0
 8002104:	dd4d      	ble.n	80021a2 <__aeabi_dmul+0x42a>
 8002106:	075a      	lsls	r2, r3, #29
 8002108:	d009      	beq.n	800211e <__aeabi_dmul+0x3a6>
 800210a:	220f      	movs	r2, #15
 800210c:	401a      	ands	r2, r3
 800210e:	2a04      	cmp	r2, #4
 8002110:	d005      	beq.n	800211e <__aeabi_dmul+0x3a6>
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	429a      	cmp	r2, r3
 8002116:	419b      	sbcs	r3, r3
 8002118:	425b      	negs	r3, r3
 800211a:	18e4      	adds	r4, r4, r3
 800211c:	0013      	movs	r3, r2
 800211e:	01e2      	lsls	r2, r4, #7
 8002120:	d504      	bpl.n	800212c <__aeabi_dmul+0x3b4>
 8002122:	2080      	movs	r0, #128	; 0x80
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <__aeabi_dmul+0x4f4>)
 8002126:	00c0      	lsls	r0, r0, #3
 8002128:	4014      	ands	r4, r2
 800212a:	4460      	add	r0, ip
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <__aeabi_dmul+0x4f8>)
 800212e:	4290      	cmp	r0, r2
 8002130:	dd00      	ble.n	8002134 <__aeabi_dmul+0x3bc>
 8002132:	e6e3      	b.n	8001efc <__aeabi_dmul+0x184>
 8002134:	2501      	movs	r5, #1
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	0762      	lsls	r2, r4, #29
 800213a:	431a      	orrs	r2, r3
 800213c:	0264      	lsls	r4, r4, #9
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	4691      	mov	r9, r2
 8002142:	0b22      	lsrs	r2, r4, #12
 8002144:	0544      	lsls	r4, r0, #21
 8002146:	0d64      	lsrs	r4, r4, #21
 8002148:	401d      	ands	r5, r3
 800214a:	e67c      	b.n	8001e46 <__aeabi_dmul+0xce>
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	4659      	mov	r1, fp
 8002150:	0312      	lsls	r2, r2, #12
 8002152:	4211      	tst	r1, r2
 8002154:	d008      	beq.n	8002168 <__aeabi_dmul+0x3f0>
 8002156:	4214      	tst	r4, r2
 8002158:	d106      	bne.n	8002168 <__aeabi_dmul+0x3f0>
 800215a:	4322      	orrs	r2, r4
 800215c:	0312      	lsls	r2, r2, #12
 800215e:	0b12      	lsrs	r2, r2, #12
 8002160:	4645      	mov	r5, r8
 8002162:	4699      	mov	r9, r3
 8002164:	4c43      	ldr	r4, [pc, #268]	; (8002274 <__aeabi_dmul+0x4fc>)
 8002166:	e66e      	b.n	8001e46 <__aeabi_dmul+0xce>
 8002168:	465b      	mov	r3, fp
 800216a:	431a      	orrs	r2, r3
 800216c:	0312      	lsls	r2, r2, #12
 800216e:	0b12      	lsrs	r2, r2, #12
 8002170:	4c40      	ldr	r4, [pc, #256]	; (8002274 <__aeabi_dmul+0x4fc>)
 8002172:	e668      	b.n	8001e46 <__aeabi_dmul+0xce>
 8002174:	0003      	movs	r3, r0
 8002176:	4654      	mov	r4, sl
 8002178:	3b28      	subs	r3, #40	; 0x28
 800217a:	409c      	lsls	r4, r3
 800217c:	2300      	movs	r3, #0
 800217e:	e6b9      	b.n	8001ef4 <__aeabi_dmul+0x17c>
 8002180:	f000 fce2 	bl	8002b48 <__clzsi2>
 8002184:	3020      	adds	r0, #32
 8002186:	e6a6      	b.n	8001ed6 <__aeabi_dmul+0x15e>
 8002188:	0003      	movs	r3, r0
 800218a:	3b28      	subs	r3, #40	; 0x28
 800218c:	409f      	lsls	r7, r3
 800218e:	2300      	movs	r3, #0
 8002190:	46bb      	mov	fp, r7
 8002192:	4699      	mov	r9, r3
 8002194:	e68a      	b.n	8001eac <__aeabi_dmul+0x134>
 8002196:	f000 fcd7 	bl	8002b48 <__clzsi2>
 800219a:	3020      	adds	r0, #32
 800219c:	e674      	b.n	8001e88 <__aeabi_dmul+0x110>
 800219e:	46b4      	mov	ip, r6
 80021a0:	e7ad      	b.n	80020fe <__aeabi_dmul+0x386>
 80021a2:	2501      	movs	r5, #1
 80021a4:	1a2a      	subs	r2, r5, r0
 80021a6:	2a38      	cmp	r2, #56	; 0x38
 80021a8:	dd06      	ble.n	80021b8 <__aeabi_dmul+0x440>
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	2400      	movs	r4, #0
 80021ae:	401d      	ands	r5, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	2200      	movs	r2, #0
 80021b4:	4699      	mov	r9, r3
 80021b6:	e646      	b.n	8001e46 <__aeabi_dmul+0xce>
 80021b8:	2a1f      	cmp	r2, #31
 80021ba:	dc21      	bgt.n	8002200 <__aeabi_dmul+0x488>
 80021bc:	2520      	movs	r5, #32
 80021be:	0020      	movs	r0, r4
 80021c0:	1aad      	subs	r5, r5, r2
 80021c2:	001e      	movs	r6, r3
 80021c4:	40ab      	lsls	r3, r5
 80021c6:	40a8      	lsls	r0, r5
 80021c8:	40d6      	lsrs	r6, r2
 80021ca:	1e5d      	subs	r5, r3, #1
 80021cc:	41ab      	sbcs	r3, r5
 80021ce:	4330      	orrs	r0, r6
 80021d0:	4318      	orrs	r0, r3
 80021d2:	40d4      	lsrs	r4, r2
 80021d4:	0743      	lsls	r3, r0, #29
 80021d6:	d009      	beq.n	80021ec <__aeabi_dmul+0x474>
 80021d8:	230f      	movs	r3, #15
 80021da:	4003      	ands	r3, r0
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d005      	beq.n	80021ec <__aeabi_dmul+0x474>
 80021e0:	0003      	movs	r3, r0
 80021e2:	1d18      	adds	r0, r3, #4
 80021e4:	4298      	cmp	r0, r3
 80021e6:	419b      	sbcs	r3, r3
 80021e8:	425b      	negs	r3, r3
 80021ea:	18e4      	adds	r4, r4, r3
 80021ec:	0223      	lsls	r3, r4, #8
 80021ee:	d521      	bpl.n	8002234 <__aeabi_dmul+0x4bc>
 80021f0:	2501      	movs	r5, #1
 80021f2:	9b01      	ldr	r3, [sp, #4]
 80021f4:	2401      	movs	r4, #1
 80021f6:	401d      	ands	r5, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	4699      	mov	r9, r3
 80021fe:	e622      	b.n	8001e46 <__aeabi_dmul+0xce>
 8002200:	251f      	movs	r5, #31
 8002202:	0021      	movs	r1, r4
 8002204:	426d      	negs	r5, r5
 8002206:	1a28      	subs	r0, r5, r0
 8002208:	40c1      	lsrs	r1, r0
 800220a:	0008      	movs	r0, r1
 800220c:	2a20      	cmp	r2, #32
 800220e:	d01d      	beq.n	800224c <__aeabi_dmul+0x4d4>
 8002210:	355f      	adds	r5, #95	; 0x5f
 8002212:	1aaa      	subs	r2, r5, r2
 8002214:	4094      	lsls	r4, r2
 8002216:	4323      	orrs	r3, r4
 8002218:	1e5c      	subs	r4, r3, #1
 800221a:	41a3      	sbcs	r3, r4
 800221c:	2507      	movs	r5, #7
 800221e:	4303      	orrs	r3, r0
 8002220:	401d      	ands	r5, r3
 8002222:	2200      	movs	r2, #0
 8002224:	2d00      	cmp	r5, #0
 8002226:	d009      	beq.n	800223c <__aeabi_dmul+0x4c4>
 8002228:	220f      	movs	r2, #15
 800222a:	2400      	movs	r4, #0
 800222c:	401a      	ands	r2, r3
 800222e:	0018      	movs	r0, r3
 8002230:	2a04      	cmp	r2, #4
 8002232:	d1d6      	bne.n	80021e2 <__aeabi_dmul+0x46a>
 8002234:	0003      	movs	r3, r0
 8002236:	0765      	lsls	r5, r4, #29
 8002238:	0264      	lsls	r4, r4, #9
 800223a:	0b22      	lsrs	r2, r4, #12
 800223c:	08db      	lsrs	r3, r3, #3
 800223e:	432b      	orrs	r3, r5
 8002240:	2501      	movs	r5, #1
 8002242:	4699      	mov	r9, r3
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	2400      	movs	r4, #0
 8002248:	401d      	ands	r5, r3
 800224a:	e5fc      	b.n	8001e46 <__aeabi_dmul+0xce>
 800224c:	2400      	movs	r4, #0
 800224e:	e7e2      	b.n	8002216 <__aeabi_dmul+0x49e>
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	2501      	movs	r5, #1
 8002254:	0312      	lsls	r2, r2, #12
 8002256:	4322      	orrs	r2, r4
 8002258:	9901      	ldr	r1, [sp, #4]
 800225a:	0312      	lsls	r2, r2, #12
 800225c:	0b12      	lsrs	r2, r2, #12
 800225e:	400d      	ands	r5, r1
 8002260:	4699      	mov	r9, r3
 8002262:	4c04      	ldr	r4, [pc, #16]	; (8002274 <__aeabi_dmul+0x4fc>)
 8002264:	e5ef      	b.n	8001e46 <__aeabi_dmul+0xce>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	000003ff 	.word	0x000003ff
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	000007fe 	.word	0x000007fe
 8002274:	000007ff 	.word	0x000007ff

08002278 <__aeabi_dsub>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4646      	mov	r6, r8
 800227c:	46d6      	mov	lr, sl
 800227e:	464f      	mov	r7, r9
 8002280:	030c      	lsls	r4, r1, #12
 8002282:	b5c0      	push	{r6, r7, lr}
 8002284:	0fcd      	lsrs	r5, r1, #31
 8002286:	004e      	lsls	r6, r1, #1
 8002288:	0a61      	lsrs	r1, r4, #9
 800228a:	0f44      	lsrs	r4, r0, #29
 800228c:	430c      	orrs	r4, r1
 800228e:	00c1      	lsls	r1, r0, #3
 8002290:	0058      	lsls	r0, r3, #1
 8002292:	0d40      	lsrs	r0, r0, #21
 8002294:	4684      	mov	ip, r0
 8002296:	468a      	mov	sl, r1
 8002298:	000f      	movs	r7, r1
 800229a:	0319      	lsls	r1, r3, #12
 800229c:	0f50      	lsrs	r0, r2, #29
 800229e:	0a49      	lsrs	r1, r1, #9
 80022a0:	4301      	orrs	r1, r0
 80022a2:	48c6      	ldr	r0, [pc, #792]	; (80025bc <__aeabi_dsub+0x344>)
 80022a4:	0d76      	lsrs	r6, r6, #21
 80022a6:	46a8      	mov	r8, r5
 80022a8:	0fdb      	lsrs	r3, r3, #31
 80022aa:	00d2      	lsls	r2, r2, #3
 80022ac:	4584      	cmp	ip, r0
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dsub+0x3a>
 80022b0:	e0d8      	b.n	8002464 <__aeabi_dsub+0x1ec>
 80022b2:	2001      	movs	r0, #1
 80022b4:	4043      	eors	r3, r0
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x44>
 80022ba:	e0a6      	b.n	800240a <__aeabi_dsub+0x192>
 80022bc:	4660      	mov	r0, ip
 80022be:	1a35      	subs	r5, r6, r0
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	dc00      	bgt.n	80022c6 <__aeabi_dsub+0x4e>
 80022c4:	e105      	b.n	80024d2 <__aeabi_dsub+0x25a>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d110      	bne.n	80022ec <__aeabi_dsub+0x74>
 80022ca:	000b      	movs	r3, r1
 80022cc:	4313      	orrs	r3, r2
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x5a>
 80022d0:	e0d7      	b.n	8002482 <__aeabi_dsub+0x20a>
 80022d2:	1e6b      	subs	r3, r5, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d000      	beq.n	80022da <__aeabi_dsub+0x62>
 80022d8:	e14b      	b.n	8002572 <__aeabi_dsub+0x2fa>
 80022da:	4653      	mov	r3, sl
 80022dc:	1a9f      	subs	r7, r3, r2
 80022de:	45ba      	cmp	sl, r7
 80022e0:	4180      	sbcs	r0, r0
 80022e2:	1a64      	subs	r4, r4, r1
 80022e4:	4240      	negs	r0, r0
 80022e6:	1a24      	subs	r4, r4, r0
 80022e8:	2601      	movs	r6, #1
 80022ea:	e01e      	b.n	800232a <__aeabi_dsub+0xb2>
 80022ec:	4bb3      	ldr	r3, [pc, #716]	; (80025bc <__aeabi_dsub+0x344>)
 80022ee:	429e      	cmp	r6, r3
 80022f0:	d048      	beq.n	8002384 <__aeabi_dsub+0x10c>
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	4319      	orrs	r1, r3
 80022f8:	2d38      	cmp	r5, #56	; 0x38
 80022fa:	dd00      	ble.n	80022fe <__aeabi_dsub+0x86>
 80022fc:	e119      	b.n	8002532 <__aeabi_dsub+0x2ba>
 80022fe:	2d1f      	cmp	r5, #31
 8002300:	dd00      	ble.n	8002304 <__aeabi_dsub+0x8c>
 8002302:	e14c      	b.n	800259e <__aeabi_dsub+0x326>
 8002304:	2320      	movs	r3, #32
 8002306:	000f      	movs	r7, r1
 8002308:	1b5b      	subs	r3, r3, r5
 800230a:	0010      	movs	r0, r2
 800230c:	409a      	lsls	r2, r3
 800230e:	409f      	lsls	r7, r3
 8002310:	40e8      	lsrs	r0, r5
 8002312:	1e53      	subs	r3, r2, #1
 8002314:	419a      	sbcs	r2, r3
 8002316:	40e9      	lsrs	r1, r5
 8002318:	4307      	orrs	r7, r0
 800231a:	4317      	orrs	r7, r2
 800231c:	4653      	mov	r3, sl
 800231e:	1bdf      	subs	r7, r3, r7
 8002320:	1a61      	subs	r1, r4, r1
 8002322:	45ba      	cmp	sl, r7
 8002324:	41a4      	sbcs	r4, r4
 8002326:	4264      	negs	r4, r4
 8002328:	1b0c      	subs	r4, r1, r4
 800232a:	0223      	lsls	r3, r4, #8
 800232c:	d400      	bmi.n	8002330 <__aeabi_dsub+0xb8>
 800232e:	e0c5      	b.n	80024bc <__aeabi_dsub+0x244>
 8002330:	0264      	lsls	r4, r4, #9
 8002332:	0a65      	lsrs	r5, r4, #9
 8002334:	2d00      	cmp	r5, #0
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0xc2>
 8002338:	e0f6      	b.n	8002528 <__aeabi_dsub+0x2b0>
 800233a:	0028      	movs	r0, r5
 800233c:	f000 fc04 	bl	8002b48 <__clzsi2>
 8002340:	0003      	movs	r3, r0
 8002342:	3b08      	subs	r3, #8
 8002344:	2b1f      	cmp	r3, #31
 8002346:	dd00      	ble.n	800234a <__aeabi_dsub+0xd2>
 8002348:	e0e9      	b.n	800251e <__aeabi_dsub+0x2a6>
 800234a:	2220      	movs	r2, #32
 800234c:	003c      	movs	r4, r7
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	409d      	lsls	r5, r3
 8002352:	40d4      	lsrs	r4, r2
 8002354:	409f      	lsls	r7, r3
 8002356:	4325      	orrs	r5, r4
 8002358:	429e      	cmp	r6, r3
 800235a:	dd00      	ble.n	800235e <__aeabi_dsub+0xe6>
 800235c:	e0db      	b.n	8002516 <__aeabi_dsub+0x29e>
 800235e:	1b9e      	subs	r6, r3, r6
 8002360:	1c73      	adds	r3, r6, #1
 8002362:	2b1f      	cmp	r3, #31
 8002364:	dd00      	ble.n	8002368 <__aeabi_dsub+0xf0>
 8002366:	e10a      	b.n	800257e <__aeabi_dsub+0x306>
 8002368:	2220      	movs	r2, #32
 800236a:	0038      	movs	r0, r7
 800236c:	1ad2      	subs	r2, r2, r3
 800236e:	0029      	movs	r1, r5
 8002370:	4097      	lsls	r7, r2
 8002372:	002c      	movs	r4, r5
 8002374:	4091      	lsls	r1, r2
 8002376:	40d8      	lsrs	r0, r3
 8002378:	1e7a      	subs	r2, r7, #1
 800237a:	4197      	sbcs	r7, r2
 800237c:	40dc      	lsrs	r4, r3
 800237e:	2600      	movs	r6, #0
 8002380:	4301      	orrs	r1, r0
 8002382:	430f      	orrs	r7, r1
 8002384:	077b      	lsls	r3, r7, #29
 8002386:	d009      	beq.n	800239c <__aeabi_dsub+0x124>
 8002388:	230f      	movs	r3, #15
 800238a:	403b      	ands	r3, r7
 800238c:	2b04      	cmp	r3, #4
 800238e:	d005      	beq.n	800239c <__aeabi_dsub+0x124>
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	42bb      	cmp	r3, r7
 8002394:	41bf      	sbcs	r7, r7
 8002396:	427f      	negs	r7, r7
 8002398:	19e4      	adds	r4, r4, r7
 800239a:	001f      	movs	r7, r3
 800239c:	0223      	lsls	r3, r4, #8
 800239e:	d525      	bpl.n	80023ec <__aeabi_dsub+0x174>
 80023a0:	4b86      	ldr	r3, [pc, #536]	; (80025bc <__aeabi_dsub+0x344>)
 80023a2:	3601      	adds	r6, #1
 80023a4:	429e      	cmp	r6, r3
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x132>
 80023a8:	e0af      	b.n	800250a <__aeabi_dsub+0x292>
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <__aeabi_dsub+0x348>)
 80023ac:	2501      	movs	r5, #1
 80023ae:	401c      	ands	r4, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	0762      	lsls	r2, r4, #29
 80023b4:	08ff      	lsrs	r7, r7, #3
 80023b6:	0264      	lsls	r4, r4, #9
 80023b8:	0576      	lsls	r6, r6, #21
 80023ba:	4317      	orrs	r7, r2
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	0d76      	lsrs	r6, r6, #21
 80023c0:	401d      	ands	r5, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	0324      	lsls	r4, r4, #12
 80023c6:	0b23      	lsrs	r3, r4, #12
 80023c8:	0d0c      	lsrs	r4, r1, #20
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <__aeabi_dsub+0x34c>)
 80023cc:	0524      	lsls	r4, r4, #20
 80023ce:	431c      	orrs	r4, r3
 80023d0:	4014      	ands	r4, r2
 80023d2:	0533      	lsls	r3, r6, #20
 80023d4:	4323      	orrs	r3, r4
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	07ed      	lsls	r5, r5, #31
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	432b      	orrs	r3, r5
 80023de:	0038      	movs	r0, r7
 80023e0:	0019      	movs	r1, r3
 80023e2:	bc1c      	pop	{r2, r3, r4}
 80023e4:	4690      	mov	r8, r2
 80023e6:	4699      	mov	r9, r3
 80023e8:	46a2      	mov	sl, r4
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	2501      	movs	r5, #1
 80023ee:	4643      	mov	r3, r8
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ff      	lsrs	r7, r7, #3
 80023f4:	4317      	orrs	r7, r2
 80023f6:	08e4      	lsrs	r4, r4, #3
 80023f8:	401d      	ands	r5, r3
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <__aeabi_dsub+0x344>)
 80023fc:	429e      	cmp	r6, r3
 80023fe:	d036      	beq.n	800246e <__aeabi_dsub+0x1f6>
 8002400:	0324      	lsls	r4, r4, #12
 8002402:	0576      	lsls	r6, r6, #21
 8002404:	0b24      	lsrs	r4, r4, #12
 8002406:	0d76      	lsrs	r6, r6, #21
 8002408:	e7db      	b.n	80023c2 <__aeabi_dsub+0x14a>
 800240a:	4663      	mov	r3, ip
 800240c:	1af3      	subs	r3, r6, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	dc00      	bgt.n	8002414 <__aeabi_dsub+0x19c>
 8002412:	e094      	b.n	800253e <__aeabi_dsub+0x2c6>
 8002414:	4660      	mov	r0, ip
 8002416:	2800      	cmp	r0, #0
 8002418:	d035      	beq.n	8002486 <__aeabi_dsub+0x20e>
 800241a:	4868      	ldr	r0, [pc, #416]	; (80025bc <__aeabi_dsub+0x344>)
 800241c:	4286      	cmp	r6, r0
 800241e:	d0b1      	beq.n	8002384 <__aeabi_dsub+0x10c>
 8002420:	2780      	movs	r7, #128	; 0x80
 8002422:	043f      	lsls	r7, r7, #16
 8002424:	4339      	orrs	r1, r7
 8002426:	2b38      	cmp	r3, #56	; 0x38
 8002428:	dc00      	bgt.n	800242c <__aeabi_dsub+0x1b4>
 800242a:	e0fd      	b.n	8002628 <__aeabi_dsub+0x3b0>
 800242c:	430a      	orrs	r2, r1
 800242e:	0017      	movs	r7, r2
 8002430:	2100      	movs	r1, #0
 8002432:	1e7a      	subs	r2, r7, #1
 8002434:	4197      	sbcs	r7, r2
 8002436:	4457      	add	r7, sl
 8002438:	4557      	cmp	r7, sl
 800243a:	4180      	sbcs	r0, r0
 800243c:	1909      	adds	r1, r1, r4
 800243e:	4244      	negs	r4, r0
 8002440:	190c      	adds	r4, r1, r4
 8002442:	0223      	lsls	r3, r4, #8
 8002444:	d53a      	bpl.n	80024bc <__aeabi_dsub+0x244>
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <__aeabi_dsub+0x344>)
 8002448:	3601      	adds	r6, #1
 800244a:	429e      	cmp	r6, r3
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x1d8>
 800244e:	e14b      	b.n	80026e8 <__aeabi_dsub+0x470>
 8002450:	2201      	movs	r2, #1
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <__aeabi_dsub+0x348>)
 8002454:	401c      	ands	r4, r3
 8002456:	087b      	lsrs	r3, r7, #1
 8002458:	4017      	ands	r7, r2
 800245a:	431f      	orrs	r7, r3
 800245c:	07e2      	lsls	r2, r4, #31
 800245e:	4317      	orrs	r7, r2
 8002460:	0864      	lsrs	r4, r4, #1
 8002462:	e78f      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002464:	0008      	movs	r0, r1
 8002466:	4310      	orrs	r0, r2
 8002468:	d000      	beq.n	800246c <__aeabi_dsub+0x1f4>
 800246a:	e724      	b.n	80022b6 <__aeabi_dsub+0x3e>
 800246c:	e721      	b.n	80022b2 <__aeabi_dsub+0x3a>
 800246e:	0023      	movs	r3, r4
 8002470:	433b      	orrs	r3, r7
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x1fe>
 8002474:	e1b9      	b.n	80027ea <__aeabi_dsub+0x572>
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	0312      	lsls	r2, r2, #12
 800247a:	4314      	orrs	r4, r2
 800247c:	0324      	lsls	r4, r4, #12
 800247e:	0b24      	lsrs	r4, r4, #12
 8002480:	e79f      	b.n	80023c2 <__aeabi_dsub+0x14a>
 8002482:	002e      	movs	r6, r5
 8002484:	e77e      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002486:	0008      	movs	r0, r1
 8002488:	4310      	orrs	r0, r2
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x216>
 800248c:	e0ca      	b.n	8002624 <__aeabi_dsub+0x3ac>
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	4684      	mov	ip, r0
 8002492:	2800      	cmp	r0, #0
 8002494:	d000      	beq.n	8002498 <__aeabi_dsub+0x220>
 8002496:	e0e7      	b.n	8002668 <__aeabi_dsub+0x3f0>
 8002498:	4452      	add	r2, sl
 800249a:	4552      	cmp	r2, sl
 800249c:	4180      	sbcs	r0, r0
 800249e:	1864      	adds	r4, r4, r1
 80024a0:	4240      	negs	r0, r0
 80024a2:	1824      	adds	r4, r4, r0
 80024a4:	0017      	movs	r7, r2
 80024a6:	2601      	movs	r6, #1
 80024a8:	0223      	lsls	r3, r4, #8
 80024aa:	d507      	bpl.n	80024bc <__aeabi_dsub+0x244>
 80024ac:	2602      	movs	r6, #2
 80024ae:	e7cf      	b.n	8002450 <__aeabi_dsub+0x1d8>
 80024b0:	4664      	mov	r4, ip
 80024b2:	432c      	orrs	r4, r5
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x240>
 80024b6:	e1b3      	b.n	8002820 <__aeabi_dsub+0x5a8>
 80024b8:	002c      	movs	r4, r5
 80024ba:	4667      	mov	r7, ip
 80024bc:	077b      	lsls	r3, r7, #29
 80024be:	d000      	beq.n	80024c2 <__aeabi_dsub+0x24a>
 80024c0:	e762      	b.n	8002388 <__aeabi_dsub+0x110>
 80024c2:	0763      	lsls	r3, r4, #29
 80024c4:	08ff      	lsrs	r7, r7, #3
 80024c6:	431f      	orrs	r7, r3
 80024c8:	2501      	movs	r5, #1
 80024ca:	4643      	mov	r3, r8
 80024cc:	08e4      	lsrs	r4, r4, #3
 80024ce:	401d      	ands	r5, r3
 80024d0:	e793      	b.n	80023fa <__aeabi_dsub+0x182>
 80024d2:	2d00      	cmp	r5, #0
 80024d4:	d178      	bne.n	80025c8 <__aeabi_dsub+0x350>
 80024d6:	1c75      	adds	r5, r6, #1
 80024d8:	056d      	lsls	r5, r5, #21
 80024da:	0d6d      	lsrs	r5, r5, #21
 80024dc:	2d01      	cmp	r5, #1
 80024de:	dc00      	bgt.n	80024e2 <__aeabi_dsub+0x26a>
 80024e0:	e0f2      	b.n	80026c8 <__aeabi_dsub+0x450>
 80024e2:	4650      	mov	r0, sl
 80024e4:	1a80      	subs	r0, r0, r2
 80024e6:	4582      	cmp	sl, r0
 80024e8:	41bf      	sbcs	r7, r7
 80024ea:	1a65      	subs	r5, r4, r1
 80024ec:	427f      	negs	r7, r7
 80024ee:	1bed      	subs	r5, r5, r7
 80024f0:	4684      	mov	ip, r0
 80024f2:	0228      	lsls	r0, r5, #8
 80024f4:	d400      	bmi.n	80024f8 <__aeabi_dsub+0x280>
 80024f6:	e08c      	b.n	8002612 <__aeabi_dsub+0x39a>
 80024f8:	4650      	mov	r0, sl
 80024fa:	1a17      	subs	r7, r2, r0
 80024fc:	42ba      	cmp	r2, r7
 80024fe:	4192      	sbcs	r2, r2
 8002500:	1b0c      	subs	r4, r1, r4
 8002502:	4255      	negs	r5, r2
 8002504:	1b65      	subs	r5, r4, r5
 8002506:	4698      	mov	r8, r3
 8002508:	e714      	b.n	8002334 <__aeabi_dsub+0xbc>
 800250a:	2501      	movs	r5, #1
 800250c:	4643      	mov	r3, r8
 800250e:	2400      	movs	r4, #0
 8002510:	401d      	ands	r5, r3
 8002512:	2700      	movs	r7, #0
 8002514:	e755      	b.n	80023c2 <__aeabi_dsub+0x14a>
 8002516:	4c2a      	ldr	r4, [pc, #168]	; (80025c0 <__aeabi_dsub+0x348>)
 8002518:	1af6      	subs	r6, r6, r3
 800251a:	402c      	ands	r4, r5
 800251c:	e732      	b.n	8002384 <__aeabi_dsub+0x10c>
 800251e:	003d      	movs	r5, r7
 8002520:	3828      	subs	r0, #40	; 0x28
 8002522:	4085      	lsls	r5, r0
 8002524:	2700      	movs	r7, #0
 8002526:	e717      	b.n	8002358 <__aeabi_dsub+0xe0>
 8002528:	0038      	movs	r0, r7
 800252a:	f000 fb0d 	bl	8002b48 <__clzsi2>
 800252e:	3020      	adds	r0, #32
 8002530:	e706      	b.n	8002340 <__aeabi_dsub+0xc8>
 8002532:	430a      	orrs	r2, r1
 8002534:	0017      	movs	r7, r2
 8002536:	2100      	movs	r1, #0
 8002538:	1e7a      	subs	r2, r7, #1
 800253a:	4197      	sbcs	r7, r2
 800253c:	e6ee      	b.n	800231c <__aeabi_dsub+0xa4>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d000      	beq.n	8002544 <__aeabi_dsub+0x2cc>
 8002542:	e0e5      	b.n	8002710 <__aeabi_dsub+0x498>
 8002544:	1c73      	adds	r3, r6, #1
 8002546:	469c      	mov	ip, r3
 8002548:	055b      	lsls	r3, r3, #21
 800254a:	0d5b      	lsrs	r3, r3, #21
 800254c:	2b01      	cmp	r3, #1
 800254e:	dc00      	bgt.n	8002552 <__aeabi_dsub+0x2da>
 8002550:	e09f      	b.n	8002692 <__aeabi_dsub+0x41a>
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <__aeabi_dsub+0x344>)
 8002554:	459c      	cmp	ip, r3
 8002556:	d100      	bne.n	800255a <__aeabi_dsub+0x2e2>
 8002558:	e0c5      	b.n	80026e6 <__aeabi_dsub+0x46e>
 800255a:	4452      	add	r2, sl
 800255c:	4552      	cmp	r2, sl
 800255e:	4180      	sbcs	r0, r0
 8002560:	1864      	adds	r4, r4, r1
 8002562:	4240      	negs	r0, r0
 8002564:	1824      	adds	r4, r4, r0
 8002566:	07e7      	lsls	r7, r4, #31
 8002568:	0852      	lsrs	r2, r2, #1
 800256a:	4317      	orrs	r7, r2
 800256c:	0864      	lsrs	r4, r4, #1
 800256e:	4666      	mov	r6, ip
 8002570:	e708      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002572:	4812      	ldr	r0, [pc, #72]	; (80025bc <__aeabi_dsub+0x344>)
 8002574:	4285      	cmp	r5, r0
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x302>
 8002578:	e085      	b.n	8002686 <__aeabi_dsub+0x40e>
 800257a:	001d      	movs	r5, r3
 800257c:	e6bc      	b.n	80022f8 <__aeabi_dsub+0x80>
 800257e:	0029      	movs	r1, r5
 8002580:	3e1f      	subs	r6, #31
 8002582:	40f1      	lsrs	r1, r6
 8002584:	2b20      	cmp	r3, #32
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x312>
 8002588:	e07f      	b.n	800268a <__aeabi_dsub+0x412>
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	409d      	lsls	r5, r3
 8002590:	432f      	orrs	r7, r5
 8002592:	1e7d      	subs	r5, r7, #1
 8002594:	41af      	sbcs	r7, r5
 8002596:	2400      	movs	r4, #0
 8002598:	430f      	orrs	r7, r1
 800259a:	2600      	movs	r6, #0
 800259c:	e78e      	b.n	80024bc <__aeabi_dsub+0x244>
 800259e:	002b      	movs	r3, r5
 80025a0:	000f      	movs	r7, r1
 80025a2:	3b20      	subs	r3, #32
 80025a4:	40df      	lsrs	r7, r3
 80025a6:	2d20      	cmp	r5, #32
 80025a8:	d071      	beq.n	800268e <__aeabi_dsub+0x416>
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	1b5d      	subs	r5, r3, r5
 80025ae:	40a9      	lsls	r1, r5
 80025b0:	430a      	orrs	r2, r1
 80025b2:	1e51      	subs	r1, r2, #1
 80025b4:	418a      	sbcs	r2, r1
 80025b6:	2100      	movs	r1, #0
 80025b8:	4317      	orrs	r7, r2
 80025ba:	e6af      	b.n	800231c <__aeabi_dsub+0xa4>
 80025bc:	000007ff 	.word	0x000007ff
 80025c0:	ff7fffff 	.word	0xff7fffff
 80025c4:	800fffff 	.word	0x800fffff
 80025c8:	2e00      	cmp	r6, #0
 80025ca:	d03e      	beq.n	800264a <__aeabi_dsub+0x3d2>
 80025cc:	4eb3      	ldr	r6, [pc, #716]	; (800289c <__aeabi_dsub+0x624>)
 80025ce:	45b4      	cmp	ip, r6
 80025d0:	d045      	beq.n	800265e <__aeabi_dsub+0x3e6>
 80025d2:	2680      	movs	r6, #128	; 0x80
 80025d4:	0436      	lsls	r6, r6, #16
 80025d6:	426d      	negs	r5, r5
 80025d8:	4334      	orrs	r4, r6
 80025da:	2d38      	cmp	r5, #56	; 0x38
 80025dc:	dd00      	ble.n	80025e0 <__aeabi_dsub+0x368>
 80025de:	e0a8      	b.n	8002732 <__aeabi_dsub+0x4ba>
 80025e0:	2d1f      	cmp	r5, #31
 80025e2:	dd00      	ble.n	80025e6 <__aeabi_dsub+0x36e>
 80025e4:	e11f      	b.n	8002826 <__aeabi_dsub+0x5ae>
 80025e6:	2620      	movs	r6, #32
 80025e8:	0027      	movs	r7, r4
 80025ea:	4650      	mov	r0, sl
 80025ec:	1b76      	subs	r6, r6, r5
 80025ee:	40b7      	lsls	r7, r6
 80025f0:	40e8      	lsrs	r0, r5
 80025f2:	4307      	orrs	r7, r0
 80025f4:	4650      	mov	r0, sl
 80025f6:	40b0      	lsls	r0, r6
 80025f8:	1e46      	subs	r6, r0, #1
 80025fa:	41b0      	sbcs	r0, r6
 80025fc:	40ec      	lsrs	r4, r5
 80025fe:	4338      	orrs	r0, r7
 8002600:	1a17      	subs	r7, r2, r0
 8002602:	42ba      	cmp	r2, r7
 8002604:	4192      	sbcs	r2, r2
 8002606:	1b0c      	subs	r4, r1, r4
 8002608:	4252      	negs	r2, r2
 800260a:	1aa4      	subs	r4, r4, r2
 800260c:	4666      	mov	r6, ip
 800260e:	4698      	mov	r8, r3
 8002610:	e68b      	b.n	800232a <__aeabi_dsub+0xb2>
 8002612:	4664      	mov	r4, ip
 8002614:	4667      	mov	r7, ip
 8002616:	432c      	orrs	r4, r5
 8002618:	d000      	beq.n	800261c <__aeabi_dsub+0x3a4>
 800261a:	e68b      	b.n	8002334 <__aeabi_dsub+0xbc>
 800261c:	2500      	movs	r5, #0
 800261e:	2600      	movs	r6, #0
 8002620:	2700      	movs	r7, #0
 8002622:	e6ea      	b.n	80023fa <__aeabi_dsub+0x182>
 8002624:	001e      	movs	r6, r3
 8002626:	e6ad      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002628:	2b1f      	cmp	r3, #31
 800262a:	dc60      	bgt.n	80026ee <__aeabi_dsub+0x476>
 800262c:	2720      	movs	r7, #32
 800262e:	1af8      	subs	r0, r7, r3
 8002630:	000f      	movs	r7, r1
 8002632:	4684      	mov	ip, r0
 8002634:	4087      	lsls	r7, r0
 8002636:	0010      	movs	r0, r2
 8002638:	40d8      	lsrs	r0, r3
 800263a:	4307      	orrs	r7, r0
 800263c:	4660      	mov	r0, ip
 800263e:	4082      	lsls	r2, r0
 8002640:	1e50      	subs	r0, r2, #1
 8002642:	4182      	sbcs	r2, r0
 8002644:	40d9      	lsrs	r1, r3
 8002646:	4317      	orrs	r7, r2
 8002648:	e6f5      	b.n	8002436 <__aeabi_dsub+0x1be>
 800264a:	0026      	movs	r6, r4
 800264c:	4650      	mov	r0, sl
 800264e:	4306      	orrs	r6, r0
 8002650:	d005      	beq.n	800265e <__aeabi_dsub+0x3e6>
 8002652:	43ed      	mvns	r5, r5
 8002654:	2d00      	cmp	r5, #0
 8002656:	d0d3      	beq.n	8002600 <__aeabi_dsub+0x388>
 8002658:	4e90      	ldr	r6, [pc, #576]	; (800289c <__aeabi_dsub+0x624>)
 800265a:	45b4      	cmp	ip, r6
 800265c:	d1bd      	bne.n	80025da <__aeabi_dsub+0x362>
 800265e:	000c      	movs	r4, r1
 8002660:	0017      	movs	r7, r2
 8002662:	4666      	mov	r6, ip
 8002664:	4698      	mov	r8, r3
 8002666:	e68d      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002668:	488c      	ldr	r0, [pc, #560]	; (800289c <__aeabi_dsub+0x624>)
 800266a:	4283      	cmp	r3, r0
 800266c:	d00b      	beq.n	8002686 <__aeabi_dsub+0x40e>
 800266e:	4663      	mov	r3, ip
 8002670:	e6d9      	b.n	8002426 <__aeabi_dsub+0x1ae>
 8002672:	2d00      	cmp	r5, #0
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x400>
 8002676:	e096      	b.n	80027a6 <__aeabi_dsub+0x52e>
 8002678:	0008      	movs	r0, r1
 800267a:	4310      	orrs	r0, r2
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x408>
 800267e:	e0e2      	b.n	8002846 <__aeabi_dsub+0x5ce>
 8002680:	000c      	movs	r4, r1
 8002682:	0017      	movs	r7, r2
 8002684:	4698      	mov	r8, r3
 8002686:	4e85      	ldr	r6, [pc, #532]	; (800289c <__aeabi_dsub+0x624>)
 8002688:	e67c      	b.n	8002384 <__aeabi_dsub+0x10c>
 800268a:	2500      	movs	r5, #0
 800268c:	e780      	b.n	8002590 <__aeabi_dsub+0x318>
 800268e:	2100      	movs	r1, #0
 8002690:	e78e      	b.n	80025b0 <__aeabi_dsub+0x338>
 8002692:	0023      	movs	r3, r4
 8002694:	4650      	mov	r0, sl
 8002696:	4303      	orrs	r3, r0
 8002698:	2e00      	cmp	r6, #0
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x426>
 800269c:	e0a8      	b.n	80027f0 <__aeabi_dsub+0x578>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x42c>
 80026a2:	e0de      	b.n	8002862 <__aeabi_dsub+0x5ea>
 80026a4:	000b      	movs	r3, r1
 80026a6:	4313      	orrs	r3, r2
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x434>
 80026aa:	e66b      	b.n	8002384 <__aeabi_dsub+0x10c>
 80026ac:	4452      	add	r2, sl
 80026ae:	4552      	cmp	r2, sl
 80026b0:	4180      	sbcs	r0, r0
 80026b2:	1864      	adds	r4, r4, r1
 80026b4:	4240      	negs	r0, r0
 80026b6:	1824      	adds	r4, r4, r0
 80026b8:	0017      	movs	r7, r2
 80026ba:	0223      	lsls	r3, r4, #8
 80026bc:	d400      	bmi.n	80026c0 <__aeabi_dsub+0x448>
 80026be:	e6fd      	b.n	80024bc <__aeabi_dsub+0x244>
 80026c0:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <__aeabi_dsub+0x628>)
 80026c2:	4666      	mov	r6, ip
 80026c4:	401c      	ands	r4, r3
 80026c6:	e65d      	b.n	8002384 <__aeabi_dsub+0x10c>
 80026c8:	0025      	movs	r5, r4
 80026ca:	4650      	mov	r0, sl
 80026cc:	4305      	orrs	r5, r0
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	d1cf      	bne.n	8002672 <__aeabi_dsub+0x3fa>
 80026d2:	2d00      	cmp	r5, #0
 80026d4:	d14f      	bne.n	8002776 <__aeabi_dsub+0x4fe>
 80026d6:	000c      	movs	r4, r1
 80026d8:	4314      	orrs	r4, r2
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x466>
 80026dc:	e0a0      	b.n	8002820 <__aeabi_dsub+0x5a8>
 80026de:	000c      	movs	r4, r1
 80026e0:	0017      	movs	r7, r2
 80026e2:	4698      	mov	r8, r3
 80026e4:	e64e      	b.n	8002384 <__aeabi_dsub+0x10c>
 80026e6:	4666      	mov	r6, ip
 80026e8:	2400      	movs	r4, #0
 80026ea:	2700      	movs	r7, #0
 80026ec:	e685      	b.n	80023fa <__aeabi_dsub+0x182>
 80026ee:	001f      	movs	r7, r3
 80026f0:	0008      	movs	r0, r1
 80026f2:	3f20      	subs	r7, #32
 80026f4:	40f8      	lsrs	r0, r7
 80026f6:	0007      	movs	r7, r0
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0x486>
 80026fc:	e08e      	b.n	800281c <__aeabi_dsub+0x5a4>
 80026fe:	2040      	movs	r0, #64	; 0x40
 8002700:	1ac3      	subs	r3, r0, r3
 8002702:	4099      	lsls	r1, r3
 8002704:	430a      	orrs	r2, r1
 8002706:	1e51      	subs	r1, r2, #1
 8002708:	418a      	sbcs	r2, r1
 800270a:	2100      	movs	r1, #0
 800270c:	4317      	orrs	r7, r2
 800270e:	e692      	b.n	8002436 <__aeabi_dsub+0x1be>
 8002710:	2e00      	cmp	r6, #0
 8002712:	d114      	bne.n	800273e <__aeabi_dsub+0x4c6>
 8002714:	0026      	movs	r6, r4
 8002716:	4650      	mov	r0, sl
 8002718:	4306      	orrs	r6, r0
 800271a:	d062      	beq.n	80027e2 <__aeabi_dsub+0x56a>
 800271c:	43db      	mvns	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d15c      	bne.n	80027dc <__aeabi_dsub+0x564>
 8002722:	1887      	adds	r7, r0, r2
 8002724:	4297      	cmp	r7, r2
 8002726:	4192      	sbcs	r2, r2
 8002728:	1864      	adds	r4, r4, r1
 800272a:	4252      	negs	r2, r2
 800272c:	18a4      	adds	r4, r4, r2
 800272e:	4666      	mov	r6, ip
 8002730:	e687      	b.n	8002442 <__aeabi_dsub+0x1ca>
 8002732:	4650      	mov	r0, sl
 8002734:	4320      	orrs	r0, r4
 8002736:	1e44      	subs	r4, r0, #1
 8002738:	41a0      	sbcs	r0, r4
 800273a:	2400      	movs	r4, #0
 800273c:	e760      	b.n	8002600 <__aeabi_dsub+0x388>
 800273e:	4e57      	ldr	r6, [pc, #348]	; (800289c <__aeabi_dsub+0x624>)
 8002740:	45b4      	cmp	ip, r6
 8002742:	d04e      	beq.n	80027e2 <__aeabi_dsub+0x56a>
 8002744:	2680      	movs	r6, #128	; 0x80
 8002746:	0436      	lsls	r6, r6, #16
 8002748:	425b      	negs	r3, r3
 800274a:	4334      	orrs	r4, r6
 800274c:	2b38      	cmp	r3, #56	; 0x38
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x4da>
 8002750:	e07f      	b.n	8002852 <__aeabi_dsub+0x5da>
 8002752:	2b1f      	cmp	r3, #31
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x4e0>
 8002756:	e08b      	b.n	8002870 <__aeabi_dsub+0x5f8>
 8002758:	2620      	movs	r6, #32
 800275a:	0027      	movs	r7, r4
 800275c:	4650      	mov	r0, sl
 800275e:	1af6      	subs	r6, r6, r3
 8002760:	40b7      	lsls	r7, r6
 8002762:	40d8      	lsrs	r0, r3
 8002764:	4307      	orrs	r7, r0
 8002766:	4650      	mov	r0, sl
 8002768:	40b0      	lsls	r0, r6
 800276a:	1e46      	subs	r6, r0, #1
 800276c:	41b0      	sbcs	r0, r6
 800276e:	4307      	orrs	r7, r0
 8002770:	40dc      	lsrs	r4, r3
 8002772:	18bf      	adds	r7, r7, r2
 8002774:	e7d6      	b.n	8002724 <__aeabi_dsub+0x4ac>
 8002776:	000d      	movs	r5, r1
 8002778:	4315      	orrs	r5, r2
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x506>
 800277c:	e602      	b.n	8002384 <__aeabi_dsub+0x10c>
 800277e:	4650      	mov	r0, sl
 8002780:	1a80      	subs	r0, r0, r2
 8002782:	4582      	cmp	sl, r0
 8002784:	41bf      	sbcs	r7, r7
 8002786:	1a65      	subs	r5, r4, r1
 8002788:	427f      	negs	r7, r7
 800278a:	1bed      	subs	r5, r5, r7
 800278c:	4684      	mov	ip, r0
 800278e:	0228      	lsls	r0, r5, #8
 8002790:	d400      	bmi.n	8002794 <__aeabi_dsub+0x51c>
 8002792:	e68d      	b.n	80024b0 <__aeabi_dsub+0x238>
 8002794:	4650      	mov	r0, sl
 8002796:	1a17      	subs	r7, r2, r0
 8002798:	42ba      	cmp	r2, r7
 800279a:	4192      	sbcs	r2, r2
 800279c:	1b0c      	subs	r4, r1, r4
 800279e:	4252      	negs	r2, r2
 80027a0:	1aa4      	subs	r4, r4, r2
 80027a2:	4698      	mov	r8, r3
 80027a4:	e5ee      	b.n	8002384 <__aeabi_dsub+0x10c>
 80027a6:	000d      	movs	r5, r1
 80027a8:	4315      	orrs	r5, r2
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x536>
 80027ac:	e76b      	b.n	8002686 <__aeabi_dsub+0x40e>
 80027ae:	4650      	mov	r0, sl
 80027b0:	0767      	lsls	r7, r4, #29
 80027b2:	08c0      	lsrs	r0, r0, #3
 80027b4:	4307      	orrs	r7, r0
 80027b6:	2080      	movs	r0, #128	; 0x80
 80027b8:	08e4      	lsrs	r4, r4, #3
 80027ba:	0300      	lsls	r0, r0, #12
 80027bc:	4204      	tst	r4, r0
 80027be:	d007      	beq.n	80027d0 <__aeabi_dsub+0x558>
 80027c0:	08cd      	lsrs	r5, r1, #3
 80027c2:	4205      	tst	r5, r0
 80027c4:	d104      	bne.n	80027d0 <__aeabi_dsub+0x558>
 80027c6:	002c      	movs	r4, r5
 80027c8:	4698      	mov	r8, r3
 80027ca:	08d7      	lsrs	r7, r2, #3
 80027cc:	0749      	lsls	r1, r1, #29
 80027ce:	430f      	orrs	r7, r1
 80027d0:	0f7b      	lsrs	r3, r7, #29
 80027d2:	00e4      	lsls	r4, r4, #3
 80027d4:	431c      	orrs	r4, r3
 80027d6:	00ff      	lsls	r7, r7, #3
 80027d8:	4e30      	ldr	r6, [pc, #192]	; (800289c <__aeabi_dsub+0x624>)
 80027da:	e5d3      	b.n	8002384 <__aeabi_dsub+0x10c>
 80027dc:	4e2f      	ldr	r6, [pc, #188]	; (800289c <__aeabi_dsub+0x624>)
 80027de:	45b4      	cmp	ip, r6
 80027e0:	d1b4      	bne.n	800274c <__aeabi_dsub+0x4d4>
 80027e2:	000c      	movs	r4, r1
 80027e4:	0017      	movs	r7, r2
 80027e6:	4666      	mov	r6, ip
 80027e8:	e5cc      	b.n	8002384 <__aeabi_dsub+0x10c>
 80027ea:	2700      	movs	r7, #0
 80027ec:	2400      	movs	r4, #0
 80027ee:	e5e8      	b.n	80023c2 <__aeabi_dsub+0x14a>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d039      	beq.n	8002868 <__aeabi_dsub+0x5f0>
 80027f4:	000b      	movs	r3, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x584>
 80027fa:	e744      	b.n	8002686 <__aeabi_dsub+0x40e>
 80027fc:	08c0      	lsrs	r0, r0, #3
 80027fe:	0767      	lsls	r7, r4, #29
 8002800:	4307      	orrs	r7, r0
 8002802:	2080      	movs	r0, #128	; 0x80
 8002804:	08e4      	lsrs	r4, r4, #3
 8002806:	0300      	lsls	r0, r0, #12
 8002808:	4204      	tst	r4, r0
 800280a:	d0e1      	beq.n	80027d0 <__aeabi_dsub+0x558>
 800280c:	08cb      	lsrs	r3, r1, #3
 800280e:	4203      	tst	r3, r0
 8002810:	d1de      	bne.n	80027d0 <__aeabi_dsub+0x558>
 8002812:	08d7      	lsrs	r7, r2, #3
 8002814:	0749      	lsls	r1, r1, #29
 8002816:	430f      	orrs	r7, r1
 8002818:	001c      	movs	r4, r3
 800281a:	e7d9      	b.n	80027d0 <__aeabi_dsub+0x558>
 800281c:	2100      	movs	r1, #0
 800281e:	e771      	b.n	8002704 <__aeabi_dsub+0x48c>
 8002820:	2500      	movs	r5, #0
 8002822:	2700      	movs	r7, #0
 8002824:	e5e9      	b.n	80023fa <__aeabi_dsub+0x182>
 8002826:	002e      	movs	r6, r5
 8002828:	0027      	movs	r7, r4
 800282a:	3e20      	subs	r6, #32
 800282c:	40f7      	lsrs	r7, r6
 800282e:	2d20      	cmp	r5, #32
 8002830:	d02f      	beq.n	8002892 <__aeabi_dsub+0x61a>
 8002832:	2640      	movs	r6, #64	; 0x40
 8002834:	1b75      	subs	r5, r6, r5
 8002836:	40ac      	lsls	r4, r5
 8002838:	4650      	mov	r0, sl
 800283a:	4320      	orrs	r0, r4
 800283c:	1e44      	subs	r4, r0, #1
 800283e:	41a0      	sbcs	r0, r4
 8002840:	2400      	movs	r4, #0
 8002842:	4338      	orrs	r0, r7
 8002844:	e6dc      	b.n	8002600 <__aeabi_dsub+0x388>
 8002846:	2480      	movs	r4, #128	; 0x80
 8002848:	2500      	movs	r5, #0
 800284a:	0324      	lsls	r4, r4, #12
 800284c:	4e13      	ldr	r6, [pc, #76]	; (800289c <__aeabi_dsub+0x624>)
 800284e:	2700      	movs	r7, #0
 8002850:	e5d3      	b.n	80023fa <__aeabi_dsub+0x182>
 8002852:	4650      	mov	r0, sl
 8002854:	4320      	orrs	r0, r4
 8002856:	0007      	movs	r7, r0
 8002858:	1e78      	subs	r0, r7, #1
 800285a:	4187      	sbcs	r7, r0
 800285c:	2400      	movs	r4, #0
 800285e:	18bf      	adds	r7, r7, r2
 8002860:	e760      	b.n	8002724 <__aeabi_dsub+0x4ac>
 8002862:	000c      	movs	r4, r1
 8002864:	0017      	movs	r7, r2
 8002866:	e58d      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002868:	000c      	movs	r4, r1
 800286a:	0017      	movs	r7, r2
 800286c:	4e0b      	ldr	r6, [pc, #44]	; (800289c <__aeabi_dsub+0x624>)
 800286e:	e589      	b.n	8002384 <__aeabi_dsub+0x10c>
 8002870:	001e      	movs	r6, r3
 8002872:	0027      	movs	r7, r4
 8002874:	3e20      	subs	r6, #32
 8002876:	40f7      	lsrs	r7, r6
 8002878:	2b20      	cmp	r3, #32
 800287a:	d00c      	beq.n	8002896 <__aeabi_dsub+0x61e>
 800287c:	2640      	movs	r6, #64	; 0x40
 800287e:	1af3      	subs	r3, r6, r3
 8002880:	409c      	lsls	r4, r3
 8002882:	4650      	mov	r0, sl
 8002884:	4320      	orrs	r0, r4
 8002886:	1e44      	subs	r4, r0, #1
 8002888:	41a0      	sbcs	r0, r4
 800288a:	4307      	orrs	r7, r0
 800288c:	2400      	movs	r4, #0
 800288e:	18bf      	adds	r7, r7, r2
 8002890:	e748      	b.n	8002724 <__aeabi_dsub+0x4ac>
 8002892:	2400      	movs	r4, #0
 8002894:	e7d0      	b.n	8002838 <__aeabi_dsub+0x5c0>
 8002896:	2400      	movs	r4, #0
 8002898:	e7f3      	b.n	8002882 <__aeabi_dsub+0x60a>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	000007ff 	.word	0x000007ff
 80028a0:	ff7fffff 	.word	0xff7fffff

080028a4 <__aeabi_d2iz>:
 80028a4:	b530      	push	{r4, r5, lr}
 80028a6:	4d13      	ldr	r5, [pc, #76]	; (80028f4 <__aeabi_d2iz+0x50>)
 80028a8:	030a      	lsls	r2, r1, #12
 80028aa:	004b      	lsls	r3, r1, #1
 80028ac:	0b12      	lsrs	r2, r2, #12
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	0fc9      	lsrs	r1, r1, #31
 80028b2:	2400      	movs	r4, #0
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	dd10      	ble.n	80028da <__aeabi_d2iz+0x36>
 80028b8:	4c0f      	ldr	r4, [pc, #60]	; (80028f8 <__aeabi_d2iz+0x54>)
 80028ba:	42a3      	cmp	r3, r4
 80028bc:	dc0f      	bgt.n	80028de <__aeabi_d2iz+0x3a>
 80028be:	2480      	movs	r4, #128	; 0x80
 80028c0:	4d0e      	ldr	r5, [pc, #56]	; (80028fc <__aeabi_d2iz+0x58>)
 80028c2:	0364      	lsls	r4, r4, #13
 80028c4:	4322      	orrs	r2, r4
 80028c6:	1aed      	subs	r5, r5, r3
 80028c8:	2d1f      	cmp	r5, #31
 80028ca:	dd0b      	ble.n	80028e4 <__aeabi_d2iz+0x40>
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <__aeabi_d2iz+0x5c>)
 80028ce:	1ac3      	subs	r3, r0, r3
 80028d0:	40da      	lsrs	r2, r3
 80028d2:	4254      	negs	r4, r2
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d100      	bne.n	80028da <__aeabi_d2iz+0x36>
 80028d8:	0014      	movs	r4, r2
 80028da:	0020      	movs	r0, r4
 80028dc:	bd30      	pop	{r4, r5, pc}
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <__aeabi_d2iz+0x60>)
 80028e0:	18cc      	adds	r4, r1, r3
 80028e2:	e7fa      	b.n	80028da <__aeabi_d2iz+0x36>
 80028e4:	4c08      	ldr	r4, [pc, #32]	; (8002908 <__aeabi_d2iz+0x64>)
 80028e6:	40e8      	lsrs	r0, r5
 80028e8:	46a4      	mov	ip, r4
 80028ea:	4463      	add	r3, ip
 80028ec:	409a      	lsls	r2, r3
 80028ee:	4302      	orrs	r2, r0
 80028f0:	e7ef      	b.n	80028d2 <__aeabi_d2iz+0x2e>
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	000003fe 	.word	0x000003fe
 80028f8:	0000041d 	.word	0x0000041d
 80028fc:	00000433 	.word	0x00000433
 8002900:	00000413 	.word	0x00000413
 8002904:	7fffffff 	.word	0x7fffffff
 8002908:	fffffbed 	.word	0xfffffbed

0800290c <__aeabi_i2d>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2800      	cmp	r0, #0
 8002910:	d030      	beq.n	8002974 <__aeabi_i2d+0x68>
 8002912:	17c3      	asrs	r3, r0, #31
 8002914:	18c4      	adds	r4, r0, r3
 8002916:	405c      	eors	r4, r3
 8002918:	0fc5      	lsrs	r5, r0, #31
 800291a:	0020      	movs	r0, r4
 800291c:	f000 f914 	bl	8002b48 <__clzsi2>
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <__aeabi_i2d+0x74>)
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <__aeabi_i2d+0x78>)
 8002924:	1a1b      	subs	r3, r3, r0
 8002926:	1ad2      	subs	r2, r2, r3
 8002928:	2a1f      	cmp	r2, #31
 800292a:	dd18      	ble.n	800295e <__aeabi_i2d+0x52>
 800292c:	4a16      	ldr	r2, [pc, #88]	; (8002988 <__aeabi_i2d+0x7c>)
 800292e:	1ad2      	subs	r2, r2, r3
 8002930:	4094      	lsls	r4, r2
 8002932:	2200      	movs	r2, #0
 8002934:	0324      	lsls	r4, r4, #12
 8002936:	055b      	lsls	r3, r3, #21
 8002938:	0b24      	lsrs	r4, r4, #12
 800293a:	0d5b      	lsrs	r3, r3, #21
 800293c:	2100      	movs	r1, #0
 800293e:	0010      	movs	r0, r2
 8002940:	0324      	lsls	r4, r4, #12
 8002942:	0d0a      	lsrs	r2, r1, #20
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	0512      	lsls	r2, r2, #20
 8002948:	4322      	orrs	r2, r4
 800294a:	4c10      	ldr	r4, [pc, #64]	; (800298c <__aeabi_i2d+0x80>)
 800294c:	051b      	lsls	r3, r3, #20
 800294e:	4022      	ands	r2, r4
 8002950:	4313      	orrs	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	07ed      	lsls	r5, r5, #31
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	432b      	orrs	r3, r5
 800295a:	0019      	movs	r1, r3
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	0021      	movs	r1, r4
 8002960:	4091      	lsls	r1, r2
 8002962:	000a      	movs	r2, r1
 8002964:	210b      	movs	r1, #11
 8002966:	1a08      	subs	r0, r1, r0
 8002968:	40c4      	lsrs	r4, r0
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	0324      	lsls	r4, r4, #12
 800296e:	0b24      	lsrs	r4, r4, #12
 8002970:	0d5b      	lsrs	r3, r3, #21
 8002972:	e7e3      	b.n	800293c <__aeabi_i2d+0x30>
 8002974:	2500      	movs	r5, #0
 8002976:	2300      	movs	r3, #0
 8002978:	2400      	movs	r4, #0
 800297a:	2200      	movs	r2, #0
 800297c:	e7de      	b.n	800293c <__aeabi_i2d+0x30>
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	0000041e 	.word	0x0000041e
 8002984:	00000433 	.word	0x00000433
 8002988:	00000413 	.word	0x00000413
 800298c:	800fffff 	.word	0x800fffff

08002990 <__aeabi_f2d>:
 8002990:	0041      	lsls	r1, r0, #1
 8002992:	0e09      	lsrs	r1, r1, #24
 8002994:	1c4b      	adds	r3, r1, #1
 8002996:	b570      	push	{r4, r5, r6, lr}
 8002998:	b2db      	uxtb	r3, r3
 800299a:	0246      	lsls	r6, r0, #9
 800299c:	0a75      	lsrs	r5, r6, #9
 800299e:	0fc4      	lsrs	r4, r0, #31
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	dd14      	ble.n	80029ce <__aeabi_f2d+0x3e>
 80029a4:	23e0      	movs	r3, #224	; 0xe0
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	076d      	lsls	r5, r5, #29
 80029aa:	0b36      	lsrs	r6, r6, #12
 80029ac:	18cb      	adds	r3, r1, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	0d0a      	lsrs	r2, r1, #20
 80029b2:	0028      	movs	r0, r5
 80029b4:	0512      	lsls	r2, r2, #20
 80029b6:	4d1c      	ldr	r5, [pc, #112]	; (8002a28 <__aeabi_f2d+0x98>)
 80029b8:	4332      	orrs	r2, r6
 80029ba:	055b      	lsls	r3, r3, #21
 80029bc:	402a      	ands	r2, r5
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	4313      	orrs	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	07e4      	lsls	r4, r4, #31
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	4323      	orrs	r3, r4
 80029ca:	0019      	movs	r1, r3
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
 80029ce:	2900      	cmp	r1, #0
 80029d0:	d114      	bne.n	80029fc <__aeabi_f2d+0x6c>
 80029d2:	2d00      	cmp	r5, #0
 80029d4:	d01e      	beq.n	8002a14 <__aeabi_f2d+0x84>
 80029d6:	0028      	movs	r0, r5
 80029d8:	f000 f8b6 	bl	8002b48 <__clzsi2>
 80029dc:	280a      	cmp	r0, #10
 80029de:	dc1c      	bgt.n	8002a1a <__aeabi_f2d+0x8a>
 80029e0:	230b      	movs	r3, #11
 80029e2:	002a      	movs	r2, r5
 80029e4:	1a1b      	subs	r3, r3, r0
 80029e6:	40da      	lsrs	r2, r3
 80029e8:	0003      	movs	r3, r0
 80029ea:	3315      	adds	r3, #21
 80029ec:	409d      	lsls	r5, r3
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <__aeabi_f2d+0x9c>)
 80029f0:	0312      	lsls	r2, r2, #12
 80029f2:	1a1b      	subs	r3, r3, r0
 80029f4:	055b      	lsls	r3, r3, #21
 80029f6:	0b16      	lsrs	r6, r2, #12
 80029f8:	0d5b      	lsrs	r3, r3, #21
 80029fa:	e7d8      	b.n	80029ae <__aeabi_f2d+0x1e>
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	d006      	beq.n	8002a0e <__aeabi_f2d+0x7e>
 8002a00:	0b32      	lsrs	r2, r6, #12
 8002a02:	2680      	movs	r6, #128	; 0x80
 8002a04:	0336      	lsls	r6, r6, #12
 8002a06:	076d      	lsls	r5, r5, #29
 8002a08:	4316      	orrs	r6, r2
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <__aeabi_f2d+0xa0>)
 8002a0c:	e7cf      	b.n	80029ae <__aeabi_f2d+0x1e>
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <__aeabi_f2d+0xa0>)
 8002a10:	2600      	movs	r6, #0
 8002a12:	e7cc      	b.n	80029ae <__aeabi_f2d+0x1e>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2600      	movs	r6, #0
 8002a18:	e7c9      	b.n	80029ae <__aeabi_f2d+0x1e>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	002a      	movs	r2, r5
 8002a1e:	3b0b      	subs	r3, #11
 8002a20:	409a      	lsls	r2, r3
 8002a22:	2500      	movs	r5, #0
 8002a24:	e7e3      	b.n	80029ee <__aeabi_f2d+0x5e>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	800fffff 	.word	0x800fffff
 8002a2c:	00000389 	.word	0x00000389
 8002a30:	000007ff 	.word	0x000007ff

08002a34 <__aeabi_d2f>:
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	004c      	lsls	r4, r1, #1
 8002a38:	0d64      	lsrs	r4, r4, #21
 8002a3a:	030b      	lsls	r3, r1, #12
 8002a3c:	1c62      	adds	r2, r4, #1
 8002a3e:	0f45      	lsrs	r5, r0, #29
 8002a40:	0a5b      	lsrs	r3, r3, #9
 8002a42:	0552      	lsls	r2, r2, #21
 8002a44:	432b      	orrs	r3, r5
 8002a46:	0fc9      	lsrs	r1, r1, #31
 8002a48:	00c5      	lsls	r5, r0, #3
 8002a4a:	0d52      	lsrs	r2, r2, #21
 8002a4c:	2a01      	cmp	r2, #1
 8002a4e:	dd28      	ble.n	8002aa2 <__aeabi_d2f+0x6e>
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <__aeabi_d2f+0x108>)
 8002a52:	18a6      	adds	r6, r4, r2
 8002a54:	2efe      	cmp	r6, #254	; 0xfe
 8002a56:	dc1b      	bgt.n	8002a90 <__aeabi_d2f+0x5c>
 8002a58:	2e00      	cmp	r6, #0
 8002a5a:	dd3e      	ble.n	8002ada <__aeabi_d2f+0xa6>
 8002a5c:	0180      	lsls	r0, r0, #6
 8002a5e:	0002      	movs	r2, r0
 8002a60:	1e50      	subs	r0, r2, #1
 8002a62:	4182      	sbcs	r2, r0
 8002a64:	0f6d      	lsrs	r5, r5, #29
 8002a66:	432a      	orrs	r2, r5
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	075a      	lsls	r2, r3, #29
 8002a6e:	d004      	beq.n	8002a7a <__aeabi_d2f+0x46>
 8002a70:	220f      	movs	r2, #15
 8002a72:	401a      	ands	r2, r3
 8002a74:	2a04      	cmp	r2, #4
 8002a76:	d000      	beq.n	8002a7a <__aeabi_d2f+0x46>
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	04d2      	lsls	r2, r2, #19
 8002a7e:	401a      	ands	r2, r3
 8002a80:	d05a      	beq.n	8002b38 <__aeabi_d2f+0x104>
 8002a82:	3601      	adds	r6, #1
 8002a84:	2eff      	cmp	r6, #255	; 0xff
 8002a86:	d003      	beq.n	8002a90 <__aeabi_d2f+0x5c>
 8002a88:	019b      	lsls	r3, r3, #6
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	b2f4      	uxtb	r4, r6
 8002a8e:	e001      	b.n	8002a94 <__aeabi_d2f+0x60>
 8002a90:	24ff      	movs	r4, #255	; 0xff
 8002a92:	2300      	movs	r3, #0
 8002a94:	0258      	lsls	r0, r3, #9
 8002a96:	05e4      	lsls	r4, r4, #23
 8002a98:	0a40      	lsrs	r0, r0, #9
 8002a9a:	07c9      	lsls	r1, r1, #31
 8002a9c:	4320      	orrs	r0, r4
 8002a9e:	4308      	orrs	r0, r1
 8002aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d007      	beq.n	8002ab6 <__aeabi_d2f+0x82>
 8002aa6:	431d      	orrs	r5, r3
 8002aa8:	d0f2      	beq.n	8002a90 <__aeabi_d2f+0x5c>
 8002aaa:	2080      	movs	r0, #128	; 0x80
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	0480      	lsls	r0, r0, #18
 8002ab0:	4303      	orrs	r3, r0
 8002ab2:	26ff      	movs	r6, #255	; 0xff
 8002ab4:	e7da      	b.n	8002a6c <__aeabi_d2f+0x38>
 8002ab6:	432b      	orrs	r3, r5
 8002ab8:	d003      	beq.n	8002ac2 <__aeabi_d2f+0x8e>
 8002aba:	2305      	movs	r3, #5
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	2cff      	cmp	r4, #255	; 0xff
 8002ac0:	d003      	beq.n	8002aca <__aeabi_d2f+0x96>
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	b2e4      	uxtb	r4, r4
 8002ac8:	e7e4      	b.n	8002a94 <__aeabi_d2f+0x60>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d032      	beq.n	8002b34 <__aeabi_d2f+0x100>
 8002ace:	2080      	movs	r0, #128	; 0x80
 8002ad0:	03c0      	lsls	r0, r0, #15
 8002ad2:	4303      	orrs	r3, r0
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	e7dc      	b.n	8002a94 <__aeabi_d2f+0x60>
 8002ada:	0032      	movs	r2, r6
 8002adc:	3217      	adds	r2, #23
 8002ade:	db14      	blt.n	8002b0a <__aeabi_d2f+0xd6>
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	271e      	movs	r7, #30
 8002ae4:	0412      	lsls	r2, r2, #16
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	1bbf      	subs	r7, r7, r6
 8002aea:	2f1f      	cmp	r7, #31
 8002aec:	dc0f      	bgt.n	8002b0e <__aeabi_d2f+0xda>
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <__aeabi_d2f+0x10c>)
 8002af0:	4694      	mov	ip, r2
 8002af2:	4464      	add	r4, ip
 8002af4:	002a      	movs	r2, r5
 8002af6:	40a5      	lsls	r5, r4
 8002af8:	002e      	movs	r6, r5
 8002afa:	40a3      	lsls	r3, r4
 8002afc:	1e75      	subs	r5, r6, #1
 8002afe:	41ae      	sbcs	r6, r5
 8002b00:	40fa      	lsrs	r2, r7
 8002b02:	4333      	orrs	r3, r6
 8002b04:	4313      	orrs	r3, r2
 8002b06:	2600      	movs	r6, #0
 8002b08:	e7b0      	b.n	8002a6c <__aeabi_d2f+0x38>
 8002b0a:	2400      	movs	r4, #0
 8002b0c:	e7d5      	b.n	8002aba <__aeabi_d2f+0x86>
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4252      	negs	r2, r2
 8002b12:	1b96      	subs	r6, r2, r6
 8002b14:	001a      	movs	r2, r3
 8002b16:	40f2      	lsrs	r2, r6
 8002b18:	2f20      	cmp	r7, #32
 8002b1a:	d009      	beq.n	8002b30 <__aeabi_d2f+0xfc>
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <__aeabi_d2f+0x110>)
 8002b1e:	4684      	mov	ip, r0
 8002b20:	4464      	add	r4, ip
 8002b22:	40a3      	lsls	r3, r4
 8002b24:	432b      	orrs	r3, r5
 8002b26:	1e5d      	subs	r5, r3, #1
 8002b28:	41ab      	sbcs	r3, r5
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	e79d      	b.n	8002a6c <__aeabi_d2f+0x38>
 8002b30:	2300      	movs	r3, #0
 8002b32:	e7f7      	b.n	8002b24 <__aeabi_d2f+0xf0>
 8002b34:	2300      	movs	r3, #0
 8002b36:	e7ad      	b.n	8002a94 <__aeabi_d2f+0x60>
 8002b38:	0034      	movs	r4, r6
 8002b3a:	e7bf      	b.n	8002abc <__aeabi_d2f+0x88>
 8002b3c:	fffffc80 	.word	0xfffffc80
 8002b40:	fffffc82 	.word	0xfffffc82
 8002b44:	fffffca2 	.word	0xfffffca2

08002b48 <__clzsi2>:
 8002b48:	211c      	movs	r1, #28
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d301      	bcc.n	8002b56 <__clzsi2+0xe>
 8002b52:	0c00      	lsrs	r0, r0, #16
 8002b54:	3910      	subs	r1, #16
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	4298      	cmp	r0, r3
 8002b5a:	d301      	bcc.n	8002b60 <__clzsi2+0x18>
 8002b5c:	0a00      	lsrs	r0, r0, #8
 8002b5e:	3908      	subs	r1, #8
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	4298      	cmp	r0, r3
 8002b64:	d301      	bcc.n	8002b6a <__clzsi2+0x22>
 8002b66:	0900      	lsrs	r0, r0, #4
 8002b68:	3904      	subs	r1, #4
 8002b6a:	a202      	add	r2, pc, #8	; (adr r2, 8002b74 <__clzsi2+0x2c>)
 8002b6c:	5c10      	ldrb	r0, [r2, r0]
 8002b6e:	1840      	adds	r0, r0, r1
 8002b70:	4770      	bx	lr
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	02020304 	.word	0x02020304
 8002b78:	01010101 	.word	0x01010101
	...

08002b84 <GetMaxMinValues>:
sysDataTLETypeDef sysDataTLE;
int16_t tleValues[2];


void GetMaxMinValues(void)
{
 8002b84:	b510      	push	{r4, lr}
	TLEReadData(TLE_MAIN_VALUES, tleValues);
 8002b86:	4c13      	ldr	r4, [pc, #76]	; (8002bd4 <GetMaxMinValues+0x50>)
 8002b88:	0021      	movs	r1, r4
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 f9aa 	bl	8002ee4 <TLEReadData>

	if(sysDataTLE.maxX < tleValues[0]){
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	5e9a      	ldrsh	r2, [r3, r2]
 8002b96:	2100      	movs	r1, #0
 8002b98:	5e63      	ldrsh	r3, [r4, r1]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	da01      	bge.n	8002ba2 <GetMaxMinValues+0x1e>
		sysDataTLE.maxX = tleValues[0];
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002ba0:	8013      	strh	r3, [r2, #0]
	}
	if(sysDataTLE.minX > tleValues[0]){
 8002ba2:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	5e52      	ldrsh	r2, [r2, r1]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	da01      	bge.n	8002bb0 <GetMaxMinValues+0x2c>
		sysDataTLE.minX = tleValues[0];
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002bae:	8093      	strh	r3, [r2, #4]
	}

	if(sysDataTLE.maxY < tleValues[1]){
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	5e9a      	ldrsh	r2, [r3, r2]
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <GetMaxMinValues+0x50>)
 8002bb8:	2102      	movs	r1, #2
 8002bba:	5e5b      	ldrsh	r3, [r3, r1]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	da01      	bge.n	8002bc4 <GetMaxMinValues+0x40>
		sysDataTLE.maxY = tleValues[1];
 8002bc0:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002bc2:	8053      	strh	r3, [r2, #2]
	}
	if(sysDataTLE.minY > tleValues[1]){
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002bc6:	2106      	movs	r1, #6
 8002bc8:	5e52      	ldrsh	r2, [r2, r1]
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	da01      	bge.n	8002bd2 <GetMaxMinValues+0x4e>
		sysDataTLE.minY = tleValues[1];
 8002bce:	4a02      	ldr	r2, [pc, #8]	; (8002bd8 <GetMaxMinValues+0x54>)
 8002bd0:	80d3      	strh	r3, [r2, #6]
	}
}
 8002bd2:	bd10      	pop	{r4, pc}
 8002bd4:	20000280 	.word	0x20000280
 8002bd8:	20000220 	.word	0x20000220

08002bdc <GetTempValues>:

void GetTempValues(void)
{
 8002bdc:	b510      	push	{r4, lr}
	TLEReadData(TLE_TEMP_VALUE, &tleValues);
 8002bde:	4c05      	ldr	r4, [pc, #20]	; (8002bf4 <GetTempValues+0x18>)
 8002be0:	0021      	movs	r1, r4
 8002be2:	2002      	movs	r0, #2
 8002be4:	f000 f97e 	bl	8002ee4 <TLEReadData>
	sysDataTLE.tempX = tleValues[0];
 8002be8:	2300      	movs	r3, #0
 8002bea:	5ee2      	ldrsh	r2, [r4, r3]
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <GetTempValues+0x1c>)
 8002bee:	811a      	strh	r2, [r3, #8]
//	sysDataTLE.tempY = tleValues[1];
}
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	20000280 	.word	0x20000280
 8002bf8:	20000220 	.word	0x20000220

08002bfc <GetColibValues>:


void GetColibValues(void)
{
 8002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfe:	46ce      	mov	lr, r9
 8002c00:	b500      	push	{lr}
 8002c02:	b084      	sub	sp, #16
	/*		Offset Definition
	================================================================*/
	sysDataTLE.offset.x = (sysDataTLE.maxX + sysDataTLE.minX) / 2;
 8002c04:	4c43      	ldr	r4, [pc, #268]	; (8002d14 <GetColibValues+0x118>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	5ea3      	ldrsh	r3, [r4, r2]
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	5ee5      	ldrsh	r5, [r4, r3]
 8002c10:	464b      	mov	r3, r9
 8002c12:	195b      	adds	r3, r3, r5
 8002c14:	0fd8      	lsrs	r0, r3, #31
 8002c16:	18c0      	adds	r0, r0, r3
 8002c18:	1040      	asrs	r0, r0, #1
 8002c1a:	f7fe f919 	bl	8000e50 <__aeabi_i2f>
 8002c1e:	9000      	str	r0, [sp, #0]
 8002c20:	6160      	str	r0, [r4, #20]
	sysDataTLE.offset.y = (sysDataTLE.maxY + sysDataTLE.minY) / 2;
 8002c22:	2202      	movs	r2, #2
 8002c24:	5ea6      	ldrsh	r6, [r4, r2]
 8002c26:	2206      	movs	r2, #6
 8002c28:	5ea7      	ldrsh	r7, [r4, r2]
 8002c2a:	19f3      	adds	r3, r6, r7
 8002c2c:	0fd8      	lsrs	r0, r3, #31
 8002c2e:	18c0      	adds	r0, r0, r3
 8002c30:	1040      	asrs	r0, r0, #1
 8002c32:	f7fe f90d 	bl	8000e50 <__aeabi_i2f>
 8002c36:	9002      	str	r0, [sp, #8]
 8002c38:	61a0      	str	r0, [r4, #24]

	/*		Amplitude Definition
	================================================================*/
	sysDataTLE.amplitude.x = (sysDataTLE.maxX - sysDataTLE.minX) / 2;
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	1b4b      	subs	r3, r1, r5
 8002c3e:	0fd8      	lsrs	r0, r3, #31
 8002c40:	18c0      	adds	r0, r0, r3
 8002c42:	1040      	asrs	r0, r0, #1
 8002c44:	f7fe f904 	bl	8000e50 <__aeabi_i2f>
 8002c48:	61e0      	str	r0, [r4, #28]
	sysDataTLE.amplitude.y = (sysDataTLE.maxY - sysDataTLE.minY) / 2;
 8002c4a:	1bf6      	subs	r6, r6, r7
 8002c4c:	0ff0      	lsrs	r0, r6, #31
 8002c4e:	1980      	adds	r0, r0, r6
 8002c50:	1040      	asrs	r0, r0, #1
 8002c52:	f7fe f8fd 	bl	8000e50 <__aeabi_i2f>
 8002c56:	6220      	str	r0, [r4, #32]

	/*		Temperature-Dependent Behavior
	================================================================*/
	sysDataTLE.tempGrad.x = 0.116296 + (0.0010147 * sysDataTLE.offset.x);
 8002c58:	9800      	ldr	r0, [sp, #0]
 8002c5a:	f7ff fe99 	bl	8002990 <__aeabi_f2d>
 8002c5e:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <GetColibValues+0x11c>)
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <GetColibValues+0x120>)
 8002c62:	9000      	str	r0, [sp, #0]
 8002c64:	9101      	str	r1, [sp, #4]
 8002c66:	f7ff f887 	bl	8001d78 <__aeabi_dmul>
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <GetColibValues+0x124>)
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <GetColibValues+0x128>)
 8002c6e:	f7fe f93f 	bl	8000ef0 <__aeabi_dadd>
 8002c72:	f7ff fedf 	bl	8002a34 <__aeabi_d2f>
 8002c76:	1c05      	adds	r5, r0, #0
 8002c78:	6260      	str	r0, [r4, #36]	; 0x24
	sysDataTLE.tempGrad.y = -0.079401 + (0.0010121 * sysDataTLE.offset.y);
 8002c7a:	9802      	ldr	r0, [sp, #8]
 8002c7c:	f7ff fe88 	bl	8002990 <__aeabi_f2d>
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <GetColibValues+0x12c>)
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <GetColibValues+0x130>)
 8002c84:	9002      	str	r0, [sp, #8]
 8002c86:	9103      	str	r1, [sp, #12]
 8002c88:	f7ff f876 	bl	8001d78 <__aeabi_dmul>
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <GetColibValues+0x134>)
 8002c8e:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <GetColibValues+0x138>)
 8002c90:	f7ff faf2 	bl	8002278 <__aeabi_dsub>
 8002c94:	f7ff fece 	bl	8002a34 <__aeabi_d2f>
 8002c98:	1c06      	adds	r6, r0, #0
 8002c9a:	62a0      	str	r0, [r4, #40]	; 0x28
	/*		Temperature-Dependent Offset Value
	================================================================*/
//	TLEReadData(TLE_TEMP_VALUE, &tleValues);
//	sysDataTLE.tempDepend.x = sysDataTLE.offset.x + (sysDataTLE.tempGrad.x / -188.75) * (tleValues[0] - sysDataTLE.tempX);
//	sysDataTLE.tempDepend.y = sysDataTLE.offset.y + (sysDataTLE.tempGrad.y / -188.75) * (tleValues[0] - sysDataTLE.tempX);
	sysDataTLE.tempDepend.x = sysDataTLE.offset.x + (sysDataTLE.tempGrad.x / -188.75);
 8002c9c:	1c28      	adds	r0, r5, #0
 8002c9e:	f7ff fe77 	bl	8002990 <__aeabi_f2d>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <GetColibValues+0x13c>)
 8002ca6:	f7fe fc33 	bl	8001510 <__aeabi_ddiv>
 8002caa:	0002      	movs	r2, r0
 8002cac:	000b      	movs	r3, r1
 8002cae:	9800      	ldr	r0, [sp, #0]
 8002cb0:	9901      	ldr	r1, [sp, #4]
 8002cb2:	f7fe f91d 	bl	8000ef0 <__aeabi_dadd>
 8002cb6:	f7ff febd 	bl	8002a34 <__aeabi_d2f>
 8002cba:	62e0      	str	r0, [r4, #44]	; 0x2c
	sysDataTLE.tempDepend.y = sysDataTLE.offset.y + (sysDataTLE.tempGrad.y / -188.75);
 8002cbc:	1c30      	adds	r0, r6, #0
 8002cbe:	f7ff fe67 	bl	8002990 <__aeabi_f2d>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <GetColibValues+0x13c>)
 8002cc6:	f7fe fc23 	bl	8001510 <__aeabi_ddiv>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	9802      	ldr	r0, [sp, #8]
 8002cd0:	9903      	ldr	r1, [sp, #12]
 8002cd2:	f7fe f90d 	bl	8000ef0 <__aeabi_dadd>
 8002cd6:	f7ff fead 	bl	8002a34 <__aeabi_d2f>
 8002cda:	6320      	str	r0, [r4, #48]	; 0x30

	/*		Temperature-Dependent Offset Value
	================================================================*/
//	TLEReadData(TLE_MAIN_VALUES, tleValues);
	sysDataTLE.ortDef = cos(tleValues[0]) - sin(tleValues[1]);
 8002cdc:	4e17      	ldr	r6, [pc, #92]	; (8002d3c <GetColibValues+0x140>)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	5ef0      	ldrsh	r0, [r6, r3]
 8002ce2:	f7ff fe13 	bl	800290c <__aeabi_i2d>
 8002ce6:	f005 f821 	bl	8007d2c <cos>
 8002cea:	9000      	str	r0, [sp, #0]
 8002cec:	9101      	str	r1, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	5ef0      	ldrsh	r0, [r6, r3]
 8002cf2:	f7ff fe0b 	bl	800290c <__aeabi_i2d>
 8002cf6:	f005 f85b 	bl	8007db0 <sin>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	9800      	ldr	r0, [sp, #0]
 8002d00:	9901      	ldr	r1, [sp, #4]
 8002d02:	f7ff fab9 	bl	8002278 <__aeabi_dsub>
 8002d06:	f7ff fe95 	bl	8002a34 <__aeabi_d2f>
 8002d0a:	6120      	str	r0, [r4, #16]
}
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bc04      	pop	{r2}
 8002d10:	4691      	mov	r9, r2
 8002d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d14:	20000220 	.word	0x20000220
 8002d18:	d42d135f 	.word	0xd42d135f
 8002d1c:	3f509ff5 	.word	0x3f509ff5
 8002d20:	1ca7d673 	.word	0x1ca7d673
 8002d24:	3fbdc593 	.word	0x3fbdc593
 8002d28:	199e36b7 	.word	0x199e36b7
 8002d2c:	3f50950e 	.word	0x3f50950e
 8002d30:	ba450acc 	.word	0xba450acc
 8002d34:	3fb4539f 	.word	0x3fb4539f
 8002d38:	c0679800 	.word	0xc0679800
 8002d3c:	20000280 	.word	0x20000280

08002d40 <GetResultAngle>:

float GetResultAngle(void)
{
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b083      	sub	sp, #12
	float radAngle;

	TLEReadData(TLE_MAIN_VALUES, tleValues);
 8002d44:	4c5b      	ldr	r4, [pc, #364]	; (8002eb4 <GetResultAngle+0x174>)
 8002d46:	0021      	movs	r1, r4
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f000 f8cb 	bl	8002ee4 <TLEReadData>
	sysDataTLE.curX = tleValues[0];
 8002d4e:	2300      	movs	r3, #0
 8002d50:	5ee0      	ldrsh	r0, [r4, r3]
 8002d52:	4f59      	ldr	r7, [pc, #356]	; (8002eb8 <GetResultAngle+0x178>)
 8002d54:	8178      	strh	r0, [r7, #10]
	sysDataTLE.curY = tleValues[1];
 8002d56:	2302      	movs	r3, #2
 8002d58:	5ee4      	ldrsh	r4, [r4, r3]
 8002d5a:	81bc      	strh	r4, [r7, #12]

	/*		Offset Correction
	================================================================*/
	sysDataTLE.offCor.x = tleValues[0] - sysDataTLE.tempDepend.x;
 8002d5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002d5e:	f7fe f877 	bl	8000e50 <__aeabi_i2f>
 8002d62:	1c29      	adds	r1, r5, #0
 8002d64:	f7fd fed8 	bl	8000b18 <__aeabi_fsub>
 8002d68:	1c05      	adds	r5, r0, #0
 8002d6a:	6378      	str	r0, [r7, #52]	; 0x34
	sysDataTLE.offCor.y = tleValues[1] - sysDataTLE.tempDepend.y;
 8002d6c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002d6e:	0020      	movs	r0, r4
 8002d70:	f7fe f86e 	bl	8000e50 <__aeabi_i2f>
 8002d74:	1c31      	adds	r1, r6, #0
 8002d76:	f7fd fecf 	bl	8000b18 <__aeabi_fsub>
 8002d7a:	1c04      	adds	r4, r0, #0
 8002d7c:	63b8      	str	r0, [r7, #56]	; 0x38

	/*		Amplitude Normalization
	================================================================*/
	sysDataTLE.ampNorm.x = sysDataTLE.offCor.x / sysDataTLE.amplitude.x;
 8002d7e:	69f9      	ldr	r1, [r7, #28]
 8002d80:	1c28      	adds	r0, r5, #0
 8002d82:	f7fd fbb9 	bl	80004f8 <__aeabi_fdiv>
 8002d86:	1c06      	adds	r6, r0, #0
 8002d88:	63f8      	str	r0, [r7, #60]	; 0x3c
	sysDataTLE.ampNorm.y = sysDataTLE.offCor.y / sysDataTLE.amplitude.y;
 8002d8a:	6a39      	ldr	r1, [r7, #32]
 8002d8c:	1c20      	adds	r0, r4, #0
 8002d8e:	f7fd fbb3 	bl	80004f8 <__aeabi_fdiv>
 8002d92:	6438      	str	r0, [r7, #64]	; 0x40

	/*		Non-Orthogonality Correction
	================================================================*/
	sysDataTLE.nonOrtCor.y = (sysDataTLE.ampNorm.y - sysDataTLE.ampNorm.x * sin(1.2400616409267344)) / cos(1.2400616409267344);
 8002d94:	f7ff fdfc 	bl	8002990 <__aeabi_f2d>
 8002d98:	0004      	movs	r4, r0
 8002d9a:	000d      	movs	r5, r1
 8002d9c:	1c30      	adds	r0, r6, #0
 8002d9e:	f7ff fdf7 	bl	8002990 <__aeabi_f2d>
 8002da2:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <GetResultAngle+0x17c>)
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <GetResultAngle+0x180>)
 8002da6:	9000      	str	r0, [sp, #0]
 8002da8:	9101      	str	r1, [sp, #4]
 8002daa:	f7fe ffe5 	bl	8001d78 <__aeabi_dmul>
 8002dae:	0002      	movs	r2, r0
 8002db0:	000b      	movs	r3, r1
 8002db2:	0020      	movs	r0, r4
 8002db4:	0029      	movs	r1, r5
 8002db6:	f7ff fa5f 	bl	8002278 <__aeabi_dsub>
 8002dba:	4a42      	ldr	r2, [pc, #264]	; (8002ec4 <GetResultAngle+0x184>)
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <GetResultAngle+0x188>)
 8002dbe:	f7fe fba7 	bl	8001510 <__aeabi_ddiv>
 8002dc2:	f7ff fe37 	bl	8002a34 <__aeabi_d2f>
 8002dc6:	6478      	str	r0, [r7, #68]	; 0x44

	/*		Resulting Angle
	================================================================*/
	radAngle = atan2(sysDataTLE.ampNorm.y, sysDataTLE.ampNorm.x);
 8002dc8:	9a00      	ldr	r2, [sp, #0]
 8002dca:	9b01      	ldr	r3, [sp, #4]
 8002dcc:	0020      	movs	r0, r4
 8002dce:	0029      	movs	r1, r5
 8002dd0:	f005 f834 	bl	8007e3c <atan2>
 8002dd4:	f7ff fe2e 	bl	8002a34 <__aeabi_d2f>
 8002dd8:	1c04      	adds	r4, r0, #0
	if(radAngle >= -PI_CONST && radAngle <= 0){
 8002dda:	f7ff fdd9 	bl	8002990 <__aeabi_f2d>
 8002dde:	0006      	movs	r6, r0
 8002de0:	000f      	movs	r7, r1
 8002de2:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <GetResultAngle+0x18c>)
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <GetResultAngle+0x190>)
 8002de6:	f7fd fb43 	bl	8000470 <__aeabi_dcmpge>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d005      	beq.n	8002dfa <GetResultAngle+0xba>
 8002dee:	2100      	movs	r1, #0
 8002df0:	1c20      	adds	r0, r4, #0
 8002df2:	f7fd fb63 	bl	80004bc <__aeabi_fcmple>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d140      	bne.n	8002e7c <GetResultAngle+0x13c>
		radAngle = PI_CONST + (PI_CONST + radAngle);
	}
	sysDataTLE.curResultAngle_RAW = (radAngle * 180) / PI_CONST;
 8002dfa:	4936      	ldr	r1, [pc, #216]	; (8002ed4 <GetResultAngle+0x194>)
 8002dfc:	1c20      	adds	r0, r4, #0
 8002dfe:	f7fd fd6b 	bl	80008d8 <__aeabi_fmul>
 8002e02:	f7ff fdc5 	bl	8002990 <__aeabi_f2d>
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <GetResultAngle+0x18c>)
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <GetResultAngle+0x198>)
 8002e0a:	f7fe fb81 	bl	8001510 <__aeabi_ddiv>
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <GetResultAngle+0x178>)
 8002e10:	6498      	str	r0, [r3, #72]	; 0x48
 8002e12:	64d9      	str	r1, [r3, #76]	; 0x4c

	radAngle = atan2(sysDataTLE.nonOrtCor.y, sysDataTLE.ampNorm.x) - -1.8997343902912205;
 8002e14:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8002e16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e18:	f7ff fdba 	bl	8002990 <__aeabi_f2d>
 8002e1c:	0004      	movs	r4, r0
 8002e1e:	000d      	movs	r5, r1
 8002e20:	1c30      	adds	r0, r6, #0
 8002e22:	f7ff fdb5 	bl	8002990 <__aeabi_f2d>
 8002e26:	0022      	movs	r2, r4
 8002e28:	002b      	movs	r3, r5
 8002e2a:	f005 f807 	bl	8007e3c <atan2>
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <GetResultAngle+0x19c>)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <GetResultAngle+0x1a0>)
 8002e32:	f7fe f85d 	bl	8000ef0 <__aeabi_dadd>
 8002e36:	f7ff fdfd 	bl	8002a34 <__aeabi_d2f>
 8002e3a:	1c04      	adds	r4, r0, #0
	if(radAngle >= -PI_CONST && radAngle <= 0){
 8002e3c:	f7ff fda8 	bl	8002990 <__aeabi_f2d>
 8002e40:	0006      	movs	r6, r0
 8002e42:	000f      	movs	r7, r1
 8002e44:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <GetResultAngle+0x18c>)
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <GetResultAngle+0x190>)
 8002e48:	f7fd fb12 	bl	8000470 <__aeabi_dcmpge>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d005      	beq.n	8002e5c <GetResultAngle+0x11c>
 8002e50:	2100      	movs	r1, #0
 8002e52:	1c20      	adds	r0, r4, #0
 8002e54:	f7fd fb32 	bl	80004bc <__aeabi_fcmple>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d11d      	bne.n	8002e98 <GetResultAngle+0x158>
		radAngle = PI_CONST + (PI_CONST + radAngle);
	}
	sysDataTLE.curResultAngle_DFT = (radAngle * 180) / PI_CONST;
 8002e5c:	491d      	ldr	r1, [pc, #116]	; (8002ed4 <GetResultAngle+0x194>)
 8002e5e:	1c20      	adds	r0, r4, #0
 8002e60:	f7fd fd3a 	bl	80008d8 <__aeabi_fmul>
 8002e64:	f7ff fd94 	bl	8002990 <__aeabi_f2d>
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <GetResultAngle+0x18c>)
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <GetResultAngle+0x198>)
 8002e6c:	f7fe fb50 	bl	8001510 <__aeabi_ddiv>
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <GetResultAngle+0x178>)
 8002e72:	6518      	str	r0, [r3, #80]	; 0x50
 8002e74:	6559      	str	r1, [r3, #84]	; 0x54

	return 0;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radAngle = PI_CONST + (PI_CONST + radAngle);
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <GetResultAngle+0x18c>)
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <GetResultAngle+0x198>)
 8002e80:	0030      	movs	r0, r6
 8002e82:	0039      	movs	r1, r7
 8002e84:	f7fe f834 	bl	8000ef0 <__aeabi_dadd>
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <GetResultAngle+0x18c>)
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <GetResultAngle+0x198>)
 8002e8c:	f7fe f830 	bl	8000ef0 <__aeabi_dadd>
 8002e90:	f7ff fdd0 	bl	8002a34 <__aeabi_d2f>
 8002e94:	1c04      	adds	r4, r0, #0
 8002e96:	e7b0      	b.n	8002dfa <GetResultAngle+0xba>
		radAngle = PI_CONST + (PI_CONST + radAngle);
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <GetResultAngle+0x18c>)
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <GetResultAngle+0x198>)
 8002e9c:	0030      	movs	r0, r6
 8002e9e:	0039      	movs	r1, r7
 8002ea0:	f7fe f826 	bl	8000ef0 <__aeabi_dadd>
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <GetResultAngle+0x18c>)
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <GetResultAngle+0x198>)
 8002ea8:	f7fe f822 	bl	8000ef0 <__aeabi_dadd>
 8002eac:	f7ff fdc2 	bl	8002a34 <__aeabi_d2f>
 8002eb0:	1c04      	adds	r4, r0, #0
 8002eb2:	e7d3      	b.n	8002e5c <GetResultAngle+0x11c>
 8002eb4:	20000280 	.word	0x20000280
 8002eb8:	20000220 	.word	0x20000220
 8002ebc:	c9ee0de2 	.word	0xc9ee0de2
 8002ec0:	3fee4406 	.word	0x3fee4406
 8002ec4:	d42468e7 	.word	0xd42468e7
 8002ec8:	3fd4c881 	.word	0x3fd4c881
 8002ecc:	54411744 	.word	0x54411744
 8002ed0:	c00921fb 	.word	0xc00921fb
 8002ed4:	43340000 	.word	0x43340000
 8002ed8:	400921fb 	.word	0x400921fb
 8002edc:	e3563259 	.word	0xe3563259
 8002ee0:	3ffe654f 	.word	0x3ffe654f

08002ee4 <TLEReadData>:
#include "OJ_TLE.h"

extern SPI_HandleTypeDef hspi2;

uint8_t TLEReadData(uint8_t dataType, void *pData)
{
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	0006      	movs	r6, r0
 8002eea:	9101      	str	r1, [sp, #4]
	dataStructTLETypeDef *dataStructTLE = (dataStructTLETypeDef *)malloc(sizeof(dataStructTLETypeDef));
 8002eec:	2012      	movs	r0, #18
 8002eee:	f004 fe3b 	bl	8007b68 <malloc>
 8002ef2:	0004      	movs	r4, r0
	uint8_t bufRX[16];
	HAL_StatusTypeDef ret;
	uint16_t bufTX;
	uint8_t temp;

	switch (dataType)
 8002ef4:	2e01      	cmp	r6, #1
 8002ef6:	d031      	beq.n	8002f5c <TLEReadData+0x78>
 8002ef8:	2e02      	cmp	r6, #2
 8002efa:	d100      	bne.n	8002efe <TLEReadData+0x1a>
 8002efc:	e0d0      	b.n	80030a0 <TLEReadData+0x1bc>
			}
			break;

	}

	dataStructTLE->ctrl1	 = bufRX[0];
 8002efe:	ab04      	add	r3, sp, #16
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	7022      	strb	r2, [r4, #0]
	dataStructTLE->valueX	 = (bufRX[2] << 8) + bufRX[1];
 8002f04:	789a      	ldrb	r2, [r3, #2]
 8002f06:	0212      	lsls	r2, r2, #8
 8002f08:	7859      	ldrb	r1, [r3, #1]
 8002f0a:	1852      	adds	r2, r2, r1
 8002f0c:	8062      	strh	r2, [r4, #2]
	dataStructTLE->valueY 	 = (bufRX[4] << 8) + bufRX[3];
 8002f0e:	791a      	ldrb	r2, [r3, #4]
 8002f10:	0212      	lsls	r2, r2, #8
 8002f12:	78d9      	ldrb	r1, [r3, #3]
 8002f14:	1852      	adds	r2, r2, r1
 8002f16:	80a2      	strh	r2, [r4, #4]
	dataStructTLE->fcn_stat	 = bufRX[5];
 8002f18:	795a      	ldrb	r2, [r3, #5]
 8002f1a:	71a2      	strb	r2, [r4, #6]
	dataStructTLE->fsync_inv = bufRX[6];
 8002f1c:	799a      	ldrb	r2, [r3, #6]
 8002f1e:	71e2      	strb	r2, [r4, #7]
	dataStructTLE->angt 	 = bufRX[7];
 8002f20:	79da      	ldrb	r2, [r3, #7]
 8002f22:	7222      	strb	r2, [r4, #8]
	dataStructTLE->reserved1 = bufRX[8];
 8002f24:	7a1a      	ldrb	r2, [r3, #8]
 8002f26:	7262      	strb	r2, [r4, #9]
	dataStructTLE->reserved2 = bufRX[9];
 8002f28:	7a5a      	ldrb	r2, [r3, #9]
 8002f2a:	72a2      	strb	r2, [r4, #10]
	dataStructTLE->reserved3 = bufRX[10];
 8002f2c:	7a9a      	ldrb	r2, [r3, #10]
 8002f2e:	72e2      	strb	r2, [r4, #11]
	dataStructTLE->reserved4 = bufRX[11];
 8002f30:	7ada      	ldrb	r2, [r3, #11]
 8002f32:	7322      	strb	r2, [r4, #12]
	dataStructTLE->tst		 = bufRX[12];
 8002f34:	7b1a      	ldrb	r2, [r3, #12]
 8002f36:	7362      	strb	r2, [r4, #13]
	dataStructTLE->deviceID  = bufRX[13];
 8002f38:	7b5a      	ldrb	r2, [r3, #13]
 8002f3a:	73a2      	strb	r2, [r4, #14]
	dataStructTLE->lock		 = bufRX[14];
 8002f3c:	7b9a      	ldrb	r2, [r3, #14]
 8002f3e:	73e2      	strb	r2, [r4, #15]
	dataStructTLE->ctrl2	 = bufRX[15];
 8002f40:	7bdb      	ldrb	r3, [r3, #15]
 8002f42:	7423      	strb	r3, [r4, #16]

//	dataStructTLE->valueX = 0xFFFF - dataStructTLE->valueX;
//	dataStructTLE->valueY = 0xFFFF - dataStructTLE->valueY;

	switch (dataType)
 8002f44:	2e01      	cmp	r6, #1
 8002f46:	d100      	bne.n	8002f4a <TLEReadData+0x66>
 8002f48:	e197      	b.n	800327a <TLEReadData+0x396>
 8002f4a:	2e02      	cmp	r6, #2
 8002f4c:	d100      	bne.n	8002f50 <TLEReadData+0x6c>
 8002f4e:	e19a      	b.n	8003286 <TLEReadData+0x3a2>
			}
			break;

	}

	free(dataStructTLE);
 8002f50:	0020      	movs	r0, r4
 8002f52:	f004 fe13 	bl	8007b7c <free>
	return 0;
}
 8002f56:	2000      	movs	r0, #0
 8002f58:	b009      	add	sp, #36	; 0x24
 8002f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bufTX = TLE_UPDATE;
 8002f5c:	ab02      	add	r3, sp, #8
 8002f5e:	1d9f      	adds	r7, r3, #6
 8002f60:	2300      	movs	r3, #0
 8002f62:	803b      	strh	r3, [r7, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2110      	movs	r1, #16
 8002f68:	48ca      	ldr	r0, [pc, #808]	; (8003294 <TLEReadData+0x3b0>)
 8002f6a:	f000 febf 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002f6e:	2202      	movs	r2, #2
 8002f70:	0039      	movs	r1, r7
 8002f72:	48c9      	ldr	r0, [pc, #804]	; (8003298 <TLEReadData+0x3b4>)
 8002f74:	f003 f80e 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002f78:	48c7      	ldr	r0, [pc, #796]	; (8003298 <TLEReadData+0x3b4>)
 8002f7a:	f003 fb09 	bl	8006590 <HAL_SPI_GetState>
 8002f7e:	2801      	cmp	r0, #1
 8002f80:	d1fa      	bne.n	8002f78 <TLEReadData+0x94>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002f82:	4fc4      	ldr	r7, [pc, #784]	; (8003294 <TLEReadData+0x3b0>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	2110      	movs	r1, #16
 8002f88:	0038      	movs	r0, r7
 8002f8a:	f000 feaf 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8002f8e:	ab02      	add	r3, sp, #8
 8002f90:	1d9d      	adds	r5, r3, #6
 8002f92:	2387      	movs	r3, #135	; 0x87
 8002f94:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2110      	movs	r1, #16
 8002f9a:	0038      	movs	r0, r7
 8002f9c:	f000 fea6 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	0029      	movs	r1, r5
 8002fa4:	48bc      	ldr	r0, [pc, #752]	; (8003298 <TLEReadData+0x3b4>)
 8002fa6:	f002 fff5 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002faa:	48bb      	ldr	r0, [pc, #748]	; (8003298 <TLEReadData+0x3b4>)
 8002fac:	f003 faf0 	bl	8006590 <HAL_SPI_GetState>
 8002fb0:	2801      	cmp	r0, #1
 8002fb2:	d1fa      	bne.n	8002faa <TLEReadData+0xc6>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002fb4:	4fb8      	ldr	r7, [pc, #736]	; (8003298 <TLEReadData+0x3b4>)
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	2201      	movs	r2, #1
 8002fba:	a904      	add	r1, sp, #16
 8002fbc:	0038      	movs	r0, r7
 8002fbe:	f002 ff21 	bl	8005e04 <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX, 7);
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	a904      	add	r1, sp, #16
 8002fc6:	0038      	movs	r0, r7
 8002fc8:	f003 f96c 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002fcc:	48b2      	ldr	r0, [pc, #712]	; (8003298 <TLEReadData+0x3b4>)
 8002fce:	f003 fadf 	bl	8006590 <HAL_SPI_GetState>
 8002fd2:	2801      	cmp	r0, #1
 8002fd4:	d1fa      	bne.n	8002fcc <TLEReadData+0xe8>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002fd6:	4faf      	ldr	r7, [pc, #700]	; (8003294 <TLEReadData+0x3b0>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2110      	movs	r1, #16
 8002fdc:	0038      	movs	r0, r7
 8002fde:	f000 fe85 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 8002fe2:	ab02      	add	r3, sp, #8
 8002fe4:	1d9d      	adds	r5, r3, #6
 8002fe6:	23bf      	movs	r3, #191	; 0xbf
 8002fe8:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2110      	movs	r1, #16
 8002fee:	0038      	movs	r0, r7
 8002ff0:	f000 fe7c 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	48a7      	ldr	r0, [pc, #668]	; (8003298 <TLEReadData+0x3b4>)
 8002ffa:	f002 ffcb 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002ffe:	48a6      	ldr	r0, [pc, #664]	; (8003298 <TLEReadData+0x3b4>)
 8003000:	f003 fac6 	bl	8006590 <HAL_SPI_GetState>
 8003004:	2801      	cmp	r0, #1
 8003006:	d1fa      	bne.n	8002ffe <TLEReadData+0x11a>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8003008:	4fa3      	ldr	r7, [pc, #652]	; (8003298 <TLEReadData+0x3b4>)
 800300a:	2301      	movs	r3, #1
 800300c:	2201      	movs	r2, #1
 800300e:	a904      	add	r1, sp, #16
 8003010:	0038      	movs	r0, r7
 8003012:	f002 fef7 	bl	8005e04 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+7, 7);
 8003016:	2207      	movs	r2, #7
 8003018:	210f      	movs	r1, #15
 800301a:	ab02      	add	r3, sp, #8
 800301c:	469c      	mov	ip, r3
 800301e:	4461      	add	r1, ip
 8003020:	0038      	movs	r0, r7
 8003022:	f003 f93f 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003026:	489c      	ldr	r0, [pc, #624]	; (8003298 <TLEReadData+0x3b4>)
 8003028:	f003 fab2 	bl	8006590 <HAL_SPI_GetState>
 800302c:	2801      	cmp	r0, #1
 800302e:	d1fa      	bne.n	8003026 <TLEReadData+0x142>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003030:	4f98      	ldr	r7, [pc, #608]	; (8003294 <TLEReadData+0x3b0>)
 8003032:	2201      	movs	r2, #1
 8003034:	2110      	movs	r1, #16
 8003036:	0038      	movs	r0, r7
 8003038:	f000 fe58 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 800303c:	ab02      	add	r3, sp, #8
 800303e:	1d9d      	adds	r5, r3, #6
 8003040:	23f2      	movs	r3, #242	; 0xf2
 8003042:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003044:	2200      	movs	r2, #0
 8003046:	2110      	movs	r1, #16
 8003048:	0038      	movs	r0, r7
 800304a:	f000 fe4f 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 800304e:	2201      	movs	r2, #1
 8003050:	0029      	movs	r1, r5
 8003052:	4891      	ldr	r0, [pc, #580]	; (8003298 <TLEReadData+0x3b4>)
 8003054:	f002 ff9e 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003058:	488f      	ldr	r0, [pc, #572]	; (8003298 <TLEReadData+0x3b4>)
 800305a:	f003 fa99 	bl	8006590 <HAL_SPI_GetState>
 800305e:	2801      	cmp	r0, #1
 8003060:	d1fa      	bne.n	8003058 <TLEReadData+0x174>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8003062:	4f8d      	ldr	r7, [pc, #564]	; (8003298 <TLEReadData+0x3b4>)
 8003064:	2301      	movs	r3, #1
 8003066:	2201      	movs	r2, #1
 8003068:	a904      	add	r1, sp, #16
 800306a:	0038      	movs	r0, r7
 800306c:	f002 feca 	bl	8005e04 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+14, 2);
 8003070:	2202      	movs	r2, #2
 8003072:	2116      	movs	r1, #22
 8003074:	ab02      	add	r3, sp, #8
 8003076:	469c      	mov	ip, r3
 8003078:	4461      	add	r1, ip
 800307a:	0038      	movs	r0, r7
 800307c:	f003 f912 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003080:	4885      	ldr	r0, [pc, #532]	; (8003298 <TLEReadData+0x3b4>)
 8003082:	f003 fa85 	bl	8006590 <HAL_SPI_GetState>
 8003086:	2801      	cmp	r0, #1
 8003088:	d1fa      	bne.n	8003080 <TLEReadData+0x19c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800308a:	2201      	movs	r2, #1
 800308c:	2110      	movs	r1, #16
 800308e:	4881      	ldr	r0, [pc, #516]	; (8003294 <TLEReadData+0x3b0>)
 8003090:	f000 fe2c 	bl	8003cec <HAL_GPIO_WritePin>
				memcpy(pData, &dataStructTLE->valueX, 4);
 8003094:	1ca1      	adds	r1, r4, #2
 8003096:	2204      	movs	r2, #4
 8003098:	9801      	ldr	r0, [sp, #4]
 800309a:	f004 fd79 	bl	8007b90 <memcpy>
			break;
 800309e:	e72e      	b.n	8002efe <TLEReadData+0x1a>
				bufTX = (bufTX << 8) + temp;
 80030a0:	ab02      	add	r3, sp, #8
 80030a2:	1d9f      	adds	r7, r3, #6
 80030a4:	4b7d      	ldr	r3, [pc, #500]	; (800329c <TLEReadData+0x3b8>)
 80030a6:	803b      	strh	r3, [r7, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2110      	movs	r1, #16
 80030ac:	4879      	ldr	r0, [pc, #484]	; (8003294 <TLEReadData+0x3b0>)
 80030ae:	f000 fe1d 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 80030b2:	2202      	movs	r2, #2
 80030b4:	0039      	movs	r1, r7
 80030b6:	4878      	ldr	r0, [pc, #480]	; (8003298 <TLEReadData+0x3b4>)
 80030b8:	f002 ff6c 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80030bc:	4876      	ldr	r0, [pc, #472]	; (8003298 <TLEReadData+0x3b4>)
 80030be:	f003 fa67 	bl	8006590 <HAL_SPI_GetState>
 80030c2:	2801      	cmp	r0, #1
 80030c4:	d1fa      	bne.n	80030bc <TLEReadData+0x1d8>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80030c6:	4f73      	ldr	r7, [pc, #460]	; (8003294 <TLEReadData+0x3b0>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	2110      	movs	r1, #16
 80030cc:	0038      	movs	r0, r7
 80030ce:	f000 fe0d 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 80030d2:	ab02      	add	r3, sp, #8
 80030d4:	1d9d      	adds	r5, r3, #6
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <TLEReadData+0x3bc>)
 80030d8:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2110      	movs	r1, #16
 80030de:	0038      	movs	r0, r7
 80030e0:	f000 fe04 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 80030e4:	2202      	movs	r2, #2
 80030e6:	0029      	movs	r1, r5
 80030e8:	486b      	ldr	r0, [pc, #428]	; (8003298 <TLEReadData+0x3b4>)
 80030ea:	f002 ff53 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80030ee:	486a      	ldr	r0, [pc, #424]	; (8003298 <TLEReadData+0x3b4>)
 80030f0:	f003 fa4e 	bl	8006590 <HAL_SPI_GetState>
 80030f4:	2801      	cmp	r0, #1
 80030f6:	d1fa      	bne.n	80030ee <TLEReadData+0x20a>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80030f8:	4f66      	ldr	r7, [pc, #408]	; (8003294 <TLEReadData+0x3b0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	2110      	movs	r1, #16
 80030fe:	0038      	movs	r0, r7
 8003100:	f000 fdf4 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_UPDATE;
 8003104:	ab02      	add	r3, sp, #8
 8003106:	1d9d      	adds	r5, r3, #6
 8003108:	2300      	movs	r3, #0
 800310a:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	2110      	movs	r1, #16
 8003110:	0038      	movs	r0, r7
 8003112:	f000 fdeb 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8003116:	2202      	movs	r2, #2
 8003118:	0029      	movs	r1, r5
 800311a:	485f      	ldr	r0, [pc, #380]	; (8003298 <TLEReadData+0x3b4>)
 800311c:	f002 ff3a 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003120:	485d      	ldr	r0, [pc, #372]	; (8003298 <TLEReadData+0x3b4>)
 8003122:	f003 fa35 	bl	8006590 <HAL_SPI_GetState>
 8003126:	2801      	cmp	r0, #1
 8003128:	d1fa      	bne.n	8003120 <TLEReadData+0x23c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800312a:	4f5a      	ldr	r7, [pc, #360]	; (8003294 <TLEReadData+0x3b0>)
 800312c:	2201      	movs	r2, #1
 800312e:	2110      	movs	r1, #16
 8003130:	0038      	movs	r0, r7
 8003132:	f000 fddb 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8003136:	ab02      	add	r3, sp, #8
 8003138:	1d9d      	adds	r5, r3, #6
 800313a:	2387      	movs	r3, #135	; 0x87
 800313c:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	2110      	movs	r1, #16
 8003142:	0038      	movs	r0, r7
 8003144:	f000 fdd2 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8003148:	2201      	movs	r2, #1
 800314a:	0029      	movs	r1, r5
 800314c:	4852      	ldr	r0, [pc, #328]	; (8003298 <TLEReadData+0x3b4>)
 800314e:	f002 ff21 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003152:	4851      	ldr	r0, [pc, #324]	; (8003298 <TLEReadData+0x3b4>)
 8003154:	f003 fa1c 	bl	8006590 <HAL_SPI_GetState>
 8003158:	2801      	cmp	r0, #1
 800315a:	d1fa      	bne.n	8003152 <TLEReadData+0x26e>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 800315c:	4f4e      	ldr	r7, [pc, #312]	; (8003298 <TLEReadData+0x3b4>)
 800315e:	2301      	movs	r3, #1
 8003160:	2201      	movs	r2, #1
 8003162:	a904      	add	r1, sp, #16
 8003164:	0038      	movs	r0, r7
 8003166:	f002 fe4d 	bl	8005e04 <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX, 7);
 800316a:	2207      	movs	r2, #7
 800316c:	a904      	add	r1, sp, #16
 800316e:	0038      	movs	r0, r7
 8003170:	f003 f898 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003174:	4848      	ldr	r0, [pc, #288]	; (8003298 <TLEReadData+0x3b4>)
 8003176:	f003 fa0b 	bl	8006590 <HAL_SPI_GetState>
 800317a:	2801      	cmp	r0, #1
 800317c:	d1fa      	bne.n	8003174 <TLEReadData+0x290>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800317e:	4f45      	ldr	r7, [pc, #276]	; (8003294 <TLEReadData+0x3b0>)
 8003180:	2201      	movs	r2, #1
 8003182:	2110      	movs	r1, #16
 8003184:	0038      	movs	r0, r7
 8003186:	f000 fdb1 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 800318a:	ab02      	add	r3, sp, #8
 800318c:	1d9d      	adds	r5, r3, #6
 800318e:	23bf      	movs	r3, #191	; 0xbf
 8003190:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	2110      	movs	r1, #16
 8003196:	0038      	movs	r0, r7
 8003198:	f000 fda8 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 800319c:	2201      	movs	r2, #1
 800319e:	0029      	movs	r1, r5
 80031a0:	483d      	ldr	r0, [pc, #244]	; (8003298 <TLEReadData+0x3b4>)
 80031a2:	f002 fef7 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80031a6:	483c      	ldr	r0, [pc, #240]	; (8003298 <TLEReadData+0x3b4>)
 80031a8:	f003 f9f2 	bl	8006590 <HAL_SPI_GetState>
 80031ac:	2801      	cmp	r0, #1
 80031ae:	d1fa      	bne.n	80031a6 <TLEReadData+0x2c2>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 80031b0:	4f39      	ldr	r7, [pc, #228]	; (8003298 <TLEReadData+0x3b4>)
 80031b2:	2301      	movs	r3, #1
 80031b4:	2201      	movs	r2, #1
 80031b6:	a904      	add	r1, sp, #16
 80031b8:	0038      	movs	r0, r7
 80031ba:	f002 fe23 	bl	8005e04 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+7, 7);
 80031be:	2207      	movs	r2, #7
 80031c0:	210f      	movs	r1, #15
 80031c2:	ab02      	add	r3, sp, #8
 80031c4:	469c      	mov	ip, r3
 80031c6:	4461      	add	r1, ip
 80031c8:	0038      	movs	r0, r7
 80031ca:	f003 f86b 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80031ce:	4832      	ldr	r0, [pc, #200]	; (8003298 <TLEReadData+0x3b4>)
 80031d0:	f003 f9de 	bl	8006590 <HAL_SPI_GetState>
 80031d4:	2801      	cmp	r0, #1
 80031d6:	d1fa      	bne.n	80031ce <TLEReadData+0x2ea>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80031d8:	4f2e      	ldr	r7, [pc, #184]	; (8003294 <TLEReadData+0x3b0>)
 80031da:	2201      	movs	r2, #1
 80031dc:	2110      	movs	r1, #16
 80031de:	0038      	movs	r0, r7
 80031e0:	f000 fd84 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 80031e4:	ab02      	add	r3, sp, #8
 80031e6:	1d9d      	adds	r5, r3, #6
 80031e8:	23f2      	movs	r3, #242	; 0xf2
 80031ea:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2110      	movs	r1, #16
 80031f0:	0038      	movs	r0, r7
 80031f2:	f000 fd7b 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 80031f6:	2201      	movs	r2, #1
 80031f8:	0029      	movs	r1, r5
 80031fa:	4827      	ldr	r0, [pc, #156]	; (8003298 <TLEReadData+0x3b4>)
 80031fc:	f002 feca 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003200:	4825      	ldr	r0, [pc, #148]	; (8003298 <TLEReadData+0x3b4>)
 8003202:	f003 f9c5 	bl	8006590 <HAL_SPI_GetState>
 8003206:	2801      	cmp	r0, #1
 8003208:	d1fa      	bne.n	8003200 <TLEReadData+0x31c>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 800320a:	4f23      	ldr	r7, [pc, #140]	; (8003298 <TLEReadData+0x3b4>)
 800320c:	2301      	movs	r3, #1
 800320e:	2201      	movs	r2, #1
 8003210:	a904      	add	r1, sp, #16
 8003212:	0038      	movs	r0, r7
 8003214:	f002 fdf6 	bl	8005e04 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+14, 2);
 8003218:	2202      	movs	r2, #2
 800321a:	2116      	movs	r1, #22
 800321c:	ab02      	add	r3, sp, #8
 800321e:	469c      	mov	ip, r3
 8003220:	4461      	add	r1, ip
 8003222:	0038      	movs	r0, r7
 8003224:	f003 f83e 	bl	80062a4 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8003228:	481b      	ldr	r0, [pc, #108]	; (8003298 <TLEReadData+0x3b4>)
 800322a:	f003 f9b1 	bl	8006590 <HAL_SPI_GetState>
 800322e:	2801      	cmp	r0, #1
 8003230:	d1fa      	bne.n	8003228 <TLEReadData+0x344>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003232:	4f18      	ldr	r7, [pc, #96]	; (8003294 <TLEReadData+0x3b0>)
 8003234:	2201      	movs	r2, #1
 8003236:	2110      	movs	r1, #16
 8003238:	0038      	movs	r0, r7
 800323a:	f000 fd57 	bl	8003cec <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 800323e:	ab02      	add	r3, sp, #8
 8003240:	1d9d      	adds	r5, r3, #6
 8003242:	2361      	movs	r3, #97	; 0x61
 8003244:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003246:	2200      	movs	r2, #0
 8003248:	2110      	movs	r1, #16
 800324a:	0038      	movs	r0, r7
 800324c:	f000 fd4e 	bl	8003cec <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8003250:	2202      	movs	r2, #2
 8003252:	0029      	movs	r1, r5
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <TLEReadData+0x3b4>)
 8003256:	f002 fe9d 	bl	8005f94 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800325a:	480f      	ldr	r0, [pc, #60]	; (8003298 <TLEReadData+0x3b4>)
 800325c:	f003 f998 	bl	8006590 <HAL_SPI_GetState>
 8003260:	2801      	cmp	r0, #1
 8003262:	d1fa      	bne.n	800325a <TLEReadData+0x376>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003264:	2201      	movs	r2, #1
 8003266:	2110      	movs	r1, #16
 8003268:	480a      	ldr	r0, [pc, #40]	; (8003294 <TLEReadData+0x3b0>)
 800326a:	f000 fd3f 	bl	8003cec <HAL_GPIO_WritePin>
				memcpy(pData, &dataStructTLE->valueX, 2);
 800326e:	1ca1      	adds	r1, r4, #2
 8003270:	2202      	movs	r2, #2
 8003272:	9801      	ldr	r0, [sp, #4]
 8003274:	f004 fc8c 	bl	8007b90 <memcpy>
			break;
 8003278:	e641      	b.n	8002efe <TLEReadData+0x1a>
				memcpy(pData, &dataStructTLE->valueX, 4);
 800327a:	1ca1      	adds	r1, r4, #2
 800327c:	2204      	movs	r2, #4
 800327e:	9801      	ldr	r0, [sp, #4]
 8003280:	f004 fc86 	bl	8007b90 <memcpy>
			break;
 8003284:	e664      	b.n	8002f50 <TLEReadData+0x6c>
				memcpy(pData, &dataStructTLE->valueX, 4);
 8003286:	1ca1      	adds	r1, r4, #2
 8003288:	2204      	movs	r2, #4
 800328a:	9801      	ldr	r0, [sp, #4]
 800328c:	f004 fc80 	bl	8007b90 <memcpy>
			break;
 8003290:	e65e      	b.n	8002f50 <TLEReadData+0x6c>
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	48000400 	.word	0x48000400
 8003298:	20000284 	.word	0x20000284
 800329c:	00005a71 	.word	0x00005a71
 80032a0:	ffff8061 	.word	0xffff8061

080032a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	2214      	movs	r2, #20
 80032aa:	2100      	movs	r1, #0
 80032ac:	a803      	add	r0, sp, #12
 80032ae:	f004 fc78 	bl	8007ba2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <MX_GPIO_Init+0xb4>)
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	2080      	movs	r0, #128	; 0x80
 80032b8:	0300      	lsls	r0, r0, #12
 80032ba:	4301      	orrs	r1, r0
 80032bc:	6159      	str	r1, [r3, #20]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	4002      	ands	r2, r0
 80032c2:	9200      	str	r2, [sp, #0]
 80032c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	2080      	movs	r0, #128	; 0x80
 80032ca:	0280      	lsls	r0, r0, #10
 80032cc:	4301      	orrs	r1, r0
 80032ce:	6159      	str	r1, [r3, #20]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	4002      	ands	r2, r0
 80032d4:	9201      	str	r2, [sp, #4]
 80032d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	02c9      	lsls	r1, r1, #11
 80032de:	430a      	orrs	r2, r1
 80032e0:	615a      	str	r2, [r3, #20]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	400b      	ands	r3, r1
 80032e6:	9302      	str	r3, [sp, #8]
 80032e8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032ea:	2690      	movs	r6, #144	; 0x90
 80032ec:	05f6      	lsls	r6, r6, #23
 80032ee:	2200      	movs	r2, #0
 80032f0:	2120      	movs	r1, #32
 80032f2:	0030      	movs	r0, r6
 80032f4:	f000 fcfa 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80032f8:	4d18      	ldr	r5, [pc, #96]	; (800335c <MX_GPIO_Init+0xb8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	2110      	movs	r1, #16
 80032fe:	0028      	movs	r0, r5
 8003300:	f000 fcf4 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	019b      	lsls	r3, r3, #6
 8003308:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <MX_GPIO_Init+0xbc>)
 800330c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330e:	2401      	movs	r4, #1
 8003310:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003312:	a903      	add	r1, sp, #12
 8003314:	4813      	ldr	r0, [pc, #76]	; (8003364 <MX_GPIO_Init+0xc0>)
 8003316:	f000 fc1b 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800331a:	2320      	movs	r3, #32
 800331c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003326:	a903      	add	r1, sp, #12
 8003328:	0030      	movs	r0, r6
 800332a:	f000 fc11 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800332e:	2310      	movs	r3, #16
 8003330:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003332:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003334:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003336:	3b0d      	subs	r3, #13
 8003338:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800333a:	a903      	add	r1, sp, #12
 800333c:	0028      	movs	r0, r5
 800333e:	f000 fc07 	bl	8003b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2102      	movs	r1, #2
 8003346:	2007      	movs	r0, #7
 8003348:	f000 fae0 	bl	800390c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800334c:	2007      	movs	r0, #7
 800334e:	f000 fb0f 	bl	8003970 <HAL_NVIC_EnableIRQ>

}
 8003352:	b008      	add	sp, #32
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40021000 	.word	0x40021000
 800335c:	48000400 	.word	0x48000400
 8003360:	10210000 	.word	0x10210000
 8003364:	48000800 	.word	0x48000800

08003368 <MX_DMA_Init>:
{
 8003368:	b500      	push	{lr}
 800336a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <MX_DMA_Init+0x2c>)
 800336e:	6951      	ldr	r1, [r2, #20]
 8003370:	2301      	movs	r3, #1
 8003372:	4319      	orrs	r1, r3
 8003374:	6151      	str	r1, [r2, #20]
 8003376:	6952      	ldr	r2, [r2, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	200b      	movs	r0, #11
 8003384:	f000 fac2 	bl	800390c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003388:	200b      	movs	r0, #11
 800338a:	f000 faf1 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 800338e:	b003      	add	sp, #12
 8003390:	bd00      	pop	{pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40021000 	.word	0x40021000

08003398 <MX_TIM3_Init>:
{
 8003398:	b530      	push	{r4, r5, lr}
 800339a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339c:	2208      	movs	r2, #8
 800339e:	2100      	movs	r1, #0
 80033a0:	a808      	add	r0, sp, #32
 80033a2:	f004 fbfe 	bl	8007ba2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a6:	221c      	movs	r2, #28
 80033a8:	2100      	movs	r1, #0
 80033aa:	a801      	add	r0, sp, #4
 80033ac:	f004 fbf9 	bl	8007ba2 <memset>
  htim3.Instance = TIM3;
 80033b0:	4c11      	ldr	r4, [pc, #68]	; (80033f8 <MX_TIM3_Init+0x60>)
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_TIM3_Init+0x64>)
 80033b4:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 2;
 80033b6:	2302      	movs	r3, #2
 80033b8:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ba:	2500      	movs	r5, #0
 80033bc:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 3;
 80033be:	3301      	adds	r3, #1
 80033c0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c2:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033c6:	0020      	movs	r0, r4
 80033c8:	f003 fada 	bl	8006980 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033cc:	9508      	str	r5, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ce:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033d0:	a908      	add	r1, sp, #32
 80033d2:	0020      	movs	r0, r4
 80033d4:	f003 fbe6 	bl	8006ba4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d8:	2360      	movs	r3, #96	; 0x60
 80033da:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80033dc:	9502      	str	r5, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033de:	9503      	str	r5, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e0:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033e2:	2204      	movs	r2, #4
 80033e4:	a901      	add	r1, sp, #4
 80033e6:	0020      	movs	r0, r4
 80033e8:	f003 fb28 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80033ec:	0020      	movs	r0, r4
 80033ee:	f000 f967 	bl	80036c0 <HAL_TIM_MspPostInit>
}
 80033f2:	b00b      	add	sp, #44	; 0x2c
 80033f4:	bd30      	pop	{r4, r5, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000334 	.word	0x20000334
 80033fc:	40000400 	.word	0x40000400

08003400 <MX_SPI2_Init>:
{
 8003400:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8003402:	4810      	ldr	r0, [pc, #64]	; (8003444 <MX_SPI2_Init+0x44>)
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_SPI2_Init+0x48>)
 8003406:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003408:	2382      	movs	r3, #130	; 0x82
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003414:	23e0      	movs	r3, #224	; 0xe0
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800341e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003426:	3ac9      	subs	r2, #201	; 0xc9
 8003428:	3aff      	subs	r2, #255	; 0xff
 800342a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800342e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003430:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003432:	3a31      	subs	r2, #49	; 0x31
 8003434:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003436:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003438:	3308      	adds	r3, #8
 800343a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800343c:	f002 fb28 	bl	8005a90 <HAL_SPI_Init>
}
 8003440:	bd10      	pop	{r4, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	20000284 	.word	0x20000284
 8003448:	40003800 	.word	0x40003800

0800344c <SystemClock_Config>:
{
 800344c:	b510      	push	{r4, lr}
 800344e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003450:	2234      	movs	r2, #52	; 0x34
 8003452:	2100      	movs	r1, #0
 8003454:	a80b      	add	r0, sp, #44	; 0x2c
 8003456:	f004 fba4 	bl	8007ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800345a:	2210      	movs	r2, #16
 800345c:	2100      	movs	r1, #0
 800345e:	a807      	add	r0, sp, #28
 8003460:	f004 fb9f 	bl	8007ba2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003464:	221c      	movs	r2, #28
 8003466:	2100      	movs	r1, #0
 8003468:	4668      	mov	r0, sp
 800346a:	f004 fb9a 	bl	8007ba2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800346e:	2320      	movs	r3, #32
 8003470:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003472:	3b1f      	subs	r3, #31
 8003474:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003476:	a80b      	add	r0, sp, #44	; 0x2c
 8003478:	f001 fd7e 	bl	8004f78 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800347c:	2307      	movs	r3, #7
 800347e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003480:	3b04      	subs	r3, #4
 8003482:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003484:	2400      	movs	r4, #0
 8003486:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003488:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800348a:	2101      	movs	r1, #1
 800348c:	a807      	add	r0, sp, #28
 800348e:	f002 f839 	bl	8005504 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	029b      	lsls	r3, r3, #10
 8003496:	9300      	str	r3, [sp, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003498:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800349a:	4668      	mov	r0, sp
 800349c:	f002 f926 	bl	80056ec <HAL_RCCEx_PeriphCLKConfig>
}
 80034a0:	b018      	add	sp, #96	; 0x60
 80034a2:	bd10      	pop	{r4, pc}

080034a4 <main>:
{
 80034a4:	b510      	push	{r4, lr}
  HAL_Init();
 80034a6:	f000 fa01 	bl	80038ac <HAL_Init>
  SystemClock_Config();
 80034aa:	f7ff ffcf 	bl	800344c <SystemClock_Config>
  MX_GPIO_Init();
 80034ae:	f7ff fef9 	bl	80032a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80034b2:	f7ff ff59 	bl	8003368 <MX_DMA_Init>
  MX_TIM3_Init();
 80034b6:	f7ff ff6f 	bl	8003398 <MX_TIM3_Init>
  MX_SPI2_Init();
 80034ba:	f7ff ffa1 	bl	8003400 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80034be:	f004 f8f7 	bl	80076b0 <MX_USB_DEVICE_Init>
	joyStates.a1 = 1;
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <main+0x90>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
	joyStates.a2 = 2;
 80034c8:	3201      	adds	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
	joyStates.a3 = 3;
 80034cc:	2103      	movs	r1, #3
 80034ce:	7099      	strb	r1, [r3, #2]
	joyStates.a4 = 4;
 80034d0:	3101      	adds	r1, #1
 80034d2:	70d9      	strb	r1, [r3, #3]
	joyStates.a5 = 5;
 80034d4:	3101      	adds	r1, #1
 80034d6:	7119      	strb	r1, [r3, #4]
	joyStates.a6 = 6;
 80034d8:	3101      	adds	r1, #1
 80034da:	7159      	strb	r1, [r3, #5]
	joyStates.a7 = 7;
 80034dc:	3101      	adds	r1, #1
 80034de:	7199      	strb	r1, [r3, #6]
	joyStates.a8 = 8;
 80034e0:	3101      	adds	r1, #1
 80034e2:	71d9      	strb	r1, [r3, #7]
	TIM3->CCR2 = 2;
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <main+0x94>)
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80034e8:	3904      	subs	r1, #4
 80034ea:	4814      	ldr	r0, [pc, #80]	; (800353c <main+0x98>)
 80034ec:	f003 fb28 	bl	8006b40 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f000 f9f9 	bl	80038e8 <HAL_Delay>
	colibState = 0;
 80034f6:	2200      	movs	r2, #0
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <main+0x9c>)
 80034fa:	701a      	strb	r2, [r3, #0]
	GetTempValues();
 80034fc:	f7ff fb6e 	bl	8002bdc <GetTempValues>
 8003500:	e001      	b.n	8003506 <main+0x62>
		  GetMaxMinValues();
 8003502:	f7ff fb3f 	bl	8002b84 <GetMaxMinValues>
	  if(colibState == 1){
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <main+0x9c>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d0f9      	beq.n	8003502 <main+0x5e>
	  else if(sysDataTLE.tempDepend.x != 0 && sysDataTLE.tempDepend.y != 0){
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <main+0xa0>)
 8003510:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003512:	2100      	movs	r1, #0
 8003514:	f7fc ffc2 	bl	800049c <__aeabi_fcmpeq>
 8003518:	2800      	cmp	r0, #0
 800351a:	d1f4      	bne.n	8003506 <main+0x62>
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <main+0xa0>)
 800351e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003520:	2100      	movs	r1, #0
 8003522:	f7fc ffbb 	bl	800049c <__aeabi_fcmpeq>
 8003526:	2800      	cmp	r0, #0
 8003528:	d1ed      	bne.n	8003506 <main+0x62>
		  resultAngle = GetResultAngle();
 800352a:	f7ff fc09 	bl	8002d40 <GetResultAngle>
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <main+0xa4>)
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	e7e8      	b.n	8003506 <main+0x62>
 8003534:	2000032c 	.word	0x2000032c
 8003538:	40000400 	.word	0x40000400
 800353c:	20000334 	.word	0x20000334
 8003540:	20000376 	.word	0x20000376
 8003544:	20000220 	.word	0x20000220
 8003548:	200003c4 	.word	0x200003c4

0800354c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800354e:	6802      	ldr	r2, [r0, #0]
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003552:	429a      	cmp	r2, r3
 8003554:	d000      	beq.n	8003558 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003556:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8003558:	f000 f9b8 	bl	80038cc <HAL_IncTick>
}
 800355c:	e7fb      	b.n	8003556 <HAL_TIM_PeriodElapsedCallback+0xa>
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40001000 	.word	0x40001000

08003564 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003564:	4770      	bx	lr
	...

08003568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003568:	b500      	push	{lr}
 800356a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356c:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_MspInit+0x3c>)
 800356e:	6999      	ldr	r1, [r3, #24]
 8003570:	2201      	movs	r2, #1
 8003572:	4311      	orrs	r1, r2
 8003574:	6199      	str	r1, [r3, #24]
 8003576:	6999      	ldr	r1, [r3, #24]
 8003578:	400a      	ands	r2, r1
 800357a:	9200      	str	r2, [sp, #0]
 800357c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	2180      	movs	r1, #128	; 0x80
 8003582:	0549      	lsls	r1, r1, #21
 8003584:	430a      	orrs	r2, r1
 8003586:	61da      	str	r2, [r3, #28]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	400b      	ands	r3, r1
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	2004      	movs	r0, #4
 8003596:	f000 f9b9 	bl	800390c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800359a:	2004      	movs	r0, #4
 800359c:	f000 f9e8 	bl	8003970 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a0:	b003      	add	sp, #12
 80035a2:	bd00      	pop	{pc}
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ae:	2214      	movs	r2, #20
 80035b0:	2100      	movs	r1, #0
 80035b2:	a803      	add	r0, sp, #12
 80035b4:	f004 faf5 	bl	8007ba2 <memset>
  if(hspi->Instance==SPI2)
 80035b8:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <HAL_SPI_MspInit+0xd0>)
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035c0:	b009      	add	sp, #36	; 0x24
 80035c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_SPI_MspInit+0xd4>)
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	2080      	movs	r0, #128	; 0x80
 80035ca:	01c0      	lsls	r0, r0, #7
 80035cc:	4301      	orrs	r1, r0
 80035ce:	61d9      	str	r1, [r3, #28]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	4002      	ands	r2, r0
 80035d4:	9201      	str	r2, [sp, #4]
 80035d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	02c9      	lsls	r1, r1, #11
 80035de:	430a      	orrs	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	400b      	ands	r3, r1
 80035e6:	9302      	str	r3, [sp, #8]
 80035e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2502      	movs	r5, #2
 80035f2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035f4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f6:	2703      	movs	r7, #3
 80035f8:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	4e21      	ldr	r6, [pc, #132]	; (8003680 <HAL_SPI_MspInit+0xd8>)
 80035fc:	a903      	add	r1, sp, #12
 80035fe:	0030      	movs	r0, r6
 8003600:	f000 faa6 	bl	8003b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360c:	2301      	movs	r3, #1
 800360e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003610:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003612:	2500      	movs	r5, #0
 8003614:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003616:	a903      	add	r1, sp, #12
 8003618:	0030      	movs	r0, r6
 800361a:	f000 fa99 	bl	8003b50 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800361e:	4819      	ldr	r0, [pc, #100]	; (8003684 <HAL_SPI_MspInit+0xdc>)
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_SPI_MspInit+0xe0>)
 8003622:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003624:	2310      	movs	r3, #16
 8003626:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003628:	6085      	str	r5, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800362a:	3370      	adds	r3, #112	; 0x70
 800362c:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362e:	6105      	str	r5, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003630:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003632:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003634:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003636:	f000 f9cf 	bl	80039d8 <HAL_DMA_Init>
 800363a:	2800      	cmp	r0, #0
 800363c:	d116      	bne.n	800366c <HAL_SPI_MspInit+0xc4>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_SPI_MspInit+0xdc>)
 8003640:	6563      	str	r3, [r4, #84]	; 0x54
 8003642:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003644:	4811      	ldr	r0, [pc, #68]	; (800368c <HAL_SPI_MspInit+0xe4>)
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_SPI_MspInit+0xe8>)
 8003648:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364a:	2300      	movs	r3, #0
 800364c:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364e:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	60c2      	str	r2, [r0, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003654:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003656:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003658:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800365a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800365c:	f000 f9bc 	bl	80039d8 <HAL_DMA_Init>
 8003660:	2800      	cmp	r0, #0
 8003662:	d106      	bne.n	8003672 <HAL_SPI_MspInit+0xca>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_SPI_MspInit+0xe4>)
 8003666:	65a3      	str	r3, [r4, #88]	; 0x58
 8003668:	625c      	str	r4, [r3, #36]	; 0x24
}
 800366a:	e7a9      	b.n	80035c0 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800366c:	f7ff ff7a 	bl	8003564 <Error_Handler>
 8003670:	e7e5      	b.n	800363e <HAL_SPI_MspInit+0x96>
      Error_Handler();
 8003672:	f7ff ff77 	bl	8003564 <Error_Handler>
 8003676:	e7f5      	b.n	8003664 <HAL_SPI_MspInit+0xbc>
 8003678:	40003800 	.word	0x40003800
 800367c:	40021000 	.word	0x40021000
 8003680:	48000400 	.word	0x48000400
 8003684:	20000380 	.word	0x20000380
 8003688:	40020058 	.word	0x40020058
 800368c:	200002e8 	.word	0x200002e8
 8003690:	40020044 	.word	0x40020044

08003694 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003694:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8003696:	6802      	ldr	r2, [r0, #0]
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_TIM_PWM_MspInit+0x24>)
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_TIM_PWM_MspInit+0xe>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800369e:	b002      	add	sp, #8
 80036a0:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <HAL_TIM_PWM_MspInit+0x28>)
 80036a4:	69d1      	ldr	r1, [r2, #28]
 80036a6:	2302      	movs	r3, #2
 80036a8:	4319      	orrs	r1, r3
 80036aa:	61d1      	str	r1, [r2, #28]
 80036ac:	69d2      	ldr	r2, [r2, #28]
 80036ae:	4013      	ands	r3, r2
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	9b01      	ldr	r3, [sp, #4]
}
 80036b4:	e7f3      	b.n	800369e <HAL_TIM_PWM_MspInit+0xa>
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c6:	2214      	movs	r2, #20
 80036c8:	2100      	movs	r1, #0
 80036ca:	a801      	add	r0, sp, #4
 80036cc:	f004 fa69 	bl	8007ba2 <memset>
  if(htim->Instance==TIM3)
 80036d0:	6822      	ldr	r2, [r4, #0]
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_TIM_MspPostInit+0x4c>)
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036d8:	b006      	add	sp, #24
 80036da:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036dc:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <HAL_TIM_MspPostInit+0x50>)
 80036de:	6951      	ldr	r1, [r2, #20]
 80036e0:	2080      	movs	r0, #128	; 0x80
 80036e2:	02c0      	lsls	r0, r0, #11
 80036e4:	4301      	orrs	r1, r0
 80036e6:	6151      	str	r1, [r2, #20]
 80036e8:	6953      	ldr	r3, [r2, #20]
 80036ea:	4003      	ands	r3, r0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GEN_Pin;
 80036f0:	2320      	movs	r3, #32
 80036f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	3b1e      	subs	r3, #30
 80036f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036fa:	3301      	adds	r3, #1
 80036fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80036fe:	3b02      	subs	r3, #2
 8003700:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GEN_GPIO_Port, &GPIO_InitStruct);
 8003702:	a901      	add	r1, sp, #4
 8003704:	4803      	ldr	r0, [pc, #12]	; (8003714 <HAL_TIM_MspPostInit+0x54>)
 8003706:	f000 fa23 	bl	8003b50 <HAL_GPIO_Init>
}
 800370a:	e7e5      	b.n	80036d8 <HAL_TIM_MspPostInit+0x18>
 800370c:	40000400 	.word	0x40000400
 8003710:	40021000 	.word	0x40021000
 8003714:	48000400 	.word	0x48000400

08003718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b500      	push	{lr}
 800371a:	b087      	sub	sp, #28
 800371c:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800371e:	2200      	movs	r2, #0
 8003720:	2011      	movs	r0, #17
 8003722:	f000 f8f3 	bl	800390c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003726:	2011      	movs	r0, #17
 8003728:	f000 f922 	bl	8003970 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800372c:	4a13      	ldr	r2, [pc, #76]	; (800377c <HAL_InitTick+0x64>)
 800372e:	69d1      	ldr	r1, [r2, #28]
 8003730:	2310      	movs	r3, #16
 8003732:	4319      	orrs	r1, r3
 8003734:	61d1      	str	r1, [r2, #28]
 8003736:	69d2      	ldr	r2, [r2, #28]
 8003738:	4013      	ands	r3, r2
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800373e:	a901      	add	r1, sp, #4
 8003740:	a802      	add	r0, sp, #8
 8003742:	f001 ffb7 	bl	80056b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003746:	f001 ffa5 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800374a:	490d      	ldr	r1, [pc, #52]	; (8003780 <HAL_InitTick+0x68>)
 800374c:	f7fc fce6 	bl	800011c <__udivsi3>
 8003750:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003752:	480c      	ldr	r0, [pc, #48]	; (8003784 <HAL_InitTick+0x6c>)
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <HAL_InitTick+0x70>)
 8003756:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003758:	4a0c      	ldr	r2, [pc, #48]	; (800378c <HAL_InitTick+0x74>)
 800375a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800375c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003764:	f003 f8f2 	bl	800694c <HAL_TIM_Base_Init>
 8003768:	2800      	cmp	r0, #0
 800376a:	d002      	beq.n	8003772 <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800376c:	2001      	movs	r0, #1
}
 800376e:	b007      	add	sp, #28
 8003770:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <HAL_InitTick+0x6c>)
 8003774:	f002 ffdb 	bl	800672e <HAL_TIM_Base_Start_IT>
 8003778:	e7f9      	b.n	800376e <HAL_InitTick+0x56>
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	40021000 	.word	0x40021000
 8003780:	000f4240 	.word	0x000f4240
 8003784:	200003cc 	.word	0x200003cc
 8003788:	40001000 	.word	0x40001000
 800378c:	000003e7 	.word	0x000003e7

08003790 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003790:	4770      	bx	lr

08003792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler>

08003794 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003794:	4770      	bx	lr

08003796 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003796:	4770      	bx	lr

08003798 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003798:	4770      	bx	lr

0800379a <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 800379a:	4770      	bx	lr

0800379c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800379c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800379e:	2080      	movs	r0, #128	; 0x80
 80037a0:	0180      	lsls	r0, r0, #6
 80037a2:	f000 faab 	bl	8003cfc <HAL_GPIO_EXTI_IRQHandler>
//		joyStates.a7 = 0;
//  }
//  else{
//	  joyStates.a7 = 1;
//  }
  if(colibState == 0){
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <EXTI4_15_IRQHandler+0x38>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <EXTI4_15_IRQHandler+0x22>
	  colibState = 1;
  }
  else if(colibState == 1){
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d009      	beq.n	80037c6 <EXTI4_15_IRQHandler+0x2a>
	  colibState = 2;
	  GetColibValues();
  }
  else if(colibState == 2){
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d106      	bne.n	80037c4 <EXTI4_15_IRQHandler+0x28>
	  colibState = 0;
 80037b6:	2200      	movs	r2, #0
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <EXTI4_15_IRQHandler+0x38>)
 80037ba:	701a      	strb	r2, [r3, #0]
//	}
//	else{
//		joyStates.a7 = 0;
//	}
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037bc:	e002      	b.n	80037c4 <EXTI4_15_IRQHandler+0x28>
	  colibState = 1;
 80037be:	2201      	movs	r2, #1
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <EXTI4_15_IRQHandler+0x38>)
 80037c2:	701a      	strb	r2, [r3, #0]
}
 80037c4:	bd10      	pop	{r4, pc}
	  colibState = 2;
 80037c6:	2202      	movs	r2, #2
 80037c8:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <EXTI4_15_IRQHandler+0x38>)
 80037ca:	701a      	strb	r2, [r3, #0]
	  GetColibValues();
 80037cc:	f7ff fa16 	bl	8002bfc <GetColibValues>
 80037d0:	e7f8      	b.n	80037c4 <EXTI4_15_IRQHandler+0x28>
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000376 	.word	0x20000376

080037d8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80037d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80037da:	4803      	ldr	r0, [pc, #12]	; (80037e8 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 80037dc:	f000 f963 	bl	8003aa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80037e2:	f000 f960 	bl	8003aa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80037e6:	bd10      	pop	{r4, pc}
 80037e8:	200002e8 	.word	0x200002e8
 80037ec:	20000380 	.word	0x20000380

080037f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037f2:	4802      	ldr	r0, [pc, #8]	; (80037fc <TIM6_DAC_IRQHandler+0xc>)
 80037f4:	f002 ffaa 	bl	800674c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	200003cc 	.word	0x200003cc

08003800 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003800:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003802:	4802      	ldr	r0, [pc, #8]	; (800380c <USB_IRQHandler+0xc>)
 8003804:	f001 fb0a 	bl	8004e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003808:	bd10      	pop	{r4, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000834 	.word	0x20000834

08003810 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003810:	b510      	push	{r4, lr}
 8003812:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <_sbrk+0x34>)
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	2a00      	cmp	r2, #0
 800381a:	d008      	beq.n	800382e <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <_sbrk+0x34>)
 800381e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003820:	18c3      	adds	r3, r0, r3
 8003822:	466a      	mov	r2, sp
 8003824:	4293      	cmp	r3, r2
 8003826:	d806      	bhi.n	8003836 <_sbrk+0x26>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <_sbrk+0x34>)
 800382a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800382c:	bd10      	pop	{r4, pc}
		heap_end = &end;
 800382e:	4906      	ldr	r1, [pc, #24]	; (8003848 <_sbrk+0x38>)
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <_sbrk+0x34>)
 8003832:	6011      	str	r1, [r2, #0]
 8003834:	e7f2      	b.n	800381c <_sbrk+0xc>
		errno = ENOMEM;
 8003836:	f004 f96d 	bl	8007b14 <__errno>
 800383a:	230c      	movs	r3, #12
 800383c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800383e:	2001      	movs	r0, #1
 8003840:	4240      	negs	r0, r0
 8003842:	e7f3      	b.n	800382c <_sbrk+0x1c>
 8003844:	200001b4 	.word	0x200001b4
 8003848:	20000a58 	.word	0x20000a58

0800384c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <SystemInit+0x48>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	480f      	ldr	r0, [pc, #60]	; (8003898 <SystemInit+0x4c>)
 800385a:	4002      	ands	r2, r0
 800385c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	480e      	ldr	r0, [pc, #56]	; (800389c <SystemInit+0x50>)
 8003862:	4002      	ands	r2, r0
 8003864:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	480d      	ldr	r0, [pc, #52]	; (80038a0 <SystemInit+0x54>)
 800386a:	4002      	ands	r2, r0
 800386c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	480c      	ldr	r0, [pc, #48]	; (80038a4 <SystemInit+0x58>)
 8003872:	4002      	ands	r2, r0
 8003874:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	200f      	movs	r0, #15
 800387a:	4382      	bics	r2, r0
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800387e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <SystemInit+0x5c>)
 8003882:	4002      	ands	r2, r0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	438a      	bics	r2, r1
 800388a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]

}
 8003890:	4770      	bx	lr
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40021000 	.word	0x40021000
 8003898:	08ffb80c 	.word	0x08ffb80c
 800389c:	fef6ffff 	.word	0xfef6ffff
 80038a0:	fffbffff 	.word	0xfffbffff
 80038a4:	ffc0ffff 	.word	0xffc0ffff
 80038a8:	fffcfe2c 	.word	0xfffcfe2c

080038ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ac:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ae:	4a06      	ldr	r2, [pc, #24]	; (80038c8 <HAL_Init+0x1c>)
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	2110      	movs	r1, #16
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7ff ff2d 	bl	8003718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038be:	f7ff fe53 	bl	8003568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80038c2:	2000      	movs	r0, #0
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40022000 	.word	0x40022000

080038cc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <HAL_IncTick+0xc>)
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	4770      	bx	lr
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	2000040c 	.word	0x2000040c

080038dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <HAL_GetTick+0x8>)
 80038de:	6818      	ldr	r0, [r3, #0]
}
 80038e0:	4770      	bx	lr
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	2000040c 	.word	0x2000040c

080038e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80038e8:	b530      	push	{r4, r5, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ee:	f7ff fff5 	bl	80038dc <HAL_GetTick>
 80038f2:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 80038f4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f6:	1c63      	adds	r3, r4, #1
 80038f8:	d000      	beq.n	80038fc <HAL_Delay+0x14>
  {
     wait++;
 80038fa:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038fc:	f7ff ffee 	bl	80038dc <HAL_GetTick>
 8003900:	1b40      	subs	r0, r0, r5
 8003902:	42a0      	cmp	r0, r4
 8003904:	d3fa      	bcc.n	80038fc <HAL_Delay+0x14>
  {
  }
}
 8003906:	b003      	add	sp, #12
 8003908:	bd30      	pop	{r4, r5, pc}
	...

0800390c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390c:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800390e:	2800      	cmp	r0, #0
 8003910:	db11      	blt.n	8003936 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003912:	0883      	lsrs	r3, r0, #2
 8003914:	4d14      	ldr	r5, [pc, #80]	; (8003968 <HAL_NVIC_SetPriority+0x5c>)
 8003916:	33c0      	adds	r3, #192	; 0xc0
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	595c      	ldr	r4, [r3, r5]
 800391c:	2203      	movs	r2, #3
 800391e:	4010      	ands	r0, r2
 8003920:	00c0      	lsls	r0, r0, #3
 8003922:	32fc      	adds	r2, #252	; 0xfc
 8003924:	0016      	movs	r6, r2
 8003926:	4086      	lsls	r6, r0
 8003928:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800392a:	0189      	lsls	r1, r1, #6
 800392c:	400a      	ands	r2, r1
 800392e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003930:	4322      	orrs	r2, r4
 8003932:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003934:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003936:	b2c0      	uxtb	r0, r0
 8003938:	230f      	movs	r3, #15
 800393a:	4003      	ands	r3, r0
 800393c:	3b08      	subs	r3, #8
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3306      	adds	r3, #6
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_NVIC_SetPriority+0x60>)
 8003946:	4694      	mov	ip, r2
 8003948:	4463      	add	r3, ip
 800394a:	685d      	ldr	r5, [r3, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	4010      	ands	r0, r2
 8003950:	00c0      	lsls	r0, r0, #3
 8003952:	24ff      	movs	r4, #255	; 0xff
 8003954:	0022      	movs	r2, r4
 8003956:	4082      	lsls	r2, r0
 8003958:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800395a:	0189      	lsls	r1, r1, #6
 800395c:	400c      	ands	r4, r1
 800395e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003960:	432c      	orrs	r4, r5
 8003962:	605c      	str	r4, [r3, #4]
 8003964:	e7e6      	b.n	8003934 <HAL_NVIC_SetPriority+0x28>
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003970:	231f      	movs	r3, #31
 8003972:	4018      	ands	r0, r3
 8003974:	3b1e      	subs	r3, #30
 8003976:	4083      	lsls	r3, r0
 8003978:	4a01      	ldr	r2, [pc, #4]	; (8003980 <HAL_NVIC_EnableIRQ+0x10>)
 800397a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800397c:	4770      	bx	lr
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	e000e100 	.word	0xe000e100

08003984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003986:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8003988:	2401      	movs	r4, #1
 800398a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800398c:	40b4      	lsls	r4, r6
 800398e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003990:	6804      	ldr	r4, [r0, #0]
 8003992:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003994:	6843      	ldr	r3, [r0, #4]
 8003996:	2b10      	cmp	r3, #16
 8003998:	d004      	beq.n	80039a4 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800399a:	6803      	ldr	r3, [r0, #0]
 800399c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800399e:	6803      	ldr	r3, [r0, #0]
 80039a0:	60da      	str	r2, [r3, #12]
  }
}
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80039a8:	6803      	ldr	r3, [r0, #0]
 80039aa:	60d9      	str	r1, [r3, #12]
 80039ac:	e7f9      	b.n	80039a2 <DMA_SetConfig+0x1e>
	...

080039b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b0:	b510      	push	{r4, lr}
 80039b2:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039b4:	6803      	ldr	r3, [r0, #0]
 80039b6:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <DMA_CalcBaseAndBitshift+0x20>)
 80039b8:	4694      	mov	ip, r2
 80039ba:	4463      	add	r3, ip
 80039bc:	0018      	movs	r0, r3
 80039be:	2114      	movs	r1, #20
 80039c0:	f7fc fbac 	bl	800011c <__udivsi3>
 80039c4:	0080      	lsls	r0, r0, #2
 80039c6:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <DMA_CalcBaseAndBitshift+0x24>)
 80039ca:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	bffdfff8 	.word	0xbffdfff8
 80039d4:	40020000 	.word	0x40020000

080039d8 <HAL_DMA_Init>:
{ 
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 80039dc:	d024      	beq.n	8003a28 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 80039de:	2521      	movs	r5, #33	; 0x21
 80039e0:	2302      	movs	r3, #2
 80039e2:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 80039e4:	6801      	ldr	r1, [r0, #0]
 80039e6:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_DMA_Init+0x54>)
 80039ea:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80039ec:	6843      	ldr	r3, [r0, #4]
 80039ee:	6880      	ldr	r0, [r0, #8]
 80039f0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	4303      	orrs	r3, r0
 80039f6:	6920      	ldr	r0, [r4, #16]
 80039f8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fa:	6960      	ldr	r0, [r4, #20]
 80039fc:	4303      	orrs	r3, r0
 80039fe:	69a0      	ldr	r0, [r4, #24]
 8003a00:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	69e0      	ldr	r0, [r4, #28]
 8003a04:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003a06:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8003a08:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003a0a:	0020      	movs	r0, r4
 8003a0c:	f7ff ffd0 	bl	80039b0 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003a14:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003a16:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003a18:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8003a20:	321f      	adds	r2, #31
 8003a22:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003a24:	2000      	movs	r0, #0
}  
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a28:	2001      	movs	r0, #1
 8003a2a:	e7fc      	b.n	8003a26 <HAL_DMA_Init+0x4e>
 8003a2c:	ffffc00f 	.word	0xffffc00f

08003a30 <HAL_DMA_Start_IT>:
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003a34:	2020      	movs	r0, #32
 8003a36:	5c20      	ldrb	r0, [r4, r0]
 8003a38:	2801      	cmp	r0, #1
 8003a3a:	d032      	beq.n	8003aa2 <HAL_DMA_Start_IT+0x72>
 8003a3c:	2501      	movs	r5, #1
 8003a3e:	2020      	movs	r0, #32
 8003a40:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a42:	3001      	adds	r0, #1
 8003a44:	5c20      	ldrb	r0, [r4, r0]
 8003a46:	2801      	cmp	r0, #1
 8003a48:	d004      	beq.n	8003a54 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8003a50:	2002      	movs	r0, #2
} 
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	3501      	adds	r5, #1
 8003a56:	3020      	adds	r0, #32
 8003a58:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a5e:	6825      	ldr	r5, [r4, #0]
 8003a60:	6828      	ldr	r0, [r5, #0]
 8003a62:	2601      	movs	r6, #1
 8003a64:	43b0      	bics	r0, r6
 8003a66:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a68:	0020      	movs	r0, r4
 8003a6a:	f7ff ff8b 	bl	8003984 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	210e      	movs	r1, #14
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e7e2      	b.n	8003a52 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	210a      	movs	r1, #10
 8003a92:	430b      	orrs	r3, r1
 8003a94:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	6813      	ldr	r3, [r2, #0]
 8003a9a:	3906      	subs	r1, #6
 8003a9c:	438b      	bics	r3, r1
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e7ed      	b.n	8003a7e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	e7d5      	b.n	8003a52 <HAL_DMA_Start_IT+0x22>

08003aa6 <HAL_DMA_IRQHandler>:
{
 8003aa6:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aa8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003aaa:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003aac:	6804      	ldr	r4, [r0, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003ab0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	408b      	lsls	r3, r1
 8003ab6:	4213      	tst	r3, r2
 8003ab8:	d012      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x3a>
 8003aba:	076b      	lsls	r3, r5, #29
 8003abc:	d510      	bpl.n	8003ae0 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	069b      	lsls	r3, r3, #26
 8003ac2:	d403      	bmi.n	8003acc <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4393      	bics	r3, r2
 8003aca:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003acc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003ace:	2304      	movs	r3, #4
 8003ad0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ad2:	408b      	lsls	r3, r1
 8003ad4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ad6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d000      	beq.n	8003ade <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8003adc:	4798      	blx	r3
}  
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	408b      	lsls	r3, r1
 8003ae4:	4213      	tst	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x74>
 8003ae8:	07ab      	lsls	r3, r5, #30
 8003aea:	d516      	bpl.n	8003b1a <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	069b      	lsls	r3, r3, #26
 8003af0:	d406      	bmi.n	8003b00 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	220a      	movs	r2, #10
 8003af6:	4393      	bics	r3, r2
 8003af8:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003afa:	3a09      	subs	r2, #9
 8003afc:	2321      	movs	r3, #33	; 0x21
 8003afe:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003b02:	2302      	movs	r3, #2
 8003b04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003b06:	408b      	lsls	r3, r1
 8003b08:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8003b10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0e3      	beq.n	8003ade <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8003b16:	4798      	blx	r3
 8003b18:	e7e1      	b.n	8003ade <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	408b      	lsls	r3, r1
 8003b1e:	4213      	tst	r3, r2
 8003b20:	d0dd      	beq.n	8003ade <HAL_DMA_IRQHandler+0x38>
 8003b22:	072b      	lsls	r3, r5, #28
 8003b24:	d5db      	bpl.n	8003ade <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	220e      	movs	r2, #14
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003b30:	2301      	movs	r3, #1
 8003b32:	0019      	movs	r1, r3
 8003b34:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003b36:	40a1      	lsls	r1, r4
 8003b38:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b3a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003b3c:	2221      	movs	r2, #33	; 0x21
 8003b3e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8003b40:	2200      	movs	r2, #0
 8003b42:	331f      	adds	r3, #31
 8003b44:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8003b46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0c8      	beq.n	8003ade <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8003b4c:	4798      	blx	r3
}  
 8003b4e:	e7c6      	b.n	8003ade <HAL_DMA_IRQHandler+0x38>

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	46c6      	mov	lr, r8
 8003b54:	b500      	push	{lr}
 8003b56:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8003b58:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003b5a:	e081      	b.n	8003c60 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003b5c:	08df      	lsrs	r7, r3, #3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	00bf      	lsls	r7, r7, #2
 8003b62:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003b64:	2507      	movs	r5, #7
 8003b66:	401d      	ands	r5, r3
 8003b68:	00ad      	lsls	r5, r5, #2
 8003b6a:	240f      	movs	r4, #15
 8003b6c:	40ac      	lsls	r4, r5
 8003b6e:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003b70:	690c      	ldr	r4, [r1, #16]
 8003b72:	40ac      	lsls	r4, r5
 8003b74:	0025      	movs	r5, r4
 8003b76:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003b78:	503d      	str	r5, [r7, r0]
 8003b7a:	e081      	b.n	8003c80 <HAL_GPIO_Init+0x130>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b7c:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7e:	4664      	mov	r4, ip
 8003b80:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003b82:	68ce      	ldr	r6, [r1, #12]
 8003b84:	40be      	lsls	r6, r7
 8003b86:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003b88:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b8a:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003b8c:	002c      	movs	r4, r5
 8003b8e:	4645      	mov	r5, r8
 8003b90:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b92:	684d      	ldr	r5, [r1, #4]
 8003b94:	092e      	lsrs	r6, r5, #4
 8003b96:	2501      	movs	r5, #1
 8003b98:	4035      	ands	r5, r6
 8003b9a:	409d      	lsls	r5, r3
 8003b9c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003b9e:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ba0:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba2:	4665      	mov	r5, ip
 8003ba4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003ba6:	688d      	ldr	r5, [r1, #8]
 8003ba8:	40bd      	lsls	r5, r7
 8003baa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003bac:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003bae:	684c      	ldr	r4, [r1, #4]
 8003bb0:	00e4      	lsls	r4, r4, #3
 8003bb2:	d554      	bpl.n	8003c5e <HAL_GPIO_Init+0x10e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb4:	4d46      	ldr	r5, [pc, #280]	; (8003cd0 <HAL_GPIO_Init+0x180>)
 8003bb6:	69ae      	ldr	r6, [r5, #24]
 8003bb8:	2401      	movs	r4, #1
 8003bba:	4326      	orrs	r6, r4
 8003bbc:	61ae      	str	r6, [r5, #24]
 8003bbe:	69ad      	ldr	r5, [r5, #24]
 8003bc0:	402c      	ands	r4, r5
 8003bc2:	9401      	str	r4, [sp, #4]
 8003bc4:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003bc6:	089c      	lsrs	r4, r3, #2
 8003bc8:	1ca5      	adds	r5, r4, #2
 8003bca:	00ad      	lsls	r5, r5, #2
 8003bcc:	4e41      	ldr	r6, [pc, #260]	; (8003cd4 <HAL_GPIO_Init+0x184>)
 8003bce:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003bd0:	2703      	movs	r7, #3
 8003bd2:	401f      	ands	r7, r3
 8003bd4:	00bd      	lsls	r5, r7, #2
 8003bd6:	270f      	movs	r7, #15
 8003bd8:	40af      	lsls	r7, r5
 8003bda:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bdc:	2790      	movs	r7, #144	; 0x90
 8003bde:	05ff      	lsls	r7, r7, #23
 8003be0:	42b8      	cmp	r0, r7
 8003be2:	d068      	beq.n	8003cb6 <HAL_GPIO_Init+0x166>
 8003be4:	4f3c      	ldr	r7, [pc, #240]	; (8003cd8 <HAL_GPIO_Init+0x188>)
 8003be6:	42b8      	cmp	r0, r7
 8003be8:	d067      	beq.n	8003cba <HAL_GPIO_Init+0x16a>
 8003bea:	4f3c      	ldr	r7, [pc, #240]	; (8003cdc <HAL_GPIO_Init+0x18c>)
 8003bec:	42b8      	cmp	r0, r7
 8003bee:	d066      	beq.n	8003cbe <HAL_GPIO_Init+0x16e>
 8003bf0:	4f3b      	ldr	r7, [pc, #236]	; (8003ce0 <HAL_GPIO_Init+0x190>)
 8003bf2:	42b8      	cmp	r0, r7
 8003bf4:	d065      	beq.n	8003cc2 <HAL_GPIO_Init+0x172>
 8003bf6:	4f3b      	ldr	r7, [pc, #236]	; (8003ce4 <HAL_GPIO_Init+0x194>)
 8003bf8:	42b8      	cmp	r0, r7
 8003bfa:	d05a      	beq.n	8003cb2 <HAL_GPIO_Init+0x162>
 8003bfc:	2705      	movs	r7, #5
 8003bfe:	40af      	lsls	r7, r5
 8003c00:	003d      	movs	r5, r7
 8003c02:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c04:	3402      	adds	r4, #2
 8003c06:	00a4      	lsls	r4, r4, #2
 8003c08:	4e32      	ldr	r6, [pc, #200]	; (8003cd4 <HAL_GPIO_Init+0x184>)
 8003c0a:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0c:	4c36      	ldr	r4, [pc, #216]	; (8003ce8 <HAL_GPIO_Init+0x198>)
 8003c0e:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c10:	43d4      	mvns	r4, r2
 8003c12:	0026      	movs	r6, r4
 8003c14:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c16:	684f      	ldr	r7, [r1, #4]
 8003c18:	03ff      	lsls	r7, r7, #15
 8003c1a:	d501      	bpl.n	8003c20 <HAL_GPIO_Init+0xd0>
        {
          SET_BIT(temp, iocurrent); 
 8003c1c:	4315      	orrs	r5, r2
 8003c1e:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8003c20:	4d31      	ldr	r5, [pc, #196]	; (8003ce8 <HAL_GPIO_Init+0x198>)
 8003c22:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8003c24:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003c26:	002e      	movs	r6, r5
 8003c28:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c2a:	684f      	ldr	r7, [r1, #4]
 8003c2c:	03bf      	lsls	r7, r7, #14
 8003c2e:	d501      	bpl.n	8003c34 <HAL_GPIO_Init+0xe4>
        { 
          SET_BIT(temp, iocurrent); 
 8003c30:	4315      	orrs	r5, r2
 8003c32:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8003c34:	4d2c      	ldr	r5, [pc, #176]	; (8003ce8 <HAL_GPIO_Init+0x198>)
 8003c36:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c38:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003c3a:	002e      	movs	r6, r5
 8003c3c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3e:	684f      	ldr	r7, [r1, #4]
 8003c40:	02ff      	lsls	r7, r7, #11
 8003c42:	d501      	bpl.n	8003c48 <HAL_GPIO_Init+0xf8>
        {
          SET_BIT(temp, iocurrent); 
 8003c44:	4315      	orrs	r5, r2
 8003c46:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003c48:	4d27      	ldr	r5, [pc, #156]	; (8003ce8 <HAL_GPIO_Init+0x198>)
 8003c4a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003c4c:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003c4e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c50:	684e      	ldr	r6, [r1, #4]
 8003c52:	02b6      	lsls	r6, r6, #10
 8003c54:	d501      	bpl.n	8003c5a <HAL_GPIO_Init+0x10a>
        {
          SET_BIT(temp, iocurrent); 
 8003c56:	432a      	orrs	r2, r5
 8003c58:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8003c5a:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_GPIO_Init+0x198>)
 8003c5c:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8003c5e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c60:	680a      	ldr	r2, [r1, #0]
 8003c62:	0014      	movs	r4, r2
 8003c64:	40dc      	lsrs	r4, r3
 8003c66:	d02e      	beq.n	8003cc6 <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c68:	2401      	movs	r4, #1
 8003c6a:	409c      	lsls	r4, r3
 8003c6c:	46a0      	mov	r8, r4
 8003c6e:	4022      	ands	r2, r4
    if(iocurrent)
 8003c70:	d0f5      	beq.n	8003c5e <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003c72:	684d      	ldr	r5, [r1, #4]
 8003c74:	2d02      	cmp	r5, #2
 8003c76:	d100      	bne.n	8003c7a <HAL_GPIO_Init+0x12a>
 8003c78:	e770      	b.n	8003b5c <HAL_GPIO_Init+0xc>
 8003c7a:	2d12      	cmp	r5, #18
 8003c7c:	d100      	bne.n	8003c80 <HAL_GPIO_Init+0x130>
 8003c7e:	e76d      	b.n	8003b5c <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 8003c80:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003c82:	005f      	lsls	r7, r3, #1
 8003c84:	2503      	movs	r5, #3
 8003c86:	002c      	movs	r4, r5
 8003c88:	40bc      	lsls	r4, r7
 8003c8a:	43e4      	mvns	r4, r4
 8003c8c:	46a4      	mov	ip, r4
 8003c8e:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c90:	684c      	ldr	r4, [r1, #4]
 8003c92:	4025      	ands	r5, r4
 8003c94:	40bd      	lsls	r5, r7
 8003c96:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8003c98:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c9a:	684d      	ldr	r5, [r1, #4]
 8003c9c:	1e6e      	subs	r6, r5, #1
 8003c9e:	2e01      	cmp	r6, #1
 8003ca0:	d800      	bhi.n	8003ca4 <HAL_GPIO_Init+0x154>
 8003ca2:	e76b      	b.n	8003b7c <HAL_GPIO_Init+0x2c>
 8003ca4:	2d11      	cmp	r5, #17
 8003ca6:	d100      	bne.n	8003caa <HAL_GPIO_Init+0x15a>
 8003ca8:	e768      	b.n	8003b7c <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003caa:	2d12      	cmp	r5, #18
 8003cac:	d000      	beq.n	8003cb0 <HAL_GPIO_Init+0x160>
 8003cae:	e777      	b.n	8003ba0 <HAL_GPIO_Init+0x50>
 8003cb0:	e764      	b.n	8003b7c <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb2:	2704      	movs	r7, #4
 8003cb4:	e7a3      	b.n	8003bfe <HAL_GPIO_Init+0xae>
 8003cb6:	2700      	movs	r7, #0
 8003cb8:	e7a1      	b.n	8003bfe <HAL_GPIO_Init+0xae>
 8003cba:	2701      	movs	r7, #1
 8003cbc:	e79f      	b.n	8003bfe <HAL_GPIO_Init+0xae>
 8003cbe:	2702      	movs	r7, #2
 8003cc0:	e79d      	b.n	8003bfe <HAL_GPIO_Init+0xae>
 8003cc2:	2703      	movs	r7, #3
 8003cc4:	e79b      	b.n	8003bfe <HAL_GPIO_Init+0xae>
  } 
}
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bc04      	pop	{r2}
 8003cca:	4690      	mov	r8, r2
 8003ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	48000800 	.word	0x48000800
 8003ce0:	48000c00 	.word	0x48000c00
 8003ce4:	48001000 	.word	0x48001000
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cec:	2a00      	cmp	r2, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cf0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003cf2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cf4:	6181      	str	r1, [r0, #24]
 8003cf6:	e7fc      	b.n	8003cf2 <HAL_GPIO_WritePin+0x6>

08003cf8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_GPIO_EXTI_IRQHandler>:
{
 8003cfc:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4218      	tst	r0, r3
 8003d04:	d100      	bne.n	8003d08 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003d06:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d08:	4b02      	ldr	r3, [pc, #8]	; (8003d14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003d0a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d0c:	f7ff fff4 	bl	8003cf8 <HAL_GPIO_EXTI_Callback>
}
 8003d10:	e7f9      	b.n	8003d06 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003d1c:	d058      	beq.n	8003dd0 <HAL_PCD_Init+0xb8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8003d1e:	23ea      	movs	r3, #234	; 0xea
 8003d20:	33ff      	adds	r3, #255	; 0xff
 8003d22:	5cc3      	ldrb	r3, [r0, r3]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_PCD_Init+0x1c>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d28:	2203      	movs	r2, #3
 8003d2a:	23ea      	movs	r3, #234	; 0xea
 8003d2c:	33ff      	adds	r3, #255	; 0xff
 8003d2e:	54e2      	strb	r2, [r4, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8003d30:	2200      	movs	r2, #0
 8003d32:	e018      	b.n	8003d66 <HAL_PCD_Init+0x4e>
    hpcd->Lock = HAL_UNLOCKED;
 8003d34:	2200      	movs	r2, #0
 8003d36:	33e9      	adds	r3, #233	; 0xe9
 8003d38:	33ff      	adds	r3, #255	; 0xff
 8003d3a:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8003d3c:	f003 fd94 	bl	8007868 <HAL_PCD_MspInit>
 8003d40:	e7f2      	b.n	8003d28 <HAL_PCD_Init+0x10>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8003d42:	00d1      	lsls	r1, r2, #3
 8003d44:	1a89      	subs	r1, r1, r2
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	18e3      	adds	r3, r4, r3
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	3129      	adds	r1, #41	; 0x29
 8003d4e:	2001      	movs	r0, #1
 8003d50:	7008      	strb	r0, [r1, #0]
   hpcd->IN_ep[i].num = i;
 8003d52:	3901      	subs	r1, #1
 8003d54:	700a      	strb	r2, [r1, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8003d56:	0018      	movs	r0, r3
 8003d58:	302b      	adds	r0, #43	; 0x2b
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	7001      	strb	r1, [r0, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8003d5e:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0U;
 8003d60:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0U;
 8003d62:	63d9      	str	r1, [r3, #60]	; 0x3c
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8003d64:	3201      	adds	r2, #1
 8003d66:	6860      	ldr	r0, [r4, #4]
 8003d68:	4282      	cmp	r2, r0
 8003d6a:	d3ea      	bcc.n	8003d42 <HAL_PCD_Init+0x2a>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	e014      	b.n	8003d9a <HAL_PCD_Init+0x82>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8003d70:	00d1      	lsls	r1, r2, #3
 8003d72:	1a89      	subs	r1, r1, r2
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	001d      	movs	r5, r3
 8003d7a:	350a      	adds	r5, #10
 8003d7c:	35ff      	adds	r5, #255	; 0xff
 8003d7e:	2100      	movs	r1, #0
 8003d80:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].num = i;
 8003d82:	3d01      	subs	r5, #1
 8003d84:	702a      	strb	r2, [r5, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8003d86:	3503      	adds	r5, #3
 8003d88:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8003d8a:	3509      	adds	r5, #9
 8003d8c:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d8e:	3504      	adds	r5, #4
 8003d90:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8003d92:	331d      	adds	r3, #29
 8003d94:	33ff      	adds	r3, #255	; 0xff
 8003d96:	6019      	str	r1, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8003d98:	3201      	adds	r2, #1
 8003d9a:	4282      	cmp	r2, r0
 8003d9c:	d3e8      	bcc.n	8003d70 <HAL_PCD_Init+0x58>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8003d9e:	2340      	movs	r3, #64	; 0x40
 8003da0:	2201      	movs	r2, #1
 8003da2:	6821      	ldr	r1, [r4, #0]
 8003da4:	52ca      	strh	r2, [r1, r3]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8003da6:	2200      	movs	r2, #0
 8003da8:	6821      	ldr	r1, [r4, #0]
 8003daa:	52ca      	strh	r2, [r1, r3]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8003dac:	2144      	movs	r1, #68	; 0x44
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	5242      	strh	r2, [r0, r1]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8003db2:	310c      	adds	r1, #12
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	5242      	strh	r2, [r0, r1]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <HAL_PCD_Init+0xbc>)
 8003dba:	6821      	ldr	r1, [r4, #0]
 8003dbc:	52ca      	strh	r2, [r1, r3]
  
  hpcd->USB_Address = 0U;
 8003dbe:	3b1c      	subs	r3, #28
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 8003dc4:	23ea      	movs	r3, #234	; 0xea
 8003dc6:	33ff      	adds	r3, #255	; 0xff
 8003dc8:	2201      	movs	r2, #1
 8003dca:	54e2      	strb	r2, [r4, r3]

 return HAL_OK;
 8003dcc:	2000      	movs	r0, #0
}
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	e7fc      	b.n	8003dce <HAL_PCD_Init+0xb6>
 8003dd4:	ffffbf00 	.word	0xffffbf00

08003dd8 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8003dd8:	6801      	ldr	r1, [r0, #0]
 8003dda:	2258      	movs	r2, #88	; 0x58
 8003ddc:	5a8b      	ldrh	r3, [r1, r2]
 8003dde:	4803      	ldr	r0, [pc, #12]	; (8003dec <HAL_PCD_Start+0x14>)
 8003de0:	4303      	orrs	r3, r0
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 8003de6:	2000      	movs	r0, #0
 8003de8:	4770      	bx	lr
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	ffff8000 	.word	0xffff8000

08003df0 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8003df0:	23f4      	movs	r3, #244	; 0xf4
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	5cc3      	ldrb	r3, [r0, r3]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d013      	beq.n	8003e22 <HAL_PCD_SetAddress+0x32>
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	23f4      	movs	r3, #244	; 0xf4
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	54c2      	strb	r2, [r0, r3]

   if(address == 0U) 
 8003e02:	2900      	cmp	r1, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_PCD_SetAddress+0x2c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8003e06:	327f      	adds	r2, #127	; 0x7f
 8003e08:	3b9d      	subs	r3, #157	; 0x9d
 8003e0a:	3bff      	subs	r3, #255	; 0xff
 8003e0c:	6801      	ldr	r1, [r0, #0]
 8003e0e:	52ca      	strh	r2, [r1, r3]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8003e10:	2200      	movs	r2, #0
 8003e12:	23f4      	movs	r3, #244	; 0xf4
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003e18:	2000      	movs	r0, #0
}
 8003e1a:	4770      	bx	lr
     hpcd->USB_Address = address;
 8003e1c:	2324      	movs	r3, #36	; 0x24
 8003e1e:	54c1      	strb	r1, [r0, r3]
 8003e20:	e7f6      	b.n	8003e10 <HAL_PCD_SetAddress+0x20>
   __HAL_LOCK(hpcd); 
 8003e22:	2002      	movs	r0, #2
 8003e24:	e7f9      	b.n	8003e1a <HAL_PCD_SetAddress+0x2a>
	...

08003e28 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003e28:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8003e2a:	b24e      	sxtb	r6, r1
 8003e2c:	2e00      	cmp	r6, #0
 8003e2e:	db65      	blt.n	8003efc <HAL_PCD_EP_Open+0xd4>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003e30:	247f      	movs	r4, #127	; 0x7f
 8003e32:	400c      	ands	r4, r1
 8003e34:	00e5      	lsls	r5, r4, #3
 8003e36:	1b2d      	subs	r5, r5, r4
 8003e38:	00ac      	lsls	r4, r5, #2
 8003e3a:	3409      	adds	r4, #9
 8003e3c:	34ff      	adds	r4, #255	; 0xff
 8003e3e:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 8003e40:	257f      	movs	r5, #127	; 0x7f
 8003e42:	400d      	ands	r5, r1
 8003e44:	7025      	strb	r5, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003e46:	0ff6      	lsrs	r6, r6, #31
 8003e48:	7066      	strb	r6, [r4, #1]
  ep->maxpacket = ep_mps;
 8003e4a:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8003e4c:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8003e4e:	23f4      	movs	r3, #244	; 0xf4
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	5cc3      	ldrb	r3, [r0, r3]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d100      	bne.n	8003e5a <HAL_PCD_EP_Open+0x32>
 8003e58:	e175      	b.n	8004146 <HAL_PCD_EP_Open+0x31e>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	23f4      	movs	r3, #244	; 0xf4
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	54c2      	strb	r2, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8003e62:	78e3      	ldrb	r3, [r4, #3]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d100      	bne.n	8003e6a <HAL_PCD_EP_Open+0x42>
 8003e68:	e074      	b.n	8003f54 <HAL_PCD_EP_Open+0x12c>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d04e      	beq.n	8003f0c <HAL_PCD_EP_Open+0xe4>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d059      	beq.n	8003f26 <HAL_PCD_EP_Open+0xfe>
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d061      	beq.n	8003f3a <HAL_PCD_EP_Open+0x112>
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8003e76:	7822      	ldrb	r2, [r4, #0]
 8003e78:	0093      	lsls	r3, r2, #2
 8003e7a:	6801      	ldr	r1, [r0, #0]
 8003e7c:	468c      	mov	ip, r1
 8003e7e:	4463      	add	r3, ip
 8003e80:	8819      	ldrh	r1, [r3, #0]
 8003e82:	4db2      	ldr	r5, [pc, #712]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8003e84:	4029      	ands	r1, r5
 8003e86:	430a      	orrs	r2, r1
 8003e88:	49b1      	ldr	r1, [pc, #708]	; (8004150 <HAL_PCD_EP_Open+0x328>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8003e8e:	7aa3      	ldrb	r3, [r4, #10]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d000      	beq.n	8003e96 <HAL_PCD_EP_Open+0x6e>
 8003e94:	e0b5      	b.n	8004002 <HAL_PCD_EP_Open+0x1da>
  {
    if (ep->is_in)
 8003e96:	7863      	ldrb	r3, [r4, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d100      	bne.n	8003e9e <HAL_PCD_EP_Open+0x76>
 8003e9c:	e067      	b.n	8003f6e <HAL_PCD_EP_Open+0x146>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003e9e:	6801      	ldr	r1, [r0, #0]
 8003ea0:	2350      	movs	r3, #80	; 0x50
 8003ea2:	5acb      	ldrh	r3, [r1, r3]
 8003ea4:	7822      	ldrb	r2, [r4, #0]
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	185b      	adds	r3, r3, r1
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	00d2      	lsls	r2, r2, #3
 8003eb0:	4694      	mov	ip, r2
 8003eb2:	4463      	add	r3, ip
 8003eb4:	88a2      	ldrh	r2, [r4, #4]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	438a      	bics	r2, r1
 8003eba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003ebc:	7823      	ldrb	r3, [r4, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	4694      	mov	ip, r2
 8003ec4:	4463      	add	r3, ip
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	0651      	lsls	r1, r2, #25
 8003eca:	d503      	bpl.n	8003ed4 <HAL_PCD_EP_Open+0xac>
 8003ecc:	402a      	ands	r2, r5
 8003ece:	49a1      	ldr	r1, [pc, #644]	; (8004154 <HAL_PCD_EP_Open+0x32c>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8003ed4:	7822      	ldrb	r2, [r4, #0]
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	6803      	ldr	r3, [r0, #0]
 8003eda:	469c      	mov	ip, r3
 8003edc:	4462      	add	r2, ip
 8003ede:	8813      	ldrh	r3, [r2, #0]
 8003ee0:	499d      	ldr	r1, [pc, #628]	; (8004158 <HAL_PCD_EP_Open+0x330>)
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	404b      	eors	r3, r1
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	4999      	ldr	r1, [pc, #612]	; (8004150 <HAL_PCD_EP_Open+0x328>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	23f4      	movs	r3, #244	; 0xf4
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	54c2      	strb	r2, [r0, r3]
  return ret;
 8003ef8:	2000      	movs	r0, #0
}
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003efc:	247f      	movs	r4, #127	; 0x7f
 8003efe:	400c      	ands	r4, r1
 8003f00:	00e5      	lsls	r5, r4, #3
 8003f02:	1b2d      	subs	r5, r5, r4
 8003f04:	00ac      	lsls	r4, r5, #2
 8003f06:	3428      	adds	r4, #40	; 0x28
 8003f08:	1904      	adds	r4, r0, r4
 8003f0a:	e799      	b.n	8003e40 <HAL_PCD_EP_Open+0x18>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8003f0c:	7823      	ldrb	r3, [r4, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	6802      	ldr	r2, [r0, #0]
 8003f12:	4694      	mov	ip, r2
 8003f14:	4463      	add	r3, ip
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	4990      	ldr	r1, [pc, #576]	; (800415c <HAL_PCD_EP_Open+0x334>)
 8003f1a:	4011      	ands	r1, r2
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	0092      	lsls	r2, r2, #2
 8003f20:	430a      	orrs	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
    break;
 8003f24:	e7a7      	b.n	8003e76 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8003f26:	7823      	ldrb	r3, [r4, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	6802      	ldr	r2, [r0, #0]
 8003f2c:	4694      	mov	ip, r2
 8003f2e:	4463      	add	r3, ip
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	498a      	ldr	r1, [pc, #552]	; (800415c <HAL_PCD_EP_Open+0x334>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	801a      	strh	r2, [r3, #0]
    break;
 8003f38:	e79d      	b.n	8003e76 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8003f3a:	7823      	ldrb	r3, [r4, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	6802      	ldr	r2, [r0, #0]
 8003f40:	4694      	mov	ip, r2
 8003f42:	4463      	add	r3, ip
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	4985      	ldr	r1, [pc, #532]	; (800415c <HAL_PCD_EP_Open+0x334>)
 8003f48:	4011      	ands	r1, r2
 8003f4a:	22c0      	movs	r2, #192	; 0xc0
 8003f4c:	00d2      	lsls	r2, r2, #3
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	801a      	strh	r2, [r3, #0]
    break;
 8003f52:	e790      	b.n	8003e76 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8003f54:	7823      	ldrb	r3, [r4, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	6802      	ldr	r2, [r0, #0]
 8003f5a:	4694      	mov	ip, r2
 8003f5c:	4463      	add	r3, ip
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	497e      	ldr	r1, [pc, #504]	; (800415c <HAL_PCD_EP_Open+0x334>)
 8003f62:	4011      	ands	r1, r2
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	00d2      	lsls	r2, r2, #3
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	801a      	strh	r2, [r3, #0]
    break;
 8003f6c:	e783      	b.n	8003e76 <HAL_PCD_EP_Open+0x4e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003f6e:	6801      	ldr	r1, [r0, #0]
 8003f70:	2550      	movs	r5, #80	; 0x50
 8003f72:	5b4b      	ldrh	r3, [r1, r5]
 8003f74:	7822      	ldrb	r2, [r4, #0]
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	185b      	adds	r3, r3, r1
 8003f7c:	4a78      	ldr	r2, [pc, #480]	; (8004160 <HAL_PCD_EP_Open+0x338>)
 8003f7e:	4694      	mov	ip, r2
 8003f80:	4463      	add	r3, ip
 8003f82:	88a2      	ldrh	r2, [r4, #4]
 8003f84:	2101      	movs	r1, #1
 8003f86:	438a      	bics	r2, r1
 8003f88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003f8a:	6801      	ldr	r1, [r0, #0]
 8003f8c:	5b4b      	ldrh	r3, [r1, r5]
 8003f8e:	7822      	ldrb	r2, [r4, #0]
 8003f90:	00d2      	lsls	r2, r2, #3
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	185b      	adds	r3, r3, r1
 8003f96:	4a73      	ldr	r2, [pc, #460]	; (8004164 <HAL_PCD_EP_Open+0x33c>)
 8003f98:	4694      	mov	ip, r2
 8003f9a:	4463      	add	r3, ip
 8003f9c:	68e1      	ldr	r1, [r4, #12]
 8003f9e:	293e      	cmp	r1, #62	; 0x3e
 8003fa0:	d926      	bls.n	8003ff0 <HAL_PCD_EP_Open+0x1c8>
 8003fa2:	094a      	lsrs	r2, r1, #5
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	06c9      	lsls	r1, r1, #27
 8003fa8:	d101      	bne.n	8003fae <HAL_PCD_EP_Open+0x186>
 8003faa:	3a01      	subs	r2, #1
 8003fac:	b292      	uxth	r2, r2
 8003fae:	0292      	lsls	r2, r2, #10
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	496d      	ldr	r1, [pc, #436]	; (8004168 <HAL_PCD_EP_Open+0x340>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003fb8:	7823      	ldrb	r3, [r4, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	6802      	ldr	r2, [r0, #0]
 8003fbe:	4694      	mov	ip, r2
 8003fc0:	4463      	add	r3, ip
 8003fc2:	881a      	ldrh	r2, [r3, #0]
 8003fc4:	0451      	lsls	r1, r2, #17
 8003fc6:	d504      	bpl.n	8003fd2 <HAL_PCD_EP_Open+0x1aa>
 8003fc8:	4960      	ldr	r1, [pc, #384]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	4967      	ldr	r1, [pc, #412]	; (800416c <HAL_PCD_EP_Open+0x344>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003fd2:	7823      	ldrb	r3, [r4, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	6802      	ldr	r2, [r0, #0]
 8003fd8:	4694      	mov	ip, r2
 8003fda:	4463      	add	r3, ip
 8003fdc:	8819      	ldrh	r1, [r3, #0]
 8003fde:	4a64      	ldr	r2, [pc, #400]	; (8004170 <HAL_PCD_EP_Open+0x348>)
 8003fe0:	4011      	ands	r1, r2
 8003fe2:	22c0      	movs	r2, #192	; 0xc0
 8003fe4:	0192      	lsls	r2, r2, #6
 8003fe6:	4051      	eors	r1, r2
 8003fe8:	4a59      	ldr	r2, [pc, #356]	; (8004150 <HAL_PCD_EP_Open+0x328>)
 8003fea:	430a      	orrs	r2, r1
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e77f      	b.n	8003ef0 <HAL_PCD_EP_Open+0xc8>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003ff0:	084a      	lsrs	r2, r1, #1
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	07c9      	lsls	r1, r1, #31
 8003ff6:	d501      	bpl.n	8003ffc <HAL_PCD_EP_Open+0x1d4>
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	0292      	lsls	r2, r2, #10
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	e7da      	b.n	8003fb8 <HAL_PCD_EP_Open+0x190>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8004002:	7823      	ldrb	r3, [r4, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	6802      	ldr	r2, [r0, #0]
 8004008:	4694      	mov	ip, r2
 800400a:	4463      	add	r3, ip
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	4959      	ldr	r1, [pc, #356]	; (8004174 <HAL_PCD_EP_Open+0x34c>)
 8004010:	4011      	ands	r1, r2
 8004012:	4a59      	ldr	r2, [pc, #356]	; (8004178 <HAL_PCD_EP_Open+0x350>)
 8004014:	430a      	orrs	r2, r1
 8004016:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8004018:	6801      	ldr	r1, [r0, #0]
 800401a:	2650      	movs	r6, #80	; 0x50
 800401c:	5b8b      	ldrh	r3, [r1, r6]
 800401e:	7822      	ldrb	r2, [r4, #0]
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	189b      	adds	r3, r3, r2
 8004024:	185b      	adds	r3, r3, r1
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	00d2      	lsls	r2, r2, #3
 800402a:	4694      	mov	ip, r2
 800402c:	4463      	add	r3, ip
 800402e:	88e2      	ldrh	r2, [r4, #6]
 8004030:	2101      	movs	r1, #1
 8004032:	438a      	bics	r2, r1
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	6805      	ldr	r5, [r0, #0]
 8004038:	5bab      	ldrh	r3, [r5, r6]
 800403a:	7822      	ldrb	r2, [r4, #0]
 800403c:	00d2      	lsls	r2, r2, #3
 800403e:	189b      	adds	r3, r3, r2
 8004040:	195b      	adds	r3, r3, r5
 8004042:	4a47      	ldr	r2, [pc, #284]	; (8004160 <HAL_PCD_EP_Open+0x338>)
 8004044:	4694      	mov	ip, r2
 8004046:	4463      	add	r3, ip
 8004048:	8922      	ldrh	r2, [r4, #8]
 800404a:	438a      	bics	r2, r1
 800404c:	801a      	strh	r2, [r3, #0]
    if (ep->is_in==0U)
 800404e:	7863      	ldrb	r3, [r4, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d13d      	bne.n	80040d0 <HAL_PCD_EP_Open+0x2a8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8004054:	7823      	ldrb	r3, [r4, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	4694      	mov	ip, r2
 800405c:	4463      	add	r3, ip
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	0451      	lsls	r1, r2, #17
 8004062:	d504      	bpl.n	800406e <HAL_PCD_EP_Open+0x246>
 8004064:	4939      	ldr	r1, [pc, #228]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8004066:	400a      	ands	r2, r1
 8004068:	4940      	ldr	r1, [pc, #256]	; (800416c <HAL_PCD_EP_Open+0x344>)
 800406a:	430a      	orrs	r2, r1
 800406c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800406e:	7823      	ldrb	r3, [r4, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	6802      	ldr	r2, [r0, #0]
 8004074:	4694      	mov	ip, r2
 8004076:	4463      	add	r3, ip
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	0651      	lsls	r1, r2, #25
 800407c:	d504      	bpl.n	8004088 <HAL_PCD_EP_Open+0x260>
 800407e:	4933      	ldr	r1, [pc, #204]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8004080:	400a      	ands	r2, r1
 8004082:	4934      	ldr	r1, [pc, #208]	; (8004154 <HAL_PCD_EP_Open+0x32c>)
 8004084:	430a      	orrs	r2, r1
 8004086:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8004088:	7823      	ldrb	r3, [r4, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	4694      	mov	ip, r2
 8004090:	4463      	add	r3, ip
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	492d      	ldr	r1, [pc, #180]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8004096:	4011      	ands	r1, r2
 8004098:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <HAL_PCD_EP_Open+0x32c>)
 800409a:	430a      	orrs	r2, r1
 800409c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800409e:	7821      	ldrb	r1, [r4, #0]
 80040a0:	0089      	lsls	r1, r1, #2
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	469c      	mov	ip, r3
 80040a6:	4461      	add	r1, ip
 80040a8:	880b      	ldrh	r3, [r1, #0]
 80040aa:	4a31      	ldr	r2, [pc, #196]	; (8004170 <HAL_PCD_EP_Open+0x348>)
 80040ac:	401a      	ands	r2, r3
 80040ae:	23c0      	movs	r3, #192	; 0xc0
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	4053      	eors	r3, r2
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <HAL_PCD_EP_Open+0x328>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80040ba:	7823      	ldrb	r3, [r4, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	6801      	ldr	r1, [r0, #0]
 80040c0:	468c      	mov	ip, r1
 80040c2:	4463      	add	r3, ip
 80040c4:	8819      	ldrh	r1, [r3, #0]
 80040c6:	4c24      	ldr	r4, [pc, #144]	; (8004158 <HAL_PCD_EP_Open+0x330>)
 80040c8:	4021      	ands	r1, r4
 80040ca:	430a      	orrs	r2, r1
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e70f      	b.n	8003ef0 <HAL_PCD_EP_Open+0xc8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	0451      	lsls	r1, r2, #17
 80040de:	d504      	bpl.n	80040ea <HAL_PCD_EP_Open+0x2c2>
 80040e0:	491a      	ldr	r1, [pc, #104]	; (800414c <HAL_PCD_EP_Open+0x324>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	4921      	ldr	r1, [pc, #132]	; (800416c <HAL_PCD_EP_Open+0x344>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80040ea:	7823      	ldrb	r3, [r4, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	6802      	ldr	r2, [r0, #0]
 80040f0:	4694      	mov	ip, r2
 80040f2:	4463      	add	r3, ip
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	0651      	lsls	r1, r2, #25
 80040f8:	d504      	bpl.n	8004104 <HAL_PCD_EP_Open+0x2dc>
 80040fa:	4914      	ldr	r1, [pc, #80]	; (800414c <HAL_PCD_EP_Open+0x324>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	4915      	ldr	r1, [pc, #84]	; (8004154 <HAL_PCD_EP_Open+0x32c>)
 8004100:	430a      	orrs	r2, r1
 8004102:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8004104:	7823      	ldrb	r3, [r4, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	6802      	ldr	r2, [r0, #0]
 800410a:	4694      	mov	ip, r2
 800410c:	4463      	add	r3, ip
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_PCD_EP_Open+0x324>)
 8004112:	4011      	ands	r1, r2
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_PCD_EP_Open+0x344>)
 8004116:	430a      	orrs	r2, r1
 8004118:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800411a:	7821      	ldrb	r1, [r4, #0]
 800411c:	0089      	lsls	r1, r1, #2
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	469c      	mov	ip, r3
 8004122:	4461      	add	r1, ip
 8004124:	880b      	ldrh	r3, [r1, #0]
 8004126:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <HAL_PCD_EP_Open+0x330>)
 8004128:	4013      	ands	r3, r2
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_PCD_EP_Open+0x328>)
 800412c:	4313      	orrs	r3, r2
 800412e:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8004130:	7823      	ldrb	r3, [r4, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	6801      	ldr	r1, [r0, #0]
 8004136:	468c      	mov	ip, r1
 8004138:	4463      	add	r3, ip
 800413a:	8819      	ldrh	r1, [r3, #0]
 800413c:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <HAL_PCD_EP_Open+0x348>)
 800413e:	4021      	ands	r1, r4
 8004140:	430a      	orrs	r2, r1
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	e6d4      	b.n	8003ef0 <HAL_PCD_EP_Open+0xc8>
  __HAL_LOCK(hpcd); 
 8004146:	2002      	movs	r0, #2
 8004148:	e6d7      	b.n	8003efa <HAL_PCD_EP_Open+0xd2>
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	00000f0f 	.word	0x00000f0f
 8004150:	ffff8080 	.word	0xffff8080
 8004154:	ffff80c0 	.word	0xffff80c0
 8004158:	ffff8fbf 	.word	0xffff8fbf
 800415c:	ffff898f 	.word	0xffff898f
 8004160:	00000404 	.word	0x00000404
 8004164:	00000406 	.word	0x00000406
 8004168:	ffff8000 	.word	0xffff8000
 800416c:	ffffc080 	.word	0xffffc080
 8004170:	ffffbf8f 	.word	0xffffbf8f
 8004174:	00000e0f 	.word	0x00000e0f
 8004178:	ffff8180 	.word	0xffff8180

0800417c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800417c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800417e:	b24a      	sxtb	r2, r1
 8004180:	2a00      	cmp	r2, #0
 8004182:	db3a      	blt.n	80041fa <HAL_PCD_EP_Close+0x7e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004184:	237f      	movs	r3, #127	; 0x7f
 8004186:	400b      	ands	r3, r1
 8004188:	00dc      	lsls	r4, r3, #3
 800418a:	1ae4      	subs	r4, r4, r3
 800418c:	00a3      	lsls	r3, r4, #2
 800418e:	3309      	adds	r3, #9
 8004190:	33ff      	adds	r3, #255	; 0xff
 8004192:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 8004194:	247f      	movs	r4, #127	; 0x7f
 8004196:	4021      	ands	r1, r4
 8004198:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800419a:	0fd2      	lsrs	r2, r2, #31
 800419c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800419e:	22f4      	movs	r2, #244	; 0xf4
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	5c82      	ldrb	r2, [r0, r2]
 80041a4:	2a01      	cmp	r2, #1
 80041a6:	d100      	bne.n	80041aa <HAL_PCD_EP_Close+0x2e>
 80041a8:	e0c1      	b.n	800432e <HAL_PCD_EP_Close+0x1b2>
 80041aa:	2101      	movs	r1, #1
 80041ac:	22f4      	movs	r2, #244	; 0xf4
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	5481      	strb	r1, [r0, r2]

  if (ep->doublebuffer == 0U) 
 80041b2:	7a9a      	ldrb	r2, [r3, #10]
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d141      	bne.n	800423c <HAL_PCD_EP_Close+0xc0>
  {
    if (ep->is_in)
 80041b8:	785a      	ldrb	r2, [r3, #1]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	d025      	beq.n	800420a <HAL_PCD_EP_Close+0x8e>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	6801      	ldr	r1, [r0, #0]
 80041c4:	468c      	mov	ip, r1
 80041c6:	4462      	add	r2, ip
 80041c8:	8811      	ldrh	r1, [r2, #0]
 80041ca:	064c      	lsls	r4, r1, #25
 80041cc:	d504      	bpl.n	80041d8 <HAL_PCD_EP_Close+0x5c>
 80041ce:	4c59      	ldr	r4, [pc, #356]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 80041d0:	4021      	ands	r1, r4
 80041d2:	4c59      	ldr	r4, [pc, #356]	; (8004338 <HAL_PCD_EP_Close+0x1bc>)
 80041d4:	4321      	orrs	r1, r4
 80041d6:	8011      	strh	r1, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	6802      	ldr	r2, [r0, #0]
 80041de:	4694      	mov	ip, r2
 80041e0:	4463      	add	r3, ip
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	4955      	ldr	r1, [pc, #340]	; (800433c <HAL_PCD_EP_Close+0x1c0>)
 80041e6:	4011      	ands	r1, r2
 80041e8:	4a55      	ldr	r2, [pc, #340]	; (8004340 <HAL_PCD_EP_Close+0x1c4>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80041ee:	2200      	movs	r2, #0
 80041f0:	23f4      	movs	r3, #244	; 0xf4
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80041f6:	2000      	movs	r0, #0
}
 80041f8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80041fa:	237f      	movs	r3, #127	; 0x7f
 80041fc:	400b      	ands	r3, r1
 80041fe:	00dc      	lsls	r4, r3, #3
 8004200:	1ae4      	subs	r4, r4, r3
 8004202:	00a3      	lsls	r3, r4, #2
 8004204:	3328      	adds	r3, #40	; 0x28
 8004206:	18c3      	adds	r3, r0, r3
 8004208:	e7c4      	b.n	8004194 <HAL_PCD_EP_Close+0x18>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	6801      	ldr	r1, [r0, #0]
 8004210:	468c      	mov	ip, r1
 8004212:	4462      	add	r2, ip
 8004214:	8811      	ldrh	r1, [r2, #0]
 8004216:	044c      	lsls	r4, r1, #17
 8004218:	d504      	bpl.n	8004224 <HAL_PCD_EP_Close+0xa8>
 800421a:	4c46      	ldr	r4, [pc, #280]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 800421c:	4021      	ands	r1, r4
 800421e:	4c49      	ldr	r4, [pc, #292]	; (8004344 <HAL_PCD_EP_Close+0x1c8>)
 8004220:	4321      	orrs	r1, r4
 8004222:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	6802      	ldr	r2, [r0, #0]
 800422a:	4694      	mov	ip, r2
 800422c:	4463      	add	r3, ip
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	4945      	ldr	r1, [pc, #276]	; (8004348 <HAL_PCD_EP_Close+0x1cc>)
 8004232:	4011      	ands	r1, r2
 8004234:	4a42      	ldr	r2, [pc, #264]	; (8004340 <HAL_PCD_EP_Close+0x1c4>)
 8004236:	430a      	orrs	r2, r1
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	e7d8      	b.n	80041ee <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 800423c:	785a      	ldrb	r2, [r3, #1]
 800423e:	2a00      	cmp	r2, #0
 8004240:	d13a      	bne.n	80042b8 <HAL_PCD_EP_Close+0x13c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	0092      	lsls	r2, r2, #2
 8004246:	6801      	ldr	r1, [r0, #0]
 8004248:	468c      	mov	ip, r1
 800424a:	4462      	add	r2, ip
 800424c:	8811      	ldrh	r1, [r2, #0]
 800424e:	044c      	lsls	r4, r1, #17
 8004250:	d504      	bpl.n	800425c <HAL_PCD_EP_Close+0xe0>
 8004252:	4c38      	ldr	r4, [pc, #224]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 8004254:	4021      	ands	r1, r4
 8004256:	4c3b      	ldr	r4, [pc, #236]	; (8004344 <HAL_PCD_EP_Close+0x1c8>)
 8004258:	4321      	orrs	r1, r4
 800425a:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	0092      	lsls	r2, r2, #2
 8004260:	6801      	ldr	r1, [r0, #0]
 8004262:	468c      	mov	ip, r1
 8004264:	4462      	add	r2, ip
 8004266:	8811      	ldrh	r1, [r2, #0]
 8004268:	064c      	lsls	r4, r1, #25
 800426a:	d504      	bpl.n	8004276 <HAL_PCD_EP_Close+0xfa>
 800426c:	4c31      	ldr	r4, [pc, #196]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 800426e:	4021      	ands	r1, r4
 8004270:	4c31      	ldr	r4, [pc, #196]	; (8004338 <HAL_PCD_EP_Close+0x1bc>)
 8004272:	4321      	orrs	r1, r4
 8004274:	8011      	strh	r1, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	6801      	ldr	r1, [r0, #0]
 800427c:	468c      	mov	ip, r1
 800427e:	4462      	add	r2, ip
 8004280:	8811      	ldrh	r1, [r2, #0]
 8004282:	4c2c      	ldr	r4, [pc, #176]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 8004284:	400c      	ands	r4, r1
 8004286:	492c      	ldr	r1, [pc, #176]	; (8004338 <HAL_PCD_EP_Close+0x1bc>)
 8004288:	4321      	orrs	r1, r4
 800428a:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800428c:	781c      	ldrb	r4, [r3, #0]
 800428e:	00a4      	lsls	r4, r4, #2
 8004290:	6802      	ldr	r2, [r0, #0]
 8004292:	4694      	mov	ip, r2
 8004294:	4464      	add	r4, ip
 8004296:	8822      	ldrh	r2, [r4, #0]
 8004298:	492b      	ldr	r1, [pc, #172]	; (8004348 <HAL_PCD_EP_Close+0x1cc>)
 800429a:	400a      	ands	r2, r1
 800429c:	4928      	ldr	r1, [pc, #160]	; (8004340 <HAL_PCD_EP_Close+0x1c4>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	6802      	ldr	r2, [r0, #0]
 80042a8:	4694      	mov	ip, r2
 80042aa:	4463      	add	r3, ip
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	4c23      	ldr	r4, [pc, #140]	; (800433c <HAL_PCD_EP_Close+0x1c0>)
 80042b0:	4022      	ands	r2, r4
 80042b2:	4311      	orrs	r1, r2
 80042b4:	8019      	strh	r1, [r3, #0]
 80042b6:	e79a      	b.n	80041ee <HAL_PCD_EP_Close+0x72>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	6801      	ldr	r1, [r0, #0]
 80042be:	468c      	mov	ip, r1
 80042c0:	4462      	add	r2, ip
 80042c2:	8811      	ldrh	r1, [r2, #0]
 80042c4:	044c      	lsls	r4, r1, #17
 80042c6:	d504      	bpl.n	80042d2 <HAL_PCD_EP_Close+0x156>
 80042c8:	4c1a      	ldr	r4, [pc, #104]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 80042ca:	4021      	ands	r1, r4
 80042cc:	4c1d      	ldr	r4, [pc, #116]	; (8004344 <HAL_PCD_EP_Close+0x1c8>)
 80042ce:	4321      	orrs	r1, r4
 80042d0:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	0092      	lsls	r2, r2, #2
 80042d6:	6801      	ldr	r1, [r0, #0]
 80042d8:	468c      	mov	ip, r1
 80042da:	4462      	add	r2, ip
 80042dc:	8811      	ldrh	r1, [r2, #0]
 80042de:	064c      	lsls	r4, r1, #25
 80042e0:	d504      	bpl.n	80042ec <HAL_PCD_EP_Close+0x170>
 80042e2:	4c14      	ldr	r4, [pc, #80]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 80042e4:	4021      	ands	r1, r4
 80042e6:	4c14      	ldr	r4, [pc, #80]	; (8004338 <HAL_PCD_EP_Close+0x1bc>)
 80042e8:	4321      	orrs	r1, r4
 80042ea:	8011      	strh	r1, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	6801      	ldr	r1, [r0, #0]
 80042f2:	468c      	mov	ip, r1
 80042f4:	4462      	add	r2, ip
 80042f6:	8811      	ldrh	r1, [r2, #0]
 80042f8:	4c0e      	ldr	r4, [pc, #56]	; (8004334 <HAL_PCD_EP_Close+0x1b8>)
 80042fa:	400c      	ands	r4, r1
 80042fc:	4911      	ldr	r1, [pc, #68]	; (8004344 <HAL_PCD_EP_Close+0x1c8>)
 80042fe:	4321      	orrs	r1, r4
 8004300:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8004302:	781c      	ldrb	r4, [r3, #0]
 8004304:	00a4      	lsls	r4, r4, #2
 8004306:	6802      	ldr	r2, [r0, #0]
 8004308:	4694      	mov	ip, r2
 800430a:	4464      	add	r4, ip
 800430c:	8822      	ldrh	r2, [r4, #0]
 800430e:	490b      	ldr	r1, [pc, #44]	; (800433c <HAL_PCD_EP_Close+0x1c0>)
 8004310:	400a      	ands	r2, r1
 8004312:	490b      	ldr	r1, [pc, #44]	; (8004340 <HAL_PCD_EP_Close+0x1c4>)
 8004314:	430a      	orrs	r2, r1
 8004316:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	6802      	ldr	r2, [r0, #0]
 800431e:	4694      	mov	ip, r2
 8004320:	4463      	add	r3, ip
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	4c08      	ldr	r4, [pc, #32]	; (8004348 <HAL_PCD_EP_Close+0x1cc>)
 8004326:	4022      	ands	r2, r4
 8004328:	4311      	orrs	r1, r2
 800432a:	8019      	strh	r1, [r3, #0]
 800432c:	e75f      	b.n	80041ee <HAL_PCD_EP_Close+0x72>
  __HAL_LOCK(hpcd); 
 800432e:	2002      	movs	r0, #2
 8004330:	e762      	b.n	80041f8 <HAL_PCD_EP_Close+0x7c>
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	00000f0f 	.word	0x00000f0f
 8004338:	ffff80c0 	.word	0xffff80c0
 800433c:	ffff8fbf 	.word	0xffff8fbf
 8004340:	ffff8080 	.word	0xffff8080
 8004344:	ffffc080 	.word	0xffffc080
 8004348:	ffffbf8f 	.word	0xffffbf8f

0800434c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	247f      	movs	r4, #127	; 0x7f
 8004350:	4021      	ands	r1, r4
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8004352:	00cd      	lsls	r5, r1, #3
 8004354:	1a6d      	subs	r5, r5, r1
 8004356:	00ac      	lsls	r4, r5, #2
 8004358:	1904      	adds	r4, r0, r4
 800435a:	0025      	movs	r5, r4
 800435c:	3519      	adds	r5, #25
 800435e:	35ff      	adds	r5, #255	; 0xff
 8004360:	602a      	str	r2, [r5, #0]
  ep->xfer_len = len;
 8004362:	0022      	movs	r2, r4
 8004364:	321d      	adds	r2, #29
 8004366:	32ff      	adds	r2, #255	; 0xff
 8004368:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 800436a:	3508      	adds	r5, #8
 800436c:	2200      	movs	r2, #0
 800436e:	602a      	str	r2, [r5, #0]
  ep->is_in = 0U;
 8004370:	3d17      	subs	r5, #23
 8004372:	702a      	strb	r2, [r5, #0]
  ep->num = ep_addr & 0x7FU;
 8004374:	0022      	movs	r2, r4
 8004376:	3209      	adds	r2, #9
 8004378:	32ff      	adds	r2, #255	; 0xff
 800437a:	7011      	strb	r1, [r2, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800437c:	3415      	adds	r4, #21
 800437e:	34ff      	adds	r4, #255	; 0xff
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	4293      	cmp	r3, r2
 8004384:	d940      	bls.n	8004408 <HAL_PCD_EP_Receive+0xbc>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8004386:	00cd      	lsls	r5, r1, #3
 8004388:	1a6d      	subs	r5, r5, r1
 800438a:	00ac      	lsls	r4, r5, #2
 800438c:	1904      	adds	r4, r0, r4
 800438e:	341d      	adds	r4, #29
 8004390:	34ff      	adds	r4, #255	; 0xff
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	6023      	str	r3, [r4, #0]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8004396:	00cc      	lsls	r4, r1, #3
 8004398:	1a64      	subs	r4, r4, r1
 800439a:	00a3      	lsls	r3, r4, #2
 800439c:	001c      	movs	r4, r3
 800439e:	18c3      	adds	r3, r0, r3
 80043a0:	3313      	adds	r3, #19
 80043a2:	33ff      	adds	r3, #255	; 0xff
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d141      	bne.n	800442e <HAL_PCD_EP_Receive+0xe2>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 80043aa:	6805      	ldr	r5, [r0, #0]
 80043ac:	3350      	adds	r3, #80	; 0x50
 80043ae:	5aeb      	ldrh	r3, [r5, r3]
 80043b0:	1904      	adds	r4, r0, r4
 80043b2:	3409      	adds	r4, #9
 80043b4:	34ff      	adds	r4, #255	; 0xff
 80043b6:	7824      	ldrb	r4, [r4, #0]
 80043b8:	00e4      	lsls	r4, r4, #3
 80043ba:	191b      	adds	r3, r3, r4
 80043bc:	195b      	adds	r3, r3, r5
 80043be:	4c5e      	ldr	r4, [pc, #376]	; (8004538 <HAL_PCD_EP_Receive+0x1ec>)
 80043c0:	46a4      	mov	ip, r4
 80043c2:	4463      	add	r3, ip
 80043c4:	2a3e      	cmp	r2, #62	; 0x3e
 80043c6:	d929      	bls.n	800441c <HAL_PCD_EP_Receive+0xd0>
 80043c8:	0954      	lsrs	r4, r2, #5
 80043ca:	b2a4      	uxth	r4, r4
 80043cc:	06d2      	lsls	r2, r2, #27
 80043ce:	d101      	bne.n	80043d4 <HAL_PCD_EP_Receive+0x88>
 80043d0:	3c01      	subs	r4, #1
 80043d2:	b2a4      	uxth	r4, r4
 80043d4:	02a4      	lsls	r4, r4, #10
 80043d6:	b2a4      	uxth	r4, r4
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_PCD_EP_Receive+0x1f0>)
 80043da:	4314      	orrs	r4, r2
 80043dc:	801c      	strh	r4, [r3, #0]
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	00ca      	lsls	r2, r1, #3
 80043e2:	1a51      	subs	r1, r2, r1
 80043e4:	008a      	lsls	r2, r1, #2
 80043e6:	1880      	adds	r0, r0, r2
 80043e8:	3009      	adds	r0, #9
 80043ea:	30ff      	adds	r0, #255	; 0xff
 80043ec:	7802      	ldrb	r2, [r0, #0]
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	8819      	ldrh	r1, [r3, #0]
 80043f4:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_PCD_EP_Receive+0x1f4>)
 80043f6:	4011      	ands	r1, r2
 80043f8:	22c0      	movs	r2, #192	; 0xc0
 80043fa:	0192      	lsls	r2, r2, #6
 80043fc:	4051      	eors	r1, r2
 80043fe:	4a51      	ldr	r2, [pc, #324]	; (8004544 <HAL_PCD_EP_Receive+0x1f8>)
 8004400:	430a      	orrs	r2, r1
 8004402:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
}
 8004404:	2000      	movs	r0, #0
 8004406:	bd70      	pop	{r4, r5, r6, pc}
    ep->xfer_len =0U;
 8004408:	00cc      	lsls	r4, r1, #3
 800440a:	1a64      	subs	r4, r4, r1
 800440c:	00a2      	lsls	r2, r4, #2
 800440e:	1882      	adds	r2, r0, r2
 8004410:	321d      	adds	r2, #29
 8004412:	32ff      	adds	r2, #255	; 0xff
 8004414:	2400      	movs	r4, #0
 8004416:	6014      	str	r4, [r2, #0]
    len=ep->xfer_len;
 8004418:	001a      	movs	r2, r3
 800441a:	e7bc      	b.n	8004396 <HAL_PCD_EP_Receive+0x4a>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 800441c:	0854      	lsrs	r4, r2, #1
 800441e:	b2a4      	uxth	r4, r4
 8004420:	07d2      	lsls	r2, r2, #31
 8004422:	d501      	bpl.n	8004428 <HAL_PCD_EP_Receive+0xdc>
 8004424:	3401      	adds	r4, #1
 8004426:	b2a4      	uxth	r4, r4
 8004428:	02a4      	lsls	r4, r4, #10
 800442a:	801c      	strh	r4, [r3, #0]
 800442c:	e7d7      	b.n	80043de <HAL_PCD_EP_Receive+0x92>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800442e:	00cc      	lsls	r4, r1, #3
 8004430:	1a64      	subs	r4, r4, r1
 8004432:	00a3      	lsls	r3, r4, #2
 8004434:	001c      	movs	r4, r3
 8004436:	18c3      	adds	r3, r0, r3
 8004438:	330a      	adds	r3, #10
 800443a:	33ff      	adds	r3, #255	; 0xff
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d123      	bne.n	800448a <HAL_PCD_EP_Receive+0x13e>
 8004442:	6805      	ldr	r5, [r0, #0]
 8004444:	3350      	adds	r3, #80	; 0x50
 8004446:	5aeb      	ldrh	r3, [r5, r3]
 8004448:	1904      	adds	r4, r0, r4
 800444a:	3409      	adds	r4, #9
 800444c:	34ff      	adds	r4, #255	; 0xff
 800444e:	7824      	ldrb	r4, [r4, #0]
 8004450:	00e4      	lsls	r4, r4, #3
 8004452:	191b      	adds	r3, r3, r4
 8004454:	195b      	adds	r3, r3, r5
 8004456:	4c3c      	ldr	r4, [pc, #240]	; (8004548 <HAL_PCD_EP_Receive+0x1fc>)
 8004458:	46a4      	mov	ip, r4
 800445a:	4463      	add	r3, ip
 800445c:	2a3e      	cmp	r2, #62	; 0x3e
 800445e:	d90b      	bls.n	8004478 <HAL_PCD_EP_Receive+0x12c>
 8004460:	0954      	lsrs	r4, r2, #5
 8004462:	b2a4      	uxth	r4, r4
 8004464:	06d5      	lsls	r5, r2, #27
 8004466:	d101      	bne.n	800446c <HAL_PCD_EP_Receive+0x120>
 8004468:	3c01      	subs	r4, #1
 800446a:	b2a4      	uxth	r4, r4
 800446c:	02a4      	lsls	r4, r4, #10
 800446e:	b2a4      	uxth	r4, r4
 8004470:	4d32      	ldr	r5, [pc, #200]	; (800453c <HAL_PCD_EP_Receive+0x1f0>)
 8004472:	432c      	orrs	r4, r5
 8004474:	801c      	strh	r4, [r3, #0]
 8004476:	e00a      	b.n	800448e <HAL_PCD_EP_Receive+0x142>
 8004478:	0854      	lsrs	r4, r2, #1
 800447a:	b2a4      	uxth	r4, r4
 800447c:	07d5      	lsls	r5, r2, #31
 800447e:	d501      	bpl.n	8004484 <HAL_PCD_EP_Receive+0x138>
 8004480:	3401      	adds	r4, #1
 8004482:	b2a4      	uxth	r4, r4
 8004484:	02a4      	lsls	r4, r4, #10
 8004486:	801c      	strh	r4, [r3, #0]
 8004488:	e001      	b.n	800448e <HAL_PCD_EP_Receive+0x142>
 800448a:	2b01      	cmp	r3, #1
 800448c:	d024      	beq.n	80044d8 <HAL_PCD_EP_Receive+0x18c>
 800448e:	00cc      	lsls	r4, r1, #3
 8004490:	1a64      	subs	r4, r4, r1
 8004492:	00a3      	lsls	r3, r4, #2
 8004494:	001c      	movs	r4, r3
 8004496:	18c3      	adds	r3, r0, r3
 8004498:	330a      	adds	r3, #10
 800449a:	33ff      	adds	r3, #255	; 0xff
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d135      	bne.n	800450e <HAL_PCD_EP_Receive+0x1c2>
 80044a2:	6805      	ldr	r5, [r0, #0]
 80044a4:	3350      	adds	r3, #80	; 0x50
 80044a6:	5aeb      	ldrh	r3, [r5, r3]
 80044a8:	1904      	adds	r4, r0, r4
 80044aa:	3409      	adds	r4, #9
 80044ac:	34ff      	adds	r4, #255	; 0xff
 80044ae:	7824      	ldrb	r4, [r4, #0]
 80044b0:	00e4      	lsls	r4, r4, #3
 80044b2:	191b      	adds	r3, r3, r4
 80044b4:	195b      	adds	r3, r3, r5
 80044b6:	4c20      	ldr	r4, [pc, #128]	; (8004538 <HAL_PCD_EP_Receive+0x1ec>)
 80044b8:	46a4      	mov	ip, r4
 80044ba:	4463      	add	r3, ip
 80044bc:	2a3e      	cmp	r2, #62	; 0x3e
 80044be:	d91d      	bls.n	80044fc <HAL_PCD_EP_Receive+0x1b0>
 80044c0:	0954      	lsrs	r4, r2, #5
 80044c2:	b2a4      	uxth	r4, r4
 80044c4:	06d2      	lsls	r2, r2, #27
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_EP_Receive+0x180>
 80044c8:	3c01      	subs	r4, #1
 80044ca:	b2a4      	uxth	r4, r4
 80044cc:	02a4      	lsls	r4, r4, #10
 80044ce:	b2a4      	uxth	r4, r4
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_PCD_EP_Receive+0x1f0>)
 80044d2:	4314      	orrs	r4, r2
 80044d4:	801c      	strh	r4, [r3, #0]
 80044d6:	e782      	b.n	80043de <HAL_PCD_EP_Receive+0x92>
 80044d8:	6805      	ldr	r5, [r0, #0]
 80044da:	334f      	adds	r3, #79	; 0x4f
 80044dc:	5aeb      	ldrh	r3, [r5, r3]
 80044de:	00ce      	lsls	r6, r1, #3
 80044e0:	1a76      	subs	r6, r6, r1
 80044e2:	00b4      	lsls	r4, r6, #2
 80044e4:	1904      	adds	r4, r0, r4
 80044e6:	3409      	adds	r4, #9
 80044e8:	34ff      	adds	r4, #255	; 0xff
 80044ea:	7824      	ldrb	r4, [r4, #0]
 80044ec:	00e4      	lsls	r4, r4, #3
 80044ee:	191b      	adds	r3, r3, r4
 80044f0:	195b      	adds	r3, r3, r5
 80044f2:	4c15      	ldr	r4, [pc, #84]	; (8004548 <HAL_PCD_EP_Receive+0x1fc>)
 80044f4:	46a4      	mov	ip, r4
 80044f6:	4463      	add	r3, ip
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e7c8      	b.n	800448e <HAL_PCD_EP_Receive+0x142>
 80044fc:	0854      	lsrs	r4, r2, #1
 80044fe:	b2a4      	uxth	r4, r4
 8004500:	07d2      	lsls	r2, r2, #31
 8004502:	d501      	bpl.n	8004508 <HAL_PCD_EP_Receive+0x1bc>
 8004504:	3401      	adds	r4, #1
 8004506:	b2a4      	uxth	r4, r4
 8004508:	02a4      	lsls	r4, r4, #10
 800450a:	801c      	strh	r4, [r3, #0]
 800450c:	e767      	b.n	80043de <HAL_PCD_EP_Receive+0x92>
 800450e:	2b01      	cmp	r3, #1
 8004510:	d000      	beq.n	8004514 <HAL_PCD_EP_Receive+0x1c8>
 8004512:	e764      	b.n	80043de <HAL_PCD_EP_Receive+0x92>
 8004514:	6805      	ldr	r5, [r0, #0]
 8004516:	334f      	adds	r3, #79	; 0x4f
 8004518:	5aeb      	ldrh	r3, [r5, r3]
 800451a:	00ce      	lsls	r6, r1, #3
 800451c:	1a76      	subs	r6, r6, r1
 800451e:	00b4      	lsls	r4, r6, #2
 8004520:	1904      	adds	r4, r0, r4
 8004522:	3409      	adds	r4, #9
 8004524:	34ff      	adds	r4, #255	; 0xff
 8004526:	7824      	ldrb	r4, [r4, #0]
 8004528:	00e4      	lsls	r4, r4, #3
 800452a:	191b      	adds	r3, r3, r4
 800452c:	195b      	adds	r3, r3, r5
 800452e:	4c02      	ldr	r4, [pc, #8]	; (8004538 <HAL_PCD_EP_Receive+0x1ec>)
 8004530:	46a4      	mov	ip, r4
 8004532:	4463      	add	r3, ip
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e752      	b.n	80043de <HAL_PCD_EP_Receive+0x92>
 8004538:	00000406 	.word	0x00000406
 800453c:	ffff8000 	.word	0xffff8000
 8004540:	ffffbf8f 	.word	0xffffbf8f
 8004544:	ffff8080 	.word	0xffff8080
 8004548:	00000402 	.word	0x00000402

0800454c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800454c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800454e:	23f4      	movs	r3, #244	; 0xf4
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	5cc3      	ldrb	r3, [r0, r3]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d04e      	beq.n	80045f6 <HAL_PCD_EP_SetStall+0xaa>
 8004558:	2201      	movs	r2, #1
 800455a:	23f4      	movs	r3, #244	; 0xf4
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	54c2      	strb	r2, [r0, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8004560:	b24c      	sxtb	r4, r1
 8004562:	2c00      	cmp	r4, #0
 8004564:	db20      	blt.n	80045a8 <HAL_PCD_EP_SetStall+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004566:	00ca      	lsls	r2, r1, #3
 8004568:	1a52      	subs	r2, r2, r1
 800456a:	0093      	lsls	r3, r2, #2
 800456c:	3309      	adds	r3, #9
 800456e:	33ff      	adds	r3, #255	; 0xff
 8004570:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 1;
 8004572:	2201      	movs	r2, #1
 8004574:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8004576:	327e      	adds	r2, #126	; 0x7e
 8004578:	4011      	ands	r1, r2
 800457a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800457c:	0fe4      	lsrs	r4, r4, #31
 800457e:	705c      	strb	r4, [r3, #1]
  
  if (ep->num == 0U)
 8004580:	2900      	cmp	r1, #0
 8004582:	d11a      	bne.n	80045ba <HAL_PCD_EP_SetStall+0x6e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8004584:	0089      	lsls	r1, r1, #2
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	469c      	mov	ip, r3
 800458a:	4461      	add	r1, ip
 800458c:	880a      	ldrh	r2, [r1, #0]
 800458e:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <HAL_PCD_EP_SetStall+0xb0>)
 8004590:	401a      	ands	r2, r3
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_PCD_EP_SetStall+0xb4>)
 8004594:	405a      	eors	r2, r3
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_PCD_EP_SetStall+0xb8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	800b      	strh	r3, [r1, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 800459c:	2200      	movs	r2, #0
 800459e:	23f4      	movs	r3, #244	; 0xf4
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 80045a4:	2000      	movs	r0, #0
}
 80045a6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80045a8:	3b6a      	subs	r3, #106	; 0x6a
 80045aa:	3bff      	subs	r3, #255	; 0xff
 80045ac:	400b      	ands	r3, r1
 80045ae:	00da      	lsls	r2, r3, #3
 80045b0:	1ad2      	subs	r2, r2, r3
 80045b2:	0093      	lsls	r3, r2, #2
 80045b4:	3328      	adds	r3, #40	; 0x28
 80045b6:	18c3      	adds	r3, r0, r3
 80045b8:	e7db      	b.n	8004572 <HAL_PCD_EP_SetStall+0x26>
    if (ep->is_in)
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	d00d      	beq.n	80045da <HAL_PCD_EP_SetStall+0x8e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 80045be:	0089      	lsls	r1, r1, #2
 80045c0:	6803      	ldr	r3, [r0, #0]
 80045c2:	469c      	mov	ip, r3
 80045c4:	4461      	add	r1, ip
 80045c6:	880b      	ldrh	r3, [r1, #0]
 80045c8:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_PCD_EP_SetStall+0xbc>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	2210      	movs	r2, #16
 80045ce:	4053      	eors	r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_PCD_EP_SetStall+0xb8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	800b      	strh	r3, [r1, #0]
 80045d8:	e7e0      	b.n	800459c <HAL_PCD_EP_SetStall+0x50>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80045da:	0089      	lsls	r1, r1, #2
 80045dc:	6803      	ldr	r3, [r0, #0]
 80045de:	469c      	mov	ip, r3
 80045e0:	4461      	add	r1, ip
 80045e2:	880a      	ldrh	r2, [r1, #0]
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_PCD_EP_SetStall+0xc0>)
 80045e6:	401a      	ands	r2, r3
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	015b      	lsls	r3, r3, #5
 80045ec:	405a      	eors	r2, r3
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_PCD_EP_SetStall+0xb8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	800b      	strh	r3, [r1, #0]
 80045f4:	e7d2      	b.n	800459c <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd); 
 80045f6:	2002      	movs	r0, #2
 80045f8:	e7d5      	b.n	80045a6 <HAL_PCD_EP_SetStall+0x5a>
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	ffffbfbf 	.word	0xffffbfbf
 8004600:	00001010 	.word	0x00001010
 8004604:	ffff8080 	.word	0xffff8080
 8004608:	ffff8fbf 	.word	0xffff8fbf
 800460c:	ffffbf8f 	.word	0xffffbf8f

08004610 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004610:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8004612:	b24a      	sxtb	r2, r1
 8004614:	2a00      	cmp	r2, #0
 8004616:	db39      	blt.n	800468c <HAL_PCD_EP_ClrStall+0x7c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004618:	00cc      	lsls	r4, r1, #3
 800461a:	1a64      	subs	r4, r4, r1
 800461c:	00a3      	lsls	r3, r4, #2
 800461e:	3309      	adds	r3, #9
 8004620:	33ff      	adds	r3, #255	; 0xff
 8004622:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 0U;
 8004624:	2400      	movs	r4, #0
 8004626:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8004628:	347f      	adds	r4, #127	; 0x7f
 800462a:	4021      	ands	r1, r4
 800462c:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800462e:	0fd2      	lsrs	r2, r2, #31
 8004630:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8004632:	22f4      	movs	r2, #244	; 0xf4
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	5c82      	ldrb	r2, [r0, r2]
 8004638:	2a01      	cmp	r2, #1
 800463a:	d04b      	beq.n	80046d4 <HAL_PCD_EP_ClrStall+0xc4>
 800463c:	2101      	movs	r1, #1
 800463e:	22f4      	movs	r2, #244	; 0xf4
 8004640:	0052      	lsls	r2, r2, #1
 8004642:	5481      	strb	r1, [r0, r2]
  
  if (ep->is_in)
 8004644:	785a      	ldrb	r2, [r3, #1]
 8004646:	2a00      	cmp	r2, #0
 8004648:	d028      	beq.n	800469c <HAL_PCD_EP_ClrStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	6801      	ldr	r1, [r0, #0]
 8004650:	468c      	mov	ip, r1
 8004652:	4462      	add	r2, ip
 8004654:	8811      	ldrh	r1, [r2, #0]
 8004656:	064c      	lsls	r4, r1, #25
 8004658:	d504      	bpl.n	8004664 <HAL_PCD_EP_ClrStall+0x54>
 800465a:	4c1f      	ldr	r4, [pc, #124]	; (80046d8 <HAL_PCD_EP_ClrStall+0xc8>)
 800465c:	4021      	ands	r1, r4
 800465e:	4c1f      	ldr	r4, [pc, #124]	; (80046dc <HAL_PCD_EP_ClrStall+0xcc>)
 8004660:	4321      	orrs	r1, r4
 8004662:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	6803      	ldr	r3, [r0, #0]
 800466a:	469c      	mov	ip, r3
 800466c:	4462      	add	r2, ip
 800466e:	8813      	ldrh	r3, [r2, #0]
 8004670:	491b      	ldr	r1, [pc, #108]	; (80046e0 <HAL_PCD_EP_ClrStall+0xd0>)
 8004672:	400b      	ands	r3, r1
 8004674:	2130      	movs	r1, #48	; 0x30
 8004676:	404b      	eors	r3, r1
 8004678:	b29b      	uxth	r3, r3
 800467a:	491a      	ldr	r1, [pc, #104]	; (80046e4 <HAL_PCD_EP_ClrStall+0xd4>)
 800467c:	430b      	orrs	r3, r1
 800467e:	8013      	strh	r3, [r2, #0]
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
  }
  __HAL_UNLOCK(hpcd); 
 8004680:	2200      	movs	r2, #0
 8004682:	23f4      	movs	r3, #244	; 0xf4
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	54c2      	strb	r2, [r0, r3]
    
  return HAL_OK;
 8004688:	2000      	movs	r0, #0
}
 800468a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800468c:	237f      	movs	r3, #127	; 0x7f
 800468e:	400b      	ands	r3, r1
 8004690:	00dc      	lsls	r4, r3, #3
 8004692:	1ae4      	subs	r4, r4, r3
 8004694:	00a3      	lsls	r3, r4, #2
 8004696:	3328      	adds	r3, #40	; 0x28
 8004698:	18c3      	adds	r3, r0, r3
 800469a:	e7c3      	b.n	8004624 <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	0092      	lsls	r2, r2, #2
 80046a0:	6801      	ldr	r1, [r0, #0]
 80046a2:	468c      	mov	ip, r1
 80046a4:	4462      	add	r2, ip
 80046a6:	8811      	ldrh	r1, [r2, #0]
 80046a8:	044c      	lsls	r4, r1, #17
 80046aa:	d504      	bpl.n	80046b6 <HAL_PCD_EP_ClrStall+0xa6>
 80046ac:	4c0a      	ldr	r4, [pc, #40]	; (80046d8 <HAL_PCD_EP_ClrStall+0xc8>)
 80046ae:	4021      	ands	r1, r4
 80046b0:	4c0d      	ldr	r4, [pc, #52]	; (80046e8 <HAL_PCD_EP_ClrStall+0xd8>)
 80046b2:	4321      	orrs	r1, r4
 80046b4:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	6802      	ldr	r2, [r0, #0]
 80046bc:	4694      	mov	ip, r2
 80046be:	4463      	add	r3, ip
 80046c0:	8819      	ldrh	r1, [r3, #0]
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <HAL_PCD_EP_ClrStall+0xdc>)
 80046c4:	4011      	ands	r1, r2
 80046c6:	22c0      	movs	r2, #192	; 0xc0
 80046c8:	0192      	lsls	r2, r2, #6
 80046ca:	4051      	eors	r1, r2
 80046cc:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <HAL_PCD_EP_ClrStall+0xd4>)
 80046ce:	430a      	orrs	r2, r1
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e7d5      	b.n	8004680 <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 80046d4:	2002      	movs	r0, #2
 80046d6:	e7d8      	b.n	800468a <HAL_PCD_EP_ClrStall+0x7a>
 80046d8:	00000f0f 	.word	0x00000f0f
 80046dc:	ffff80c0 	.word	0xffff80c0
 80046e0:	ffff8fbf 	.word	0xffff8fbf
 80046e4:	ffff8080 	.word	0xffff8080
 80046e8:	ffffc080 	.word	0xffffc080
 80046ec:	ffffbf8f 	.word	0xffffbf8f

080046f0 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80046f0:	b510      	push	{r4, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80046f2:	3301      	adds	r3, #1
 80046f4:	085b      	lsrs	r3, r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80046f6:	1812      	adds	r2, r2, r0
 80046f8:	2080      	movs	r0, #128	; 0x80
 80046fa:	00c0      	lsls	r0, r0, #3
 80046fc:	1814      	adds	r4, r2, r0
  
  for (i = n; i != 0; i--)
 80046fe:	e007      	b.n	8004710 <PCD_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004700:	780a      	ldrb	r2, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8004702:	7848      	ldrb	r0, [r1, #1]
 8004704:	0200      	lsls	r0, r0, #8
 8004706:	4302      	orrs	r2, r0
    *pdwVal++ = temp2;
 8004708:	8022      	strh	r2, [r4, #0]
    pbUsrBuf++;
 800470a:	3102      	adds	r1, #2
  for (i = n; i != 0; i--)
 800470c:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 800470e:	3402      	adds	r4, #2
  for (i = n; i != 0; i--)
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f5      	bne.n	8004700 <PCD_WritePMA+0x10>
  }
}
 8004714:	bd10      	pop	{r4, pc}
	...

08004718 <HAL_PCD_EP_Transmit>:
{
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	0005      	movs	r5, r0
 800471c:	247f      	movs	r4, #127	; 0x7f
 800471e:	400c      	ands	r4, r1
  ep->xfer_buff = pBuf;  
 8004720:	00e0      	lsls	r0, r4, #3
 8004722:	1b00      	subs	r0, r0, r4
 8004724:	0081      	lsls	r1, r0, #2
 8004726:	1869      	adds	r1, r5, r1
 8004728:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 800472a:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0U;
 800472c:	2200      	movs	r2, #0
 800472e:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 8004730:	000a      	movs	r2, r1
 8004732:	3229      	adds	r2, #41	; 0x29
 8004734:	2001      	movs	r0, #1
 8004736:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & 0x7FU;
 8004738:	3a01      	subs	r2, #1
 800473a:	7014      	strb	r4, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 800473c:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800473e:	42bb      	cmp	r3, r7
 8004740:	d933      	bls.n	80047aa <HAL_PCD_EP_Transmit+0x92>
    ep->xfer_len-=len; 
 8004742:	1bdb      	subs	r3, r3, r7
 8004744:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 8004746:	00e2      	lsls	r2, r4, #3
 8004748:	1b12      	subs	r2, r2, r4
 800474a:	0093      	lsls	r3, r2, #2
 800474c:	001a      	movs	r2, r3
 800474e:	18eb      	adds	r3, r5, r3
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d030      	beq.n	80047ba <HAL_PCD_EP_Transmit+0xa2>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8004758:	6828      	ldr	r0, [r5, #0]
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	1b12      	subs	r2, r2, r4
 800475e:	0093      	lsls	r3, r2, #2
 8004760:	18eb      	adds	r3, r5, r3
 8004762:	3328      	adds	r3, #40	; 0x28
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	5a82      	ldrh	r2, [r0, r2]
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	d574      	bpl.n	8004858 <HAL_PCD_EP_Transmit+0x140>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800476e:	00e6      	lsls	r6, r4, #3
 8004770:	1b36      	subs	r6, r6, r4
 8004772:	00b2      	lsls	r2, r6, #2
 8004774:	18aa      	adds	r2, r5, r2
 8004776:	3229      	adds	r2, #41	; 0x29
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	2a00      	cmp	r2, #0
 800477c:	d13b      	bne.n	80047f6 <HAL_PCD_EP_Transmit+0xde>
 800477e:	3250      	adds	r2, #80	; 0x50
 8004780:	5a82      	ldrh	r2, [r0, r2]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	1818      	adds	r0, r3, r0
 8004788:	4b62      	ldr	r3, [pc, #392]	; (8004914 <HAL_PCD_EP_Transmit+0x1fc>)
 800478a:	469c      	mov	ip, r3
 800478c:	4460      	add	r0, ip
 800478e:	2f3e      	cmp	r7, #62	; 0x3e
 8004790:	d928      	bls.n	80047e4 <HAL_PCD_EP_Transmit+0xcc>
 8004792:	097b      	lsrs	r3, r7, #5
 8004794:	b29b      	uxth	r3, r3
 8004796:	06fa      	lsls	r2, r7, #27
 8004798:	d101      	bne.n	800479e <HAL_PCD_EP_Transmit+0x86>
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_PCD_EP_Transmit+0x200>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	8003      	strh	r3, [r0, #0]
 80047a8:	e027      	b.n	80047fa <HAL_PCD_EP_Transmit+0xe2>
    ep->xfer_len =0U;
 80047aa:	00e1      	lsls	r1, r4, #3
 80047ac:	1b09      	subs	r1, r1, r4
 80047ae:	008a      	lsls	r2, r1, #2
 80047b0:	18aa      	adds	r2, r5, r2
 80047b2:	2100      	movs	r1, #0
 80047b4:	63d1      	str	r1, [r2, #60]	; 0x3c
    len=ep->xfer_len;
 80047b6:	001f      	movs	r7, r3
 80047b8:	e7c5      	b.n	8004746 <HAL_PCD_EP_Transmit+0x2e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80047ba:	b2bf      	uxth	r7, r7
 80047bc:	18ae      	adds	r6, r5, r2
 80047be:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 80047c0:	003b      	movs	r3, r7
 80047c2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80047c4:	6828      	ldr	r0, [r5, #0]
 80047c6:	f7ff ff93 	bl	80046f0 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80047ca:	682a      	ldr	r2, [r5, #0]
 80047cc:	2350      	movs	r3, #80	; 0x50
 80047ce:	5ad3      	ldrh	r3, [r2, r3]
 80047d0:	3628      	adds	r6, #40	; 0x28
 80047d2:	7831      	ldrb	r1, [r6, #0]
 80047d4:	00c9      	lsls	r1, r1, #3
 80047d6:	185b      	adds	r3, r3, r1
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	4a50      	ldr	r2, [pc, #320]	; (800491c <HAL_PCD_EP_Transmit+0x204>)
 80047dc:	4694      	mov	ip, r2
 80047de:	4463      	add	r3, ip
 80047e0:	801f      	strh	r7, [r3, #0]
 80047e2:	e082      	b.n	80048ea <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80047e4:	087b      	lsrs	r3, r7, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	07fa      	lsls	r2, r7, #31
 80047ea:	d501      	bpl.n	80047f0 <HAL_PCD_EP_Transmit+0xd8>
 80047ec:	3301      	adds	r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	029b      	lsls	r3, r3, #10
 80047f2:	8003      	strh	r3, [r0, #0]
 80047f4:	e001      	b.n	80047fa <HAL_PCD_EP_Transmit+0xe2>
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	d024      	beq.n	8004844 <HAL_PCD_EP_Transmit+0x12c>
      pmabuffer = ep->pmaaddr1;
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	1b12      	subs	r2, r2, r4
 80047fe:	0093      	lsls	r3, r2, #2
 8004800:	18eb      	adds	r3, r5, r3
 8004802:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8004804:	b2bb      	uxth	r3, r7
 8004806:	00e1      	lsls	r1, r4, #3
 8004808:	1b09      	subs	r1, r1, r4
 800480a:	008e      	lsls	r6, r1, #2
 800480c:	19ae      	adds	r6, r5, r6
 800480e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8004810:	6828      	ldr	r0, [r5, #0]
 8004812:	f7ff ff6d 	bl	80046f0 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8004816:	3629      	adds	r6, #41	; 0x29
 8004818:	7833      	ldrb	r3, [r6, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d055      	beq.n	80048ca <HAL_PCD_EP_Transmit+0x1b2>
 800481e:	2b01      	cmp	r3, #1
 8004820:	d163      	bne.n	80048ea <HAL_PCD_EP_Transmit+0x1d2>
 8004822:	00e2      	lsls	r2, r4, #3
 8004824:	1b12      	subs	r2, r2, r4
 8004826:	0093      	lsls	r3, r2, #2
 8004828:	18eb      	adds	r3, r5, r3
 800482a:	3328      	adds	r3, #40	; 0x28
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	682a      	ldr	r2, [r5, #0]
 8004832:	4694      	mov	ip, r2
 8004834:	4463      	add	r3, ip
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	4939      	ldr	r1, [pc, #228]	; (8004920 <HAL_PCD_EP_Transmit+0x208>)
 800483a:	4011      	ands	r1, r2
 800483c:	4a39      	ldr	r2, [pc, #228]	; (8004924 <HAL_PCD_EP_Transmit+0x20c>)
 800483e:	430a      	orrs	r2, r1
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e052      	b.n	80048ea <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004844:	324f      	adds	r2, #79	; 0x4f
 8004846:	5a82      	ldrh	r2, [r0, r2]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	18d3      	adds	r3, r2, r3
 800484c:	1818      	adds	r0, r3, r0
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_PCD_EP_Transmit+0x1fc>)
 8004850:	469c      	mov	ip, r3
 8004852:	4460      	add	r0, ip
 8004854:	8007      	strh	r7, [r0, #0]
 8004856:	e7d0      	b.n	80047fa <HAL_PCD_EP_Transmit+0xe2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004858:	00e6      	lsls	r6, r4, #3
 800485a:	1b36      	subs	r6, r6, r4
 800485c:	00b2      	lsls	r2, r6, #2
 800485e:	18aa      	adds	r2, r5, r2
 8004860:	3229      	adds	r2, #41	; 0x29
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	2a00      	cmp	r2, #0
 8004866:	d11e      	bne.n	80048a6 <HAL_PCD_EP_Transmit+0x18e>
 8004868:	3250      	adds	r2, #80	; 0x50
 800486a:	5a82      	ldrh	r2, [r0, r2]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	18d3      	adds	r3, r2, r3
 8004870:	1818      	adds	r0, r3, r0
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <HAL_PCD_EP_Transmit+0x204>)
 8004874:	469c      	mov	ip, r3
 8004876:	4460      	add	r0, ip
 8004878:	2f3e      	cmp	r7, #62	; 0x3e
 800487a:	d90b      	bls.n	8004894 <HAL_PCD_EP_Transmit+0x17c>
 800487c:	097b      	lsrs	r3, r7, #5
 800487e:	b29b      	uxth	r3, r3
 8004880:	06fa      	lsls	r2, r7, #27
 8004882:	d101      	bne.n	8004888 <HAL_PCD_EP_Transmit+0x170>
 8004884:	3b01      	subs	r3, #1
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29b      	uxth	r3, r3
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_PCD_EP_Transmit+0x200>)
 800488e:	4313      	orrs	r3, r2
 8004890:	8003      	strh	r3, [r0, #0]
 8004892:	e00a      	b.n	80048aa <HAL_PCD_EP_Transmit+0x192>
 8004894:	087b      	lsrs	r3, r7, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	07fa      	lsls	r2, r7, #31
 800489a:	d501      	bpl.n	80048a0 <HAL_PCD_EP_Transmit+0x188>
 800489c:	3301      	adds	r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	8003      	strh	r3, [r0, #0]
 80048a4:	e001      	b.n	80048aa <HAL_PCD_EP_Transmit+0x192>
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	d005      	beq.n	80048b6 <HAL_PCD_EP_Transmit+0x19e>
      pmabuffer = ep->pmaaddr0;
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	1b12      	subs	r2, r2, r4
 80048ae:	0093      	lsls	r3, r2, #2
 80048b0:	18eb      	adds	r3, r5, r3
 80048b2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80048b4:	e7a6      	b.n	8004804 <HAL_PCD_EP_Transmit+0xec>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80048b6:	324f      	adds	r2, #79	; 0x4f
 80048b8:	5a82      	ldrh	r2, [r0, r2]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	1818      	adds	r0, r3, r0
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <HAL_PCD_EP_Transmit+0x204>)
 80048c2:	469c      	mov	ip, r3
 80048c4:	4460      	add	r0, ip
 80048c6:	8007      	strh	r7, [r0, #0]
 80048c8:	e7ef      	b.n	80048aa <HAL_PCD_EP_Transmit+0x192>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80048ca:	00e2      	lsls	r2, r4, #3
 80048cc:	1b12      	subs	r2, r2, r4
 80048ce:	0093      	lsls	r3, r2, #2
 80048d0:	18eb      	adds	r3, r5, r3
 80048d2:	3328      	adds	r3, #40	; 0x28
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	682a      	ldr	r2, [r5, #0]
 80048da:	4694      	mov	ip, r2
 80048dc:	4463      	add	r3, ip
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	490f      	ldr	r1, [pc, #60]	; (8004920 <HAL_PCD_EP_Transmit+0x208>)
 80048e2:	4011      	ands	r1, r2
 80048e4:	4a10      	ldr	r2, [pc, #64]	; (8004928 <HAL_PCD_EP_Transmit+0x210>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80048ea:	682a      	ldr	r2, [r5, #0]
 80048ec:	00e1      	lsls	r1, r4, #3
 80048ee:	1b0c      	subs	r4, r1, r4
 80048f0:	00a3      	lsls	r3, r4, #2
 80048f2:	18ed      	adds	r5, r5, r3
 80048f4:	3528      	adds	r5, #40	; 0x28
 80048f6:	782b      	ldrb	r3, [r5, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	18d2      	adds	r2, r2, r3
 80048fc:	8813      	ldrh	r3, [r2, #0]
 80048fe:	490b      	ldr	r1, [pc, #44]	; (800492c <HAL_PCD_EP_Transmit+0x214>)
 8004900:	400b      	ands	r3, r1
 8004902:	2130      	movs	r1, #48	; 0x30
 8004904:	404b      	eors	r3, r1
 8004906:	b29b      	uxth	r3, r3
 8004908:	4909      	ldr	r1, [pc, #36]	; (8004930 <HAL_PCD_EP_Transmit+0x218>)
 800490a:	430b      	orrs	r3, r1
 800490c:	8013      	strh	r3, [r2, #0]
}
 800490e:	2000      	movs	r0, #0
 8004910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	00000406 	.word	0x00000406
 8004918:	ffff8000 	.word	0xffff8000
 800491c:	00000402 	.word	0x00000402
 8004920:	00000f0f 	.word	0x00000f0f
 8004924:	ffffc080 	.word	0xffffc080
 8004928:	ffff80c0 	.word	0xffff80c0
 800492c:	ffff8fbf 	.word	0xffff8fbf
 8004930:	ffff8080 	.word	0xffff8080

08004934 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004934:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8004936:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8004938:	1810      	adds	r0, r2, r0
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	00d2      	lsls	r2, r2, #3
 800493e:	4694      	mov	ip, r2
 8004940:	4460      	add	r0, ip
  
  for (i = n; i != 0U; i--)
 8004942:	e006      	b.n	8004952 <PCD_ReadPMA+0x1e>
  {
    temp = *pdwVal++;
 8004944:	8802      	ldrh	r2, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8004946:	700a      	strb	r2, [r1, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8004948:	0a12      	lsrs	r2, r2, #8
 800494a:	704a      	strb	r2, [r1, #1]
  for (i = n; i != 0U; i--)
 800494c:	3c01      	subs	r4, #1
    temp = *pdwVal++;
 800494e:	3002      	adds	r0, #2
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8004950:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8004952:	2c00      	cmp	r4, #0
 8004954:	d1f6      	bne.n	8004944 <PCD_ReadPMA+0x10>
  }
  
  if (wNBytes % 2)
 8004956:	07db      	lsls	r3, r3, #31
 8004958:	d501      	bpl.n	800495e <PCD_ReadPMA+0x2a>
  {
    temp = *pdwVal++;
 800495a:	8803      	ldrh	r3, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800495c:	700b      	strb	r3, [r1, #0]
  }
}
 800495e:	bd10      	pop	{r4, pc}

08004960 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	0005      	movs	r5, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8004966:	2200      	movs	r2, #0
 8004968:	ab01      	add	r3, sp, #4
 800496a:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 800496c:	e1b5      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800496e:	8803      	ldrh	r3, [r0, #0]
 8004970:	4aa9      	ldr	r2, [pc, #676]	; (8004c18 <PCD_EP_ISR_Handler+0x2b8>)
 8004972:	4013      	ands	r3, r2
 8004974:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004976:	6829      	ldr	r1, [r5, #0]
 8004978:	2350      	movs	r3, #80	; 0x50
 800497a:	5acb      	ldrh	r3, [r1, r3]
 800497c:	2228      	movs	r2, #40	; 0x28
 800497e:	5caa      	ldrb	r2, [r5, r2]
 8004980:	00d2      	lsls	r2, r2, #3
 8004982:	189b      	adds	r3, r3, r2
 8004984:	185b      	adds	r3, r3, r1
 8004986:	4aa5      	ldr	r2, [pc, #660]	; (8004c1c <PCD_EP_ISR_Handler+0x2bc>)
 8004988:	4694      	mov	ip, r2
 800498a:	4463      	add	r3, ip
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	059b      	lsls	r3, r3, #22
 8004990:	0d9b      	lsrs	r3, r3, #22
 8004992:	642b      	str	r3, [r5, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8004994:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004996:	4694      	mov	ip, r2
 8004998:	4463      	add	r3, ip
 800499a:	63ab      	str	r3, [r5, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800499c:	2100      	movs	r1, #0
 800499e:	0028      	movs	r0, r5
 80049a0:	f002 ff9b 	bl	80078da <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80049a4:	2324      	movs	r3, #36	; 0x24
 80049a6:	5ceb      	ldrb	r3, [r5, r3]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d100      	bne.n	80049ae <PCD_EP_ISR_Handler+0x4e>
 80049ac:	e195      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
 80049ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d000      	beq.n	80049b6 <PCD_EP_ISR_Handler+0x56>
 80049b4:	e191      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80049b6:	2224      	movs	r2, #36	; 0x24
 80049b8:	5cab      	ldrb	r3, [r5, r2]
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	4249      	negs	r1, r1
 80049be:	430b      	orrs	r3, r1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	31cc      	adds	r1, #204	; 0xcc
 80049c4:	6828      	ldr	r0, [r5, #0]
 80049c6:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	54ab      	strb	r3, [r5, r2]
 80049cc:	e185      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049ce:	2350      	movs	r3, #80	; 0x50
 80049d0:	5ac3      	ldrh	r3, [r0, r3]
 80049d2:	2284      	movs	r2, #132	; 0x84
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	5caa      	ldrb	r2, [r5, r2]
 80049d8:	00d2      	lsls	r2, r2, #3
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	181b      	adds	r3, r3, r0
 80049de:	4a90      	ldr	r2, [pc, #576]	; (8004c20 <PCD_EP_ISR_Handler+0x2c0>)
 80049e0:	4694      	mov	ip, r2
 80049e2:	4463      	add	r3, ip
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	059b      	lsls	r3, r3, #22
 80049e8:	0d9b      	lsrs	r3, r3, #22
 80049ea:	002a      	movs	r2, r5
 80049ec:	3209      	adds	r2, #9
 80049ee:	32ff      	adds	r2, #255	; 0xff
 80049f0:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80049f2:	0029      	movs	r1, r5
 80049f4:	31ed      	adds	r1, #237	; 0xed
 80049f6:	31ff      	adds	r1, #255	; 0xff
 80049f8:	8892      	ldrh	r2, [r2, #4]
 80049fa:	f7ff ff9b 	bl	8004934 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80049fe:	682a      	ldr	r2, [r5, #0]
 8004a00:	8813      	ldrh	r3, [r2, #0]
 8004a02:	4988      	ldr	r1, [pc, #544]	; (8004c24 <PCD_EP_ISR_Handler+0x2c4>)
 8004a04:	400b      	ands	r3, r1
 8004a06:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8004a08:	0028      	movs	r0, r5
 8004a0a:	f002 ff4d 	bl	80078a8 <HAL_PCD_SetupStageCallback>
 8004a0e:	e164      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004a10:	0014      	movs	r4, r2
 8004a12:	8892      	ldrh	r2, [r2, #4]
 8004a14:	6921      	ldr	r1, [r4, #16]
 8004a16:	f7ff ff8d 	bl	8004934 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	69a2      	ldr	r2, [r4, #24]
 8004a1e:	4694      	mov	ip, r2
 8004a20:	4463      	add	r3, ip
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	e195      	b.n	8004d52 <PCD_EP_ISR_Handler+0x3f2>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8004a26:	084b      	lsrs	r3, r1, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	07c9      	lsls	r1, r1, #31
 8004a2c:	d501      	bpl.n	8004a32 <PCD_EP_ISR_Handler+0xd2>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	8013      	strh	r3, [r2, #0]
 8004a36:	e1a9      	b.n	8004d8c <PCD_EP_ISR_Handler+0x42c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8004a38:	00a6      	lsls	r6, r4, #2
 8004a3a:	1980      	adds	r0, r0, r6
 8004a3c:	8802      	ldrh	r2, [r0, #0]
 8004a3e:	ab01      	add	r3, sp, #4
 8004a40:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	db31      	blt.n	8004aae <PCD_EP_ISR_Handler+0x14e>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004a4a:	ab01      	add	r3, sp, #4
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	d400      	bmi.n	8004a54 <PCD_EP_ISR_Handler+0xf4>
 8004a52:	e142      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	469c      	mov	ip, r3
 8004a58:	4466      	add	r6, ip
 8004a5a:	8833      	ldrh	r3, [r6, #0]
 8004a5c:	4a6e      	ldr	r2, [pc, #440]	; (8004c18 <PCD_EP_ISR_Handler+0x2b8>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	8033      	strh	r3, [r6, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8004a62:	00e2      	lsls	r2, r4, #3
 8004a64:	1b12      	subs	r2, r2, r4
 8004a66:	0093      	lsls	r3, r2, #2
 8004a68:	001a      	movs	r2, r3
 8004a6a:	18eb      	adds	r3, r5, r3
 8004a6c:	3332      	adds	r3, #50	; 0x32
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d000      	beq.n	8004a76 <PCD_EP_ISR_Handler+0x116>
 8004a74:	e0dc      	b.n	8004c30 <PCD_EP_ISR_Handler+0x2d0>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a76:	6828      	ldr	r0, [r5, #0]
 8004a78:	3350      	adds	r3, #80	; 0x50
 8004a7a:	5ac3      	ldrh	r3, [r0, r3]
 8004a7c:	18aa      	adds	r2, r5, r2
 8004a7e:	0011      	movs	r1, r2
 8004a80:	3128      	adds	r1, #40	; 0x28
 8004a82:	7809      	ldrb	r1, [r1, #0]
 8004a84:	00c9      	lsls	r1, r1, #3
 8004a86:	185b      	adds	r3, r3, r1
 8004a88:	181b      	adds	r3, r3, r0
 8004a8a:	4964      	ldr	r1, [pc, #400]	; (8004c1c <PCD_EP_ISR_Handler+0x2bc>)
 8004a8c:	468c      	mov	ip, r1
 8004a8e:	4463      	add	r3, ip
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	059b      	lsls	r3, r3, #22
 8004a94:	0d9b      	lsrs	r3, r3, #22
 8004a96:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8004a98:	d100      	bne.n	8004a9c <PCD_EP_ISR_Handler+0x13c>
 8004a9a:	e0f9      	b.n	8004c90 <PCD_EP_ISR_Handler+0x330>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004a9c:	00e2      	lsls	r2, r4, #3
 8004a9e:	1b12      	subs	r2, r2, r4
 8004aa0:	0091      	lsls	r1, r2, #2
 8004aa2:	1869      	adds	r1, r5, r1
 8004aa4:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8004aa6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004aa8:	f7ff fe22 	bl	80046f0 <PCD_WritePMA>
 8004aac:	e0f0      	b.n	8004c90 <PCD_EP_ISR_Handler+0x330>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8004aae:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <PCD_EP_ISR_Handler+0x2c4>)
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	8002      	strh	r2, [r0, #0]
        if (ep->doublebuffer == 0U)
 8004ab4:	00e2      	lsls	r2, r4, #3
 8004ab6:	1b12      	subs	r2, r2, r4
 8004ab8:	0093      	lsls	r3, r2, #2
 8004aba:	001a      	movs	r2, r3
 8004abc:	18eb      	adds	r3, r5, r3
 8004abe:	3313      	adds	r3, #19
 8004ac0:	33ff      	adds	r3, #255	; 0xff
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11d      	bne.n	8004b04 <PCD_EP_ISR_Handler+0x1a4>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ac8:	6828      	ldr	r0, [r5, #0]
 8004aca:	3350      	adds	r3, #80	; 0x50
 8004acc:	5ac3      	ldrh	r3, [r0, r3]
 8004ace:	0011      	movs	r1, r2
 8004ad0:	18aa      	adds	r2, r5, r2
 8004ad2:	3209      	adds	r2, #9
 8004ad4:	32ff      	adds	r2, #255	; 0xff
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	00d2      	lsls	r2, r2, #3
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	181b      	adds	r3, r3, r0
 8004ade:	4a50      	ldr	r2, [pc, #320]	; (8004c20 <PCD_EP_ISR_Handler+0x2c0>)
 8004ae0:	4694      	mov	ip, r2
 8004ae2:	4463      	add	r3, ip
 8004ae4:	881f      	ldrh	r7, [r3, #0]
 8004ae6:	05bf      	lsls	r7, r7, #22
 8004ae8:	0dbf      	lsrs	r7, r7, #22
          if (count != 0U)
 8004aea:	d034      	beq.n	8004b56 <PCD_EP_ISR_Handler+0x1f6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aec:	186b      	adds	r3, r5, r1
 8004aee:	001a      	movs	r2, r3
 8004af0:	320d      	adds	r2, #13
 8004af2:	32ff      	adds	r2, #255	; 0xff
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	3319      	adds	r3, #25
 8004af8:	33ff      	adds	r3, #255	; 0xff
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	003b      	movs	r3, r7
 8004afe:	f7ff ff19 	bl	8004934 <PCD_ReadPMA>
 8004b02:	e028      	b.n	8004b56 <PCD_EP_ISR_Handler+0x1f6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8004b04:	6828      	ldr	r0, [r5, #0]
 8004b06:	00e2      	lsls	r2, r4, #3
 8004b08:	1b12      	subs	r2, r2, r4
 8004b0a:	0093      	lsls	r3, r2, #2
 8004b0c:	18eb      	adds	r3, r5, r3
 8004b0e:	3309      	adds	r3, #9
 8004b10:	33ff      	adds	r3, #255	; 0xff
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009a      	lsls	r2, r3, #2
 8004b16:	5a82      	ldrh	r2, [r0, r2]
 8004b18:	0452      	lsls	r2, r2, #17
 8004b1a:	d556      	bpl.n	8004bca <PCD_EP_ISR_Handler+0x26a>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b1c:	2250      	movs	r2, #80	; 0x50
 8004b1e:	5a82      	ldrh	r2, [r0, r2]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	18d3      	adds	r3, r2, r3
 8004b24:	181b      	adds	r3, r3, r0
 8004b26:	4a3d      	ldr	r2, [pc, #244]	; (8004c1c <PCD_EP_ISR_Handler+0x2bc>)
 8004b28:	4694      	mov	ip, r2
 8004b2a:	4463      	add	r3, ip
 8004b2c:	881f      	ldrh	r7, [r3, #0]
 8004b2e:	05bf      	lsls	r7, r7, #22
 8004b30:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 8004b32:	d13b      	bne.n	8004bac <PCD_EP_ISR_Handler+0x24c>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8004b34:	00e2      	lsls	r2, r4, #3
 8004b36:	1b12      	subs	r2, r2, r4
 8004b38:	0093      	lsls	r3, r2, #2
 8004b3a:	18eb      	adds	r3, r5, r3
 8004b3c:	3309      	adds	r3, #9
 8004b3e:	33ff      	adds	r3, #255	; 0xff
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	682a      	ldr	r2, [r5, #0]
 8004b46:	4694      	mov	ip, r2
 8004b48:	4463      	add	r3, ip
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	4936      	ldr	r1, [pc, #216]	; (8004c28 <PCD_EP_ISR_Handler+0x2c8>)
 8004b4e:	4011      	ands	r1, r2
 8004b50:	4a36      	ldr	r2, [pc, #216]	; (8004c2c <PCD_EP_ISR_Handler+0x2cc>)
 8004b52:	430a      	orrs	r2, r1
 8004b54:	801a      	strh	r2, [r3, #0]
        ep->xfer_count+=count;
 8004b56:	0039      	movs	r1, r7
 8004b58:	00e2      	lsls	r2, r4, #3
 8004b5a:	1b12      	subs	r2, r2, r4
 8004b5c:	0093      	lsls	r3, r2, #2
 8004b5e:	18eb      	adds	r3, r5, r3
 8004b60:	0018      	movs	r0, r3
 8004b62:	3021      	adds	r0, #33	; 0x21
 8004b64:	30ff      	adds	r0, #255	; 0xff
 8004b66:	6802      	ldr	r2, [r0, #0]
 8004b68:	19d2      	adds	r2, r2, r7
 8004b6a:	6002      	str	r2, [r0, #0]
        ep->xfer_buff+=count;
 8004b6c:	001a      	movs	r2, r3
 8004b6e:	3219      	adds	r2, #25
 8004b70:	32ff      	adds	r2, #255	; 0xff
 8004b72:	6810      	ldr	r0, [r2, #0]
 8004b74:	4684      	mov	ip, r0
 8004b76:	4467      	add	r7, ip
 8004b78:	6017      	str	r7, [r2, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b7a:	331d      	adds	r3, #29
 8004b7c:	33ff      	adds	r3, #255	; 0xff
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <PCD_EP_ISR_Handler+0x236>
 8004b84:	00e2      	lsls	r2, r4, #3
 8004b86:	1b12      	subs	r2, r2, r4
 8004b88:	0090      	lsls	r0, r2, #2
 8004b8a:	1828      	adds	r0, r5, r0
 8004b8c:	3015      	adds	r0, #21
 8004b8e:	30ff      	adds	r0, #255	; 0xff
 8004b90:	6802      	ldr	r2, [r0, #0]
 8004b92:	4291      	cmp	r1, r2
 8004b94:	d234      	bcs.n	8004c00 <PCD_EP_ISR_Handler+0x2a0>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	1b12      	subs	r2, r2, r4
 8004b9a:	0093      	lsls	r3, r2, #2
 8004b9c:	18eb      	adds	r3, r5, r3
 8004b9e:	3309      	adds	r3, #9
 8004ba0:	33ff      	adds	r3, #255	; 0xff
 8004ba2:	7819      	ldrb	r1, [r3, #0]
 8004ba4:	0028      	movs	r0, r5
 8004ba6:	f002 fe89 	bl	80078bc <HAL_PCD_DataOutStageCallback>
 8004baa:	e74e      	b.n	8004a4a <PCD_EP_ISR_Handler+0xea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bac:	00e2      	lsls	r2, r4, #3
 8004bae:	1b12      	subs	r2, r2, r4
 8004bb0:	0093      	lsls	r3, r2, #2
 8004bb2:	18eb      	adds	r3, r5, r3
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	320f      	adds	r2, #15
 8004bb8:	32ff      	adds	r2, #255	; 0xff
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	3319      	adds	r3, #25
 8004bbe:	33ff      	adds	r3, #255	; 0xff
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	003b      	movs	r3, r7
 8004bc4:	f7ff feb6 	bl	8004934 <PCD_ReadPMA>
 8004bc8:	e7b4      	b.n	8004b34 <PCD_EP_ISR_Handler+0x1d4>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bca:	2250      	movs	r2, #80	; 0x50
 8004bcc:	5a82      	ldrh	r2, [r0, r2]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	18d3      	adds	r3, r2, r3
 8004bd2:	181b      	adds	r3, r3, r0
 8004bd4:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <PCD_EP_ISR_Handler+0x2c0>)
 8004bd6:	4694      	mov	ip, r2
 8004bd8:	4463      	add	r3, ip
 8004bda:	881f      	ldrh	r7, [r3, #0]
 8004bdc:	05bf      	lsls	r7, r7, #22
 8004bde:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 8004be0:	d0a8      	beq.n	8004b34 <PCD_EP_ISR_Handler+0x1d4>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004be2:	00e2      	lsls	r2, r4, #3
 8004be4:	1b12      	subs	r2, r2, r4
 8004be6:	0093      	lsls	r3, r2, #2
 8004be8:	18eb      	adds	r3, r5, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	3211      	adds	r2, #17
 8004bee:	32ff      	adds	r2, #255	; 0xff
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	3319      	adds	r3, #25
 8004bf4:	33ff      	adds	r3, #255	; 0xff
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	003b      	movs	r3, r7
 8004bfa:	f7ff fe9b 	bl	8004934 <PCD_ReadPMA>
 8004bfe:	e799      	b.n	8004b34 <PCD_EP_ISR_Handler+0x1d4>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004c00:	00e1      	lsls	r1, r4, #3
 8004c02:	1b09      	subs	r1, r1, r4
 8004c04:	008a      	lsls	r2, r1, #2
 8004c06:	18aa      	adds	r2, r5, r2
 8004c08:	3209      	adds	r2, #9
 8004c0a:	32ff      	adds	r2, #255	; 0xff
 8004c0c:	7811      	ldrb	r1, [r2, #0]
 8004c0e:	003a      	movs	r2, r7
 8004c10:	0028      	movs	r0, r5
 8004c12:	f7ff fb9b 	bl	800434c <HAL_PCD_EP_Receive>
 8004c16:	e718      	b.n	8004a4a <PCD_EP_ISR_Handler+0xea>
 8004c18:	ffff8f0f 	.word	0xffff8f0f
 8004c1c:	00000402 	.word	0x00000402
 8004c20:	00000406 	.word	0x00000406
 8004c24:	00000f8f 	.word	0x00000f8f
 8004c28:	00000f0f 	.word	0x00000f0f
 8004c2c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8004c30:	6828      	ldr	r0, [r5, #0]
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	1b12      	subs	r2, r2, r4
 8004c36:	0093      	lsls	r3, r2, #2
 8004c38:	18eb      	adds	r3, r5, r3
 8004c3a:	3328      	adds	r3, #40	; 0x28
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	5a82      	ldrh	r2, [r0, r2]
 8004c42:	0652      	lsls	r2, r2, #25
 8004c44:	d400      	bmi.n	8004c48 <PCD_EP_ISR_Handler+0x2e8>
 8004c46:	e0b2      	b.n	8004dae <PCD_EP_ISR_Handler+0x44e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c48:	2250      	movs	r2, #80	; 0x50
 8004c4a:	5a82      	ldrh	r2, [r0, r2]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	181b      	adds	r3, r3, r0
 8004c52:	4a6a      	ldr	r2, [pc, #424]	; (8004dfc <PCD_EP_ISR_Handler+0x49c>)
 8004c54:	4694      	mov	ip, r2
 8004c56:	4463      	add	r3, ip
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	059b      	lsls	r3, r3, #22
 8004c5c:	0d9b      	lsrs	r3, r3, #22
 8004c5e:	00e1      	lsls	r1, r4, #3
 8004c60:	1b09      	subs	r1, r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	0011      	movs	r1, r2
 8004c66:	18aa      	adds	r2, r5, r2
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d000      	beq.n	8004c70 <PCD_EP_ISR_Handler+0x310>
 8004c6e:	e098      	b.n	8004da2 <PCD_EP_ISR_Handler+0x442>
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8004c70:	00e2      	lsls	r2, r4, #3
 8004c72:	1b12      	subs	r2, r2, r4
 8004c74:	0093      	lsls	r3, r2, #2
 8004c76:	18eb      	adds	r3, r5, r3
 8004c78:	3328      	adds	r3, #40	; 0x28
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	682a      	ldr	r2, [r5, #0]
 8004c80:	4694      	mov	ip, r2
 8004c82:	4463      	add	r3, ip
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	495e      	ldr	r1, [pc, #376]	; (8004e00 <PCD_EP_ISR_Handler+0x4a0>)
 8004c88:	4011      	ands	r1, r2
 8004c8a:	4a5e      	ldr	r2, [pc, #376]	; (8004e04 <PCD_EP_ISR_Handler+0x4a4>)
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c90:	6828      	ldr	r0, [r5, #0]
 8004c92:	2350      	movs	r3, #80	; 0x50
 8004c94:	5ac2      	ldrh	r2, [r0, r3]
 8004c96:	00e1      	lsls	r1, r4, #3
 8004c98:	1b09      	subs	r1, r1, r4
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	18eb      	adds	r3, r5, r3
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	3128      	adds	r1, #40	; 0x28
 8004ca2:	7809      	ldrb	r1, [r1, #0]
 8004ca4:	00c9      	lsls	r1, r1, #3
 8004ca6:	1852      	adds	r2, r2, r1
 8004ca8:	1812      	adds	r2, r2, r0
 8004caa:	4954      	ldr	r1, [pc, #336]	; (8004dfc <PCD_EP_ISR_Handler+0x49c>)
 8004cac:	468c      	mov	ip, r1
 8004cae:	4462      	add	r2, ip
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	0592      	lsls	r2, r2, #22
 8004cb4:	0d92      	lsrs	r2, r2, #22
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8004cb8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cba:	468c      	mov	ip, r1
 8004cbc:	4462      	add	r2, ip
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d000      	beq.n	8004cc8 <PCD_EP_ISR_Handler+0x368>
 8004cc6:	e08c      	b.n	8004de2 <PCD_EP_ISR_Handler+0x482>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cc8:	00e3      	lsls	r3, r4, #3
 8004cca:	1b1c      	subs	r4, r3, r4
 8004ccc:	00a3      	lsls	r3, r4, #2
 8004cce:	18eb      	adds	r3, r5, r3
 8004cd0:	3328      	adds	r3, #40	; 0x28
 8004cd2:	7819      	ldrb	r1, [r3, #0]
 8004cd4:	0028      	movs	r0, r5
 8004cd6:	f002 fe00 	bl	80078da <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8004cda:	6828      	ldr	r0, [r5, #0]
 8004cdc:	2344      	movs	r3, #68	; 0x44
 8004cde:	5ac3      	ldrh	r3, [r0, r3]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	80d3      	strh	r3, [r2, #6]
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db00      	blt.n	8004cee <PCD_EP_ISR_Handler+0x38e>
 8004cec:	e083      	b.n	8004df6 <PCD_EP_ISR_Handler+0x496>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cee:	466b      	mov	r3, sp
 8004cf0:	88dc      	ldrh	r4, [r3, #6]
 8004cf2:	230f      	movs	r3, #15
 8004cf4:	401c      	ands	r4, r3
    if (EPindex == 0U)
 8004cf6:	d000      	beq.n	8004cfa <PCD_EP_ISR_Handler+0x39a>
 8004cf8:	e69e      	b.n	8004a38 <PCD_EP_ISR_Handler+0xd8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cfa:	466b      	mov	r3, sp
 8004cfc:	3306      	adds	r3, #6
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	06db      	lsls	r3, r3, #27
 8004d02:	d400      	bmi.n	8004d06 <PCD_EP_ISR_Handler+0x3a6>
 8004d04:	e633      	b.n	800496e <PCD_EP_ISR_Handler+0xe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d06:	8802      	ldrh	r2, [r0, #0]
 8004d08:	ab01      	add	r3, sp, #4
 8004d0a:	801a      	strh	r2, [r3, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	051b      	lsls	r3, r3, #20
 8004d10:	d500      	bpl.n	8004d14 <PCD_EP_ISR_Handler+0x3b4>
 8004d12:	e65c      	b.n	80049ce <PCD_EP_ISR_Handler+0x6e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d14:	ab01      	add	r3, sp, #4
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dadd      	bge.n	8004cda <PCD_EP_ISR_Handler+0x37a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d1e:	8803      	ldrh	r3, [r0, #0]
 8004d20:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <PCD_EP_ISR_Handler+0x4a8>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d26:	6828      	ldr	r0, [r5, #0]
 8004d28:	2350      	movs	r3, #80	; 0x50
 8004d2a:	5ac3      	ldrh	r3, [r0, r3]
 8004d2c:	2284      	movs	r2, #132	; 0x84
 8004d2e:	0052      	lsls	r2, r2, #1
 8004d30:	5caa      	ldrb	r2, [r5, r2]
 8004d32:	00d2      	lsls	r2, r2, #3
 8004d34:	189b      	adds	r3, r3, r2
 8004d36:	181b      	adds	r3, r3, r0
 8004d38:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <PCD_EP_ISR_Handler+0x4ac>)
 8004d3a:	4694      	mov	ip, r2
 8004d3c:	4463      	add	r3, ip
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	059b      	lsls	r3, r3, #22
 8004d42:	0d9b      	lsrs	r3, r3, #22
 8004d44:	002a      	movs	r2, r5
 8004d46:	3209      	adds	r2, #9
 8004d48:	32ff      	adds	r2, #255	; 0xff
 8004d4a:	6193      	str	r3, [r2, #24]
          if (ep->xfer_count != 0U)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d000      	beq.n	8004d52 <PCD_EP_ISR_Handler+0x3f2>
 8004d50:	e65e      	b.n	8004a10 <PCD_EP_ISR_Handler+0xb0>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d52:	2100      	movs	r1, #0
 8004d54:	0028      	movs	r0, r5
 8004d56:	f002 fdb1 	bl	80078bc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	2250      	movs	r2, #80	; 0x50
 8004d5e:	5a9a      	ldrh	r2, [r3, r2]
 8004d60:	189a      	adds	r2, r3, r2
 8004d62:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <PCD_EP_ISR_Handler+0x4ac>)
 8004d64:	469c      	mov	ip, r3
 8004d66:	4462      	add	r2, ip
 8004d68:	002b      	movs	r3, r5
 8004d6a:	3309      	adds	r3, #9
 8004d6c:	33ff      	adds	r3, #255	; 0xff
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	293e      	cmp	r1, #62	; 0x3e
 8004d72:	d800      	bhi.n	8004d76 <PCD_EP_ISR_Handler+0x416>
 8004d74:	e657      	b.n	8004a26 <PCD_EP_ISR_Handler+0xc6>
 8004d76:	094b      	lsrs	r3, r1, #5
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	06c9      	lsls	r1, r1, #27
 8004d7c:	d101      	bne.n	8004d82 <PCD_EP_ISR_Handler+0x422>
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4922      	ldr	r1, [pc, #136]	; (8004e10 <PCD_EP_ISR_Handler+0x4b0>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8004d8c:	6829      	ldr	r1, [r5, #0]
 8004d8e:	880a      	ldrh	r2, [r1, #0]
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <PCD_EP_ISR_Handler+0x4b4>)
 8004d92:	401a      	ands	r2, r3
 8004d94:	23c0      	movs	r3, #192	; 0xc0
 8004d96:	019b      	lsls	r3, r3, #6
 8004d98:	405a      	eors	r2, r3
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <PCD_EP_ISR_Handler+0x4b8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	800b      	strh	r3, [r1, #0]
 8004da0:	e79b      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8004da2:	1869      	adds	r1, r5, r1
 8004da4:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8004da6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004da8:	f7ff fca2 	bl	80046f0 <PCD_WritePMA>
 8004dac:	e760      	b.n	8004c70 <PCD_EP_ISR_Handler+0x310>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dae:	2250      	movs	r2, #80	; 0x50
 8004db0:	5a82      	ldrh	r2, [r0, r2]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	18d3      	adds	r3, r2, r3
 8004db6:	181b      	adds	r3, r3, r0
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <PCD_EP_ISR_Handler+0x4ac>)
 8004dba:	4694      	mov	ip, r2
 8004dbc:	4463      	add	r3, ip
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	059b      	lsls	r3, r3, #22
 8004dc2:	0d9b      	lsrs	r3, r3, #22
 8004dc4:	00e1      	lsls	r1, r4, #3
 8004dc6:	1b09      	subs	r1, r1, r4
 8004dc8:	008a      	lsls	r2, r1, #2
 8004dca:	0011      	movs	r1, r2
 8004dcc:	18aa      	adds	r2, r5, r2
 8004dce:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d100      	bne.n	8004dd6 <PCD_EP_ISR_Handler+0x476>
 8004dd4:	e74c      	b.n	8004c70 <PCD_EP_ISR_Handler+0x310>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8004dd6:	1869      	adds	r1, r5, r1
 8004dd8:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8004dda:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004ddc:	f7ff fc88 	bl	80046f0 <PCD_WritePMA>
 8004de0:	e746      	b.n	8004c70 <PCD_EP_ISR_Handler+0x310>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004de2:	00e1      	lsls	r1, r4, #3
 8004de4:	1b0c      	subs	r4, r1, r4
 8004de6:	00a1      	lsls	r1, r4, #2
 8004de8:	1869      	adds	r1, r5, r1
 8004dea:	3128      	adds	r1, #40	; 0x28
 8004dec:	7809      	ldrb	r1, [r1, #0]
 8004dee:	0028      	movs	r0, r5
 8004df0:	f7ff fc92 	bl	8004718 <HAL_PCD_EP_Transmit>
 8004df4:	e771      	b.n	8004cda <PCD_EP_ISR_Handler+0x37a>
        }
      } 
    }
  }
  return HAL_OK;
}
 8004df6:	2000      	movs	r0, #0
 8004df8:	b003      	add	sp, #12
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfc:	00000402 	.word	0x00000402
 8004e00:	00000f0f 	.word	0x00000f0f
 8004e04:	ffffc080 	.word	0xffffc080
 8004e08:	00000f8f 	.word	0x00000f8f
 8004e0c:	00000406 	.word	0x00000406
 8004e10:	ffff8000 	.word	0xffff8000
 8004e14:	ffffbf8f 	.word	0xffffbf8f
 8004e18:	ffff8080 	.word	0xffff8080

08004e1c <HAL_PCD_IRQHandler>:
{
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8004e20:	2344      	movs	r3, #68	; 0x44
 8004e22:	6802      	ldr	r2, [r0, #0]
 8004e24:	5ad3      	ldrh	r3, [r2, r3]
 8004e26:	b21b      	sxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	db48      	blt.n	8004ebe <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	2244      	movs	r2, #68	; 0x44
 8004e30:	5a9a      	ldrh	r2, [r3, r2]
 8004e32:	0552      	lsls	r2, r2, #21
 8004e34:	d446      	bmi.n	8004ec4 <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	2244      	movs	r2, #68	; 0x44
 8004e3a:	5a9a      	ldrh	r2, [r3, r2]
 8004e3c:	0452      	lsls	r2, r2, #17
 8004e3e:	d504      	bpl.n	8004e4a <HAL_PCD_IRQHandler+0x2e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8004e40:	2144      	movs	r1, #68	; 0x44
 8004e42:	5a5a      	ldrh	r2, [r3, r1]
 8004e44:	4835      	ldr	r0, [pc, #212]	; (8004f1c <HAL_PCD_IRQHandler+0x100>)
 8004e46:	4002      	ands	r2, r0
 8004e48:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	2244      	movs	r2, #68	; 0x44
 8004e4e:	5a9a      	ldrh	r2, [r3, r2]
 8004e50:	0492      	lsls	r2, r2, #18
 8004e52:	d504      	bpl.n	8004e5e <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8004e54:	2144      	movs	r1, #68	; 0x44
 8004e56:	5a5a      	ldrh	r2, [r3, r1]
 8004e58:	4831      	ldr	r0, [pc, #196]	; (8004f20 <HAL_PCD_IRQHandler+0x104>)
 8004e5a:	4002      	ands	r2, r0
 8004e5c:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	2244      	movs	r2, #68	; 0x44
 8004e62:	5a9a      	ldrh	r2, [r3, r2]
 8004e64:	04d2      	lsls	r2, r2, #19
 8004e66:	d43a      	bmi.n	8004ede <HAL_PCD_IRQHandler+0xc2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	2244      	movs	r2, #68	; 0x44
 8004e6c:	5a9a      	ldrh	r2, [r3, r2]
 8004e6e:	0512      	lsls	r2, r2, #20
 8004e70:	d515      	bpl.n	8004e9e <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8004e72:	2144      	movs	r1, #68	; 0x44
 8004e74:	5a5a      	ldrh	r2, [r3, r1]
 8004e76:	482b      	ldr	r0, [pc, #172]	; (8004f24 <HAL_PCD_IRQHandler+0x108>)
 8004e78:	4002      	ands	r2, r0
 8004e7a:	525a      	strh	r2, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	5a83      	ldrh	r3, [r0, r2]
 8004e82:	2508      	movs	r5, #8
 8004e84:	432b      	orrs	r3, r5
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	5283      	strh	r3, [r0, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	5a83      	ldrh	r3, [r0, r2]
 8004e8e:	2504      	movs	r5, #4
 8004e90:	432b      	orrs	r3, r5
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	5283      	strh	r3, [r0, r2]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	5a5b      	ldrh	r3, [r3, r1]
 8004e9a:	04db      	lsls	r3, r3, #19
 8004e9c:	d531      	bpl.n	8004f02 <HAL_PCD_IRQHandler+0xe6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	2244      	movs	r2, #68	; 0x44
 8004ea2:	5a9a      	ldrh	r2, [r3, r2]
 8004ea4:	0592      	lsls	r2, r2, #22
 8004ea6:	d430      	bmi.n	8004f0a <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	2244      	movs	r2, #68	; 0x44
 8004eac:	5a9a      	ldrh	r2, [r3, r2]
 8004eae:	05d2      	lsls	r2, r2, #23
 8004eb0:	d504      	bpl.n	8004ebc <HAL_PCD_IRQHandler+0xa0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8004eb2:	2144      	movs	r1, #68	; 0x44
 8004eb4:	5a5a      	ldrh	r2, [r3, r1]
 8004eb6:	481c      	ldr	r0, [pc, #112]	; (8004f28 <HAL_PCD_IRQHandler+0x10c>)
 8004eb8:	4002      	ands	r2, r0
 8004eba:	525a      	strh	r2, [r3, r1]
}
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
    PCD_EP_ISR_Handler(hpcd);
 8004ebe:	f7ff fd4f 	bl	8004960 <PCD_EP_ISR_Handler>
 8004ec2:	e7b3      	b.n	8004e2c <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ec4:	2144      	movs	r1, #68	; 0x44
 8004ec6:	5a5a      	ldrh	r2, [r3, r1]
 8004ec8:	4818      	ldr	r0, [pc, #96]	; (8004f2c <HAL_PCD_IRQHandler+0x110>)
 8004eca:	4002      	ands	r2, r0
 8004ecc:	525a      	strh	r2, [r3, r1]
    HAL_PCD_ResetCallback(hpcd);
 8004ece:	0020      	movs	r0, r4
 8004ed0:	f002 fd17 	bl	8007902 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	0020      	movs	r0, r4
 8004ed8:	f7fe ff8a 	bl	8003df0 <HAL_PCD_SetAddress>
 8004edc:	e7ab      	b.n	8004e36 <HAL_PCD_IRQHandler+0x1a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	5a99      	ldrh	r1, [r3, r2]
 8004ee2:	2004      	movs	r0, #4
 8004ee4:	4381      	bics	r1, r0
 8004ee6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_PCD_IRQHandler+0x114>)
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResumeCallback(hpcd);
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f002 fd2a 	bl	8007948 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	2244      	movs	r2, #68	; 0x44
 8004ef8:	5a8b      	ldrh	r3, [r1, r2]
 8004efa:	480e      	ldr	r0, [pc, #56]	; (8004f34 <HAL_PCD_IRQHandler+0x118>)
 8004efc:	4003      	ands	r3, r0
 8004efe:	528b      	strh	r3, [r1, r2]
 8004f00:	e7b2      	b.n	8004e68 <HAL_PCD_IRQHandler+0x4c>
      HAL_PCD_SuspendCallback(hpcd);
 8004f02:	0020      	movs	r0, r4
 8004f04:	f002 fd0e 	bl	8007924 <HAL_PCD_SuspendCallback>
 8004f08:	e7c9      	b.n	8004e9e <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8004f0a:	2144      	movs	r1, #68	; 0x44
 8004f0c:	5a5a      	ldrh	r2, [r3, r1]
 8004f0e:	480a      	ldr	r0, [pc, #40]	; (8004f38 <HAL_PCD_IRQHandler+0x11c>)
 8004f10:	4002      	ands	r2, r0
 8004f12:	525a      	strh	r2, [r3, r1]
    HAL_PCD_SOFCallback(hpcd);
 8004f14:	0020      	movs	r0, r4
 8004f16:	f002 fced 	bl	80078f4 <HAL_PCD_SOFCallback>
 8004f1a:	e7c5      	b.n	8004ea8 <HAL_PCD_IRQHandler+0x8c>
 8004f1c:	ffffbfff 	.word	0xffffbfff
 8004f20:	ffffdfff 	.word	0xffffdfff
 8004f24:	fffff7ff 	.word	0xfffff7ff
 8004f28:	fffffeff 	.word	0xfffffeff
 8004f2c:	fffffbff 	.word	0xfffffbff
 8004f30:	ffffbd00 	.word	0xffffbd00
 8004f34:	ffffefff 	.word	0xffffefff
 8004f38:	fffffdff 	.word	0xfffffdff

08004f3c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004f3c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f3e:	060c      	lsls	r4, r1, #24
 8004f40:	d50f      	bpl.n	8004f62 <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004f42:	247f      	movs	r4, #127	; 0x7f
 8004f44:	4021      	ands	r1, r4
 8004f46:	00cc      	lsls	r4, r1, #3
 8004f48:	1a61      	subs	r1, r4, r1
 8004f4a:	008c      	lsls	r4, r1, #2
 8004f4c:	3428      	adds	r4, #40	; 0x28
 8004f4e:	1900      	adds	r0, r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8004f54:	2201      	movs	r2, #1
 8004f56:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8004f58:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK;
}
 8004f5e:	2000      	movs	r0, #0
 8004f60:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004f62:	00cc      	lsls	r4, r1, #3
 8004f64:	1a61      	subs	r1, r4, r1
 8004f66:	008c      	lsls	r4, r1, #2
 8004f68:	3409      	adds	r4, #9
 8004f6a:	34ff      	adds	r4, #255	; 0xff
 8004f6c:	1900      	adds	r0, r0, r4
 8004f6e:	e7ef      	b.n	8004f50 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8004f70:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8004f72:	8083      	strh	r3, [r0, #4]
 8004f74:	e7f3      	b.n	8004f5e <HAL_PCDEx_PMAConfig+0x22>
	...

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	07db      	lsls	r3, r3, #31
 8004f82:	d53b      	bpl.n	8004ffc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f84:	4bc3      	ldr	r3, [pc, #780]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	230c      	movs	r3, #12
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d02d      	beq.n	8004fec <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f90:	4bc0      	ldr	r3, [pc, #768]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	230c      	movs	r3, #12
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d01e      	beq.n	8004fda <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d050      	beq.n	8005044 <HAL_RCC_OscConfig+0xcc>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d155      	bne.n	8005052 <HAL_RCC_OscConfig+0xda>
 8004fa6:	4bbb      	ldr	r3, [pc, #748]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	49bb      	ldr	r1, [pc, #748]	; (8005298 <HAL_RCC_OscConfig+0x320>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	49ba      	ldr	r1, [pc, #744]	; (800529c <HAL_RCC_OscConfig+0x324>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d061      	beq.n	8005082 <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fe fc8d 	bl	80038dc <HAL_GetTick>
 8004fc2:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc4:	4bb3      	ldr	r3, [pc, #716]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	039b      	lsls	r3, r3, #14
 8004fca:	d417      	bmi.n	8004ffc <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fe fc86 	bl	80038dc <HAL_GetTick>
 8004fd0:	1b40      	subs	r0, r0, r5
 8004fd2:	2864      	cmp	r0, #100	; 0x64
 8004fd4:	d9f6      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	e23b      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fda:	4bae      	ldr	r3, [pc, #696]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	22c0      	movs	r2, #192	; 0xc0
 8004fe0:	0252      	lsls	r2, r2, #9
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	0252      	lsls	r2, r2, #9
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d1d7      	bne.n	8004f9c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fec:	4ba9      	ldr	r3, [pc, #676]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	039b      	lsls	r3, r3, #14
 8004ff2:	d503      	bpl.n	8004ffc <HAL_RCC_OscConfig+0x84>
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d100      	bne.n	8004ffc <HAL_RCC_OscConfig+0x84>
 8004ffa:	e227      	b.n	800544c <HAL_RCC_OscConfig+0x4d4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	079b      	lsls	r3, r3, #30
 8005000:	d567      	bpl.n	80050d2 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005002:	4ba4      	ldr	r3, [pc, #656]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	220c      	movs	r2, #12
 8005008:	421a      	tst	r2, r3
 800500a:	d051      	beq.n	80050b0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800500c:	4ba1      	ldr	r3, [pc, #644]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	230c      	movs	r3, #12
 8005012:	4013      	ands	r3, r2
 8005014:	2b08      	cmp	r3, #8
 8005016:	d042      	beq.n	800509e <HAL_RCC_OscConfig+0x126>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005018:	68e3      	ldr	r3, [r4, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d07b      	beq.n	8005116 <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800501e:	4a9d      	ldr	r2, [pc, #628]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005020:	6813      	ldr	r3, [r2, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	430b      	orrs	r3, r1
 8005026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe fc58 	bl	80038dc <HAL_GetTick>
 800502c:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b99      	ldr	r3, [pc, #612]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	079b      	lsls	r3, r3, #30
 8005034:	d466      	bmi.n	8005104 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005036:	f7fe fc51 	bl	80038dc <HAL_GetTick>
 800503a:	1b40      	subs	r0, r0, r5
 800503c:	2802      	cmp	r0, #2
 800503e:	d9f6      	bls.n	800502e <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8005040:	2003      	movs	r0, #3
 8005042:	e206      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	4a93      	ldr	r2, [pc, #588]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005046:	6811      	ldr	r1, [r2, #0]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e7b2      	b.n	8004fb8 <HAL_RCC_OscConfig+0x40>
 8005052:	2b05      	cmp	r3, #5
 8005054:	d009      	beq.n	800506a <HAL_RCC_OscConfig+0xf2>
 8005056:	4b8f      	ldr	r3, [pc, #572]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	498f      	ldr	r1, [pc, #572]	; (8005298 <HAL_RCC_OscConfig+0x320>)
 800505c:	400a      	ands	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	498e      	ldr	r1, [pc, #568]	; (800529c <HAL_RCC_OscConfig+0x324>)
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e7a6      	b.n	8004fb8 <HAL_RCC_OscConfig+0x40>
 800506a:	4b8a      	ldr	r3, [pc, #552]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	2280      	movs	r2, #128	; 0x80
 8005070:	02d2      	lsls	r2, r2, #11
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	6819      	ldr	r1, [r3, #0]
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	0252      	lsls	r2, r2, #9
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e79a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8005082:	f7fe fc2b 	bl	80038dc <HAL_GetTick>
 8005086:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005088:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	039b      	lsls	r3, r3, #14
 800508e:	d5b5      	bpl.n	8004ffc <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005090:	f7fe fc24 	bl	80038dc <HAL_GetTick>
 8005094:	1b40      	subs	r0, r0, r5
 8005096:	2864      	cmp	r0, #100	; 0x64
 8005098:	d9f6      	bls.n	8005088 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800509a:	2003      	movs	r0, #3
 800509c:	e1d9      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800509e:	4b7d      	ldr	r3, [pc, #500]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	22c0      	movs	r2, #192	; 0xc0
 80050a4:	0252      	lsls	r2, r2, #9
 80050a6:	4013      	ands	r3, r2
 80050a8:	2280      	movs	r2, #128	; 0x80
 80050aa:	0212      	lsls	r2, r2, #8
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d1b3      	bne.n	8005018 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b0:	4b78      	ldr	r3, [pc, #480]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	079b      	lsls	r3, r3, #30
 80050b6:	d504      	bpl.n	80050c2 <HAL_RCC_OscConfig+0x14a>
 80050b8:	68e3      	ldr	r3, [r4, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
 80050c0:	e1c7      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4974      	ldr	r1, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	22f8      	movs	r2, #248	; 0xf8
 80050c8:	4393      	bics	r3, r2
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	00d2      	lsls	r2, r2, #3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	071b      	lsls	r3, r3, #28
 80050d6:	d544      	bpl.n	8005162 <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d8:	69e3      	ldr	r3, [r4, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02e      	beq.n	800513c <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050de:	4a6d      	ldr	r2, [pc, #436]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80050e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80050e2:	2101      	movs	r1, #1
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e8:	f7fe fbf8 	bl	80038dc <HAL_GetTick>
 80050ec:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b69      	ldr	r3, [pc, #420]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	079b      	lsls	r3, r3, #30
 80050f4:	d435      	bmi.n	8005162 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f6:	f7fe fbf1 	bl	80038dc <HAL_GetTick>
 80050fa:	1b40      	subs	r0, r0, r5
 80050fc:	2802      	cmp	r0, #2
 80050fe:	d9f6      	bls.n	80050ee <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8005100:	2003      	movs	r0, #3
 8005102:	e1a6      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4963      	ldr	r1, [pc, #396]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005106:	680b      	ldr	r3, [r1, #0]
 8005108:	22f8      	movs	r2, #248	; 0xf8
 800510a:	4393      	bics	r3, r2
 800510c:	6922      	ldr	r2, [r4, #16]
 800510e:	00d2      	lsls	r2, r2, #3
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
 8005114:	e7dd      	b.n	80050d2 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8005116:	4a5f      	ldr	r2, [pc, #380]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	2101      	movs	r1, #1
 800511c:	438b      	bics	r3, r1
 800511e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005120:	f7fe fbdc 	bl	80038dc <HAL_GetTick>
 8005124:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	d5d1      	bpl.n	80050d2 <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512e:	f7fe fbd5 	bl	80038dc <HAL_GetTick>
 8005132:	1b40      	subs	r0, r0, r5
 8005134:	2802      	cmp	r0, #2
 8005136:	d9f6      	bls.n	8005126 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8005138:	2003      	movs	r0, #3
 800513a:	e18a      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513c:	4a55      	ldr	r2, [pc, #340]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800513e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005140:	2101      	movs	r1, #1
 8005142:	438b      	bics	r3, r1
 8005144:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fe fbc9 	bl	80038dc <HAL_GetTick>
 800514a:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514c:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	079b      	lsls	r3, r3, #30
 8005152:	d506      	bpl.n	8005162 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005154:	f7fe fbc2 	bl	80038dc <HAL_GetTick>
 8005158:	1b40      	subs	r0, r0, r5
 800515a:	2802      	cmp	r0, #2
 800515c:	d9f6      	bls.n	800514c <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 800515e:	2003      	movs	r0, #3
 8005160:	e177      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	075b      	lsls	r3, r3, #29
 8005166:	d575      	bpl.n	8005254 <HAL_RCC_OscConfig+0x2dc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005168:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	d40b      	bmi.n	8005188 <HAL_RCC_OscConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005170:	4a48      	ldr	r2, [pc, #288]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005172:	69d1      	ldr	r1, [r2, #28]
 8005174:	2080      	movs	r0, #128	; 0x80
 8005176:	0540      	lsls	r0, r0, #21
 8005178:	4301      	orrs	r1, r0
 800517a:	61d1      	str	r1, [r2, #28]
 800517c:	69d3      	ldr	r3, [r2, #28]
 800517e:	4003      	ands	r3, r0
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005184:	2501      	movs	r5, #1
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x212>
    FlagStatus       pwrclkchanged = RESET;
 8005188:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <HAL_RCC_OscConfig+0x328>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	05db      	lsls	r3, r3, #23
 8005190:	d51f      	bpl.n	80051d2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d030      	beq.n	80051fa <HAL_RCC_OscConfig+0x282>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d134      	bne.n	8005206 <HAL_RCC_OscConfig+0x28e>
 800519c:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	2101      	movs	r1, #1
 80051a2:	438a      	bics	r2, r1
 80051a4:	621a      	str	r2, [r3, #32]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	3103      	adds	r1, #3
 80051aa:	438a      	bics	r2, r1
 80051ac:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03e      	beq.n	8005232 <HAL_RCC_OscConfig+0x2ba>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fe fb92 	bl	80038dc <HAL_GetTick>
 80051b8:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	4b36      	ldr	r3, [pc, #216]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	079b      	lsls	r3, r3, #30
 80051c0:	d446      	bmi.n	8005250 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fe fb8b 	bl	80038dc <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCC_OscConfig+0x32c>)
 80051ca:	4298      	cmp	r0, r3
 80051cc:	d9f5      	bls.n	80051ba <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 80051ce:	2003      	movs	r0, #3
 80051d0:	e13f      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d2:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x328>)
 80051d4:	6811      	ldr	r1, [r2, #0]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	430b      	orrs	r3, r1
 80051dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80051de:	f7fe fb7d 	bl	80038dc <HAL_GetTick>
 80051e2:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_RCC_OscConfig+0x328>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	05db      	lsls	r3, r3, #23
 80051ea:	d4d2      	bmi.n	8005192 <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ec:	f7fe fb76 	bl	80038dc <HAL_GetTick>
 80051f0:	1b80      	subs	r0, r0, r6
 80051f2:	2864      	cmp	r0, #100	; 0x64
 80051f4:	d9f6      	bls.n	80051e4 <HAL_RCC_OscConfig+0x26c>
          return HAL_TIMEOUT;
 80051f6:	2003      	movs	r0, #3
 80051f8:	e12b      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fa:	4a26      	ldr	r2, [pc, #152]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 80051fc:	6a13      	ldr	r3, [r2, #32]
 80051fe:	2101      	movs	r1, #1
 8005200:	430b      	orrs	r3, r1
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	e7d3      	b.n	80051ae <HAL_RCC_OscConfig+0x236>
 8005206:	2b05      	cmp	r3, #5
 8005208:	d009      	beq.n	800521e <HAL_RCC_OscConfig+0x2a6>
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	2101      	movs	r1, #1
 8005210:	438a      	bics	r2, r1
 8005212:	621a      	str	r2, [r3, #32]
 8005214:	6a1a      	ldr	r2, [r3, #32]
 8005216:	3103      	adds	r1, #3
 8005218:	438a      	bics	r2, r1
 800521a:	621a      	str	r2, [r3, #32]
 800521c:	e7c7      	b.n	80051ae <HAL_RCC_OscConfig+0x236>
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	2104      	movs	r1, #4
 8005224:	430a      	orrs	r2, r1
 8005226:	621a      	str	r2, [r3, #32]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	3903      	subs	r1, #3
 800522c:	430a      	orrs	r2, r1
 800522e:	621a      	str	r2, [r3, #32]
 8005230:	e7bd      	b.n	80051ae <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fe fb53 	bl	80038dc <HAL_GetTick>
 8005236:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	079b      	lsls	r3, r3, #30
 800523e:	d507      	bpl.n	8005250 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fe fb4c 	bl	80038dc <HAL_GetTick>
 8005244:	1b80      	subs	r0, r0, r6
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <HAL_RCC_OscConfig+0x32c>)
 8005248:	4298      	cmp	r0, r3
 800524a:	d9f5      	bls.n	8005238 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800524c:	2003      	movs	r0, #3
 800524e:	e100      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005250:	2d01      	cmp	r5, #1
 8005252:	d029      	beq.n	80052a8 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	06db      	lsls	r3, r3, #27
 8005258:	d558      	bpl.n	800530c <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800525a:	6963      	ldr	r3, [r4, #20]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d029      	beq.n	80052b4 <HAL_RCC_OscConfig+0x33c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005260:	3305      	adds	r3, #5
 8005262:	d047      	beq.n	80052f4 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 8005266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005268:	2104      	movs	r1, #4
 800526a:	430a      	orrs	r2, r1
 800526c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800526e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005270:	3903      	subs	r1, #3
 8005272:	438a      	bics	r2, r1
 8005274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fe fb31 	bl	80038dc <HAL_GetTick>
 800527a:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_OscConfig+0x31c>)
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	079b      	lsls	r3, r3, #30
 8005282:	d543      	bpl.n	800530c <HAL_RCC_OscConfig+0x394>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005284:	f7fe fb2a 	bl	80038dc <HAL_GetTick>
 8005288:	1b40      	subs	r0, r0, r5
 800528a:	2802      	cmp	r0, #2
 800528c:	d9f6      	bls.n	800527c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800528e:	2003      	movs	r0, #3
 8005290:	e0df      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	40021000 	.word	0x40021000
 8005298:	fffeffff 	.word	0xfffeffff
 800529c:	fffbffff 	.word	0xfffbffff
 80052a0:	40007000 	.word	0x40007000
 80052a4:	00001388 	.word	0x00001388
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a8:	4a6c      	ldr	r2, [pc, #432]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80052aa:	69d3      	ldr	r3, [r2, #28]
 80052ac:	496c      	ldr	r1, [pc, #432]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80052ae:	400b      	ands	r3, r1
 80052b0:	61d3      	str	r3, [r2, #28]
 80052b2:	e7cf      	b.n	8005254 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_DISABLE();
 80052b4:	4b69      	ldr	r3, [pc, #420]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	2104      	movs	r1, #4
 80052ba:	430a      	orrs	r2, r1
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	3903      	subs	r1, #3
 80052c2:	430a      	orrs	r2, r1
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80052c6:	f7fe fb09 	bl	80038dc <HAL_GetTick>
 80052ca:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052cc:	4b63      	ldr	r3, [pc, #396]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	079b      	lsls	r3, r3, #30
 80052d2:	d406      	bmi.n	80052e2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80052d4:	f7fe fb02 	bl	80038dc <HAL_GetTick>
 80052d8:	1b40      	subs	r0, r0, r5
 80052da:	2802      	cmp	r0, #2
 80052dc:	d9f6      	bls.n	80052cc <HAL_RCC_OscConfig+0x354>
          return HAL_TIMEOUT;
 80052de:	2003      	movs	r0, #3
 80052e0:	e0b7      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052e2:	495e      	ldr	r1, [pc, #376]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80052e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80052e6:	22f8      	movs	r2, #248	; 0xf8
 80052e8:	4393      	bics	r3, r2
 80052ea:	69a2      	ldr	r2, [r4, #24]
 80052ec:	00d2      	lsls	r2, r2, #3
 80052ee:	4313      	orrs	r3, r2
 80052f0:	634b      	str	r3, [r1, #52]	; 0x34
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0x394>
      __HAL_RCC_HSI14ADC_ENABLE();
 80052f4:	4a59      	ldr	r2, [pc, #356]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80052f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80052f8:	2104      	movs	r1, #4
 80052fa:	438b      	bics	r3, r1
 80052fc:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005300:	31f4      	adds	r1, #244	; 0xf4
 8005302:	438b      	bics	r3, r1
 8005304:	69a1      	ldr	r1, [r4, #24]
 8005306:	00c9      	lsls	r1, r1, #3
 8005308:	430b      	orrs	r3, r1
 800530a:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	069b      	lsls	r3, r3, #26
 8005310:	d545      	bpl.n	800539e <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005312:	4b52      	ldr	r3, [pc, #328]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	230c      	movs	r3, #12
 8005318:	4013      	ands	r3, r2
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d023      	beq.n	8005366 <HAL_RCC_OscConfig+0x3ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800531e:	4b4f      	ldr	r3, [pc, #316]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	230c      	movs	r3, #12
 8005324:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005326:	2b08      	cmp	r3, #8
 8005328:	d016      	beq.n	8005358 <HAL_RCC_OscConfig+0x3e0>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800532a:	6a23      	ldr	r3, [r4, #32]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005330:	4a4a      	ldr	r2, [pc, #296]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005332:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	430b      	orrs	r3, r1
 800533a:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe face 	bl	80038dc <HAL_GetTick>
 8005340:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005342:	4b46      	ldr	r3, [pc, #280]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	03db      	lsls	r3, r3, #15
 8005348:	d429      	bmi.n	800539e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800534a:	f7fe fac7 	bl	80038dc <HAL_GetTick>
 800534e:	1b40      	subs	r0, r0, r5
 8005350:	2802      	cmp	r0, #2
 8005352:	d9f6      	bls.n	8005342 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8005354:	2003      	movs	r0, #3
 8005356:	e07c      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005358:	4b40      	ldr	r3, [pc, #256]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	22c0      	movs	r2, #192	; 0xc0
 800535e:	0252      	lsls	r2, r2, #9
 8005360:	4013      	ands	r3, r2
 8005362:	4293      	cmp	r3, r2
 8005364:	d1e1      	bne.n	800532a <HAL_RCC_OscConfig+0x3b2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005366:	4b3d      	ldr	r3, [pc, #244]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	03db      	lsls	r3, r3, #15
 800536c:	d517      	bpl.n	800539e <HAL_RCC_OscConfig+0x426>
 800536e:	6a23      	ldr	r3, [r4, #32]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d014      	beq.n	800539e <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 8005374:	2001      	movs	r0, #1
 8005376:	e06c      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005378:	4a38      	ldr	r2, [pc, #224]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 800537a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800537c:	4939      	ldr	r1, [pc, #228]	; (8005464 <HAL_RCC_OscConfig+0x4ec>)
 800537e:	400b      	ands	r3, r1
 8005380:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005382:	f7fe faab 	bl	80038dc <HAL_GetTick>
 8005386:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	03db      	lsls	r3, r3, #15
 800538e:	d506      	bpl.n	800539e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005390:	f7fe faa4 	bl	80038dc <HAL_GetTick>
 8005394:	1b40      	subs	r0, r0, r5
 8005396:	2802      	cmp	r0, #2
 8005398:	d9f6      	bls.n	8005388 <HAL_RCC_OscConfig+0x410>
          {
            return HAL_TIMEOUT;
 800539a:	2003      	movs	r0, #3
 800539c:	e059      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800539e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d055      	beq.n	8005450 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053a4:	4a2d      	ldr	r2, [pc, #180]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80053a6:	6851      	ldr	r1, [r2, #4]
 80053a8:	220c      	movs	r2, #12
 80053aa:	400a      	ands	r2, r1
 80053ac:	2a08      	cmp	r2, #8
 80053ae:	d052      	beq.n	8005456 <HAL_RCC_OscConfig+0x4de>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d012      	beq.n	80053da <HAL_RCC_OscConfig+0x462>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	492b      	ldr	r1, [pc, #172]	; (8005468 <HAL_RCC_OscConfig+0x4f0>)
 80053ba:	400b      	ands	r3, r1
 80053bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fe fa8d 	bl	80038dc <HAL_GetTick>
 80053c2:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	d53d      	bpl.n	8005448 <HAL_RCC_OscConfig+0x4d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fe fa86 	bl	80038dc <HAL_GetTick>
 80053d0:	1b00      	subs	r0, r0, r4
 80053d2:	2802      	cmp	r0, #2
 80053d4:	d9f6      	bls.n	80053c4 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 80053d6:	2003      	movs	r0, #3
 80053d8:	e03b      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 80053da:	4a20      	ldr	r2, [pc, #128]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	4922      	ldr	r1, [pc, #136]	; (8005468 <HAL_RCC_OscConfig+0x4f0>)
 80053e0:	400b      	ands	r3, r1
 80053e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053e4:	f7fe fa7a 	bl	80038dc <HAL_GetTick>
 80053e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	019b      	lsls	r3, r3, #6
 80053f0:	d506      	bpl.n	8005400 <HAL_RCC_OscConfig+0x488>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f2:	f7fe fa73 	bl	80038dc <HAL_GetTick>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	2802      	cmp	r0, #2
 80053fa:	d9f6      	bls.n	80053ea <HAL_RCC_OscConfig+0x472>
            return HAL_TIMEOUT;
 80053fc:	2003      	movs	r0, #3
 80053fe:	e028      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	210f      	movs	r1, #15
 8005406:	438a      	bics	r2, r1
 8005408:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800540a:	430a      	orrs	r2, r1
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4916      	ldr	r1, [pc, #88]	; (800546c <HAL_RCC_OscConfig+0x4f4>)
 8005412:	400a      	ands	r2, r1
 8005414:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005416:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005418:	4301      	orrs	r1, r0
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	0452      	lsls	r2, r2, #17
 8005424:	430a      	orrs	r2, r1
 8005426:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005428:	f7fe fa58 	bl	80038dc <HAL_GetTick>
 800542c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	019b      	lsls	r3, r3, #6
 8005434:	d406      	bmi.n	8005444 <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005436:	f7fe fa51 	bl	80038dc <HAL_GetTick>
 800543a:	1b00      	subs	r0, r0, r4
 800543c:	2802      	cmp	r0, #2
 800543e:	d9f6      	bls.n	800542e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8005440:	2003      	movs	r0, #3
 8005442:	e006      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8005444:	2000      	movs	r0, #0
 8005446:	e004      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
 8005448:	2000      	movs	r0, #0
 800544a:	e002      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 800544c:	2001      	movs	r0, #1
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 8005450:	2000      	movs	r0, #0
}
 8005452:	b002      	add	sp, #8
 8005454:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005456:	2001      	movs	r0, #1
 8005458:	e7fb      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	40021000 	.word	0x40021000
 8005460:	efffffff 	.word	0xefffffff
 8005464:	fffeffff 	.word	0xfffeffff
 8005468:	feffffff 	.word	0xfeffffff
 800546c:	ffc27fff 	.word	0xffc27fff

08005470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	b530      	push	{r4, r5, lr}
 8005472:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005474:	aa04      	add	r2, sp, #16
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x84>)
 8005478:	0018      	movs	r0, r3
 800547a:	c832      	ldmia	r0!, {r1, r4, r5}
 800547c:	c232      	stmia	r2!, {r1, r4, r5}
 800547e:	0011      	movs	r1, r2
 8005480:	6802      	ldr	r2, [r0, #0]
 8005482:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005484:	466a      	mov	r2, sp
 8005486:	3310      	adds	r3, #16
 8005488:	cb13      	ldmia	r3!, {r0, r1, r4}
 800548a:	c213      	stmia	r2!, {r0, r1, r4}
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8005492:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005494:	230c      	movs	r3, #12
 8005496:	4013      	ands	r3, r2
 8005498:	2b08      	cmp	r3, #8
 800549a:	d004      	beq.n	80054a6 <HAL_RCC_GetSysClockFreq+0x36>
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d026      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a0:	4816      	ldr	r0, [pc, #88]	; (80054fc <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80054a2:	b009      	add	sp, #36	; 0x24
 80054a4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80054a6:	0c91      	lsrs	r1, r2, #18
 80054a8:	230f      	movs	r3, #15
 80054aa:	4019      	ands	r1, r3
 80054ac:	a804      	add	r0, sp, #16
 80054ae:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80054b0:	4911      	ldr	r1, [pc, #68]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x88>)
 80054b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80054b4:	400b      	ands	r3, r1
 80054b6:	4669      	mov	r1, sp
 80054b8:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054ba:	23c0      	movs	r3, #192	; 0xc0
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	401a      	ands	r2, r3
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	025b      	lsls	r3, r3, #9
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d008      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80054c8:	23c0      	movs	r3, #192	; 0xc0
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d009      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80054d0:	480a      	ldr	r0, [pc, #40]	; (80054fc <HAL_RCC_GetSysClockFreq+0x8c>)
 80054d2:	f7fa fe23 	bl	800011c <__udivsi3>
 80054d6:	4360      	muls	r0, r4
 80054d8:	e7e3      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80054da:	4808      	ldr	r0, [pc, #32]	; (80054fc <HAL_RCC_GetSysClockFreq+0x8c>)
 80054dc:	f7fa fe1e 	bl	800011c <__udivsi3>
 80054e0:	4360      	muls	r0, r4
 80054e2:	e7de      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80054e4:	4806      	ldr	r0, [pc, #24]	; (8005500 <HAL_RCC_GetSysClockFreq+0x90>)
 80054e6:	f7fa fe19 	bl	800011c <__udivsi3>
 80054ea:	4360      	muls	r0, r4
 80054ec:	e7d9      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 80054ee:	4804      	ldr	r0, [pc, #16]	; (8005500 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80054f0:	e7d7      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x32>
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	08009278 	.word	0x08009278
 80054f8:	40021000 	.word	0x40021000
 80054fc:	007a1200 	.word	0x007a1200
 8005500:	02dc6c00 	.word	0x02dc6c00

08005504 <HAL_RCC_ClockConfig>:
{
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	0005      	movs	r5, r0
 8005508:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800550a:	4b59      	ldr	r3, [pc, #356]	; (8005670 <HAL_RCC_ClockConfig+0x16c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2301      	movs	r3, #1
 8005510:	4013      	ands	r3, r2
 8005512:	428b      	cmp	r3, r1
 8005514:	d20b      	bcs.n	800552e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005516:	4956      	ldr	r1, [pc, #344]	; (8005670 <HAL_RCC_ClockConfig+0x16c>)
 8005518:	680b      	ldr	r3, [r1, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	4393      	bics	r3, r2
 800551e:	4323      	orrs	r3, r4
 8005520:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	401a      	ands	r2, r3
 8005526:	4294      	cmp	r4, r2
 8005528:	d001      	beq.n	800552e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800552a:	2001      	movs	r0, #1
 800552c:	e09d      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	079b      	lsls	r3, r3, #30
 8005532:	d506      	bpl.n	8005542 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4a4f      	ldr	r2, [pc, #316]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 8005536:	6853      	ldr	r3, [r2, #4]
 8005538:	21f0      	movs	r1, #240	; 0xf0
 800553a:	438b      	bics	r3, r1
 800553c:	68a9      	ldr	r1, [r5, #8]
 800553e:	430b      	orrs	r3, r1
 8005540:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	07db      	lsls	r3, r3, #31
 8005546:	d564      	bpl.n	8005612 <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005548:	686b      	ldr	r3, [r5, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d025      	beq.n	800559a <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554e:	2b02      	cmp	r3, #2
 8005550:	d029      	beq.n	80055a6 <HAL_RCC_ClockConfig+0xa2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005552:	2b03      	cmp	r3, #3
 8005554:	d02d      	beq.n	80055b2 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005556:	4a47      	ldr	r2, [pc, #284]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	0792      	lsls	r2, r2, #30
 800555c:	d400      	bmi.n	8005560 <HAL_RCC_ClockConfig+0x5c>
 800555e:	e085      	b.n	800566c <HAL_RCC_ClockConfig+0x168>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005560:	4944      	ldr	r1, [pc, #272]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 8005562:	684a      	ldr	r2, [r1, #4]
 8005564:	2003      	movs	r0, #3
 8005566:	4382      	bics	r2, r0
 8005568:	4313      	orrs	r3, r2
 800556a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800556c:	f7fe f9b6 	bl	80038dc <HAL_GetTick>
 8005570:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005572:	686b      	ldr	r3, [r5, #4]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d022      	beq.n	80055be <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005578:	2b02      	cmp	r3, #2
 800557a:	d02e      	beq.n	80055da <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800557c:	2b03      	cmp	r3, #3
 800557e:	d03a      	beq.n	80055f6 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005580:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	220c      	movs	r2, #12
 8005586:	421a      	tst	r2, r3
 8005588:	d043      	beq.n	8005612 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558a:	f7fe f9a7 	bl	80038dc <HAL_GetTick>
 800558e:	1b80      	subs	r0, r0, r6
 8005590:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_RCC_ClockConfig+0x174>)
 8005592:	4298      	cmp	r0, r3
 8005594:	d9f4      	bls.n	8005580 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8005596:	2003      	movs	r0, #3
 8005598:	e067      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4a36      	ldr	r2, [pc, #216]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	0392      	lsls	r2, r2, #14
 80055a0:	d4de      	bmi.n	8005560 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80055a2:	2001      	movs	r0, #1
 80055a4:	e061      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a6:	4a33      	ldr	r2, [pc, #204]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	0192      	lsls	r2, r2, #6
 80055ac:	d4d8      	bmi.n	8005560 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80055ae:	2001      	movs	r0, #1
 80055b0:	e05b      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80055b2:	4a30      	ldr	r2, [pc, #192]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 80055b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b6:	03d2      	lsls	r2, r2, #15
 80055b8:	d4d2      	bmi.n	8005560 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80055ba:	2001      	movs	r0, #1
 80055bc:	e055      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055be:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	230c      	movs	r3, #12
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d023      	beq.n	8005612 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ca:	f7fe f987 	bl	80038dc <HAL_GetTick>
 80055ce:	1b80      	subs	r0, r0, r6
 80055d0:	4b29      	ldr	r3, [pc, #164]	; (8005678 <HAL_RCC_ClockConfig+0x174>)
 80055d2:	4298      	cmp	r0, r3
 80055d4:	d9f3      	bls.n	80055be <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80055d6:	2003      	movs	r0, #3
 80055d8:	e047      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	230c      	movs	r3, #12
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d015      	beq.n	8005612 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e6:	f7fe f979 	bl	80038dc <HAL_GetTick>
 80055ea:	1b80      	subs	r0, r0, r6
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_RCC_ClockConfig+0x174>)
 80055ee:	4298      	cmp	r0, r3
 80055f0:	d9f3      	bls.n	80055da <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80055f2:	2003      	movs	r0, #3
 80055f4:	e039      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	230c      	movs	r3, #12
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	d007      	beq.n	8005612 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005602:	f7fe f96b 	bl	80038dc <HAL_GetTick>
 8005606:	1b80      	subs	r0, r0, r6
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCC_ClockConfig+0x174>)
 800560a:	4298      	cmp	r0, r3
 800560c:	d9f3      	bls.n	80055f6 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 800560e:	2003      	movs	r0, #3
 8005610:	e02b      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCC_ClockConfig+0x16c>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	2301      	movs	r3, #1
 8005618:	4013      	ands	r3, r2
 800561a:	429c      	cmp	r4, r3
 800561c:	d20b      	bcs.n	8005636 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4914      	ldr	r1, [pc, #80]	; (8005670 <HAL_RCC_ClockConfig+0x16c>)
 8005620:	680b      	ldr	r3, [r1, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	4393      	bics	r3, r2
 8005626:	4323      	orrs	r3, r4
 8005628:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800562a:	680b      	ldr	r3, [r1, #0]
 800562c:	401a      	ands	r2, r3
 800562e:	4294      	cmp	r4, r2
 8005630:	d001      	beq.n	8005636 <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 8005632:	2001      	movs	r0, #1
 8005634:	e019      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	075b      	lsls	r3, r3, #29
 800563a:	d506      	bpl.n	800564a <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800563c:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 800563e:	6853      	ldr	r3, [r2, #4]
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x178>)
 8005642:	400b      	ands	r3, r1
 8005644:	68e9      	ldr	r1, [r5, #12]
 8005646:	430b      	orrs	r3, r1
 8005648:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800564a:	f7ff ff11 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <HAL_RCC_ClockConfig+0x170>)
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	0912      	lsrs	r2, r2, #4
 8005654:	230f      	movs	r3, #15
 8005656:	4013      	ands	r3, r2
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x17c>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	40d8      	lsrs	r0, r3
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x180>)
 8005660:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005662:	2000      	movs	r0, #0
 8005664:	f7fe f858 	bl	8003718 <HAL_InitTick>
  return HAL_OK;
 8005668:	2000      	movs	r0, #0
}
 800566a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800566c:	2001      	movs	r0, #1
 800566e:	e7fc      	b.n	800566a <HAL_RCC_ClockConfig+0x166>
 8005670:	40022000 	.word	0x40022000
 8005674:	40021000 	.word	0x40021000
 8005678:	00001388 	.word	0x00001388
 800567c:	fffff8ff 	.word	0xfffff8ff
 8005680:	080093d8 	.word	0x080093d8
 8005684:	20000000 	.word	0x20000000

08005688 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005688:	4b01      	ldr	r3, [pc, #4]	; (8005690 <HAL_RCC_GetHCLKFreq+0x8>)
 800568a:	6818      	ldr	r0, [r3, #0]
}
 800568c:	4770      	bx	lr
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000000 	.word	0x20000000

08005694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005694:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005696:	f7ff fff7 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	0a12      	lsrs	r2, r2, #8
 80056a0:	2307      	movs	r3, #7
 80056a2:	4013      	ands	r3, r2
 80056a4:	4a02      	ldr	r2, [pc, #8]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	40d8      	lsrs	r0, r3
}    
 80056aa:	bd10      	pop	{r4, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	080093e8 	.word	0x080093e8

080056b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056b4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80056b6:	2307      	movs	r3, #7
 80056b8:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_GetClockConfig+0x30>)
 80056bc:	685c      	ldr	r4, [r3, #4]
 80056be:	2203      	movs	r2, #3
 80056c0:	4022      	ands	r2, r4
 80056c2:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80056c4:	685c      	ldr	r4, [r3, #4]
 80056c6:	22f0      	movs	r2, #240	; 0xf0
 80056c8:	4022      	ands	r2, r4
 80056ca:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	22e0      	movs	r2, #224	; 0xe0
 80056d0:	00d2      	lsls	r2, r2, #3
 80056d2:	4013      	ands	r3, r2
 80056d4:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80056d6:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <HAL_RCC_GetClockConfig+0x34>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	2301      	movs	r3, #1
 80056dc:	4013      	ands	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
}
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40022000 	.word	0x40022000

080056ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056f2:	6803      	ldr	r3, [r0, #0]
 80056f4:	03db      	lsls	r3, r3, #15
 80056f6:	d535      	bpl.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f8:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	d466      	bmi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005700:	4a49      	ldr	r2, [pc, #292]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005702:	69d1      	ldr	r1, [r2, #28]
 8005704:	2080      	movs	r0, #128	; 0x80
 8005706:	0540      	lsls	r0, r0, #21
 8005708:	4301      	orrs	r1, r0
 800570a:	61d1      	str	r1, [r2, #28]
 800570c:	69d3      	ldr	r3, [r2, #28]
 800570e:	4003      	ands	r3, r0
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005714:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005716:	4b45      	ldr	r3, [pc, #276]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	05db      	lsls	r3, r3, #23
 800571c:	d559      	bpl.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b42      	ldr	r3, [pc, #264]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	22c0      	movs	r2, #192	; 0xc0
 8005724:	0092      	lsls	r2, r2, #2
 8005726:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	d013      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800572a:	6861      	ldr	r1, [r4, #4]
 800572c:	400a      	ands	r2, r1
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005732:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005734:	6a18      	ldr	r0, [r3, #32]
 8005736:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005738:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800573a:	6a1e      	ldr	r6, [r3, #32]
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	0249      	lsls	r1, r1, #9
 8005740:	4331      	orrs	r1, r6
 8005742:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005744:	6a19      	ldr	r1, [r3, #32]
 8005746:	4e3b      	ldr	r6, [pc, #236]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005748:	4031      	ands	r1, r6
 800574a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800574c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800574e:	07c3      	lsls	r3, r0, #31
 8005750:	d453      	bmi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005752:	4a35      	ldr	r2, [pc, #212]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005754:	6a13      	ldr	r3, [r2, #32]
 8005756:	4936      	ldr	r1, [pc, #216]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005758:	400b      	ands	r3, r1
 800575a:	6861      	ldr	r1, [r4, #4]
 800575c:	430b      	orrs	r3, r1
 800575e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005760:	2d01      	cmp	r5, #1
 8005762:	d059      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07db      	lsls	r3, r3, #31
 8005768:	d506      	bpl.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800576a:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800576c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800576e:	2103      	movs	r1, #3
 8005770:	438b      	bics	r3, r1
 8005772:	68a1      	ldr	r1, [r4, #8]
 8005774:	430b      	orrs	r3, r1
 8005776:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	079b      	lsls	r3, r3, #30
 800577c:	d506      	bpl.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800577e:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005780:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005782:	492d      	ldr	r1, [pc, #180]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005784:	400b      	ands	r3, r1
 8005786:	68e1      	ldr	r1, [r4, #12]
 8005788:	430b      	orrs	r3, r1
 800578a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	069b      	lsls	r3, r3, #26
 8005790:	d506      	bpl.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005792:	4a25      	ldr	r2, [pc, #148]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005794:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005796:	2110      	movs	r1, #16
 8005798:	438b      	bics	r3, r1
 800579a:	6921      	ldr	r1, [r4, #16]
 800579c:	430b      	orrs	r3, r1
 800579e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	039b      	lsls	r3, r3, #14
 80057a4:	d506      	bpl.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a6:	4a20      	ldr	r2, [pc, #128]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	438b      	bics	r3, r1
 80057ae:	69a1      	ldr	r1, [r4, #24]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	055b      	lsls	r3, r3, #21
 80057b8:	d533      	bpl.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057be:	2140      	movs	r1, #64	; 0x40
 80057c0:	438b      	bics	r3, r1
 80057c2:	6961      	ldr	r1, [r4, #20]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80057c8:	2000      	movs	r0, #0
}
 80057ca:	b002      	add	sp, #8
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2500      	movs	r5, #0
 80057d0:	e7a1      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d2:	4a16      	ldr	r2, [pc, #88]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	430b      	orrs	r3, r1
 80057dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80057de:	f7fe f87d 	bl	80038dc <HAL_GetTick>
 80057e2:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	05db      	lsls	r3, r3, #23
 80057ea:	d498      	bmi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ec:	f7fe f876 	bl	80038dc <HAL_GetTick>
 80057f0:	1b80      	subs	r0, r0, r6
 80057f2:	2864      	cmp	r0, #100	; 0x64
 80057f4:	d9f6      	bls.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 80057f6:	2003      	movs	r0, #3
 80057f8:	e7e7      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xde>
        tickstart = HAL_GetTick();
 80057fa:	f7fe f86f 	bl	80038dc <HAL_GetTick>
 80057fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	079b      	lsls	r3, r3, #30
 8005806:	d4a4      	bmi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005808:	f7fe f868 	bl	80038dc <HAL_GetTick>
 800580c:	1b80      	subs	r0, r0, r6
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005810:	4298      	cmp	r0, r3
 8005812:	d9f5      	bls.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
 8005814:	2003      	movs	r0, #3
 8005816:	e7d8      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xde>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	69d3      	ldr	r3, [r2, #28]
 800581a:	4909      	ldr	r1, [pc, #36]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800581c:	400b      	ands	r3, r1
 800581e:	61d3      	str	r3, [r2, #28]
 8005820:	e7a0      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8005822:	2000      	movs	r0, #0
 8005824:	e7d1      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
 8005830:	fffffcff 	.word	0xfffffcff
 8005834:	fffeffff 	.word	0xfffeffff
 8005838:	fffcffff 	.word	0xfffcffff
 800583c:	00001388 	.word	0x00001388
 8005840:	efffffff 	.word	0xefffffff

08005844 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	0006      	movs	r6, r0
 8005848:	000c      	movs	r4, r1
 800584a:	0017      	movs	r7, r2
 800584c:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584e:	e03e      	b.n	80058ce <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005850:	2d00      	cmp	r5, #0
 8005852:	d005      	beq.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x1c>
 8005854:	f7fe f842 	bl	80038dc <HAL_GetTick>
 8005858:	9b06      	ldr	r3, [sp, #24]
 800585a:	1ac0      	subs	r0, r0, r3
 800585c:	4285      	cmp	r5, r0
 800585e:	d836      	bhi.n	80058ce <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	6853      	ldr	r3, [r2, #4]
 8005864:	21e0      	movs	r1, #224	; 0xe0
 8005866:	438b      	bics	r3, r1
 8005868:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800586a:	2382      	movs	r3, #130	; 0x82
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	6872      	ldr	r2, [r6, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d00c      	beq.n	800588e <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	019b      	lsls	r3, r3, #6
 8005878:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800587a:	429a      	cmp	r2, r3
 800587c:	d016      	beq.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800587e:	2201      	movs	r2, #1
 8005880:	235d      	movs	r3, #93	; 0x5d
 8005882:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005884:	2200      	movs	r2, #0
 8005886:	3b01      	subs	r3, #1
 8005888:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
 800588c:	e027      	b.n	80058de <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588e:	68b3      	ldr	r3, [r6, #8]
 8005890:	2280      	movs	r2, #128	; 0x80
 8005892:	0212      	lsls	r2, r2, #8
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	00d2      	lsls	r2, r2, #3
 800589c:	4293      	cmp	r3, r2
 800589e:	d1e9      	bne.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	438b      	bics	r3, r1
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e7e3      	b.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 80058ac:	6832      	ldr	r2, [r6, #0]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	490b      	ldr	r1, [pc, #44]	; (80058e0 <SPI_WaitFlagStateUntilTimeout+0x9c>)
 80058b2:	400b      	ands	r3, r1
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	6832      	ldr	r2, [r6, #0]
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	430b      	orrs	r3, r1
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e7dc      	b.n	800587e <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c4:	2301      	movs	r3, #1
 80058c6:	42bb      	cmp	r3, r7
 80058c8:	d008      	beq.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	1c6b      	adds	r3, r5, #1
 80058cc:	d1c0      	bne.n	8005850 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ce:	6833      	ldr	r3, [r6, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4023      	ands	r3, r4
 80058d4:	429c      	cmp	r4, r3
 80058d6:	d0f5      	beq.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x80>
 80058d8:	2300      	movs	r3, #0
 80058da:	e7f4      	b.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 80058dc:	2000      	movs	r0, #0
}
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e0:	ffffdfff 	.word	0xffffdfff

080058e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e6:	b083      	sub	sp, #12
 80058e8:	0007      	movs	r7, r0
 80058ea:	000c      	movs	r4, r1
 80058ec:	0015      	movs	r5, r2
 80058ee:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80058f0:	e001      	b.n	80058f6 <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80058f2:	1c73      	adds	r3, r6, #1
 80058f4:	d110      	bne.n	8005918 <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	4023      	ands	r3, r4
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	d045      	beq.n	800598c <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005900:	23c0      	movs	r3, #192	; 0xc0
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	429c      	cmp	r4, r3
 8005906:	d1f4      	bne.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0xe>
 8005908:	2d00      	cmp	r5, #0
 800590a:	d1f2      	bne.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800590c:	7b13      	ldrb	r3, [r2, #12]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	466a      	mov	r2, sp
 8005912:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 8005914:	79d3      	ldrb	r3, [r2, #7]
 8005916:	e7ec      	b.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005918:	2e00      	cmp	r6, #0
 800591a:	d005      	beq.n	8005928 <SPI_WaitFifoStateUntilTimeout+0x44>
 800591c:	f7fd ffde 	bl	80038dc <HAL_GetTick>
 8005920:	9b08      	ldr	r3, [sp, #32]
 8005922:	1ac0      	subs	r0, r0, r3
 8005924:	4286      	cmp	r6, r0
 8005926:	d8e6      	bhi.n	80058f6 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	6853      	ldr	r3, [r2, #4]
 800592c:	21e0      	movs	r1, #224	; 0xe0
 800592e:	438b      	bics	r3, r1
 8005930:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005932:	2382      	movs	r3, #130	; 0x82
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00c      	beq.n	8005956 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005942:	429a      	cmp	r2, r3
 8005944:	d016      	beq.n	8005974 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005946:	2201      	movs	r2, #1
 8005948:	235d      	movs	r3, #93	; 0x5d
 800594a:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800594c:	2200      	movs	r2, #0
 800594e:	3b01      	subs	r3, #1
 8005950:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8005952:	2003      	movs	r0, #3
 8005954:	e01b      	b.n	800598e <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	0212      	lsls	r2, r2, #8
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	00d2      	lsls	r2, r2, #3
 8005964:	4293      	cmp	r3, r2
 8005966:	d1e9      	bne.n	800593c <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	438b      	bics	r3, r1
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e7e3      	b.n	800593c <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <SPI_WaitFifoStateUntilTimeout+0xb0>)
 800597a:	400b      	ands	r3, r1
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	6811      	ldr	r1, [r2, #0]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	430b      	orrs	r3, r1
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e7dc      	b.n	8005946 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 800598c:	2000      	movs	r0, #0
}
 800598e:	b003      	add	sp, #12
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	ffffdfff 	.word	0xffffdfff

08005998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	0004      	movs	r4, r0
 800599e:	000d      	movs	r5, r1
 80059a0:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a2:	9200      	str	r2, [sp, #0]
 80059a4:	000b      	movs	r3, r1
 80059a6:	2200      	movs	r2, #0
 80059a8:	21c0      	movs	r1, #192	; 0xc0
 80059aa:	0149      	lsls	r1, r1, #5
 80059ac:	f7ff ff9a 	bl	80058e4 <SPI_WaitFifoStateUntilTimeout>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d006      	beq.n	80059c2 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059b6:	2220      	movs	r2, #32
 80059b8:	4313      	orrs	r3, r2
 80059ba:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80059bc:	2003      	movs	r0, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80059be:	b002      	add	sp, #8
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059c2:	9600      	str	r6, [sp, #0]
 80059c4:	002b      	movs	r3, r5
 80059c6:	2200      	movs	r2, #0
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	0020      	movs	r0, r4
 80059cc:	f7ff ff3a 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d005      	beq.n	80059e0 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059d6:	2220      	movs	r2, #32
 80059d8:	4313      	orrs	r3, r2
 80059da:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80059dc:	2003      	movs	r0, #3
 80059de:	e7ee      	b.n	80059be <SPI_EndRxTxTransaction+0x26>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059e0:	9600      	str	r6, [sp, #0]
 80059e2:	002b      	movs	r3, r5
 80059e4:	2200      	movs	r2, #0
 80059e6:	21c0      	movs	r1, #192	; 0xc0
 80059e8:	00c9      	lsls	r1, r1, #3
 80059ea:	0020      	movs	r0, r4
 80059ec:	f7ff ff7a 	bl	80058e4 <SPI_WaitFifoStateUntilTimeout>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d0e4      	beq.n	80059be <SPI_EndRxTxTransaction+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059f6:	2220      	movs	r2, #32
 80059f8:	4313      	orrs	r3, r2
 80059fa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80059fc:	2003      	movs	r0, #3
 80059fe:	e7de      	b.n	80059be <SPI_EndRxTxTransaction+0x26>

08005a00 <SPI_EndRxTransaction>:
{
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	0004      	movs	r4, r0
 8005a06:	000d      	movs	r5, r1
 8005a08:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0a:	2382      	movs	r3, #130	; 0x82
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	6842      	ldr	r2, [r0, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d00f      	beq.n	8005a34 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a14:	9600      	str	r6, [sp, #0]
 8005a16:	002b      	movs	r3, r5
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	0020      	movs	r0, r4
 8005a1e:	f7ff ff11 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d015      	beq.n	8005a52 <SPI_EndRxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a28:	2220      	movs	r2, #32
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a2e:	2003      	movs	r0, #3
}
 8005a30:	b002      	add	sp, #8
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a34:	6883      	ldr	r3, [r0, #8]
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	0212      	lsls	r2, r2, #8
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	00d2      	lsls	r2, r2, #3
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d1e6      	bne.n	8005a14 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	6813      	ldr	r3, [r2, #0]
 8005a4a:	2140      	movs	r1, #64	; 0x40
 8005a4c:	438b      	bics	r3, r1
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e7e0      	b.n	8005a14 <SPI_EndRxTransaction+0x14>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a52:	2382      	movs	r3, #130	; 0x82
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	6862      	ldr	r2, [r4, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1e9      	bne.n	8005a30 <SPI_EndRxTransaction+0x30>
 8005a5c:	68a3      	ldr	r3, [r4, #8]
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	0212      	lsls	r2, r2, #8
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <SPI_EndRxTransaction+0x6e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	00d2      	lsls	r2, r2, #3
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d1e0      	bne.n	8005a30 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a6e:	9600      	str	r6, [sp, #0]
 8005a70:	002b      	movs	r3, r5
 8005a72:	2200      	movs	r2, #0
 8005a74:	21c0      	movs	r1, #192	; 0xc0
 8005a76:	00c9      	lsls	r1, r1, #3
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f7ff ff33 	bl	80058e4 <SPI_WaitFifoStateUntilTimeout>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0d6      	beq.n	8005a30 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a84:	2220      	movs	r2, #32
 8005a86:	4313      	orrs	r3, r2
 8005a88:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a8a:	2003      	movs	r0, #3
 8005a8c:	e7d0      	b.n	8005a30 <SPI_EndRxTransaction+0x30>
	...

08005a90 <HAL_SPI_Init>:
{
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8005a94:	d05e      	beq.n	8005b54 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a9a:	335d      	adds	r3, #93	; 0x5d
 8005a9c:	5cc3      	ldrb	r3, [r0, r3]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04c      	beq.n	8005b3c <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	235d      	movs	r3, #93	; 0x5d
 8005aa6:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	2140      	movs	r1, #64	; 0x40
 8005aae:	438b      	bics	r3, r1
 8005ab0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	22e0      	movs	r2, #224	; 0xe0
 8005ab6:	00d2      	lsls	r2, r2, #3
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d945      	bls.n	8005b48 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005abc:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005abe:	22f0      	movs	r2, #240	; 0xf0
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d005      	beq.n	8005ad2 <HAL_SPI_Init+0x42>
 8005ac6:	22e0      	movs	r2, #224	; 0xe0
 8005ac8:	00d2      	lsls	r2, r2, #3
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d001      	beq.n	8005ad2 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ace:	2200      	movs	r2, #0
 8005ad0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005ad2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad8:	22e0      	movs	r2, #224	; 0xe0
 8005ada:	00d2      	lsls	r2, r2, #3
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d936      	bls.n	8005b4e <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	68a0      	ldr	r0, [r4, #8]
 8005aea:	4303      	orrs	r3, r0
 8005aec:	6920      	ldr	r0, [r4, #16]
 8005aee:	4303      	orrs	r3, r0
 8005af0:	6960      	ldr	r0, [r4, #20]
 8005af2:	4303      	orrs	r3, r0
 8005af4:	2080      	movs	r0, #128	; 0x80
 8005af6:	0080      	lsls	r0, r0, #2
 8005af8:	69a5      	ldr	r5, [r4, #24]
 8005afa:	4028      	ands	r0, r5
 8005afc:	4303      	orrs	r3, r0
 8005afe:	69e0      	ldr	r0, [r4, #28]
 8005b00:	4303      	orrs	r3, r0
 8005b02:	6a20      	ldr	r0, [r4, #32]
 8005b04:	4303      	orrs	r3, r0
 8005b06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b08:	4303      	orrs	r3, r0
 8005b0a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	8b60      	ldrh	r0, [r4, #26]
 8005b10:	2304      	movs	r3, #4
 8005b12:	4003      	ands	r3, r0
 8005b14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b16:	4303      	orrs	r3, r0
 8005b18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b1a:	4303      	orrs	r3, r0
 8005b1c:	68e0      	ldr	r0, [r4, #12]
 8005b1e:	4303      	orrs	r3, r0
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	69d3      	ldr	r3, [r2, #28]
 8005b28:	490b      	ldr	r1, [pc, #44]	; (8005b58 <HAL_SPI_Init+0xc8>)
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b32:	2201      	movs	r2, #1
 8005b34:	335d      	adds	r3, #93	; 0x5d
 8005b36:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8005b38:	2000      	movs	r0, #0
}
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	335c      	adds	r3, #92	; 0x5c
 8005b40:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8005b42:	f7fd fd31 	bl	80035a8 <HAL_SPI_MspInit>
 8005b46:	e7ac      	b.n	8005aa2 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b48:	2180      	movs	r1, #128	; 0x80
 8005b4a:	0149      	lsls	r1, r1, #5
 8005b4c:	e7b7      	b.n	8005abe <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	6323      	str	r3, [r4, #48]	; 0x30
 8005b52:	e7c7      	b.n	8005ae4 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8005b54:	2001      	movs	r0, #1
 8005b56:	e7f0      	b.n	8005b3a <HAL_SPI_Init+0xaa>
 8005b58:	fffff7ff 	.word	0xfffff7ff

08005b5c <HAL_SPI_TransmitReceive>:
{
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	46c6      	mov	lr, r8
 8005b60:	b500      	push	{lr}
 8005b62:	0004      	movs	r4, r0
 8005b64:	000e      	movs	r6, r1
 8005b66:	0015      	movs	r5, r2
 8005b68:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8005b6a:	235c      	movs	r3, #92	; 0x5c
 8005b6c:	5cc3      	ldrb	r3, [r0, r3]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d103      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x1e>
 8005b72:	2002      	movs	r0, #2
}
 8005b74:	bc04      	pop	{r2}
 8005b76:	4690      	mov	r8, r2
 8005b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	235c      	movs	r3, #92	; 0x5c
 8005b7e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005b80:	f7fd feac 	bl	80038dc <HAL_GetTick>
 8005b84:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8005b86:	235d      	movs	r3, #93	; 0x5d
 8005b88:	5ce3      	ldrb	r3, [r4, r3]
 8005b8a:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 8005b8c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d013      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x5e>
 8005b92:	2182      	movs	r1, #130	; 0x82
 8005b94:	0049      	lsls	r1, r1, #1
 8005b96:	428a      	cmp	r2, r1
 8005b98:	d007      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x4e>
    errorcode = HAL_BUSY;
 8005b9a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	235d      	movs	r3, #93	; 0x5d
 8005ba0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 8005ba8:	e7e4      	b.n	8005b74 <HAL_SPI_TransmitReceive+0x18>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005baa:	68a2      	ldr	r2, [r4, #8]
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d000      	beq.n	8005bb2 <HAL_SPI_TransmitReceive+0x56>
 8005bb0:	e118      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x288>
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d001      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 8005bb6:	2002      	movs	r0, #2
 8005bb8:	e7f0      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d100      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x64>
 8005bbe:	e113      	b.n	8005de8 <HAL_SPI_TransmitReceive+0x28c>
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	d100      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x6a>
 8005bc4:	e112      	b.n	8005dec <HAL_SPI_TransmitReceive+0x290>
 8005bc6:	2f00      	cmp	r7, #0
 8005bc8:	d100      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x70>
 8005bca:	e111      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bcc:	235d      	movs	r3, #93	; 0x5d
 8005bce:	5ce3      	ldrb	r3, [r4, r3]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	235d      	movs	r3, #93	; 0x5d
 8005bd8:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bde:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005be0:	2246      	movs	r2, #70	; 0x46
 8005be2:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferSize  = Size;
 8005be4:	3a02      	subs	r2, #2
 8005be6:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005be8:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bea:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005bec:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005bee:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bf0:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8005bf2:	23e0      	movs	r3, #224	; 0xe0
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	68e2      	ldr	r2, [r4, #12]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d804      	bhi.n	8005c06 <HAL_SPI_TransmitReceive+0xaa>
 8005bfc:	2346      	movs	r3, #70	; 0x46
 8005bfe:	5ae3      	ldrh	r3, [r4, r3]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d922      	bls.n	8005c4c <HAL_SPI_TransmitReceive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	6853      	ldr	r3, [r2, #4]
 8005c0a:	497d      	ldr	r1, [pc, #500]	; (8005e00 <HAL_SPI_TransmitReceive+0x2a4>)
 8005c0c:	400b      	ands	r3, r1
 8005c0e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	0652      	lsls	r2, r2, #25
 8005c16:	d403      	bmi.n	8005c20 <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	2140      	movs	r1, #64	; 0x40
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c20:	23e0      	movs	r3, #224	; 0xe0
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	68e2      	ldr	r2, [r4, #12]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d951      	bls.n	8005cce <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0xdc>
 8005c30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	8832      	ldrh	r2, [r6, #0]
 8005c3c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8005c3e:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 8005c40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005c48:	2701      	movs	r7, #1
 8005c4a:	e023      	b.n	8005c94 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	6851      	ldr	r1, [r2, #4]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6053      	str	r3, [r2, #4]
 8005c58:	e7da      	b.n	8005c10 <HAL_SPI_TransmitReceive+0xb4>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005c5a:	2346      	movs	r3, #70	; 0x46
 8005c5c:	5ae3      	ldrh	r3, [r4, r3]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x122>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	07d2      	lsls	r2, r2, #31
 8005c6a:	d508      	bpl.n	8005c7e <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	802b      	strh	r3, [r5, #0]
        pRxData += sizeof(uint16_t);
 8005c70:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 8005c72:	2246      	movs	r2, #70	; 0x46
 8005c74:	5aa3      	ldrh	r3, [r4, r2]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8005c7c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	3301      	adds	r3, #1
 8005c82:	d007      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x138>
 8005c84:	f7fd fe2a 	bl	80038dc <HAL_GetTick>
 8005c88:	4643      	mov	r3, r8
 8005c8a:	1ac0      	subs	r0, r0, r3
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	4283      	cmp	r3, r0
 8005c90:	d800      	bhi.n	8005c94 <HAL_SPI_TransmitReceive+0x138>
 8005c92:	e0af      	b.n	8005df4 <HAL_SPI_TransmitReceive+0x298>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x14c>
 8005c9c:	3346      	adds	r3, #70	; 0x46
 8005c9e:	5ae3      	ldrh	r3, [r4, r3]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d100      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x14c>
 8005ca6:	e08f      	b.n	8005dc8 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005ca8:	2f00      	cmp	r7, #0
 8005caa:	d0d6      	beq.n	8005c5a <HAL_SPI_TransmitReceive+0xfe>
 8005cac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0d2      	beq.n	8005c5a <HAL_SPI_TransmitReceive+0xfe>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	0792      	lsls	r2, r2, #30
 8005cba:	d5ce      	bpl.n	8005c5a <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005cbc:	8832      	ldrh	r2, [r6, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005cc0:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 8005cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005cca:	2700      	movs	r7, #0
 8005ccc:	e7c5      	b.n	8005c5a <HAL_SPI_TransmitReceive+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x180>
 8005cd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d10b      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 8005cdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d909      	bls.n	8005cf8 <HAL_SPI_TransmitReceive+0x19c>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	8832      	ldrh	r2, [r6, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005cea:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 8005cec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cee:	3b02      	subs	r3, #2
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005cf4:	2701      	movs	r7, #1
 8005cf6:	e035      	b.n	8005d64 <HAL_SPI_TransmitReceive+0x208>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005cf8:	7833      	ldrb	r3, [r6, #0]
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005cfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7f4      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005d0a:	7832      	ldrb	r2, [r6, #0]
 8005d0c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005d0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005d16:	3601      	adds	r6, #1
        txallowed = 0U;
 8005d18:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005d1a:	2346      	movs	r3, #70	; 0x46
 8005d1c:	5ae3      	ldrh	r3, [r4, r3]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d015      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x1f4>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	07d2      	lsls	r2, r2, #31
 8005d2a:	d511      	bpl.n	8005d50 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8005d2c:	2246      	movs	r2, #70	; 0x46
 8005d2e:	5aa2      	ldrh	r2, [r4, r2]
 8005d30:	b292      	uxth	r2, r2
 8005d32:	2a01      	cmp	r2, #1
 8005d34:	d93e      	bls.n	8005db4 <HAL_SPI_TransmitReceive+0x258>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	802b      	strh	r3, [r5, #0]
          pRxData += sizeof(uint16_t);
 8005d3a:	3502      	adds	r5, #2
          hspi->RxXferCount -= 2U;
 8005d3c:	2246      	movs	r2, #70	; 0x46
 8005d3e:	5aa3      	ldrh	r3, [r4, r2]
 8005d40:	3b02      	subs	r3, #2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8005d46:	5aa3      	ldrh	r3, [r4, r2]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d92a      	bls.n	8005da4 <HAL_SPI_TransmitReceive+0x248>
        txallowed = 1U;
 8005d4e:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005d50:	9b06      	ldr	r3, [sp, #24]
 8005d52:	3301      	adds	r3, #1
 8005d54:	d006      	beq.n	8005d64 <HAL_SPI_TransmitReceive+0x208>
 8005d56:	f7fd fdc1 	bl	80038dc <HAL_GetTick>
 8005d5a:	4643      	mov	r3, r8
 8005d5c:	1ac0      	subs	r0, r0, r3
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	4283      	cmp	r3, r0
 8005d62:	d949      	bls.n	8005df8 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x21a>
 8005d6c:	3346      	adds	r3, #70	; 0x46
 8005d6e:	5ae3      	ldrh	r3, [r4, r3]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d028      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	d0cf      	beq.n	8005d1a <HAL_SPI_TransmitReceive+0x1be>
 8005d7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0cb      	beq.n	8005d1a <HAL_SPI_TransmitReceive+0x1be>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	0792      	lsls	r2, r2, #30
 8005d88:	d5c7      	bpl.n	8005d1a <HAL_SPI_TransmitReceive+0x1be>
        if (hspi->TxXferCount > 1U)
 8005d8a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	2a01      	cmp	r2, #1
 8005d90:	d9bb      	bls.n	8005d0a <HAL_SPI_TransmitReceive+0x1ae>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005d92:	8832      	ldrh	r2, [r6, #0]
 8005d94:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8005d96:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 8005d98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d9a:	3b02      	subs	r3, #2
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005da0:	2700      	movs	r7, #0
 8005da2:	e7ba      	b.n	8005d1a <HAL_SPI_TransmitReceive+0x1be>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	6851      	ldr	r1, [r2, #4]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	015b      	lsls	r3, r3, #5
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005db0:	2701      	movs	r7, #1
 8005db2:	e7cd      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x1f4>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005db4:	7b1b      	ldrb	r3, [r3, #12]
 8005db6:	702b      	strb	r3, [r5, #0]
          hspi->RxXferCount--;
 8005db8:	2246      	movs	r2, #70	; 0x46
 8005dba:	5aa3      	ldrh	r3, [r4, r2]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dc2:	3501      	adds	r5, #1
        txallowed = 1U;
 8005dc4:	2701      	movs	r7, #1
 8005dc6:	e7c3      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x1f4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc8:	4642      	mov	r2, r8
 8005dca:	9906      	ldr	r1, [sp, #24]
 8005dcc:	0020      	movs	r0, r4
 8005dce:	f7ff fde3 	bl	8005998 <SPI_EndRxTxTransaction>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10d      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x2a0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de0:	2000      	movs	r0, #0
 8005de2:	e6db      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_BUSY;
 8005de4:	2002      	movs	r0, #2
 8005de6:	e6d9      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 8005de8:	2001      	movs	r0, #1
 8005dea:	e6d7      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
 8005dec:	2001      	movs	r0, #1
 8005dee:	e6d5      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
 8005df0:	2001      	movs	r0, #1
 8005df2:	e6d3      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 8005df4:	2003      	movs	r0, #3
 8005df6:	e6d1      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 8005df8:	2003      	movs	r0, #3
 8005dfa:	e6cf      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e6cd      	b.n	8005b9c <HAL_SPI_TransmitReceive+0x40>
 8005e00:	ffffefff 	.word	0xffffefff

08005e04 <HAL_SPI_Receive>:
{
 8005e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e06:	b085      	sub	sp, #20
 8005e08:	0004      	movs	r4, r0
 8005e0a:	000d      	movs	r5, r1
 8005e0c:	0016      	movs	r6, r2
 8005e0e:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e10:	2382      	movs	r3, #130	; 0x82
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	6842      	ldr	r2, [r0, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d006      	beq.n	8005e28 <HAL_SPI_Receive+0x24>
  __HAL_LOCK(hspi);
 8005e1a:	235c      	movs	r3, #92	; 0x5c
 8005e1c:	5ce3      	ldrb	r3, [r4, r3]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10e      	bne.n	8005e40 <HAL_SPI_Receive+0x3c>
 8005e22:	2002      	movs	r0, #2
}
 8005e24:	b005      	add	sp, #20
 8005e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e28:	6883      	ldr	r3, [r0, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f5      	bne.n	8005e1a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e2e:	2204      	movs	r2, #4
 8005e30:	335d      	adds	r3, #93	; 0x5d
 8005e32:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e34:	9700      	str	r7, [sp, #0]
 8005e36:	0033      	movs	r3, r6
 8005e38:	000a      	movs	r2, r1
 8005e3a:	f7ff fe8f 	bl	8005b5c <HAL_SPI_TransmitReceive>
 8005e3e:	e7f1      	b.n	8005e24 <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 8005e40:	2201      	movs	r2, #1
 8005e42:	235c      	movs	r3, #92	; 0x5c
 8005e44:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8005e46:	f7fd fd49 	bl	80038dc <HAL_GetTick>
 8005e4a:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e4c:	235d      	movs	r3, #93	; 0x5d
 8005e4e:	5ce3      	ldrb	r3, [r4, r3]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d007      	beq.n	8005e64 <HAL_SPI_Receive+0x60>
    errorcode = HAL_BUSY;
 8005e54:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005e56:	2201      	movs	r2, #1
 8005e58:	235d      	movs	r3, #93	; 0x5d
 8005e5a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 8005e62:	e7df      	b.n	8005e24 <HAL_SPI_Receive+0x20>
  if ((pData == NULL) || (Size == 0U))
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d100      	bne.n	8005e6a <HAL_SPI_Receive+0x66>
 8005e68:	e081      	b.n	8005f6e <HAL_SPI_Receive+0x16a>
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d100      	bne.n	8005e70 <HAL_SPI_Receive+0x6c>
 8005e6e:	e080      	b.n	8005f72 <HAL_SPI_Receive+0x16e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e70:	2204      	movs	r2, #4
 8005e72:	335c      	adds	r3, #92	; 0x5c
 8005e74:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e7a:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e7c:	3240      	adds	r2, #64	; 0x40
 8005e7e:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 8005e80:	3202      	adds	r2, #2
 8005e82:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e84:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e86:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e88:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e8c:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e8e:	23e0      	movs	r3, #224	; 0xe0
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	68e2      	ldr	r2, [r4, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d917      	bls.n	8005ec8 <HAL_SPI_Receive+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	6853      	ldr	r3, [r2, #4]
 8005e9c:	493b      	ldr	r1, [pc, #236]	; (8005f8c <HAL_SPI_Receive+0x188>)
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68a2      	ldr	r2, [r4, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d014      	beq.n	8005ed6 <HAL_SPI_Receive+0xd2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	0652      	lsls	r2, r2, #25
 8005eb2:	d403      	bmi.n	8005ebc <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	2140      	movs	r1, #64	; 0x40
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ebc:	23e0      	movs	r3, #224	; 0xe0
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	68e2      	ldr	r2, [r4, #12]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d917      	bls.n	8005ef6 <HAL_SPI_Receive+0xf2>
 8005ec6:	e032      	b.n	8005f2e <HAL_SPI_Receive+0x12a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	6851      	ldr	r1, [r2, #4]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	015b      	lsls	r3, r3, #5
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6053      	str	r3, [r2, #4]
 8005ed4:	e7e5      	b.n	8005ea2 <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	6813      	ldr	r3, [r2, #0]
 8005eda:	492d      	ldr	r1, [pc, #180]	; (8005f90 <HAL_SPI_Receive+0x18c>)
 8005edc:	400b      	ands	r3, r1
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e7e4      	b.n	8005eac <HAL_SPI_Receive+0xa8>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005ee2:	2f00      	cmp	r7, #0
 8005ee4:	d047      	beq.n	8005f76 <HAL_SPI_Receive+0x172>
 8005ee6:	1c7b      	adds	r3, r7, #1
 8005ee8:	d005      	beq.n	8005ef6 <HAL_SPI_Receive+0xf2>
 8005eea:	f7fd fcf7 	bl	80038dc <HAL_GetTick>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	4287      	cmp	r7, r0
 8005ef4:	d941      	bls.n	8005f7a <HAL_SPI_Receive+0x176>
    while (hspi->RxXferCount > 0U)
 8005ef6:	2346      	movs	r3, #70	; 0x46
 8005ef8:	5ae3      	ldrh	r3, [r4, r3]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d028      	beq.n	8005f52 <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	07d2      	lsls	r2, r2, #31
 8005f06:	d5ec      	bpl.n	8005ee2 <HAL_SPI_Receive+0xde>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f08:	7b1b      	ldrb	r3, [r3, #12]
 8005f0a:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 8005f0c:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 8005f0e:	2246      	movs	r2, #70	; 0x46
 8005f10:	5aa3      	ldrh	r3, [r4, r2]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	52a3      	strh	r3, [r4, r2]
 8005f18:	e7ed      	b.n	8005ef6 <HAL_SPI_Receive+0xf2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005f1a:	2f00      	cmp	r7, #0
 8005f1c:	d02f      	beq.n	8005f7e <HAL_SPI_Receive+0x17a>
 8005f1e:	1c7b      	adds	r3, r7, #1
 8005f20:	d005      	beq.n	8005f2e <HAL_SPI_Receive+0x12a>
 8005f22:	f7fd fcdb 	bl	80038dc <HAL_GetTick>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	1ac0      	subs	r0, r0, r3
 8005f2a:	4287      	cmp	r7, r0
 8005f2c:	d929      	bls.n	8005f82 <HAL_SPI_Receive+0x17e>
    while (hspi->RxXferCount > 0U)
 8005f2e:	2346      	movs	r3, #70	; 0x46
 8005f30:	5ae3      	ldrh	r3, [r4, r3]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	07d2      	lsls	r2, r2, #31
 8005f3e:	d5ec      	bpl.n	8005f1a <HAL_SPI_Receive+0x116>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 8005f44:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 8005f46:	2246      	movs	r2, #70	; 0x46
 8005f48:	5aa3      	ldrh	r3, [r4, r2]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	52a3      	strh	r3, [r4, r2]
 8005f50:	e7ed      	b.n	8005f2e <HAL_SPI_Receive+0x12a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f52:	9a03      	ldr	r2, [sp, #12]
 8005f54:	0039      	movs	r1, r7
 8005f56:	0020      	movs	r0, r4
 8005f58:	f7ff fd52 	bl	8005a00 <SPI_EndRxTransaction>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d001      	beq.n	8005f64 <HAL_SPI_Receive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f60:	2320      	movs	r3, #32
 8005f62:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10d      	bne.n	8005f86 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e773      	b.n	8005e56 <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e771      	b.n	8005e56 <HAL_SPI_Receive+0x52>
 8005f72:	2001      	movs	r0, #1
 8005f74:	e76f      	b.n	8005e56 <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005f76:	2003      	movs	r0, #3
 8005f78:	e76d      	b.n	8005e56 <HAL_SPI_Receive+0x52>
 8005f7a:	2003      	movs	r0, #3
 8005f7c:	e76b      	b.n	8005e56 <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005f7e:	2003      	movs	r0, #3
 8005f80:	e769      	b.n	8005e56 <HAL_SPI_Receive+0x52>
 8005f82:	2003      	movs	r0, #3
 8005f84:	e767      	b.n	8005e56 <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005f86:	2001      	movs	r0, #1
 8005f88:	e765      	b.n	8005e56 <HAL_SPI_Receive+0x52>
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	ffffefff 	.word	0xffffefff
 8005f90:	ffffbfff 	.word	0xffffbfff

08005f94 <HAL_SPI_Transmit_DMA>:
{
 8005f94:	b510      	push	{r4, lr}
 8005f96:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005f98:	235c      	movs	r3, #92	; 0x5c
 8005f9a:	5cc3      	ldrb	r3, [r0, r3]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d100      	bne.n	8005fa2 <HAL_SPI_Transmit_DMA+0xe>
 8005fa0:	e07c      	b.n	800609c <HAL_SPI_Transmit_DMA+0x108>
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	235c      	movs	r3, #92	; 0x5c
 8005fa6:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005fa8:	3301      	adds	r3, #1
 8005faa:	5ce3      	ldrb	r3, [r4, r3]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d004      	beq.n	8005fba <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 8005fb0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	235c      	movs	r3, #92	; 0x5c
 8005fb6:	54e2      	strb	r2, [r4, r3]
}
 8005fb8:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d06a      	beq.n	8006094 <HAL_SPI_Transmit_DMA+0x100>
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d06a      	beq.n	8006098 <HAL_SPI_Transmit_DMA+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fc2:	3002      	adds	r0, #2
 8005fc4:	335c      	adds	r3, #92	; 0x5c
 8005fc6:	54e0      	strb	r0, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fcc:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fce:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fd0:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fd2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fd4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fd6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005fd8:	2244      	movs	r2, #68	; 0x44
 8005fda:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8005fdc:	3202      	adds	r2, #2
 8005fde:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	68a2      	ldr	r2, [r4, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d037      	beq.n	800605a <HAL_SPI_Transmit_DMA+0xc6>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005fea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fec:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_SPI_Transmit_DMA+0x10c>)
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ff2:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <HAL_SPI_Transmit_DMA+0x110>)
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ff8:	4a2b      	ldr	r2, [pc, #172]	; (80060a8 <HAL_SPI_Transmit_DMA+0x114>)
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ffe:	2200      	movs	r2, #0
 8006000:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	6853      	ldr	r3, [r2, #4]
 8006006:	4929      	ldr	r1, [pc, #164]	; (80060ac <HAL_SPI_Transmit_DMA+0x118>)
 8006008:	400b      	ands	r3, r1
 800600a:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800600c:	23e0      	movs	r3, #224	; 0xe0
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	68e2      	ldr	r2, [r4, #12]
 8006012:	429a      	cmp	r2, r3
 8006014:	d805      	bhi.n	8006022 <HAL_SPI_Transmit_DMA+0x8e>
 8006016:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	429a      	cmp	r2, r3
 8006020:	d022      	beq.n	8006068 <HAL_SPI_Transmit_DMA+0xd4>
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	320c      	adds	r2, #12
 8006026:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006028:	b29b      	uxth	r3, r3
 800602a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800602c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800602e:	f7fd fcff 	bl	8003a30 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	0652      	lsls	r2, r2, #25
 8006038:	d403      	bmi.n	8006042 <HAL_SPI_Transmit_DMA+0xae>
    __HAL_SPI_ENABLE(hspi);
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	430a      	orrs	r2, r1
 8006040:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	6853      	ldr	r3, [r2, #4]
 8006046:	2120      	movs	r1, #32
 8006048:	430b      	orrs	r3, r1
 800604a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	6853      	ldr	r3, [r2, #4]
 8006050:	391e      	subs	r1, #30
 8006052:	430b      	orrs	r3, r1
 8006054:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006056:	2000      	movs	r0, #0
 8006058:	e7ab      	b.n	8005fb2 <HAL_SPI_Transmit_DMA+0x1e>
    SPI_1LINE_TX(hspi);
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	6811      	ldr	r1, [r2, #0]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	01db      	lsls	r3, r3, #7
 8006062:	430b      	orrs	r3, r1
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e7c0      	b.n	8005fea <HAL_SPI_Transmit_DMA+0x56>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006068:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800606a:	07db      	lsls	r3, r3, #31
 800606c:	d407      	bmi.n	800607e <HAL_SPI_Transmit_DMA+0xea>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	6853      	ldr	r3, [r2, #4]
 8006072:	400b      	ands	r3, r1
 8006074:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006076:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800607c:	e7d1      	b.n	8006022 <HAL_SPI_Transmit_DMA+0x8e>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	6851      	ldr	r1, [r2, #4]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	01db      	lsls	r3, r3, #7
 8006086:	430b      	orrs	r3, r1
 8006088:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800608a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	3301      	adds	r3, #1
 8006090:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006092:	e7c6      	b.n	8006022 <HAL_SPI_Transmit_DMA+0x8e>
    errorcode = HAL_ERROR;
 8006094:	2001      	movs	r0, #1
 8006096:	e78c      	b.n	8005fb2 <HAL_SPI_Transmit_DMA+0x1e>
 8006098:	2001      	movs	r0, #1
 800609a:	e78a      	b.n	8005fb2 <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 800609c:	2002      	movs	r0, #2
 800609e:	e78b      	b.n	8005fb8 <HAL_SPI_Transmit_DMA+0x24>
 80060a0:	0800641d 	.word	0x0800641d
 80060a4:	08006463 	.word	0x08006463
 80060a8:	08006441 	.word	0x08006441
 80060ac:	ffffbfff 	.word	0xffffbfff

080060b0 <HAL_SPI_TransmitReceive_DMA>:
{
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80060b4:	205c      	movs	r0, #92	; 0x5c
 80060b6:	5c20      	ldrb	r0, [r4, r0]
 80060b8:	2801      	cmp	r0, #1
 80060ba:	d100      	bne.n	80060be <HAL_SPI_TransmitReceive_DMA+0xe>
 80060bc:	e0de      	b.n	800627c <HAL_SPI_TransmitReceive_DMA+0x1cc>
 80060be:	2501      	movs	r5, #1
 80060c0:	205c      	movs	r0, #92	; 0x5c
 80060c2:	5425      	strb	r5, [r4, r0]
  tmp  = hspi->State;
 80060c4:	3001      	adds	r0, #1
 80060c6:	5c20      	ldrb	r0, [r4, r0]
 80060c8:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
 80060ca:	6865      	ldr	r5, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) ||
 80060cc:	2801      	cmp	r0, #1
 80060ce:	d010      	beq.n	80060f2 <HAL_SPI_TransmitReceive_DMA+0x42>
 80060d0:	2682      	movs	r6, #130	; 0x82
 80060d2:	0076      	lsls	r6, r6, #1
 80060d4:	42b5      	cmp	r5, r6
 80060d6:	d004      	beq.n	80060e2 <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 80060d8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80060da:	2200      	movs	r2, #0
 80060dc:	235c      	movs	r3, #92	; 0x5c
 80060de:	54e2      	strb	r2, [r4, r3]
}
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80060e2:	68a5      	ldr	r5, [r4, #8]
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	d000      	beq.n	80060ea <HAL_SPI_TransmitReceive_DMA+0x3a>
 80060e8:	e0c0      	b.n	800626c <HAL_SPI_TransmitReceive_DMA+0x1bc>
 80060ea:	2804      	cmp	r0, #4
 80060ec:	d001      	beq.n	80060f2 <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 80060ee:	2002      	movs	r0, #2
 80060f0:	e7f3      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d100      	bne.n	80060f8 <HAL_SPI_TransmitReceive_DMA+0x48>
 80060f6:	e0bb      	b.n	8006270 <HAL_SPI_TransmitReceive_DMA+0x1c0>
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	d100      	bne.n	80060fe <HAL_SPI_TransmitReceive_DMA+0x4e>
 80060fc:	e0ba      	b.n	8006274 <HAL_SPI_TransmitReceive_DMA+0x1c4>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d100      	bne.n	8006104 <HAL_SPI_TransmitReceive_DMA+0x54>
 8006102:	e0b9      	b.n	8006278 <HAL_SPI_TransmitReceive_DMA+0x1c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006104:	205d      	movs	r0, #93	; 0x5d
 8006106:	5c20      	ldrb	r0, [r4, r0]
 8006108:	2804      	cmp	r0, #4
 800610a:	d002      	beq.n	8006112 <HAL_SPI_TransmitReceive_DMA+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800610c:	2505      	movs	r5, #5
 800610e:	205d      	movs	r0, #93	; 0x5d
 8006110:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006112:	2000      	movs	r0, #0
 8006114:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006116:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006118:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800611a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800611c:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800611e:	2244      	movs	r2, #68	; 0x44
 8006120:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = Size;
 8006122:	3202      	adds	r2, #2
 8006124:	52a3      	strh	r3, [r4, r2]
  hspi->RxISR       = NULL;
 8006126:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006128:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	6853      	ldr	r3, [r2, #4]
 800612e:	4954      	ldr	r1, [pc, #336]	; (8006280 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 8006130:	400b      	ands	r3, r1
 8006132:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006134:	23e0      	movs	r3, #224	; 0xe0
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	68e2      	ldr	r2, [r4, #12]
 800613a:	429a      	cmp	r2, r3
 800613c:	d947      	bls.n	80061ce <HAL_SPI_TransmitReceive_DMA+0x11e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	6853      	ldr	r3, [r2, #4]
 8006142:	4950      	ldr	r1, [pc, #320]	; (8006284 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 8006144:	400b      	ands	r3, r1
 8006146:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006148:	235d      	movs	r3, #93	; 0x5d
 800614a:	5ce3      	ldrb	r3, [r4, r3]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d100      	bne.n	8006152 <HAL_SPI_TransmitReceive_DMA+0xa2>
 8006150:	e085      	b.n	800625e <HAL_SPI_TransmitReceive_DMA+0x1ae>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006154:	4a4c      	ldr	r2, [pc, #304]	; (8006288 <HAL_SPI_TransmitReceive_DMA+0x1d8>)
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006158:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800615a:	4a4c      	ldr	r2, [pc, #304]	; (800628c <HAL_SPI_TransmitReceive_DMA+0x1dc>)
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800615e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006160:	4a4b      	ldr	r2, [pc, #300]	; (8006290 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8006164:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006166:	2500      	movs	r5, #0
 8006168:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	310c      	adds	r1, #12
 800616e:	2346      	movs	r3, #70	; 0x46
 8006170:	5ae3      	ldrh	r3, [r4, r3]
 8006172:	b29b      	uxth	r3, r3
 8006174:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006178:	f7fd fc5a 	bl	8003a30 <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	6853      	ldr	r3, [r2, #4]
 8006180:	2101      	movs	r1, #1
 8006182:	430b      	orrs	r3, r1
 8006184:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006186:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006188:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800618a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800618c:	629d      	str	r5, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800618e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006190:	631d      	str	r5, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006192:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006194:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	320c      	adds	r2, #12
 800619a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061a2:	f7fd fc45 	bl	8003a30 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	0652      	lsls	r2, r2, #25
 80061ac:	d403      	bmi.n	80061b6 <HAL_SPI_TransmitReceive_DMA+0x106>
    __HAL_SPI_ENABLE(hspi);
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	2140      	movs	r1, #64	; 0x40
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	6853      	ldr	r3, [r2, #4]
 80061ba:	2120      	movs	r1, #32
 80061bc:	430b      	orrs	r3, r1
 80061be:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	6853      	ldr	r3, [r2, #4]
 80061c4:	391e      	subs	r1, #30
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ca:	2000      	movs	r0, #0
 80061cc:	e785      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	6851      	ldr	r1, [r2, #4]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	015b      	lsls	r3, r3, #5
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d018      	beq.n	8006218 <HAL_SPI_TransmitReceive_DMA+0x168>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d1aa      	bne.n	8006148 <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	6853      	ldr	r3, [r2, #4]
 80061f6:	4923      	ldr	r1, [pc, #140]	; (8006284 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 80061f8:	400b      	ands	r3, r1
 80061fa:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80061fc:	2346      	movs	r3, #70	; 0x46
 80061fe:	5ae3      	ldrh	r3, [r4, r3]
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d420      	bmi.n	8006246 <HAL_SPI_TransmitReceive_DMA+0x196>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	6853      	ldr	r3, [r2, #4]
 8006208:	4922      	ldr	r1, [pc, #136]	; (8006294 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800620a:	400b      	ands	r3, r1
 800620c:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800620e:	2246      	movs	r2, #70	; 0x46
 8006210:	5aa3      	ldrh	r3, [r4, r2]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	52a3      	strh	r3, [r4, r2]
 8006216:	e797      	b.n	8006148 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006218:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800621a:	07db      	lsls	r3, r3, #31
 800621c:	d408      	bmi.n	8006230 <HAL_SPI_TransmitReceive_DMA+0x180>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	6853      	ldr	r3, [r2, #4]
 8006222:	491d      	ldr	r1, [pc, #116]	; (8006298 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8006224:	400b      	ands	r3, r1
 8006226:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006228:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800622e:	e7da      	b.n	80061e6 <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	6851      	ldr	r1, [r2, #4]
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	01db      	lsls	r3, r3, #7
 8006238:	430b      	orrs	r3, r1
 800623a:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800623c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	3301      	adds	r3, #1
 8006242:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006244:	e7cf      	b.n	80061e6 <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	6851      	ldr	r1, [r2, #4]
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	019b      	lsls	r3, r3, #6
 800624e:	430b      	orrs	r3, r1
 8006250:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006252:	2246      	movs	r2, #70	; 0x46
 8006254:	5aa3      	ldrh	r3, [r4, r2]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	3301      	adds	r3, #1
 800625a:	52a3      	strh	r3, [r4, r2]
 800625c:	e774      	b.n	8006148 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800625e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006260:	4a0e      	ldr	r2, [pc, #56]	; (800629c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006266:	4a0e      	ldr	r2, [pc, #56]	; (80062a0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
 800626a:	e778      	b.n	800615e <HAL_SPI_TransmitReceive_DMA+0xae>
    errorcode = HAL_BUSY;
 800626c:	2002      	movs	r0, #2
 800626e:	e734      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
    errorcode = HAL_ERROR;
 8006270:	2001      	movs	r0, #1
 8006272:	e732      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
 8006274:	2001      	movs	r0, #1
 8006276:	e730      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
 8006278:	2001      	movs	r0, #1
 800627a:	e72e      	b.n	80060da <HAL_SPI_TransmitReceive_DMA+0x2a>
  __HAL_LOCK(hspi);
 800627c:	2002      	movs	r0, #2
 800627e:	e72f      	b.n	80060e0 <HAL_SPI_TransmitReceive_DMA+0x30>
 8006280:	ffff9fff 	.word	0xffff9fff
 8006284:	ffffefff 	.word	0xffffefff
 8006288:	08006435 	.word	0x08006435
 800628c:	08006531 	.word	0x08006531
 8006290:	08006441 	.word	0x08006441
 8006294:	ffffdfff 	.word	0xffffdfff
 8006298:	ffffbfff 	.word	0xffffbfff
 800629c:	08006429 	.word	0x08006429
 80062a0:	080064d7 	.word	0x080064d7

080062a4 <HAL_SPI_Receive_DMA>:
{
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062a8:	6880      	ldr	r0, [r0, #8]
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_SPI_Receive_DMA+0x14>
 80062ae:	2382      	movs	r3, #130	; 0x82
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	6865      	ldr	r5, [r4, #4]
 80062b4:	429d      	cmp	r5, r3
 80062b6:	d010      	beq.n	80062da <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 80062b8:	255c      	movs	r5, #92	; 0x5c
 80062ba:	5d65      	ldrb	r5, [r4, r5]
 80062bc:	2d01      	cmp	r5, #1
 80062be:	d100      	bne.n	80062c2 <HAL_SPI_Receive_DMA+0x1e>
 80062c0:	e099      	b.n	80063f6 <HAL_SPI_Receive_DMA+0x152>
 80062c2:	2501      	movs	r5, #1
 80062c4:	235c      	movs	r3, #92	; 0x5c
 80062c6:	54e5      	strb	r5, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 80062c8:	3301      	adds	r3, #1
 80062ca:	5ce3      	ldrb	r3, [r4, r3]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d00d      	beq.n	80062ec <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 80062d0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80062d2:	2200      	movs	r2, #0
 80062d4:	235c      	movs	r3, #92	; 0x5c
 80062d6:	54e2      	strb	r2, [r4, r3]
}
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062da:	3004      	adds	r0, #4
 80062dc:	3ba7      	subs	r3, #167	; 0xa7
 80062de:	54e0      	strb	r0, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80062e0:	0013      	movs	r3, r2
 80062e2:	000a      	movs	r2, r1
 80062e4:	0020      	movs	r0, r4
 80062e6:	f7ff fee3 	bl	80060b0 <HAL_SPI_TransmitReceive_DMA>
 80062ea:	e7f5      	b.n	80062d8 <HAL_SPI_Receive_DMA+0x34>
  if ((pData == NULL) || (Size == 0U))
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d100      	bne.n	80062f2 <HAL_SPI_Receive_DMA+0x4e>
 80062f0:	e07d      	b.n	80063ee <HAL_SPI_Receive_DMA+0x14a>
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	d100      	bne.n	80062f8 <HAL_SPI_Receive_DMA+0x54>
 80062f6:	e07c      	b.n	80063f2 <HAL_SPI_Receive_DMA+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062f8:	3503      	adds	r5, #3
 80062fa:	335c      	adds	r3, #92	; 0x5c
 80062fc:	54e5      	strb	r5, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fe:	2300      	movs	r3, #0
 8006300:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006302:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006304:	2144      	movs	r1, #68	; 0x44
 8006306:	5262      	strh	r2, [r4, r1]
  hspi->RxXferCount = Size;
 8006308:	3102      	adds	r1, #2
 800630a:	5262      	strh	r2, [r4, r1]
  hspi->RxISR       = NULL;
 800630c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800630e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006310:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006312:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	4298      	cmp	r0, r3
 800631a:	d037      	beq.n	800638c <HAL_SPI_Receive_DMA+0xe8>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	6853      	ldr	r3, [r2, #4]
 8006320:	4936      	ldr	r1, [pc, #216]	; (80063fc <HAL_SPI_Receive_DMA+0x158>)
 8006322:	400b      	ands	r3, r1
 8006324:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006326:	23e0      	movs	r3, #224	; 0xe0
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	68e2      	ldr	r2, [r4, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d933      	bls.n	8006398 <HAL_SPI_Receive_DMA+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	6853      	ldr	r3, [r2, #4]
 8006334:	4932      	ldr	r1, [pc, #200]	; (8006400 <HAL_SPI_Receive_DMA+0x15c>)
 8006336:	400b      	ands	r3, r1
 8006338:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800633a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800633c:	4a31      	ldr	r2, [pc, #196]	; (8006404 <HAL_SPI_Receive_DMA+0x160>)
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006342:	4a31      	ldr	r2, [pc, #196]	; (8006408 <HAL_SPI_Receive_DMA+0x164>)
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006348:	4a30      	ldr	r2, [pc, #192]	; (800640c <HAL_SPI_Receive_DMA+0x168>)
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 800634c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800634e:	2200      	movs	r2, #0
 8006350:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	310c      	adds	r1, #12
 8006356:	2346      	movs	r3, #70	; 0x46
 8006358:	5ae3      	ldrh	r3, [r4, r3]
 800635a:	b29b      	uxth	r3, r3
 800635c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800635e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006360:	f7fd fb66 	bl	8003a30 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	0652      	lsls	r2, r2, #25
 800636a:	d403      	bmi.n	8006374 <HAL_SPI_Receive_DMA+0xd0>
    __HAL_SPI_ENABLE(hspi);
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	2140      	movs	r1, #64	; 0x40
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	6853      	ldr	r3, [r2, #4]
 8006378:	2120      	movs	r1, #32
 800637a:	430b      	orrs	r3, r1
 800637c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	6853      	ldr	r3, [r2, #4]
 8006382:	391f      	subs	r1, #31
 8006384:	430b      	orrs	r3, r1
 8006386:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006388:	2000      	movs	r0, #0
 800638a:	e7a2      	b.n	80062d2 <HAL_SPI_Receive_DMA+0x2e>
    SPI_1LINE_RX(hspi);
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	491f      	ldr	r1, [pc, #124]	; (8006410 <HAL_SPI_Receive_DMA+0x16c>)
 8006392:	400b      	ands	r3, r1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e7c1      	b.n	800631c <HAL_SPI_Receive_DMA+0x78>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	6851      	ldr	r1, [r2, #4]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	015b      	lsls	r3, r3, #5
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1c4      	bne.n	800633a <HAL_SPI_Receive_DMA+0x96>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	6853      	ldr	r3, [r2, #4]
 80063b4:	4912      	ldr	r1, [pc, #72]	; (8006400 <HAL_SPI_Receive_DMA+0x15c>)
 80063b6:	400b      	ands	r3, r1
 80063b8:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80063ba:	2346      	movs	r3, #70	; 0x46
 80063bc:	5ae3      	ldrh	r3, [r4, r3]
 80063be:	07db      	lsls	r3, r3, #31
 80063c0:	d409      	bmi.n	80063d6 <HAL_SPI_Receive_DMA+0x132>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	6853      	ldr	r3, [r2, #4]
 80063c6:	490d      	ldr	r1, [pc, #52]	; (80063fc <HAL_SPI_Receive_DMA+0x158>)
 80063c8:	400b      	ands	r3, r1
 80063ca:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063cc:	2246      	movs	r2, #70	; 0x46
 80063ce:	5aa3      	ldrh	r3, [r4, r2]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	52a3      	strh	r3, [r4, r2]
 80063d4:	e7b1      	b.n	800633a <HAL_SPI_Receive_DMA+0x96>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	6851      	ldr	r1, [r2, #4]
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	019b      	lsls	r3, r3, #6
 80063de:	430b      	orrs	r3, r1
 80063e0:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063e2:	2246      	movs	r2, #70	; 0x46
 80063e4:	5aa3      	ldrh	r3, [r4, r2]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	3301      	adds	r3, #1
 80063ea:	52a3      	strh	r3, [r4, r2]
 80063ec:	e7a5      	b.n	800633a <HAL_SPI_Receive_DMA+0x96>
    errorcode = HAL_ERROR;
 80063ee:	2001      	movs	r0, #1
 80063f0:	e76f      	b.n	80062d2 <HAL_SPI_Receive_DMA+0x2e>
 80063f2:	2001      	movs	r0, #1
 80063f4:	e76d      	b.n	80062d2 <HAL_SPI_Receive_DMA+0x2e>
  __HAL_LOCK(hspi);
 80063f6:	2002      	movs	r0, #2
 80063f8:	e76e      	b.n	80062d8 <HAL_SPI_Receive_DMA+0x34>
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	ffffdfff 	.word	0xffffdfff
 8006400:	ffffefff 	.word	0xffffefff
 8006404:	08006429 	.word	0x08006429
 8006408:	080064d7 	.word	0x080064d7
 800640c:	08006441 	.word	0x08006441
 8006410:	ffffbfff 	.word	0xffffbfff

08006414 <HAL_SPI_TxCpltCallback>:
}
 8006414:	4770      	bx	lr

08006416 <HAL_SPI_RxCpltCallback>:
}
 8006416:	4770      	bx	lr

08006418 <HAL_SPI_TxRxCpltCallback>:
}
 8006418:	4770      	bx	lr

0800641a <HAL_SPI_TxHalfCpltCallback>:
}
 800641a:	4770      	bx	lr

0800641c <SPI_DMAHalfTransmitCplt>:
{
 800641c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006420:	f7ff fffb 	bl	800641a <HAL_SPI_TxHalfCpltCallback>
}
 8006424:	bd10      	pop	{r4, pc}

08006426 <HAL_SPI_RxHalfCpltCallback>:
}
 8006426:	4770      	bx	lr

08006428 <SPI_DMAHalfReceiveCplt>:
{
 8006428:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_RxHalfCpltCallback(hspi);
 800642c:	f7ff fffb 	bl	8006426 <HAL_SPI_RxHalfCpltCallback>
}
 8006430:	bd10      	pop	{r4, pc}

08006432 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8006432:	4770      	bx	lr

08006434 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006434:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006436:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006438:	f7ff fffb 	bl	8006432 <HAL_SPI_TxRxHalfCpltCallback>
}
 800643c:	bd10      	pop	{r4, pc}

0800643e <HAL_SPI_ErrorCallback>:
}
 800643e:	4770      	bx	lr

08006440 <SPI_DMAError>:
{
 8006440:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006442:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006444:	6802      	ldr	r2, [r0, #0]
 8006446:	6853      	ldr	r3, [r2, #4]
 8006448:	2103      	movs	r1, #3
 800644a:	438b      	bics	r3, r1
 800644c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800644e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006450:	2210      	movs	r2, #16
 8006452:	4313      	orrs	r3, r2
 8006454:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006456:	3a0f      	subs	r2, #15
 8006458:	235d      	movs	r3, #93	; 0x5d
 800645a:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 800645c:	f7ff ffef 	bl	800643e <HAL_SPI_ErrorCallback>
}
 8006460:	bd10      	pop	{r4, pc}

08006462 <SPI_DMATransmitCplt>:
{
 8006462:	b530      	push	{r4, r5, lr}
 8006464:	b083      	sub	sp, #12
 8006466:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006468:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 800646a:	f7fd fa37 	bl	80038dc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	069b      	lsls	r3, r3, #26
 8006474:	d426      	bmi.n	80064c4 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	6853      	ldr	r3, [r2, #4]
 800647a:	2120      	movs	r1, #32
 800647c:	438b      	bics	r3, r1
 800647e:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	6853      	ldr	r3, [r2, #4]
 8006484:	391e      	subs	r1, #30
 8006486:	438b      	bics	r3, r1
 8006488:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800648a:	0002      	movs	r2, r0
 800648c:	3162      	adds	r1, #98	; 0x62
 800648e:	0020      	movs	r0, r4
 8006490:	f7ff fa82 	bl	8005998 <SPI_EndRxTxTransaction>
 8006494:	2800      	cmp	r0, #0
 8006496:	d003      	beq.n	80064a0 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006498:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800649a:	2220      	movs	r2, #32
 800649c:	4313      	orrs	r3, r2
 800649e:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064a0:	68a3      	ldr	r3, [r4, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <SPI_DMATransmitCplt+0x52>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80064b8:	2201      	movs	r2, #1
 80064ba:	335d      	adds	r3, #93	; 0x5d
 80064bc:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <SPI_DMATransmitCplt+0x6c>
  HAL_SPI_TxCpltCallback(hspi);
 80064c4:	0020      	movs	r0, r4
 80064c6:	f7ff ffa5 	bl	8006414 <HAL_SPI_TxCpltCallback>
}
 80064ca:	b003      	add	sp, #12
 80064cc:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80064ce:	0020      	movs	r0, r4
 80064d0:	f7ff ffb5 	bl	800643e <HAL_SPI_ErrorCallback>
      return;
 80064d4:	e7f9      	b.n	80064ca <SPI_DMATransmitCplt+0x68>

080064d6 <SPI_DMAReceiveCplt>:
{
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064da:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80064dc:	f7fd f9fe 	bl	80038dc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	069b      	lsls	r3, r3, #26
 80064e6:	d41b      	bmi.n	8006520 <SPI_DMAReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	6853      	ldr	r3, [r2, #4]
 80064ec:	2120      	movs	r1, #32
 80064ee:	438b      	bics	r3, r1
 80064f0:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	6853      	ldr	r3, [r2, #4]
 80064f6:	391d      	subs	r1, #29
 80064f8:	438b      	bics	r3, r1
 80064fa:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064fc:	0002      	movs	r2, r0
 80064fe:	3161      	adds	r1, #97	; 0x61
 8006500:	0020      	movs	r0, r4
 8006502:	f7ff fa7d 	bl	8005a00 <SPI_EndRxTransaction>
 8006506:	2800      	cmp	r0, #0
 8006508:	d001      	beq.n	800650e <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800650a:	2320      	movs	r3, #32
 800650c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800650e:	2200      	movs	r2, #0
 8006510:	2346      	movs	r3, #70	; 0x46
 8006512:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 8006514:	3201      	adds	r2, #1
 8006516:	3317      	adds	r3, #23
 8006518:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <SPI_DMAReceiveCplt+0x52>
  HAL_SPI_RxCpltCallback(hspi);
 8006520:	0020      	movs	r0, r4
 8006522:	f7ff ff78 	bl	8006416 <HAL_SPI_RxCpltCallback>
}
 8006526:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 8006528:	0020      	movs	r0, r4
 800652a:	f7ff ff88 	bl	800643e <HAL_SPI_ErrorCallback>
      return;
 800652e:	e7fa      	b.n	8006526 <SPI_DMAReceiveCplt+0x50>

08006530 <SPI_DMATransmitReceiveCplt>:
{
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006534:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8006536:	f7fd f9d1 	bl	80038dc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	069b      	lsls	r3, r3, #26
 8006540:	d41e      	bmi.n	8006580 <SPI_DMATransmitReceiveCplt+0x50>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	6853      	ldr	r3, [r2, #4]
 8006546:	2120      	movs	r1, #32
 8006548:	438b      	bics	r3, r1
 800654a:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800654c:	0002      	movs	r2, r0
 800654e:	3144      	adds	r1, #68	; 0x44
 8006550:	0020      	movs	r0, r4
 8006552:	f7ff fa21 	bl	8005998 <SPI_EndRxTxTransaction>
 8006556:	2800      	cmp	r0, #0
 8006558:	d003      	beq.n	8006562 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800655a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800655c:	2220      	movs	r2, #32
 800655e:	4313      	orrs	r3, r2
 8006560:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	6853      	ldr	r3, [r2, #4]
 8006566:	2103      	movs	r1, #3
 8006568:	438b      	bics	r3, r1
 800656a:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006570:	2246      	movs	r2, #70	; 0x46
 8006572:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006574:	3a45      	subs	r2, #69	; 0x45
 8006576:	335d      	adds	r3, #93	; 0x5d
 8006578:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800657a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <SPI_DMATransmitReceiveCplt+0x58>
  HAL_SPI_TxRxCpltCallback(hspi);
 8006580:	0020      	movs	r0, r4
 8006582:	f7ff ff49 	bl	8006418 <HAL_SPI_TxRxCpltCallback>
}
 8006586:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 8006588:	0020      	movs	r0, r4
 800658a:	f7ff ff58 	bl	800643e <HAL_SPI_ErrorCallback>
      return;
 800658e:	e7fa      	b.n	8006586 <SPI_DMATransmitReceiveCplt+0x56>

08006590 <HAL_SPI_GetState>:
  return hspi->State;
 8006590:	235d      	movs	r3, #93	; 0x5d
 8006592:	5cc0      	ldrb	r0, [r0, r3]
 8006594:	b2c0      	uxtb	r0, r0
}
 8006596:	4770      	bx	lr

08006598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659a:	6a03      	ldr	r3, [r0, #32]
 800659c:	2201      	movs	r2, #1
 800659e:	4393      	bics	r3, r2
 80065a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065a6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a8:	2573      	movs	r5, #115	; 0x73
 80065aa:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	680d      	ldr	r5, [r1, #0]
 80065ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b0:	2502      	movs	r5, #2
 80065b2:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065b4:	688d      	ldr	r5, [r1, #8]
 80065b6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b8:	4d15      	ldr	r5, [pc, #84]	; (8006610 <TIM_OC1_SetConfig+0x78>)
 80065ba:	42a8      	cmp	r0, r5
 80065bc:	d020      	beq.n	8006600 <TIM_OC1_SetConfig+0x68>
 80065be:	4d15      	ldr	r5, [pc, #84]	; (8006614 <TIM_OC1_SetConfig+0x7c>)
 80065c0:	42a8      	cmp	r0, r5
 80065c2:	d01d      	beq.n	8006600 <TIM_OC1_SetConfig+0x68>
 80065c4:	4d14      	ldr	r5, [pc, #80]	; (8006618 <TIM_OC1_SetConfig+0x80>)
 80065c6:	42a8      	cmp	r0, r5
 80065c8:	d01a      	beq.n	8006600 <TIM_OC1_SetConfig+0x68>
 80065ca:	4d14      	ldr	r5, [pc, #80]	; (800661c <TIM_OC1_SetConfig+0x84>)
 80065cc:	42a8      	cmp	r0, r5
 80065ce:	d017      	beq.n	8006600 <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	4d0f      	ldr	r5, [pc, #60]	; (8006610 <TIM_OC1_SetConfig+0x78>)
 80065d2:	42a8      	cmp	r0, r5
 80065d4:	d008      	beq.n	80065e8 <TIM_OC1_SetConfig+0x50>
 80065d6:	4d0f      	ldr	r5, [pc, #60]	; (8006614 <TIM_OC1_SetConfig+0x7c>)
 80065d8:	42a8      	cmp	r0, r5
 80065da:	d005      	beq.n	80065e8 <TIM_OC1_SetConfig+0x50>
 80065dc:	4d0e      	ldr	r5, [pc, #56]	; (8006618 <TIM_OC1_SetConfig+0x80>)
 80065de:	42a8      	cmp	r0, r5
 80065e0:	d002      	beq.n	80065e8 <TIM_OC1_SetConfig+0x50>
 80065e2:	4d0e      	ldr	r5, [pc, #56]	; (800661c <TIM_OC1_SetConfig+0x84>)
 80065e4:	42a8      	cmp	r0, r5
 80065e6:	d105      	bne.n	80065f4 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e8:	4d0d      	ldr	r5, [pc, #52]	; (8006620 <TIM_OC1_SetConfig+0x88>)
 80065ea:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ec:	694d      	ldr	r5, [r1, #20]
 80065ee:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f0:	698d      	ldr	r5, [r1, #24]
 80065f2:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f8:	684a      	ldr	r2, [r1, #4]
 80065fa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fc:	6203      	str	r3, [r0, #32]
}
 80065fe:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8006600:	2508      	movs	r5, #8
 8006602:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006604:	68cd      	ldr	r5, [r1, #12]
 8006606:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006608:	2504      	movs	r5, #4
 800660a:	43ab      	bics	r3, r5
 800660c:	e7e0      	b.n	80065d0 <TIM_OC1_SetConfig+0x38>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40014000 	.word	0x40014000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800
 8006620:	fffffcff 	.word	0xfffffcff

08006624 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006626:	6a03      	ldr	r3, [r0, #32]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <TIM_OC3_SetConfig+0x70>)
 800662a:	4013      	ands	r3, r2
 800662c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006632:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006634:	3275      	adds	r2, #117	; 0x75
 8006636:	32ff      	adds	r2, #255	; 0xff
 8006638:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663a:	680a      	ldr	r2, [r1, #0]
 800663c:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663e:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC3_SetConfig+0x74>)
 8006640:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006642:	688a      	ldr	r2, [r1, #8]
 8006644:	0212      	lsls	r2, r2, #8
 8006646:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006648:	4a14      	ldr	r2, [pc, #80]	; (800669c <TIM_OC3_SetConfig+0x78>)
 800664a:	4290      	cmp	r0, r2
 800664c:	d019      	beq.n	8006682 <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	4a13      	ldr	r2, [pc, #76]	; (800669c <TIM_OC3_SetConfig+0x78>)
 8006650:	4290      	cmp	r0, r2
 8006652:	d008      	beq.n	8006666 <TIM_OC3_SetConfig+0x42>
 8006654:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <TIM_OC3_SetConfig+0x7c>)
 8006656:	4290      	cmp	r0, r2
 8006658:	d005      	beq.n	8006666 <TIM_OC3_SetConfig+0x42>
 800665a:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <TIM_OC3_SetConfig+0x80>)
 800665c:	4290      	cmp	r0, r2
 800665e:	d002      	beq.n	8006666 <TIM_OC3_SetConfig+0x42>
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <TIM_OC3_SetConfig+0x84>)
 8006662:	4290      	cmp	r0, r2
 8006664:	d107      	bne.n	8006676 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <TIM_OC3_SetConfig+0x88>)
 8006668:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800666a:	694a      	ldr	r2, [r1, #20]
 800666c:	0112      	lsls	r2, r2, #4
 800666e:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006670:	698a      	ldr	r2, [r1, #24]
 8006672:	0112      	lsls	r2, r2, #4
 8006674:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006678:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800667a:	684a      	ldr	r2, [r1, #4]
 800667c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667e:	6203      	str	r3, [r0, #32]
}
 8006680:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8006682:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <TIM_OC3_SetConfig+0x8c>)
 8006684:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006686:	68ca      	ldr	r2, [r1, #12]
 8006688:	0212      	lsls	r2, r2, #8
 800668a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800668c:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <TIM_OC3_SetConfig+0x90>)
 800668e:	4013      	ands	r3, r2
 8006690:	e7dd      	b.n	800664e <TIM_OC3_SetConfig+0x2a>
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	fffffeff 	.word	0xfffffeff
 8006698:	fffffdff 	.word	0xfffffdff
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400
 80066a8:	40014800 	.word	0x40014800
 80066ac:	ffffcfff 	.word	0xffffcfff
 80066b0:	fffff7ff 	.word	0xfffff7ff
 80066b4:	fffffbff 	.word	0xfffffbff

080066b8 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ba:	6a03      	ldr	r3, [r0, #32]
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <TIM_OC4_SetConfig+0x54>)
 80066be:	4013      	ands	r3, r2
 80066c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c8:	4c11      	ldr	r4, [pc, #68]	; (8006710 <TIM_OC4_SetConfig+0x58>)
 80066ca:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066cc:	680c      	ldr	r4, [r1, #0]
 80066ce:	0224      	lsls	r4, r4, #8
 80066d0:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d2:	4c10      	ldr	r4, [pc, #64]	; (8006714 <TIM_OC4_SetConfig+0x5c>)
 80066d4:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d6:	688c      	ldr	r4, [r1, #8]
 80066d8:	0324      	lsls	r4, r4, #12
 80066da:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	4c0e      	ldr	r4, [pc, #56]	; (8006718 <TIM_OC4_SetConfig+0x60>)
 80066de:	42a0      	cmp	r0, r4
 80066e0:	d008      	beq.n	80066f4 <TIM_OC4_SetConfig+0x3c>
 80066e2:	4c0e      	ldr	r4, [pc, #56]	; (800671c <TIM_OC4_SetConfig+0x64>)
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d005      	beq.n	80066f4 <TIM_OC4_SetConfig+0x3c>
 80066e8:	4c0d      	ldr	r4, [pc, #52]	; (8006720 <TIM_OC4_SetConfig+0x68>)
 80066ea:	42a0      	cmp	r0, r4
 80066ec:	d002      	beq.n	80066f4 <TIM_OC4_SetConfig+0x3c>
 80066ee:	4c0d      	ldr	r4, [pc, #52]	; (8006724 <TIM_OC4_SetConfig+0x6c>)
 80066f0:	42a0      	cmp	r0, r4
 80066f2:	d104      	bne.n	80066fe <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066f4:	4c0c      	ldr	r4, [pc, #48]	; (8006728 <TIM_OC4_SetConfig+0x70>)
 80066f6:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f8:	694d      	ldr	r5, [r1, #20]
 80066fa:	01ad      	lsls	r5, r5, #6
 80066fc:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fe:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006700:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006702:	684a      	ldr	r2, [r1, #4]
 8006704:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006706:	6203      	str	r3, [r0, #32]
}
 8006708:	bd30      	pop	{r4, r5, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	ffffefff 	.word	0xffffefff
 8006710:	ffff8cff 	.word	0xffff8cff
 8006714:	ffffdfff 	.word	0xffffdfff
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800
 8006728:	ffffbfff 	.word	0xffffbfff

0800672c <HAL_TIM_Base_MspInit>:
}
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800672e:	6803      	ldr	r3, [r0, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	2101      	movs	r1, #1
 8006734:	430a      	orrs	r2, r1
 8006736:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8006738:	6802      	ldr	r2, [r0, #0]
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	430b      	orrs	r3, r1
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	2000      	movs	r0, #0
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006744:	4770      	bx	lr

08006746 <HAL_TIM_IC_CaptureCallback>:
}
 8006746:	4770      	bx	lr

08006748 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_TriggerCallback>:
}
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_IRQHandler>:
{
 800674c:	b510      	push	{r4, lr}
 800674e:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006750:	6803      	ldr	r3, [r0, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	0792      	lsls	r2, r2, #30
 8006756:	d50f      	bpl.n	8006778 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	0792      	lsls	r2, r2, #30
 800675c:	d50c      	bpl.n	8006778 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800675e:	2203      	movs	r2, #3
 8006760:	4252      	negs	r2, r2
 8006762:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006764:	2301      	movs	r3, #1
 8006766:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006768:	6803      	ldr	r3, [r0, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	079b      	lsls	r3, r3, #30
 800676e:	d063      	beq.n	8006838 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8006770:	f7ff ffe9 	bl	8006746 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006774:	2300      	movs	r3, #0
 8006776:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	0752      	lsls	r2, r2, #29
 800677e:	d512      	bpl.n	80067a6 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	0752      	lsls	r2, r2, #29
 8006784:	d50f      	bpl.n	80067a6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006786:	2205      	movs	r2, #5
 8006788:	4252      	negs	r2, r2
 800678a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800678c:	2302      	movs	r3, #2
 800678e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	699a      	ldr	r2, [r3, #24]
 8006794:	23c0      	movs	r3, #192	; 0xc0
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	421a      	tst	r2, r3
 800679a:	d053      	beq.n	8006844 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800679c:	0020      	movs	r0, r4
 800679e:	f7ff ffd2 	bl	8006746 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	2300      	movs	r3, #0
 80067a4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	0712      	lsls	r2, r2, #28
 80067ac:	d510      	bpl.n	80067d0 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	0712      	lsls	r2, r2, #28
 80067b2:	d50d      	bpl.n	80067d0 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067b4:	2209      	movs	r2, #9
 80067b6:	4252      	negs	r2, r2
 80067b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ba:	2304      	movs	r3, #4
 80067bc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	079b      	lsls	r3, r3, #30
 80067c4:	d045      	beq.n	8006852 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80067c6:	0020      	movs	r0, r4
 80067c8:	f7ff ffbd 	bl	8006746 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067cc:	2300      	movs	r3, #0
 80067ce:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	06d2      	lsls	r2, r2, #27
 80067d6:	d512      	bpl.n	80067fe <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	06d2      	lsls	r2, r2, #27
 80067dc:	d50f      	bpl.n	80067fe <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067de:	2211      	movs	r2, #17
 80067e0:	4252      	negs	r2, r2
 80067e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e4:	2308      	movs	r3, #8
 80067e6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	23c0      	movs	r3, #192	; 0xc0
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	421a      	tst	r2, r3
 80067f2:	d035      	beq.n	8006860 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80067f4:	0020      	movs	r0, r4
 80067f6:	f7ff ffa6 	bl	8006746 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	2300      	movs	r3, #0
 80067fc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	07d2      	lsls	r2, r2, #31
 8006804:	d502      	bpl.n	800680c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	07d2      	lsls	r2, r2, #31
 800680a:	d430      	bmi.n	800686e <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	0612      	lsls	r2, r2, #24
 8006812:	d502      	bpl.n	800681a <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	0612      	lsls	r2, r2, #24
 8006818:	d430      	bmi.n	800687c <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	0652      	lsls	r2, r2, #25
 8006820:	d502      	bpl.n	8006828 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	0652      	lsls	r2, r2, #25
 8006826:	d430      	bmi.n	800688a <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d502      	bpl.n	8006836 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	0692      	lsls	r2, r2, #26
 8006834:	d430      	bmi.n	8006898 <HAL_TIM_IRQHandler+0x14c>
}
 8006836:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006838:	f7ff ff84 	bl	8006744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	0020      	movs	r0, r4
 800683e:	f7ff ff83 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
 8006842:	e797      	b.n	8006774 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006844:	0020      	movs	r0, r4
 8006846:	f7ff ff7d 	bl	8006744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684a:	0020      	movs	r0, r4
 800684c:	f7ff ff7c 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
 8006850:	e7a7      	b.n	80067a2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	0020      	movs	r0, r4
 8006854:	f7ff ff76 	bl	8006744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	0020      	movs	r0, r4
 800685a:	f7ff ff75 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
 800685e:	e7b5      	b.n	80067cc <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006860:	0020      	movs	r0, r4
 8006862:	f7ff ff6f 	bl	8006744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006866:	0020      	movs	r0, r4
 8006868:	f7ff ff6e 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
 800686c:	e7c5      	b.n	80067fa <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800686e:	2202      	movs	r2, #2
 8006870:	4252      	negs	r2, r2
 8006872:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006874:	0020      	movs	r0, r4
 8006876:	f7fc fe69 	bl	800354c <HAL_TIM_PeriodElapsedCallback>
 800687a:	e7c7      	b.n	800680c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800687c:	2281      	movs	r2, #129	; 0x81
 800687e:	4252      	negs	r2, r2
 8006880:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006882:	0020      	movs	r0, r4
 8006884:	f000 f9b5 	bl	8006bf2 <HAL_TIMEx_BreakCallback>
 8006888:	e7c7      	b.n	800681a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800688a:	2241      	movs	r2, #65	; 0x41
 800688c:	4252      	negs	r2, r2
 800688e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006890:	0020      	movs	r0, r4
 8006892:	f7ff ff5a 	bl	800674a <HAL_TIM_TriggerCallback>
 8006896:	e7c7      	b.n	8006828 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	4252      	negs	r2, r2
 800689c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800689e:	0020      	movs	r0, r4
 80068a0:	f000 f9a6 	bl	8006bf0 <HAL_TIMEx_CommutationCallback>
}
 80068a4:	e7c7      	b.n	8006836 <HAL_TIM_IRQHandler+0xea>
	...

080068a8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80068a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_Base_SetConfig+0x88>)
 80068ac:	4290      	cmp	r0, r2
 80068ae:	d03a      	beq.n	8006926 <TIM_Base_SetConfig+0x7e>
 80068b0:	2280      	movs	r2, #128	; 0x80
 80068b2:	05d2      	lsls	r2, r2, #23
 80068b4:	4290      	cmp	r0, r2
 80068b6:	d036      	beq.n	8006926 <TIM_Base_SetConfig+0x7e>
 80068b8:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <TIM_Base_SetConfig+0x8c>)
 80068ba:	4290      	cmp	r0, r2
 80068bc:	d033      	beq.n	8006926 <TIM_Base_SetConfig+0x7e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <TIM_Base_SetConfig+0x88>)
 80068c0:	4290      	cmp	r0, r2
 80068c2:	d012      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	05d2      	lsls	r2, r2, #23
 80068c8:	4290      	cmp	r0, r2
 80068ca:	d00e      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <TIM_Base_SetConfig+0x8c>)
 80068ce:	4290      	cmp	r0, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068d2:	4a19      	ldr	r2, [pc, #100]	; (8006938 <TIM_Base_SetConfig+0x90>)
 80068d4:	4290      	cmp	r0, r2
 80068d6:	d008      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <TIM_Base_SetConfig+0x94>)
 80068da:	4290      	cmp	r0, r2
 80068dc:	d005      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <TIM_Base_SetConfig+0x98>)
 80068e0:	4290      	cmp	r0, r2
 80068e2:	d002      	beq.n	80068ea <TIM_Base_SetConfig+0x42>
 80068e4:	4a17      	ldr	r2, [pc, #92]	; (8006944 <TIM_Base_SetConfig+0x9c>)
 80068e6:	4290      	cmp	r0, r2
 80068e8:	d103      	bne.n	80068f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <TIM_Base_SetConfig+0xa0>)
 80068ec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ee:	68ca      	ldr	r2, [r1, #12]
 80068f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	4393      	bics	r3, r2
 80068f6:	694a      	ldr	r2, [r1, #20]
 80068f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80068fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	688b      	ldr	r3, [r1, #8]
 80068fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006900:	680b      	ldr	r3, [r1, #0]
 8006902:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <TIM_Base_SetConfig+0x88>)
 8006906:	4298      	cmp	r0, r3
 8006908:	d008      	beq.n	800691c <TIM_Base_SetConfig+0x74>
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <TIM_Base_SetConfig+0x94>)
 800690c:	4298      	cmp	r0, r3
 800690e:	d005      	beq.n	800691c <TIM_Base_SetConfig+0x74>
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <TIM_Base_SetConfig+0x98>)
 8006912:	4298      	cmp	r0, r3
 8006914:	d002      	beq.n	800691c <TIM_Base_SetConfig+0x74>
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <TIM_Base_SetConfig+0x9c>)
 8006918:	4298      	cmp	r0, r3
 800691a:	d101      	bne.n	8006920 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 800691c:	690b      	ldr	r3, [r1, #16]
 800691e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006920:	2301      	movs	r3, #1
 8006922:	6143      	str	r3, [r0, #20]
}
 8006924:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006926:	2270      	movs	r2, #112	; 0x70
 8006928:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800692a:	684a      	ldr	r2, [r1, #4]
 800692c:	4313      	orrs	r3, r2
 800692e:	e7c6      	b.n	80068be <TIM_Base_SetConfig+0x16>
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40000400 	.word	0x40000400
 8006938:	40002000 	.word	0x40002000
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800
 8006948:	fffffcff 	.word	0xfffffcff

0800694c <HAL_TIM_Base_Init>:
{
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8006950:	d014      	beq.n	800697c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8006952:	233d      	movs	r3, #61	; 0x3d
 8006954:	5cc3      	ldrb	r3, [r0, r3]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800695a:	253d      	movs	r5, #61	; 0x3d
 800695c:	2302      	movs	r3, #2
 800695e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006960:	1d21      	adds	r1, r4, #4
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	f7ff ffa0 	bl	80068a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8006968:	2301      	movs	r3, #1
 800696a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800696c:	2000      	movs	r0, #0
}
 800696e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006970:	2200      	movs	r2, #0
 8006972:	333c      	adds	r3, #60	; 0x3c
 8006974:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8006976:	f7ff fed9 	bl	800672c <HAL_TIM_Base_MspInit>
 800697a:	e7ee      	b.n	800695a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800697c:	2001      	movs	r0, #1
 800697e:	e7f6      	b.n	800696e <HAL_TIM_Base_Init+0x22>

08006980 <HAL_TIM_PWM_Init>:
{
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8006984:	d014      	beq.n	80069b0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8006986:	233d      	movs	r3, #61	; 0x3d
 8006988:	5cc3      	ldrb	r3, [r0, r3]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800698e:	253d      	movs	r5, #61	; 0x3d
 8006990:	2302      	movs	r3, #2
 8006992:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	1d21      	adds	r1, r4, #4
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	f7ff ff86 	bl	80068a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800699c:	2301      	movs	r3, #1
 800699e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80069a0:	2000      	movs	r0, #0
}
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80069a4:	2200      	movs	r2, #0
 80069a6:	333c      	adds	r3, #60	; 0x3c
 80069a8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80069aa:	f7fc fe73 	bl	8003694 <HAL_TIM_PWM_MspInit>
 80069ae:	e7ee      	b.n	800698e <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80069b0:	2001      	movs	r0, #1
 80069b2:	e7f6      	b.n	80069a2 <HAL_TIM_PWM_Init+0x22>

080069b4 <TIM_OC2_SetConfig>:
{
 80069b4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b6:	6a03      	ldr	r3, [r0, #32]
 80069b8:	2210      	movs	r2, #16
 80069ba:	4393      	bics	r3, r2
 80069bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80069be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80069c0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80069c2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c4:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <TIM_OC2_SetConfig+0x70>)
 80069c6:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	680a      	ldr	r2, [r1, #0]
 80069ca:	0212      	lsls	r2, r2, #8
 80069cc:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80069ce:	2220      	movs	r2, #32
 80069d0:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069d2:	688a      	ldr	r2, [r1, #8]
 80069d4:	0112      	lsls	r2, r2, #4
 80069d6:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <TIM_OC2_SetConfig+0x74>)
 80069da:	4290      	cmp	r0, r2
 80069dc:	d019      	beq.n	8006a12 <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <TIM_OC2_SetConfig+0x74>)
 80069e0:	4290      	cmp	r0, r2
 80069e2:	d008      	beq.n	80069f6 <TIM_OC2_SetConfig+0x42>
 80069e4:	4a11      	ldr	r2, [pc, #68]	; (8006a2c <TIM_OC2_SetConfig+0x78>)
 80069e6:	4290      	cmp	r0, r2
 80069e8:	d005      	beq.n	80069f6 <TIM_OC2_SetConfig+0x42>
 80069ea:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <TIM_OC2_SetConfig+0x7c>)
 80069ec:	4290      	cmp	r0, r2
 80069ee:	d002      	beq.n	80069f6 <TIM_OC2_SetConfig+0x42>
 80069f0:	4a10      	ldr	r2, [pc, #64]	; (8006a34 <TIM_OC2_SetConfig+0x80>)
 80069f2:	4290      	cmp	r0, r2
 80069f4:	d107      	bne.n	8006a06 <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069f6:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <TIM_OC2_SetConfig+0x84>)
 80069f8:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069fa:	694a      	ldr	r2, [r1, #20]
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a00:	698a      	ldr	r2, [r1, #24]
 8006a02:	0092      	lsls	r2, r2, #2
 8006a04:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8006a06:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006a08:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006a0a:	684a      	ldr	r2, [r1, #4]
 8006a0c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006a0e:	6203      	str	r3, [r0, #32]
}
 8006a10:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a12:	2280      	movs	r2, #128	; 0x80
 8006a14:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a16:	68ca      	ldr	r2, [r1, #12]
 8006a18:	0112      	lsls	r2, r2, #4
 8006a1a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	4393      	bics	r3, r2
 8006a20:	e7dd      	b.n	80069de <TIM_OC2_SetConfig+0x2a>
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	ffff8cff 	.word	0xffff8cff
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800
 8006a38:	fffff3ff 	.word	0xfffff3ff

08006a3c <HAL_TIM_PWM_ConfigChannel>:
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	0004      	movs	r4, r0
 8006a40:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8006a42:	233c      	movs	r3, #60	; 0x3c
 8006a44:	5cc3      	ldrb	r3, [r0, r3]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d069      	beq.n	8006b1e <HAL_TIM_PWM_ConfigChannel+0xe2>
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	233c      	movs	r3, #60	; 0x3c
 8006a4e:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	3101      	adds	r1, #1
 8006a52:	3301      	adds	r3, #1
 8006a54:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8006a56:	2a04      	cmp	r2, #4
 8006a58:	d037      	beq.n	8006aca <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006a5a:	d919      	bls.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x54>
 8006a5c:	2a08      	cmp	r2, #8
 8006a5e:	d04a      	beq.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006a60:	2a0c      	cmp	r2, #12
 8006a62:	d12a      	bne.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a64:	0029      	movs	r1, r5
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f7ff fe26 	bl	80066b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	69d1      	ldr	r1, [r2, #28]
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	430b      	orrs	r3, r1
 8006a76:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	69d3      	ldr	r3, [r2, #28]
 8006a7c:	4929      	ldr	r1, [pc, #164]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	69cb      	ldr	r3, [r1, #28]
 8006a86:	692a      	ldr	r2, [r5, #16]
 8006a88:	0212      	lsls	r2, r2, #8
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61cb      	str	r3, [r1, #28]
    break;
 8006a8e:	e014      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d112      	bne.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a94:	0029      	movs	r1, r5
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	f7ff fd7e 	bl	8006598 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	6993      	ldr	r3, [r2, #24]
 8006aa0:	2108      	movs	r1, #8
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	6993      	ldr	r3, [r2, #24]
 8006aaa:	3904      	subs	r1, #4
 8006aac:	438b      	bics	r3, r1
 8006aae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	6993      	ldr	r3, [r2, #24]
 8006ab4:	6929      	ldr	r1, [r5, #16]
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006aba:	2201      	movs	r2, #1
 8006abc:	233d      	movs	r3, #61	; 0x3d
 8006abe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8006ac6:	2000      	movs	r0, #0
}
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aca:	0029      	movs	r1, r5
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f7ff ff71 	bl	80069b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	6991      	ldr	r1, [r2, #24]
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	6993      	ldr	r3, [r2, #24]
 8006ae2:	4910      	ldr	r1, [pc, #64]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8006ae4:	400b      	ands	r3, r1
 8006ae6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae8:	6821      	ldr	r1, [r4, #0]
 8006aea:	698b      	ldr	r3, [r1, #24]
 8006aec:	692a      	ldr	r2, [r5, #16]
 8006aee:	0212      	lsls	r2, r2, #8
 8006af0:	4313      	orrs	r3, r2
 8006af2:	618b      	str	r3, [r1, #24]
    break;
 8006af4:	e7e1      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af6:	0029      	movs	r1, r5
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f7ff fd93 	bl	8006624 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	69d3      	ldr	r3, [r2, #28]
 8006b02:	2108      	movs	r1, #8
 8006b04:	430b      	orrs	r3, r1
 8006b06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	69d3      	ldr	r3, [r2, #28]
 8006b0c:	3904      	subs	r1, #4
 8006b0e:	438b      	bics	r3, r1
 8006b10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	69d3      	ldr	r3, [r2, #28]
 8006b16:	6929      	ldr	r1, [r5, #16]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	61d3      	str	r3, [r2, #28]
    break;
 8006b1c:	e7cd      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8006b1e:	2002      	movs	r0, #2
 8006b20:	e7d2      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	fffffbff 	.word	0xfffffbff

08006b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b28:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006b2a:	2401      	movs	r4, #1
 8006b2c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b2e:	6a03      	ldr	r3, [r0, #32]
 8006b30:	43a3      	bics	r3, r4
 8006b32:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8006b34:	6a03      	ldr	r3, [r0, #32]
 8006b36:	408a      	lsls	r2, r1
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	6202      	str	r2, [r0, #32]
}
 8006b3c:	bd10      	pop	{r4, pc}
	...

08006b40 <HAL_TIM_PWM_Start>:
{
 8006b40:	b510      	push	{r4, lr}
 8006b42:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b44:	2201      	movs	r2, #1
 8006b46:	6800      	ldr	r0, [r0, #0]
 8006b48:	f7ff ffee 	bl	8006b28 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <HAL_TIM_PWM_Start+0x54>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d019      	beq.n	8006b88 <HAL_TIM_PWM_Start+0x48>
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <HAL_TIM_PWM_Start+0x58>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_TIM_PWM_Start+0x4c>
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <HAL_TIM_PWM_Start+0x5c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d017      	beq.n	8006b90 <HAL_TIM_PWM_Start+0x50>
 8006b60:	4a0f      	ldr	r2, [pc, #60]	; (8006ba0 <HAL_TIM_PWM_Start+0x60>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_TIM_PWM_Start+0x44>
 8006b66:	2200      	movs	r2, #0
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8006b6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006b6e:	2280      	movs	r2, #128	; 0x80
 8006b70:	0212      	lsls	r2, r2, #8
 8006b72:	430a      	orrs	r2, r1
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]
}
 8006b80:	2000      	movs	r0, #0
 8006b82:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b84:	2201      	movs	r2, #1
 8006b86:	e7ef      	b.n	8006b68 <HAL_TIM_PWM_Start+0x28>
 8006b88:	2201      	movs	r2, #1
 8006b8a:	e7ed      	b.n	8006b68 <HAL_TIM_PWM_Start+0x28>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	e7eb      	b.n	8006b68 <HAL_TIM_PWM_Start+0x28>
 8006b90:	2201      	movs	r2, #1
 8006b92:	e7e9      	b.n	8006b68 <HAL_TIM_PWM_Start+0x28>
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8006ba6:	233c      	movs	r3, #60	; 0x3c
 8006ba8:	5cc3      	ldrb	r3, [r0, r3]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d01e      	beq.n	8006bec <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8006bae:	223c      	movs	r2, #60	; 0x3c
 8006bb0:	2501      	movs	r5, #1
 8006bb2:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	243d      	movs	r4, #61	; 0x3d
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006bba:	6806      	ldr	r6, [r0, #0]
 8006bbc:	6873      	ldr	r3, [r6, #4]
 8006bbe:	2770      	movs	r7, #112	; 0x70
 8006bc0:	43bb      	bics	r3, r7
 8006bc2:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc4:	6806      	ldr	r6, [r0, #0]
 8006bc6:	6873      	ldr	r3, [r6, #4]
 8006bc8:	680f      	ldr	r7, [r1, #0]
 8006bca:	433b      	orrs	r3, r7
 8006bcc:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006bce:	6806      	ldr	r6, [r0, #0]
 8006bd0:	68b3      	ldr	r3, [r6, #8]
 8006bd2:	2780      	movs	r7, #128	; 0x80
 8006bd4:	43bb      	bics	r3, r7
 8006bd6:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006bd8:	6806      	ldr	r6, [r0, #0]
 8006bda:	68b3      	ldr	r3, [r6, #8]
 8006bdc:	6849      	ldr	r1, [r1, #4]
 8006bde:	430b      	orrs	r3, r1
 8006be0:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8006be2:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8006be4:	2300      	movs	r3, #0
 8006be6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8006be8:	2000      	movs	r0, #0
}
 8006bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8006bec:	2002      	movs	r0, #2
 8006bee:	e7fc      	b.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0x46>

08006bf0 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8006bf4:	2329      	movs	r3, #41	; 0x29
 8006bf6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8006bf8:	4800      	ldr	r0, [pc, #0]	; (8006bfc <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8006bfa:	4770      	bx	lr
 8006bfc:	20000040 	.word	0x20000040

08006c00 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006c00:	2386      	movs	r3, #134	; 0x86
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	58c2      	ldr	r2, [r0, r3]
 8006c06:	2100      	movs	r1, #0
 8006c08:	3bc9      	subs	r3, #201	; 0xc9
 8006c0a:	3bff      	subs	r3, #255	; 0xff
 8006c0c:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
}
 8006c0e:	2000      	movs	r0, #0
 8006c10:	4770      	bx	lr

08006c12 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c12:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8006c14:	2386      	movs	r3, #134	; 0x86
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	58c4      	ldr	r4, [r0, r3]

  if (hhid->IsReportAvailable == 1)
 8006c1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d001      	beq.n	8006c24 <USBD_CUSTOM_HID_EP0_RxReady+0x12>
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
  }

  return USBD_OK;
}
 8006c20:	2000      	movs	r0, #0
 8006c22:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8006c24:	2387      	movs	r3, #135	; 0x87
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	58c3      	ldr	r3, [r0, r3]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	7861      	ldrb	r1, [r4, #1]
 8006c2e:	7820      	ldrb	r0, [r4, #0]
 8006c30:	4798      	blx	r3
    hhid->IsReportAvailable = 0;      
 8006c32:	2300      	movs	r3, #0
 8006c34:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006c36:	e7f3      	b.n	8006c20 <USBD_CUSTOM_HID_EP0_RxReady+0xe>

08006c38 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006c38:	230a      	movs	r3, #10
 8006c3a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8006c3c:	4800      	ldr	r0, [pc, #0]	; (8006c40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8006c3e:	4770      	bx	lr
 8006c40:	20000078 	.word	0x20000078

08006c44 <USBD_CUSTOM_HID_DataOut>:
{
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	0004      	movs	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8006c48:	2386      	movs	r3, #134	; 0x86
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	58c5      	ldr	r5, [r0, r3]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8006c4e:	3304      	adds	r3, #4
 8006c50:	58c3      	ldr	r3, [r0, r3]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	7869      	ldrb	r1, [r5, #1]
 8006c56:	7828      	ldrb	r0, [r5, #0]
 8006c58:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	002a      	movs	r2, r5
 8006c5e:	2101      	movs	r1, #1
 8006c60:	0020      	movs	r0, r4
 8006c62:	f000 ff1d 	bl	8007aa0 <USBD_LL_PrepareReceive>
}
 8006c66:	2000      	movs	r0, #0
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c6c <USBD_CUSTOM_HID_Setup>:
{
 8006c6c:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006c6e:	2386      	movs	r3, #134	; 0x86
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	58c4      	ldr	r4, [r0, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c74:	780a      	ldrb	r2, [r1, #0]
 8006c76:	3bb9      	subs	r3, #185	; 0xb9
 8006c78:	3bff      	subs	r3, #255	; 0xff
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d02d      	beq.n	8006cda <USBD_CUSTOM_HID_Setup+0x6e>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d15e      	bne.n	8006d40 <USBD_CUSTOM_HID_Setup+0xd4>
    switch (req->bRequest)
 8006c82:	784b      	ldrb	r3, [r1, #1]
 8006c84:	2b0b      	cmp	r3, #11
 8006c86:	d824      	bhi.n	8006cd2 <USBD_CUSTOM_HID_Setup+0x66>
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a2e      	ldr	r2, [pc, #184]	; (8006d44 <USBD_CUSTOM_HID_Setup+0xd8>)
 8006c8c:	58d3      	ldr	r3, [r2, r3]
 8006c8e:	469f      	mov	pc, r3
      hhid->Protocol = (uint8_t)(req->wValue);
 8006c90:	788b      	ldrb	r3, [r1, #2]
 8006c92:	6423      	str	r3, [r4, #64]	; 0x40
  return USBD_OK;
 8006c94:	2000      	movs	r0, #0
      break;
 8006c96:	e054      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->Protocol,
 8006c98:	0021      	movs	r1, r4
 8006c9a:	3140      	adds	r1, #64	; 0x40
      USBD_CtlSendData (pdev, 
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f000 fcc1 	bl	8007624 <USBD_CtlSendData>
  return USBD_OK;
 8006ca2:	2000      	movs	r0, #0
      break;
 8006ca4:	e04d      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ca6:	884b      	ldrh	r3, [r1, #2]
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	6463      	str	r3, [r4, #68]	; 0x44
  return USBD_OK;
 8006cac:	2000      	movs	r0, #0
      break;
 8006cae:	e048      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->IdleState,
 8006cb0:	0021      	movs	r1, r4
 8006cb2:	3144      	adds	r1, #68	; 0x44
      USBD_CtlSendData (pdev, 
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f000 fcb5 	bl	8007624 <USBD_CtlSendData>
  return USBD_OK;
 8006cba:	2000      	movs	r0, #0
      break;      
 8006cbc:	e041      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IsReportAvailable = 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	64e3      	str	r3, [r4, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8006cc2:	88cb      	ldrh	r3, [r1, #6]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	0021      	movs	r1, r4
 8006cca:	f000 fcc1 	bl	8007650 <USBD_CtlPrepareRx>
  return USBD_OK;
 8006cce:	2000      	movs	r0, #0
      break;
 8006cd0:	e037      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
      USBD_CtlError (pdev, req);
 8006cd2:	f000 fa16 	bl	8007102 <USBD_CtlError>
      return USBD_FAIL; 
 8006cd6:	2002      	movs	r0, #2
 8006cd8:	e033      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
    switch (req->bRequest)
 8006cda:	784b      	ldrb	r3, [r1, #1]
 8006cdc:	2b0a      	cmp	r3, #10
 8006cde:	d024      	beq.n	8006d2a <USBD_CUSTOM_HID_Setup+0xbe>
 8006ce0:	2b0b      	cmp	r3, #11
 8006ce2:	d029      	beq.n	8006d38 <USBD_CUSTOM_HID_Setup+0xcc>
 8006ce4:	2b06      	cmp	r3, #6
 8006ce6:	d001      	beq.n	8006cec <USBD_CUSTOM_HID_Setup+0x80>
  return USBD_OK;
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e02a      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006cec:	884b      	ldrh	r3, [r1, #2]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	2b22      	cmp	r3, #34	; 0x22
 8006cf2:	d007      	beq.n	8006d04 <USBD_CUSTOM_HID_Setup+0x98>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006cf4:	2b21      	cmp	r3, #33	; 0x21
 8006cf6:	d010      	beq.n	8006d1a <USBD_CUSTOM_HID_Setup+0xae>
  uint8_t  *pbuf = NULL;
 8006cf8:	2100      	movs	r1, #0
  uint16_t len = 0;
 8006cfa:	2200      	movs	r2, #0
      USBD_CtlSendData (pdev, 
 8006cfc:	f000 fc92 	bl	8007624 <USBD_CtlSendData>
  return USBD_OK;
 8006d00:	2000      	movs	r0, #0
      break;
 8006d02:	e01e      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8006d04:	88cb      	ldrh	r3, [r1, #6]
 8006d06:	1c1a      	adds	r2, r3, #0
 8006d08:	2b4a      	cmp	r3, #74	; 0x4a
 8006d0a:	d900      	bls.n	8006d0e <USBD_CUSTOM_HID_Setup+0xa2>
 8006d0c:	224a      	movs	r2, #74	; 0x4a
 8006d0e:	b292      	uxth	r2, r2
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006d10:	2387      	movs	r3, #135	; 0x87
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	58c3      	ldr	r3, [r0, r3]
 8006d16:	6819      	ldr	r1, [r3, #0]
 8006d18:	e7f0      	b.n	8006cfc <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8006d1a:	88cb      	ldrh	r3, [r1, #6]
 8006d1c:	1c1a      	adds	r2, r3, #0
 8006d1e:	2b09      	cmp	r3, #9
 8006d20:	d900      	bls.n	8006d24 <USBD_CUSTOM_HID_Setup+0xb8>
 8006d22:	2209      	movs	r2, #9
 8006d24:	b292      	uxth	r2, r2
        pbuf = USBD_CUSTOM_HID_Desc;   
 8006d26:	4908      	ldr	r1, [pc, #32]	; (8006d48 <USBD_CUSTOM_HID_Setup+0xdc>)
 8006d28:	e7e8      	b.n	8006cfc <USBD_CUSTOM_HID_Setup+0x90>
                        (uint8_t *)&hhid->AltSetting,
 8006d2a:	0021      	movs	r1, r4
 8006d2c:	3148      	adds	r1, #72	; 0x48
      USBD_CtlSendData (pdev,
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f000 fc78 	bl	8007624 <USBD_CtlSendData>
  return USBD_OK;
 8006d34:	2000      	movs	r0, #0
      break;
 8006d36:	e004      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8006d38:	788b      	ldrb	r3, [r1, #2]
 8006d3a:	64a3      	str	r3, [r4, #72]	; 0x48
  return USBD_OK;
 8006d3c:	2000      	movs	r0, #0
      break;
 8006d3e:	e000      	b.n	8006d42 <USBD_CUSTOM_HID_Setup+0xd6>
  return USBD_OK;
 8006d40:	2000      	movs	r0, #0
}
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	080093f0 	.word	0x080093f0
 8006d48:	2000006c 	.word	0x2000006c

08006d4c <USBD_CUSTOM_HID_DeInit>:
{
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev,
 8006d50:	2181      	movs	r1, #129	; 0x81
 8006d52:	f000 fe5e 	bl	8007a12 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8006d56:	2101      	movs	r1, #1
 8006d58:	0020      	movs	r0, r4
 8006d5a:	f000 fe5a 	bl	8007a12 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8006d5e:	2386      	movs	r3, #134	; 0x86
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	58e3      	ldr	r3, [r4, r3]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d68:	2387      	movs	r3, #135	; 0x87
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	58e3      	ldr	r3, [r4, r3]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d72:	2586      	movs	r5, #134	; 0x86
 8006d74:	00ad      	lsls	r5, r5, #2
 8006d76:	5960      	ldr	r0, [r4, r5]
 8006d78:	f000 fea0 	bl	8007abc <USBD_static_free>
    pdev->pClassData = NULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	5163      	str	r3, [r4, r5]
}
 8006d80:	2000      	movs	r0, #0
 8006d82:	bd70      	pop	{r4, r5, r6, pc}

08006d84 <USBD_CUSTOM_HID_Init>:
{
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 8006d88:	2302      	movs	r3, #2
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	2181      	movs	r1, #129	; 0x81
 8006d8e:	f000 fe34 	bl	80079fa <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8006d92:	2302      	movs	r3, #2
 8006d94:	2203      	movs	r2, #3
 8006d96:	2101      	movs	r1, #1
 8006d98:	0020      	movs	r0, r4
 8006d9a:	f000 fe2e 	bl	80079fa <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8006d9e:	2054      	movs	r0, #84	; 0x54
 8006da0:	f000 fe88 	bl	8007ab4 <USBD_static_malloc>
 8006da4:	0005      	movs	r5, r0
 8006da6:	2386      	movs	r3, #134	; 0x86
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	50e0      	str	r0, [r4, r3]
  if(pdev->pClassData == NULL)
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d010      	beq.n	8006dd2 <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 8006db0:	2200      	movs	r2, #0
 8006db2:	3bc9      	subs	r3, #201	; 0xc9
 8006db4:	3bff      	subs	r3, #255	; 0xff
 8006db6:	54c2      	strb	r2, [r0, r3]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006db8:	33cd      	adds	r3, #205	; 0xcd
 8006dba:	33ff      	adds	r3, #255	; 0xff
 8006dbc:	58e3      	ldr	r3, [r4, r3]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	002a      	movs	r2, r5
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	0020      	movs	r0, r4
 8006dca:	f000 fe69 	bl	8007aa0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8006dce:	2000      	movs	r0, #0
}
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e7fc      	b.n	8006dd0 <USBD_CUSTOM_HID_Init+0x4c>

08006dd6 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d004      	beq.n	8006de4 <USBD_CUSTOM_HID_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 8006dda:	2387      	movs	r3, #135	; 0x87
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 8006de0:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8006de2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006de4:	2002      	movs	r0, #2
 8006de6:	e7fc      	b.n	8006de2 <USBD_CUSTOM_HID_RegisterInterface+0xc>

08006de8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006de8:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d016      	beq.n	8006e1c <USBD_Init+0x34>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006dee:	2385      	movs	r3, #133	; 0x85
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	58c3      	ldr	r3, [r0, r3]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 8006df8:	2400      	movs	r4, #0
 8006dfa:	2385      	movs	r3, #133	; 0x85
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d002      	beq.n	8006e0a <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8006e04:	2384      	movs	r3, #132	; 0x84
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	23fe      	movs	r3, #254	; 0xfe
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8006e12:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e14:	f000 fdae 	bl	8007974 <USBD_LL_Init>
  
  return USBD_OK; 
 8006e18:	2000      	movs	r0, #0
}
 8006e1a:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	e7fc      	b.n	8006e1a <USBD_Init+0x32>

08006e20 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8006e20:	2900      	cmp	r1, #0
 8006e22:	d004      	beq.n	8006e2e <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e24:	2385      	movs	r3, #133	; 0x85
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8006e2a:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8006e2c:	4770      	bx	lr
    status = USBD_FAIL; 
 8006e2e:	2002      	movs	r0, #2
 8006e30:	e7fc      	b.n	8006e2c <USBD_RegisterClass+0xc>

08006e32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006e32:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006e34:	f000 fdd8 	bl	80079e8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8006e38:	2000      	movs	r0, #0
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e3c:	b510      	push	{r4, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8006e3e:	2385      	movs	r3, #133	; 0x85
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	58c3      	ldr	r3, [r0, r3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4798      	blx	r3
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d003      	beq.n	8006e58 <USBD_SetClassConfig+0x1c>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e50:	2002      	movs	r0, #2
 8006e52:	e000      	b.n	8006e56 <USBD_SetClassConfig+0x1a>
 8006e54:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8006e56:	bd10      	pop	{r4, pc}
      ret = USBD_OK;
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7fc      	b.n	8006e56 <USBD_SetClassConfig+0x1a>

08006e5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e5c:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8006e5e:	2385      	movs	r3, #133	; 0x85
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	58c3      	ldr	r3, [r0, r3]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4798      	blx	r3
  return USBD_OK;
}
 8006e68:	2000      	movs	r0, #0
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	0004      	movs	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e70:	2382      	movs	r3, #130	; 0x82
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	18c5      	adds	r5, r0, r3
 8006e76:	0028      	movs	r0, r5
 8006e78:	f000 f92f 	bl	80070da <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	23fa      	movs	r3, #250	; 0xfa
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <USBD_LL_SetupStage+0x64>)
 8006e86:	5ae2      	ldrh	r2, [r4, r3]
 8006e88:	3b16      	subs	r3, #22
 8006e8a:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	5ce1      	ldrb	r1, [r4, r3]
 8006e90:	3bea      	subs	r3, #234	; 0xea
 8006e92:	3bff      	subs	r3, #255	; 0xff
 8006e94:	400b      	ands	r3, r1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d00f      	beq.n	8006eba <USBD_LL_SetupStage+0x4e>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <USBD_LL_SetupStage+0x42>
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d010      	beq.n	8006ec4 <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8006ea2:	237f      	movs	r3, #127	; 0x7f
 8006ea4:	4399      	bics	r1, r3
 8006ea6:	0020      	movs	r0, r4
 8006ea8:	f000 fdbc 	bl	8007a24 <USBD_LL_StallEP>
    break;
 8006eac:	e003      	b.n	8006eb6 <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 8006eae:	0029      	movs	r1, r5
 8006eb0:	0020      	movs	r0, r4
 8006eb2:	f000 fabb 	bl	800742c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8006eba:	0029      	movs	r1, r5
 8006ebc:	0020      	movs	r0, r4
 8006ebe:	f000 fad9 	bl	8007474 <USBD_StdItfReq>
    break;
 8006ec2:	e7f8      	b.n	8006eb6 <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 8006ec4:	0029      	movs	r1, r5
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	f000 faf2 	bl	80074b0 <USBD_StdEPReq>
    break;
 8006ecc:	e7f3      	b.n	8006eb6 <USBD_LL_SetupStage+0x4a>
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	0000020e 	.word	0x0000020e

08006ed4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	0004      	movs	r4, r0
 8006ed8:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d128      	bne.n	8006f30 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ede:	22fa      	movs	r2, #250	; 0xfa
 8006ee0:	0052      	lsls	r2, r2, #1
 8006ee2:	5882      	ldr	r2, [r0, r2]
 8006ee4:	2a03      	cmp	r2, #3
 8006ee6:	d12e      	bne.n	8006f46 <USBD_LL_DataOutStage+0x72>
    {
      if(pep->rem_length > pep->maxpacket)
 8006ee8:	1d42      	adds	r2, r0, #5
 8006eea:	32ff      	adds	r2, #255	; 0xff
 8006eec:	6891      	ldr	r1, [r2, #8]
 8006eee:	68d2      	ldr	r2, [r2, #12]
 8006ef0:	4291      	cmp	r1, r2
 8006ef2:	d80e      	bhi.n	8006f12 <USBD_LL_DataOutStage+0x3e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006ef4:	2385      	movs	r3, #133	; 0x85
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	58c3      	ldr	r3, [r0, r3]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <USBD_LL_DataOutStage+0x36>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f00:	22fe      	movs	r2, #254	; 0xfe
 8006f02:	0052      	lsls	r2, r2, #1
 8006f04:	5c82      	ldrb	r2, [r0, r2]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f06:	2a03      	cmp	r2, #3
 8006f08:	d010      	beq.n	8006f2c <USBD_LL_DataOutStage+0x58>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8006f0a:	0020      	movs	r0, r4
 8006f0c:	f000 fbb8 	bl	8007680 <USBD_CtlSendStatus>
 8006f10:	e019      	b.n	8006f46 <USBD_LL_DataOutStage+0x72>
        pep->rem_length -=  pep->maxpacket;
 8006f12:	1a89      	subs	r1, r1, r2
 8006f14:	3005      	adds	r0, #5
 8006f16:	30ff      	adds	r0, #255	; 0xff
 8006f18:	6081      	str	r1, [r0, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8006f1a:	428a      	cmp	r2, r1
 8006f1c:	d900      	bls.n	8006f20 <USBD_LL_DataOutStage+0x4c>
 8006f1e:	000a      	movs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8006f20:	b292      	uxth	r2, r2
 8006f22:	0019      	movs	r1, r3
 8006f24:	0020      	movs	r0, r4
 8006f26:	f000 fba3 	bl	8007670 <USBD_CtlContinueRx>
 8006f2a:	e00c      	b.n	8006f46 <USBD_LL_DataOutStage+0x72>
          pdev->pClass->EP0_RxReady(pdev); 
 8006f2c:	4798      	blx	r3
 8006f2e:	e7ec      	b.n	8006f0a <USBD_LL_DataOutStage+0x36>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006f30:	2385      	movs	r3, #133	; 0x85
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	58c3      	ldr	r3, [r0, r3]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <USBD_LL_DataOutStage+0x72>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f3c:	22fe      	movs	r2, #254	; 0xfe
 8006f3e:	0052      	lsls	r2, r2, #1
 8006f40:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataOut != NULL)&&
 8006f42:	2a03      	cmp	r2, #3
 8006f44:	d001      	beq.n	8006f4a <USBD_LL_DataOutStage+0x76>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006f46:	2000      	movs	r0, #0
 8006f48:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8006f4a:	4798      	blx	r3
 8006f4c:	e7fb      	b.n	8006f46 <USBD_LL_DataOutStage+0x72>

08006f4e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	0004      	movs	r4, r0
 8006f52:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d14f      	bne.n	8006ff8 <USBD_LL_DataInStage+0xaa>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f58:	22fa      	movs	r2, #250	; 0xfa
 8006f5a:	0052      	lsls	r2, r2, #1
 8006f5c:	5882      	ldr	r2, [r0, r2]
 8006f5e:	2a02      	cmp	r2, #2
 8006f60:	d006      	beq.n	8006f70 <USBD_LL_DataInStage+0x22>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	5ce3      	ldrb	r3, [r4, r3]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d040      	beq.n	8006fee <USBD_LL_DataInStage+0xa0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8006f70:	69c2      	ldr	r2, [r0, #28]
 8006f72:	6a05      	ldr	r5, [r0, #32]
 8006f74:	42aa      	cmp	r2, r5
 8006f76:	d81c      	bhi.n	8006fb2 <USBD_LL_DataInStage+0x64>
        if((pep->total_length % pep->maxpacket == 0) &&
 8006f78:	6986      	ldr	r6, [r0, #24]
 8006f7a:	0029      	movs	r1, r5
 8006f7c:	0030      	movs	r0, r6
 8006f7e:	f7f9 f953 	bl	8000228 <__aeabi_uidivmod>
 8006f82:	2900      	cmp	r1, #0
 8006f84:	d106      	bne.n	8006f94 <USBD_LL_DataInStage+0x46>
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	d804      	bhi.n	8006f94 <USBD_LL_DataInStage+0x46>
             (pep->total_length < pdev->ep0_data_len ))
 8006f8a:	23fc      	movs	r3, #252	; 0xfc
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	58e3      	ldr	r3, [r4, r3]
           (pep->total_length >= pep->maxpacket) &&
 8006f90:	429e      	cmp	r6, r3
 8006f92:	d31b      	bcc.n	8006fcc <USBD_LL_DataInStage+0x7e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006f94:	2385      	movs	r3, #133	; 0x85
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	58e3      	ldr	r3, [r4, r3]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fa0:	22fe      	movs	r2, #254	; 0xfe
 8006fa2:	0052      	lsls	r2, r2, #1
 8006fa4:	5ca2      	ldrb	r2, [r4, r2]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006fa6:	2a03      	cmp	r2, #3
 8006fa8:	d01e      	beq.n	8006fe8 <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 8006faa:	0020      	movs	r0, r4
 8006fac:	f000 fb74 	bl	8007698 <USBD_CtlReceiveStatus>
 8006fb0:	e7d7      	b.n	8006f62 <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 8006fb2:	1b52      	subs	r2, r2, r5
 8006fb4:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	0019      	movs	r1, r3
 8006fba:	f000 fb41 	bl	8007640 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	0020      	movs	r0, r4
 8006fc6:	f000 fd6b 	bl	8007aa0 <USBD_LL_PrepareReceive>
 8006fca:	e7ca      	b.n	8006f62 <USBD_LL_DataInStage+0x14>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006fcc:	2200      	movs	r2, #0
 8006fce:	0020      	movs	r0, r4
 8006fd0:	f000 fb36 	bl	8007640 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	23fc      	movs	r3, #252	; 0xfc
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	50e2      	str	r2, [r4, r3]
        USBD_LL_PrepareReceive (pdev,
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	0020      	movs	r0, r4
 8006fe2:	f000 fd5d 	bl	8007aa0 <USBD_LL_PrepareReceive>
 8006fe6:	e7bc      	b.n	8006f62 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev); 
 8006fe8:	0020      	movs	r0, r4
 8006fea:	4798      	blx	r3
 8006fec:	e7dd      	b.n	8006faa <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0;
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	54e2      	strb	r2, [r4, r3]
 8006ff6:	e7b9      	b.n	8006f6c <USBD_LL_DataInStage+0x1e>
  else if((pdev->pClass->DataIn != NULL)&& 
 8006ff8:	2385      	movs	r3, #133	; 0x85
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	58c3      	ldr	r3, [r0, r3]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0b3      	beq.n	8006f6c <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007004:	22fe      	movs	r2, #254	; 0xfe
 8007006:	0052      	lsls	r2, r2, #1
 8007008:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataIn != NULL)&& 
 800700a:	2a03      	cmp	r2, #3
 800700c:	d1ae      	bne.n	8006f6c <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 800700e:	4798      	blx	r3
 8007010:	e7ac      	b.n	8006f6c <USBD_LL_DataInStage+0x1e>

08007012 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007012:	b570      	push	{r4, r5, r6, lr}
 8007014:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007016:	2340      	movs	r3, #64	; 0x40
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	f000 fced 	bl	80079fa <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007020:	2540      	movs	r5, #64	; 0x40
 8007022:	2388      	movs	r3, #136	; 0x88
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007028:	3bd0      	subs	r3, #208	; 0xd0
 800702a:	2200      	movs	r2, #0
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	0020      	movs	r0, r4
 8007030:	f000 fce3 	bl	80079fa <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007034:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007036:	2201      	movs	r2, #1
 8007038:	23fe      	movs	r3, #254	; 0xfe
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 800703e:	331c      	adds	r3, #28
 8007040:	58e3      	ldr	r3, [r4, r3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8007046:	2385      	movs	r3, #133	; 0x85
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	58e3      	ldr	r3, [r4, r3]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	7921      	ldrb	r1, [r4, #4]
 8007050:	0020      	movs	r0, r4
 8007052:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8007054:	2000      	movs	r0, #0
 8007056:	bd70      	pop	{r4, r5, r6, pc}

08007058 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007058:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800705a:	2000      	movs	r0, #0
 800705c:	4770      	bx	lr

0800705e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800705e:	23fe      	movs	r3, #254	; 0xfe
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	5cc1      	ldrb	r1, [r0, r3]
 8007064:	22fe      	movs	r2, #254	; 0xfe
 8007066:	32ff      	adds	r2, #255	; 0xff
 8007068:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800706a:	3afa      	subs	r2, #250	; 0xfa
 800706c:	3aff      	subs	r2, #255	; 0xff
 800706e:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8007070:	2000      	movs	r0, #0
 8007072:	4770      	bx	lr

08007074 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8007074:	23fe      	movs	r3, #254	; 0xfe
 8007076:	33ff      	adds	r3, #255	; 0xff
 8007078:	5cc2      	ldrb	r2, [r0, r3]
 800707a:	3b01      	subs	r3, #1
 800707c:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 800707e:	2000      	movs	r0, #0
 8007080:	4770      	bx	lr

08007082 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007082:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007084:	23fe      	movs	r3, #254	; 0xfe
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	5cc3      	ldrb	r3, [r0, r3]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d001      	beq.n	8007092 <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800708e:	2000      	movs	r0, #0
 8007090:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 8007092:	2385      	movs	r3, #133	; 0x85
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	58c3      	ldr	r3, [r0, r3]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f7      	beq.n	800708e <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 800709e:	4798      	blx	r3
 80070a0:	e7f5      	b.n	800708e <USBD_LL_SOF+0xc>

080070a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a2:	0003      	movs	r3, r0
    uint8_t  len = 0;
 80070a4:	2000      	movs	r0, #0

    while (*buf != '\0') 
 80070a6:	e002      	b.n	80070ae <USBD_GetLen+0xc>
    {
        len++;
 80070a8:	3001      	adds	r0, #1
 80070aa:	b2c0      	uxtb	r0, r0
        buf++;
 80070ac:	3301      	adds	r3, #1
    while (*buf != '\0') 
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d1f9      	bne.n	80070a8 <USBD_GetLen+0x6>
    }

    return len;
}
 80070b4:	4770      	bx	lr

080070b6 <USBD_SetFeature>:
{
 80070b6:	b510      	push	{r4, lr}
 80070b8:	0004      	movs	r4, r0
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070ba:	884b      	ldrh	r3, [r1, #2]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d000      	beq.n	80070c2 <USBD_SetFeature+0xc>
}
 80070c0:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1;  
 80070c2:	2201      	movs	r2, #1
 80070c4:	2381      	movs	r3, #129	; 0x81
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	50c2      	str	r2, [r0, r3]
    pdev->pClass->Setup (pdev, req);   
 80070ca:	3310      	adds	r3, #16
 80070cc:	58c3      	ldr	r3, [r0, r3]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80070d2:	0020      	movs	r0, r4
 80070d4:	f000 fad4 	bl	8007680 <USBD_CtlSendStatus>
}
 80070d8:	e7f2      	b.n	80070c0 <USBD_SetFeature+0xa>

080070da <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80070da:	780b      	ldrb	r3, [r1, #0]
 80070dc:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80070de:	784b      	ldrb	r3, [r1, #1]
 80070e0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80070e2:	788b      	ldrb	r3, [r1, #2]
 80070e4:	78ca      	ldrb	r2, [r1, #3]
 80070e6:	0212      	lsls	r2, r2, #8
 80070e8:	189b      	adds	r3, r3, r2
 80070ea:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80070ec:	790b      	ldrb	r3, [r1, #4]
 80070ee:	794a      	ldrb	r2, [r1, #5]
 80070f0:	0212      	lsls	r2, r2, #8
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80070f6:	798b      	ldrb	r3, [r1, #6]
 80070f8:	79ca      	ldrb	r2, [r1, #7]
 80070fa:	0212      	lsls	r2, r2, #8
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	80c3      	strh	r3, [r0, #6]
}
 8007100:	4770      	bx	lr

08007102 <USBD_CtlError>:
{
 8007102:	b510      	push	{r4, lr}
 8007104:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	f000 fc8c 	bl	8007a24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800710c:	2100      	movs	r1, #0
 800710e:	0020      	movs	r0, r4
 8007110:	f000 fc88 	bl	8007a24 <USBD_LL_StallEP>
}
 8007114:	bd10      	pop	{r4, pc}
	...

08007118 <USBD_GetDescriptor>:
{
 8007118:	b530      	push	{r4, r5, lr}
 800711a:	b083      	sub	sp, #12
 800711c:	0004      	movs	r4, r0
 800711e:	000d      	movs	r5, r1
  switch (req->wValue >> 8)
 8007120:	8849      	ldrh	r1, [r1, #2]
 8007122:	0a0b      	lsrs	r3, r1, #8
 8007124:	2b07      	cmp	r3, #7
 8007126:	d900      	bls.n	800712a <USBD_GetDescriptor+0x12>
 8007128:	e092      	b.n	8007250 <USBD_GetDescriptor+0x138>
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4a51      	ldr	r2, [pc, #324]	; (8007274 <USBD_GetDescriptor+0x15c>)
 800712e:	58d3      	ldr	r3, [r2, r3]
 8007130:	469f      	mov	pc, r3
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007132:	2384      	movs	r3, #132	; 0x84
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	58c3      	ldr	r3, [r0, r3]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	7c00      	ldrb	r0, [r0, #16]
 800713c:	466a      	mov	r2, sp
 800713e:	1d91      	adds	r1, r2, #6
 8007140:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8007142:	466b      	mov	r3, sp
 8007144:	3306      	adds	r3, #6
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <USBD_GetDescriptor+0x3c>
 800714c:	88ea      	ldrh	r2, [r5, #6]
 800714e:	2a00      	cmp	r2, #0
 8007150:	d000      	beq.n	8007154 <USBD_GetDescriptor+0x3c>
 8007152:	e082      	b.n	800725a <USBD_GetDescriptor+0x142>
}
 8007154:	b003      	add	sp, #12
 8007156:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007158:	7c03      	ldrb	r3, [r0, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800715e:	2385      	movs	r3, #133	; 0x85
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	58c3      	ldr	r3, [r0, r3]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	466a      	mov	r2, sp
 8007168:	1d90      	adds	r0, r2, #6
 800716a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800716c:	2302      	movs	r3, #2
 800716e:	7043      	strb	r3, [r0, #1]
 8007170:	e7e7      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007172:	2385      	movs	r3, #133	; 0x85
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	58c3      	ldr	r3, [r0, r3]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	466a      	mov	r2, sp
 800717c:	1d90      	adds	r0, r2, #6
 800717e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007180:	2302      	movs	r3, #2
 8007182:	7043      	strb	r3, [r0, #1]
 8007184:	e7dd      	b.n	8007142 <USBD_GetDescriptor+0x2a>
    switch ((uint8_t)(req->wValue))
 8007186:	b2c9      	uxtb	r1, r1
 8007188:	2905      	cmp	r1, #5
 800718a:	d839      	bhi.n	8007200 <USBD_GetDescriptor+0xe8>
 800718c:	0089      	lsls	r1, r1, #2
 800718e:	4b3a      	ldr	r3, [pc, #232]	; (8007278 <USBD_GetDescriptor+0x160>)
 8007190:	585b      	ldr	r3, [r3, r1]
 8007192:	469f      	mov	pc, r3
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007194:	2384      	movs	r3, #132	; 0x84
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	58c3      	ldr	r3, [r0, r3]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	7c00      	ldrb	r0, [r0, #16]
 800719e:	466a      	mov	r2, sp
 80071a0:	1d91      	adds	r1, r2, #6
 80071a2:	4798      	blx	r3
      break;
 80071a4:	e7cd      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071a6:	2384      	movs	r3, #132	; 0x84
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	58c3      	ldr	r3, [r0, r3]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	7c00      	ldrb	r0, [r0, #16]
 80071b0:	466a      	mov	r2, sp
 80071b2:	1d91      	adds	r1, r2, #6
 80071b4:	4798      	blx	r3
      break;
 80071b6:	e7c4      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071b8:	2384      	movs	r3, #132	; 0x84
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	58c3      	ldr	r3, [r0, r3]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	7c00      	ldrb	r0, [r0, #16]
 80071c2:	466a      	mov	r2, sp
 80071c4:	1d91      	adds	r1, r2, #6
 80071c6:	4798      	blx	r3
      break;
 80071c8:	e7bb      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071ca:	2384      	movs	r3, #132	; 0x84
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	58c3      	ldr	r3, [r0, r3]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	7c00      	ldrb	r0, [r0, #16]
 80071d4:	466a      	mov	r2, sp
 80071d6:	1d91      	adds	r1, r2, #6
 80071d8:	4798      	blx	r3
      break;
 80071da:	e7b2      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071dc:	2384      	movs	r3, #132	; 0x84
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	58c3      	ldr	r3, [r0, r3]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	7c00      	ldrb	r0, [r0, #16]
 80071e6:	466a      	mov	r2, sp
 80071e8:	1d91      	adds	r1, r2, #6
 80071ea:	4798      	blx	r3
      break;
 80071ec:	e7a9      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071ee:	2384      	movs	r3, #132	; 0x84
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	58c3      	ldr	r3, [r0, r3]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	7c00      	ldrb	r0, [r0, #16]
 80071f8:	466a      	mov	r2, sp
 80071fa:	1d91      	adds	r1, r2, #6
 80071fc:	4798      	blx	r3
      break;
 80071fe:	e7a0      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8007200:	2385      	movs	r3, #133	; 0x85
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	58c3      	ldr	r3, [r0, r3]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	466a      	mov	r2, sp
 800720a:	3206      	adds	r2, #6
 800720c:	4798      	blx	r3
      break;
 800720e:	e798      	b.n	8007142 <USBD_GetDescriptor+0x2a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007210:	7c03      	ldrb	r3, [r0, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007216:	2385      	movs	r3, #133	; 0x85
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	58c3      	ldr	r3, [r0, r3]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	466a      	mov	r2, sp
 8007220:	1d90      	adds	r0, r2, #6
 8007222:	4798      	blx	r3
      break;
 8007224:	e78d      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8007226:	0029      	movs	r1, r5
 8007228:	f7ff ff6b 	bl	8007102 <USBD_CtlError>
      return;
 800722c:	e792      	b.n	8007154 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800722e:	7c03      	ldrb	r3, [r0, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <USBD_GetDescriptor+0x130>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007234:	2385      	movs	r3, #133	; 0x85
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	58c3      	ldr	r3, [r0, r3]
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	466a      	mov	r2, sp
 800723e:	1d90      	adds	r0, r2, #6
 8007240:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007242:	2307      	movs	r3, #7
 8007244:	7043      	strb	r3, [r0, #1]
      break; 
 8007246:	e77c      	b.n	8007142 <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8007248:	0029      	movs	r1, r5
 800724a:	f7ff ff5a 	bl	8007102 <USBD_CtlError>
      return;
 800724e:	e781      	b.n	8007154 <USBD_GetDescriptor+0x3c>
     USBD_CtlError(pdev , req);
 8007250:	0029      	movs	r1, r5
 8007252:	0020      	movs	r0, r4
 8007254:	f7ff ff55 	bl	8007102 <USBD_CtlError>
    return;
 8007258:	e77c      	b.n	8007154 <USBD_GetDescriptor+0x3c>
    len = MIN(len , req->wLength);
 800725a:	1c19      	adds	r1, r3, #0
 800725c:	4293      	cmp	r3, r2
 800725e:	d900      	bls.n	8007262 <USBD_GetDescriptor+0x14a>
 8007260:	1c11      	adds	r1, r2, #0
 8007262:	b28a      	uxth	r2, r1
 8007264:	466b      	mov	r3, sp
 8007266:	80d9      	strh	r1, [r3, #6]
    USBD_CtlSendData (pdev, 
 8007268:	0001      	movs	r1, r0
 800726a:	0020      	movs	r0, r4
 800726c:	f000 f9da 	bl	8007624 <USBD_CtlSendData>
 8007270:	e770      	b.n	8007154 <USBD_GetDescriptor+0x3c>
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	08009420 	.word	0x08009420
 8007278:	08009440 	.word	0x08009440

0800727c <USBD_SetAddress>:
{
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	0004      	movs	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007280:	888b      	ldrh	r3, [r1, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d122      	bne.n	80072cc <USBD_SetAddress+0x50>
 8007286:	88cb      	ldrh	r3, [r1, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11f      	bne.n	80072cc <USBD_SetAddress+0x50>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800728c:	788b      	ldrb	r3, [r1, #2]
 800728e:	257f      	movs	r5, #127	; 0x7f
 8007290:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007292:	23fe      	movs	r3, #254	; 0xfe
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	5cc3      	ldrb	r3, [r0, r3]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d00f      	beq.n	80072bc <USBD_SetAddress+0x40>
      pdev->dev_address = dev_addr;
 800729c:	23ff      	movs	r3, #255	; 0xff
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80072a2:	0029      	movs	r1, r5
 80072a4:	f000 fbea 	bl	8007a7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80072a8:	0020      	movs	r0, r4
 80072aa:	f000 f9e9 	bl	8007680 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	d007      	beq.n	80072c2 <USBD_SetAddress+0x46>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80072b2:	2202      	movs	r2, #2
 80072b4:	23fe      	movs	r3, #254	; 0xfe
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	54e2      	strb	r2, [r4, r3]
 80072ba:	e00a      	b.n	80072d2 <USBD_SetAddress+0x56>
      USBD_CtlError(pdev , req);
 80072bc:	f7ff ff21 	bl	8007102 <USBD_CtlError>
 80072c0:	e007      	b.n	80072d2 <USBD_SetAddress+0x56>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80072c2:	2201      	movs	r2, #1
 80072c4:	23fe      	movs	r3, #254	; 0xfe
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	54e2      	strb	r2, [r4, r3]
 80072ca:	e002      	b.n	80072d2 <USBD_SetAddress+0x56>
     USBD_CtlError(pdev , req);                        
 80072cc:	0020      	movs	r0, r4
 80072ce:	f7ff ff18 	bl	8007102 <USBD_CtlError>
}
 80072d2:	bd70      	pop	{r4, r5, r6, pc}

080072d4 <USBD_SetConfig>:
{
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	0004      	movs	r4, r0
 80072d8:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 80072da:	7889      	ldrb	r1, [r1, #2]
 80072dc:	4b28      	ldr	r3, [pc, #160]	; (8007380 <USBD_SetConfig+0xac>)
 80072de:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80072e0:	2901      	cmp	r1, #1
 80072e2:	d80a      	bhi.n	80072fa <USBD_SetConfig+0x26>
    switch (pdev->dev_state) 
 80072e4:	23fe      	movs	r3, #254	; 0xfe
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	5cc3      	ldrb	r3, [r0, r3]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d009      	beq.n	8007302 <USBD_SetConfig+0x2e>
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d01e      	beq.n	8007330 <USBD_SetConfig+0x5c>
       USBD_CtlError(pdev , req);                     
 80072f2:	0029      	movs	r1, r5
 80072f4:	f7ff ff05 	bl	8007102 <USBD_CtlError>
      break;
 80072f8:	e002      	b.n	8007300 <USBD_SetConfig+0x2c>
     USBD_CtlError(pdev , req);                              
 80072fa:	0029      	movs	r1, r5
 80072fc:	f7ff ff01 	bl	8007102 <USBD_CtlError>
}
 8007300:	bd70      	pop	{r4, r5, r6, pc}
      if (cfgidx) 
 8007302:	2900      	cmp	r1, #0
 8007304:	d011      	beq.n	800732a <USBD_SetConfig+0x56>
        pdev->dev_config = cfgidx;
 8007306:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007308:	2203      	movs	r2, #3
 800730a:	23fe      	movs	r3, #254	; 0xfe
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	54c2      	strb	r2, [r0, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007310:	f7ff fd94 	bl	8006e3c <USBD_SetClassConfig>
 8007314:	2802      	cmp	r0, #2
 8007316:	d003      	beq.n	8007320 <USBD_SetConfig+0x4c>
        USBD_CtlSendStatus(pdev);
 8007318:	0020      	movs	r0, r4
 800731a:	f000 f9b1 	bl	8007680 <USBD_CtlSendStatus>
 800731e:	e7ef      	b.n	8007300 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8007320:	0029      	movs	r1, r5
 8007322:	0020      	movs	r0, r4
 8007324:	f7ff feed 	bl	8007102 <USBD_CtlError>
          return;
 8007328:	e7ea      	b.n	8007300 <USBD_SetConfig+0x2c>
         USBD_CtlSendStatus(pdev);
 800732a:	f000 f9a9 	bl	8007680 <USBD_CtlSendStatus>
 800732e:	e7e7      	b.n	8007300 <USBD_SetConfig+0x2c>
      if (cfgidx == 0) 
 8007330:	2900      	cmp	r1, #0
 8007332:	d011      	beq.n	8007358 <USBD_SetConfig+0x84>
      else  if (cfgidx != pdev->dev_config) 
 8007334:	6843      	ldr	r3, [r0, #4]
 8007336:	4299      	cmp	r1, r3
 8007338:	d01e      	beq.n	8007378 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800733a:	b2d9      	uxtb	r1, r3
 800733c:	f7ff fd8e 	bl	8006e5c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <USBD_SetConfig+0xac>)
 8007342:	7819      	ldrb	r1, [r3, #0]
 8007344:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007346:	0020      	movs	r0, r4
 8007348:	f7ff fd78 	bl	8006e3c <USBD_SetClassConfig>
 800734c:	2802      	cmp	r0, #2
 800734e:	d00e      	beq.n	800736e <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 8007350:	0020      	movs	r0, r4
 8007352:	f000 f995 	bl	8007680 <USBD_CtlSendStatus>
 8007356:	e7d3      	b.n	8007300 <USBD_SetConfig+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007358:	2202      	movs	r2, #2
 800735a:	23fe      	movs	r3, #254	; 0xfe
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	54c2      	strb	r2, [r0, r3]
        pdev->dev_config = cfgidx;          
 8007360:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007362:	f7ff fd7b 	bl	8006e5c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007366:	0020      	movs	r0, r4
 8007368:	f000 f98a 	bl	8007680 <USBD_CtlSendStatus>
 800736c:	e7c8      	b.n	8007300 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 800736e:	0029      	movs	r1, r5
 8007370:	0020      	movs	r0, r4
 8007372:	f7ff fec6 	bl	8007102 <USBD_CtlError>
          return;
 8007376:	e7c3      	b.n	8007300 <USBD_SetConfig+0x2c>
        USBD_CtlSendStatus(pdev);
 8007378:	f000 f982 	bl	8007680 <USBD_CtlSendStatus>
 800737c:	e7c0      	b.n	8007300 <USBD_SetConfig+0x2c>
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	200001b8 	.word	0x200001b8

08007384 <USBD_GetConfig>:
{
 8007384:	b510      	push	{r4, lr}
  if (req->wLength != 1) 
 8007386:	88cb      	ldrh	r3, [r1, #6]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d109      	bne.n	80073a0 <USBD_GetConfig+0x1c>
    switch (pdev->dev_state )  
 800738c:	23fe      	movs	r3, #254	; 0xfe
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	5cc3      	ldrb	r3, [r0, r3]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d007      	beq.n	80073a6 <USBD_GetConfig+0x22>
 8007396:	2b03      	cmp	r3, #3
 8007398:	d00d      	beq.n	80073b6 <USBD_GetConfig+0x32>
       USBD_CtlError(pdev , req);
 800739a:	f7ff feb2 	bl	8007102 <USBD_CtlError>
}
 800739e:	e001      	b.n	80073a4 <USBD_GetConfig+0x20>
     USBD_CtlError(pdev , req);
 80073a0:	f7ff feaf 	bl	8007102 <USBD_CtlError>
}
 80073a4:	bd10      	pop	{r4, pc}
      pdev->dev_default_config = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80073aa:	0001      	movs	r1, r0
 80073ac:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 80073ae:	2201      	movs	r2, #1
 80073b0:	f000 f938 	bl	8007624 <USBD_CtlSendData>
      break;
 80073b4:	e7f6      	b.n	80073a4 <USBD_GetConfig+0x20>
                        (uint8_t *)&pdev->dev_config,
 80073b6:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 80073b8:	2201      	movs	r2, #1
 80073ba:	f000 f933 	bl	8007624 <USBD_CtlSendData>
      break;
 80073be:	e7f1      	b.n	80073a4 <USBD_GetConfig+0x20>

080073c0 <USBD_GetStatus>:
{
 80073c0:	b510      	push	{r4, lr}
  switch (pdev->dev_state) 
 80073c2:	23fe      	movs	r3, #254	; 0xfe
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	5cc3      	ldrb	r3, [r0, r3]
 80073c8:	3b02      	subs	r3, #2
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d80e      	bhi.n	80073ee <USBD_GetStatus+0x2e>
    pdev->dev_config_status = 0;                                   
 80073d0:	2300      	movs	r3, #0
 80073d2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80073d4:	2381      	movs	r3, #129	; 0x81
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	58c3      	ldr	r3, [r0, r3]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USBD_GetStatus+0x22>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80073de:	2302      	movs	r3, #2
 80073e0:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 80073e2:	0001      	movs	r1, r0
 80073e4:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 80073e6:	2202      	movs	r2, #2
 80073e8:	f000 f91c 	bl	8007624 <USBD_CtlSendData>
}
 80073ec:	bd10      	pop	{r4, pc}
    USBD_CtlError(pdev , req);                        
 80073ee:	f7ff fe88 	bl	8007102 <USBD_CtlError>
}
 80073f2:	e7fb      	b.n	80073ec <USBD_GetStatus+0x2c>

080073f4 <USBD_ClrFeature>:
{
 80073f4:	b510      	push	{r4, lr}
 80073f6:	0004      	movs	r4, r0
  switch (pdev->dev_state)
 80073f8:	23fe      	movs	r3, #254	; 0xfe
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	5cc3      	ldrb	r3, [r0, r3]
 80073fe:	3b02      	subs	r3, #2
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d80f      	bhi.n	8007426 <USBD_ClrFeature+0x32>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007406:	884b      	ldrh	r3, [r1, #2]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d000      	beq.n	800740e <USBD_ClrFeature+0x1a>
}
 800740c:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 800740e:	2200      	movs	r2, #0
 8007410:	2381      	movs	r3, #129	; 0x81
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 8007416:	3310      	adds	r3, #16
 8007418:	58c3      	ldr	r3, [r0, r3]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800741e:	0020      	movs	r0, r4
 8007420:	f000 f92e 	bl	8007680 <USBD_CtlSendStatus>
 8007424:	e7f2      	b.n	800740c <USBD_ClrFeature+0x18>
     USBD_CtlError(pdev , req);
 8007426:	f7ff fe6c 	bl	8007102 <USBD_CtlError>
}
 800742a:	e7ef      	b.n	800740c <USBD_ClrFeature+0x18>

0800742c <USBD_StdDevReq>:
{
 800742c:	b510      	push	{r4, lr}
  switch (req->bRequest) 
 800742e:	784b      	ldrb	r3, [r1, #1]
 8007430:	2b09      	cmp	r3, #9
 8007432:	d819      	bhi.n	8007468 <USBD_StdDevReq+0x3c>
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <USBD_StdDevReq+0x44>)
 8007438:	58d3      	ldr	r3, [r2, r3]
 800743a:	469f      	mov	pc, r3
    USBD_GetDescriptor (pdev, req) ;
 800743c:	f7ff fe6c 	bl	8007118 <USBD_GetDescriptor>
}
 8007440:	2000      	movs	r0, #0
 8007442:	bd10      	pop	{r4, pc}
    USBD_SetAddress(pdev, req);
 8007444:	f7ff ff1a 	bl	800727c <USBD_SetAddress>
    break;
 8007448:	e7fa      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_SetConfig (pdev , req);
 800744a:	f7ff ff43 	bl	80072d4 <USBD_SetConfig>
    break;
 800744e:	e7f7      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_GetConfig (pdev , req);
 8007450:	f7ff ff98 	bl	8007384 <USBD_GetConfig>
    break;
 8007454:	e7f4      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_GetStatus (pdev , req);
 8007456:	f7ff ffb3 	bl	80073c0 <USBD_GetStatus>
    break;
 800745a:	e7f1      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_SetFeature (pdev , req);    
 800745c:	f7ff fe2b 	bl	80070b6 <USBD_SetFeature>
    break;
 8007460:	e7ee      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_ClrFeature (pdev , req);
 8007462:	f7ff ffc7 	bl	80073f4 <USBD_ClrFeature>
    break;
 8007466:	e7eb      	b.n	8007440 <USBD_StdDevReq+0x14>
    USBD_CtlError(pdev , req);
 8007468:	f7ff fe4b 	bl	8007102 <USBD_CtlError>
    break;
 800746c:	e7e8      	b.n	8007440 <USBD_StdDevReq+0x14>
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	08009458 	.word	0x08009458

08007474 <USBD_StdItfReq>:
{
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	0004      	movs	r4, r0
 8007478:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 800747a:	23fe      	movs	r3, #254	; 0xfe
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	5cc3      	ldrb	r3, [r0, r3]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d112      	bne.n	80074aa <USBD_StdItfReq+0x36>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8007484:	790b      	ldrb	r3, [r1, #4]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d903      	bls.n	8007492 <USBD_StdItfReq+0x1e>
       USBD_CtlError(pdev , req);
 800748a:	f7ff fe3a 	bl	8007102 <USBD_CtlError>
}
 800748e:	2000      	movs	r0, #0
 8007490:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup (pdev, req); 
 8007492:	2385      	movs	r3, #133	; 0x85
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	58c3      	ldr	r3, [r0, r3]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800749c:	88eb      	ldrh	r3, [r5, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f5      	bne.n	800748e <USBD_StdItfReq+0x1a>
         USBD_CtlSendStatus(pdev);
 80074a2:	0020      	movs	r0, r4
 80074a4:	f000 f8ec 	bl	8007680 <USBD_CtlSendStatus>
 80074a8:	e7f1      	b.n	800748e <USBD_StdItfReq+0x1a>
     USBD_CtlError(pdev , req);
 80074aa:	f7ff fe2a 	bl	8007102 <USBD_CtlError>
    break;
 80074ae:	e7ee      	b.n	800748e <USBD_StdItfReq+0x1a>

080074b0 <USBD_StdEPReq>:
{
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	0005      	movs	r5, r0
 80074b4:	000c      	movs	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80074b6:	888a      	ldrh	r2, [r1, #4]
 80074b8:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 80074ba:	7820      	ldrb	r0, [r4, #0]
 80074bc:	2360      	movs	r3, #96	; 0x60
 80074be:	4003      	ands	r3, r0
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d012      	beq.n	80074ea <USBD_StdEPReq+0x3a>
  switch (req->bRequest) 
 80074c4:	7863      	ldrb	r3, [r4, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d035      	beq.n	8007536 <USBD_StdEPReq+0x86>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d05b      	beq.n	8007586 <USBD_StdEPReq+0xd6>
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d112      	bne.n	80074f8 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 80074d2:	33fa      	adds	r3, #250	; 0xfa
 80074d4:	33ff      	adds	r3, #255	; 0xff
 80074d6:	5ceb      	ldrb	r3, [r5, r3]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d00f      	beq.n	80074fc <USBD_StdEPReq+0x4c>
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d015      	beq.n	800750c <USBD_StdEPReq+0x5c>
      USBD_CtlError(pdev , req);
 80074e0:	0021      	movs	r1, r4
 80074e2:	0028      	movs	r0, r5
 80074e4:	f7ff fe0d 	bl	8007102 <USBD_CtlError>
      break;    
 80074e8:	e006      	b.n	80074f8 <USBD_StdEPReq+0x48>
    pdev->pClass->Setup (pdev, req);
 80074ea:	33f5      	adds	r3, #245	; 0xf5
 80074ec:	33ff      	adds	r3, #255	; 0xff
 80074ee:	58eb      	ldr	r3, [r5, r3]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	0021      	movs	r1, r4
 80074f4:	0028      	movs	r0, r5
 80074f6:	4798      	blx	r3
}
 80074f8:	2000      	movs	r0, #0
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d0fb      	beq.n	80074f8 <USBD_StdEPReq+0x48>
 8007500:	2980      	cmp	r1, #128	; 0x80
 8007502:	d0f9      	beq.n	80074f8 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8007504:	0028      	movs	r0, r5
 8007506:	f000 fa8d 	bl	8007a24 <USBD_LL_StallEP>
 800750a:	e7f5      	b.n	80074f8 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800750c:	8863      	ldrh	r3, [r4, #2]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <USBD_StdEPReq+0x70>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007512:	2900      	cmp	r1, #0
 8007514:	d004      	beq.n	8007520 <USBD_StdEPReq+0x70>
 8007516:	2980      	cmp	r1, #128	; 0x80
 8007518:	d002      	beq.n	8007520 <USBD_StdEPReq+0x70>
          USBD_LL_StallEP(pdev , ep_addr);
 800751a:	0028      	movs	r0, r5
 800751c:	f000 fa82 	bl	8007a24 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8007520:	2385      	movs	r3, #133	; 0x85
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	58eb      	ldr	r3, [r5, r3]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	0021      	movs	r1, r4
 800752a:	0028      	movs	r0, r5
 800752c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800752e:	0028      	movs	r0, r5
 8007530:	f000 f8a6 	bl	8007680 <USBD_CtlSendStatus>
      break;
 8007534:	e7e0      	b.n	80074f8 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 8007536:	23fe      	movs	r3, #254	; 0xfe
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	5ceb      	ldrb	r3, [r5, r3]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d006      	beq.n	800754e <USBD_StdEPReq+0x9e>
 8007540:	2b03      	cmp	r3, #3
 8007542:	d00c      	beq.n	800755e <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 8007544:	0021      	movs	r1, r4
 8007546:	0028      	movs	r0, r5
 8007548:	f7ff fddb 	bl	8007102 <USBD_CtlError>
      break;    
 800754c:	e7d4      	b.n	80074f8 <USBD_StdEPReq+0x48>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800754e:	2900      	cmp	r1, #0
 8007550:	d0d2      	beq.n	80074f8 <USBD_StdEPReq+0x48>
 8007552:	2980      	cmp	r1, #128	; 0x80
 8007554:	d0d0      	beq.n	80074f8 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8007556:	0028      	movs	r0, r5
 8007558:	f000 fa64 	bl	8007a24 <USBD_LL_StallEP>
 800755c:	e7cc      	b.n	80074f8 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800755e:	8863      	ldrh	r3, [r4, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c9      	bne.n	80074f8 <USBD_StdEPReq+0x48>
        if ((ep_addr & 0x7F) != 0x00) 
 8007564:	064b      	lsls	r3, r1, #25
 8007566:	d103      	bne.n	8007570 <USBD_StdEPReq+0xc0>
        USBD_CtlSendStatus(pdev);
 8007568:	0028      	movs	r0, r5
 800756a:	f000 f889 	bl	8007680 <USBD_CtlSendStatus>
 800756e:	e7c3      	b.n	80074f8 <USBD_StdEPReq+0x48>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007570:	0028      	movs	r0, r5
 8007572:	f000 fa60 	bl	8007a36 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007576:	2385      	movs	r3, #133	; 0x85
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	58eb      	ldr	r3, [r5, r3]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	0021      	movs	r1, r4
 8007580:	0028      	movs	r0, r5
 8007582:	4798      	blx	r3
 8007584:	e7f0      	b.n	8007568 <USBD_StdEPReq+0xb8>
    switch (pdev->dev_state) 
 8007586:	23fe      	movs	r3, #254	; 0xfe
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	5ceb      	ldrb	r3, [r5, r3]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d006      	beq.n	800759e <USBD_StdEPReq+0xee>
 8007590:	2b03      	cmp	r3, #3
 8007592:	d00a      	beq.n	80075aa <USBD_StdEPReq+0xfa>
      USBD_CtlError(pdev , req);
 8007594:	0021      	movs	r1, r4
 8007596:	0028      	movs	r0, r5
 8007598:	f7ff fdb3 	bl	8007102 <USBD_CtlError>
      break;
 800759c:	e7ac      	b.n	80074f8 <USBD_StdEPReq+0x48>
      if ((ep_addr & 0x7F) != 0x00) 
 800759e:	064b      	lsls	r3, r1, #25
 80075a0:	d0aa      	beq.n	80074f8 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 80075a2:	0028      	movs	r0, r5
 80075a4:	f000 fa3e 	bl	8007a24 <USBD_LL_StallEP>
 80075a8:	e7a6      	b.n	80074f8 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80075aa:	0613      	lsls	r3, r2, #24
 80075ac:	d412      	bmi.n	80075d4 <USBD_StdEPReq+0x124>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80075ae:	247f      	movs	r4, #127	; 0x7f
 80075b0:	400c      	ands	r4, r1
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80075b2:	3410      	adds	r4, #16
 80075b4:	0124      	lsls	r4, r4, #4
 80075b6:	192c      	adds	r4, r5, r4
 80075b8:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80075ba:	0028      	movs	r0, r5
 80075bc:	f000 fa44 	bl	8007a48 <USBD_LL_IsStallEP>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d00e      	beq.n	80075e2 <USBD_StdEPReq+0x132>
        pep->status = 0x0001;     
 80075c4:	2301      	movs	r3, #1
 80075c6:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80075c8:	2202      	movs	r2, #2
 80075ca:	0021      	movs	r1, r4
 80075cc:	0028      	movs	r0, r5
 80075ce:	f000 f829 	bl	8007624 <USBD_CtlSendData>
      break;
 80075d2:	e791      	b.n	80074f8 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80075d4:	247f      	movs	r4, #127	; 0x7f
 80075d6:	400c      	ands	r4, r1
 80075d8:	3401      	adds	r4, #1
 80075da:	0124      	lsls	r4, r4, #4
 80075dc:	192c      	adds	r4, r5, r4
 80075de:	3404      	adds	r4, #4
 80075e0:	e7eb      	b.n	80075ba <USBD_StdEPReq+0x10a>
        pep->status = 0x0000;  
 80075e2:	2300      	movs	r3, #0
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	e7ef      	b.n	80075c8 <USBD_StdEPReq+0x118>

080075e8 <USBD_GetString>:
{
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	0004      	movs	r4, r0
 80075ec:	000d      	movs	r5, r1
 80075ee:	0016      	movs	r6, r2
  if (desc != NULL) 
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d016      	beq.n	8007622 <USBD_GetString+0x3a>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80075f4:	f7ff fd55 	bl	80070a2 <USBD_GetLen>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *len;
 8007600:	702b      	strb	r3, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007602:	2303      	movs	r3, #3
 8007604:	706b      	strb	r3, [r5, #1]
 8007606:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 8007608:	e008      	b.n	800761c <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	3401      	adds	r4, #1
 8007610:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8007612:	3302      	adds	r3, #2
 8007614:	b2db      	uxtb	r3, r3
 8007616:	18aa      	adds	r2, r5, r2
 8007618:	2100      	movs	r1, #0
 800761a:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0') 
 800761c:	7821      	ldrb	r1, [r4, #0]
 800761e:	2900      	cmp	r1, #0
 8007620:	d1f3      	bne.n	800760a <USBD_GetString+0x22>
}
 8007622:	bd70      	pop	{r4, r5, r6, pc}

08007624 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007624:	b510      	push	{r4, lr}
 8007626:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007628:	2402      	movs	r4, #2
 800762a:	22fa      	movs	r2, #250	; 0xfa
 800762c:	0052      	lsls	r2, r2, #1
 800762e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8007630:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8007632:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007634:	000a      	movs	r2, r1
 8007636:	2100      	movs	r1, #0
 8007638:	f000 fa29 	bl	8007a8e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800763c:	2000      	movs	r0, #0
 800763e:	bd10      	pop	{r4, pc}

08007640 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007640:	b510      	push	{r4, lr}
 8007642:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007644:	000a      	movs	r2, r1
 8007646:	2100      	movs	r1, #0
 8007648:	f000 fa21 	bl	8007a8e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800764c:	2000      	movs	r0, #0
 800764e:	bd10      	pop	{r4, pc}

08007650 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007650:	b510      	push	{r4, lr}
 8007652:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007654:	2403      	movs	r4, #3
 8007656:	22fa      	movs	r2, #250	; 0xfa
 8007658:	0052      	lsls	r2, r2, #1
 800765a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 800765c:	3aec      	subs	r2, #236	; 0xec
 800765e:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8007660:	3204      	adds	r2, #4
 8007662:	5083      	str	r3, [r0, r2]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007664:	000a      	movs	r2, r1
 8007666:	2100      	movs	r1, #0
 8007668:	f000 fa1a 	bl	8007aa0 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800766c:	2000      	movs	r0, #0
 800766e:	bd10      	pop	{r4, pc}

08007670 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007670:	b510      	push	{r4, lr}
 8007672:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8007674:	000a      	movs	r2, r1
 8007676:	2100      	movs	r1, #0
 8007678:	f000 fa12 	bl	8007aa0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800767c:	2000      	movs	r0, #0
 800767e:	bd10      	pop	{r4, pc}

08007680 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007680:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007682:	2204      	movs	r2, #4
 8007684:	23fa      	movs	r3, #250	; 0xfa
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800768a:	2300      	movs	r3, #0
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	f000 f9fd 	bl	8007a8e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007694:	2000      	movs	r0, #0
 8007696:	bd10      	pop	{r4, pc}

08007698 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007698:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800769a:	2205      	movs	r2, #5
 800769c:	23fa      	movs	r3, #250	; 0xfa
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80076a2:	2300      	movs	r3, #0
 80076a4:	2200      	movs	r2, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	f000 f9fa 	bl	8007aa0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80076ac:	2000      	movs	r0, #0
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076b2:	2200      	movs	r2, #0
 80076b4:	4911      	ldr	r1, [pc, #68]	; (80076fc <MX_USB_DEVICE_Init+0x4c>)
 80076b6:	4812      	ldr	r0, [pc, #72]	; (8007700 <MX_USB_DEVICE_Init+0x50>)
 80076b8:	f7ff fb96 	bl	8006de8 <USBD_Init>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d111      	bne.n	80076e4 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80076c0:	4910      	ldr	r1, [pc, #64]	; (8007704 <MX_USB_DEVICE_Init+0x54>)
 80076c2:	480f      	ldr	r0, [pc, #60]	; (8007700 <MX_USB_DEVICE_Init+0x50>)
 80076c4:	f7ff fbac 	bl	8006e20 <USBD_RegisterClass>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d10e      	bne.n	80076ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80076cc:	490e      	ldr	r1, [pc, #56]	; (8007708 <MX_USB_DEVICE_Init+0x58>)
 80076ce:	480c      	ldr	r0, [pc, #48]	; (8007700 <MX_USB_DEVICE_Init+0x50>)
 80076d0:	f7ff fb81 	bl	8006dd6 <USBD_CUSTOM_HID_RegisterInterface>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d10b      	bne.n	80076f0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076d8:	4809      	ldr	r0, [pc, #36]	; (8007700 <MX_USB_DEVICE_Init+0x50>)
 80076da:	f7ff fbaa 	bl	8006e32 <USBD_Start>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d109      	bne.n	80076f6 <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80076e4:	f7fb ff3e 	bl	8003564 <Error_Handler>
 80076e8:	e7ea      	b.n	80076c0 <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 80076ea:	f7fb ff3b 	bl	8003564 <Error_Handler>
 80076ee:	e7ed      	b.n	80076cc <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 80076f0:	f7fb ff38 	bl	8003564 <Error_Handler>
 80076f4:	e7f0      	b.n	80076d8 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 80076f6:	f7fb ff35 	bl	8003564 <Error_Handler>
}
 80076fa:	e7f2      	b.n	80076e2 <MX_USB_DEVICE_Init+0x32>
 80076fc:	200000e0 	.word	0x200000e0
 8007700:	20000410 	.word	0x20000410
 8007704:	20000004 	.word	0x20000004
 8007708:	200000d0 	.word	0x200000d0

0800770c <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr

08007710 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007710:	2000      	movs	r0, #0
 8007712:	4770      	bx	lr

08007714 <CUSTOM_HID_OutEvent_FS>:
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8007714:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
	__NOP();
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007716:	2000      	movs	r0, #0
 8007718:	4770      	bx	lr
	...

0800771c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800771c:	2312      	movs	r3, #18
 800771e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007720:	4800      	ldr	r0, [pc, #0]	; (8007724 <USBD_FS_DeviceDescriptor+0x8>)
 8007722:	4770      	bx	lr
 8007724:	200000fc 	.word	0x200000fc

08007728 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8007728:	2304      	movs	r3, #4
 800772a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800772c:	4800      	ldr	r0, [pc, #0]	; (8007730 <USBD_FS_LangIDStrDescriptor+0x8>)
 800772e:	4770      	bx	lr
 8007730:	20000110 	.word	0x20000110

08007734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007734:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007736:	2300      	movs	r3, #0
 8007738:	e00a      	b.n	8007750 <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800773a:	005d      	lsls	r5, r3, #1
 800773c:	3437      	adds	r4, #55	; 0x37
 800773e:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 8007740:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007742:	005c      	lsls	r4, r3, #1
 8007744:	3401      	adds	r4, #1
 8007746:	190c      	adds	r4, r1, r4
 8007748:	2500      	movs	r5, #0
 800774a:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 800774c:	3301      	adds	r3, #1
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4293      	cmp	r3, r2
 8007752:	d206      	bcs.n	8007762 <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 8007754:	0f04      	lsrs	r4, r0, #28
 8007756:	2c09      	cmp	r4, #9
 8007758:	d8ef      	bhi.n	800773a <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 800775a:	005d      	lsls	r5, r3, #1
 800775c:	3430      	adds	r4, #48	; 0x30
 800775e:	554c      	strb	r4, [r1, r5]
 8007760:	e7ee      	b.n	8007740 <IntToUnicode+0xc>
  }
}
 8007762:	bd30      	pop	{r4, r5, pc}

08007764 <Get_SerialNum>:
{
 8007764:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <Get_SerialNum+0x30>)
 8007768:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800776a:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <Get_SerialNum+0x34>)
 800776c:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800776e:	4b0b      	ldr	r3, [pc, #44]	; (800779c <Get_SerialNum+0x38>)
 8007770:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8007772:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8007774:	2800      	cmp	r0, #0
 8007776:	d100      	bne.n	800777a <Get_SerialNum+0x16>
}
 8007778:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800777a:	4c09      	ldr	r4, [pc, #36]	; (80077a0 <Get_SerialNum+0x3c>)
 800777c:	1ca1      	adds	r1, r4, #2
 800777e:	2208      	movs	r2, #8
 8007780:	f7ff ffd8 	bl	8007734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007784:	0021      	movs	r1, r4
 8007786:	3112      	adds	r1, #18
 8007788:	2204      	movs	r2, #4
 800778a:	0028      	movs	r0, r5
 800778c:	f7ff ffd2 	bl	8007734 <IntToUnicode>
}
 8007790:	e7f2      	b.n	8007778 <Get_SerialNum+0x14>
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	1ffff7ac 	.word	0x1ffff7ac
 8007798:	1ffff7b0 	.word	0x1ffff7b0
 800779c:	1ffff7b4 	.word	0x1ffff7b4
 80077a0:	20000114 	.word	0x20000114

080077a4 <USBD_FS_SerialStrDescriptor>:
{
 80077a4:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80077a6:	231a      	movs	r3, #26
 80077a8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80077aa:	f7ff ffdb 	bl	8007764 <Get_SerialNum>
}
 80077ae:	4801      	ldr	r0, [pc, #4]	; (80077b4 <USBD_FS_SerialStrDescriptor+0x10>)
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	20000114 	.word	0x20000114

080077b8 <USBD_FS_ProductStrDescriptor>:
{
 80077b8:	b510      	push	{r4, lr}
 80077ba:	000a      	movs	r2, r1
  if(speed == 0)
 80077bc:	2800      	cmp	r0, #0
 80077be:	d005      	beq.n	80077cc <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077c0:	4905      	ldr	r1, [pc, #20]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x20>)
 80077c2:	4806      	ldr	r0, [pc, #24]	; (80077dc <USBD_FS_ProductStrDescriptor+0x24>)
 80077c4:	f7ff ff10 	bl	80075e8 <USBD_GetString>
}
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x20>)
 80077ca:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077cc:	4902      	ldr	r1, [pc, #8]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x20>)
 80077ce:	4803      	ldr	r0, [pc, #12]	; (80077dc <USBD_FS_ProductStrDescriptor+0x24>)
 80077d0:	f7ff ff0a 	bl	80075e8 <USBD_GetString>
 80077d4:	e7f8      	b.n	80077c8 <USBD_FS_ProductStrDescriptor+0x10>
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	20000634 	.word	0x20000634
 80077dc:	080094c0 	.word	0x080094c0

080077e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80077e0:	b510      	push	{r4, lr}
 80077e2:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077e4:	4c03      	ldr	r4, [pc, #12]	; (80077f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80077e6:	0021      	movs	r1, r4
 80077e8:	4803      	ldr	r0, [pc, #12]	; (80077f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80077ea:	f7ff fefd 	bl	80075e8 <USBD_GetString>
}
 80077ee:	0020      	movs	r0, r4
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	20000634 	.word	0x20000634
 80077f8:	080094ac 	.word	0x080094ac

080077fc <USBD_FS_ConfigStrDescriptor>:
{
 80077fc:	b510      	push	{r4, lr}
 80077fe:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007800:	2800      	cmp	r0, #0
 8007802:	d005      	beq.n	8007810 <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007804:	4905      	ldr	r1, [pc, #20]	; (800781c <USBD_FS_ConfigStrDescriptor+0x20>)
 8007806:	4806      	ldr	r0, [pc, #24]	; (8007820 <USBD_FS_ConfigStrDescriptor+0x24>)
 8007808:	f7ff feee 	bl	80075e8 <USBD_GetString>
}
 800780c:	4803      	ldr	r0, [pc, #12]	; (800781c <USBD_FS_ConfigStrDescriptor+0x20>)
 800780e:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007810:	4902      	ldr	r1, [pc, #8]	; (800781c <USBD_FS_ConfigStrDescriptor+0x20>)
 8007812:	4803      	ldr	r0, [pc, #12]	; (8007820 <USBD_FS_ConfigStrDescriptor+0x24>)
 8007814:	f7ff fee8 	bl	80075e8 <USBD_GetString>
 8007818:	e7f8      	b.n	800780c <USBD_FS_ConfigStrDescriptor+0x10>
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	20000634 	.word	0x20000634
 8007820:	08009480 	.word	0x08009480

08007824 <USBD_FS_InterfaceStrDescriptor>:
{
 8007824:	b510      	push	{r4, lr}
 8007826:	000a      	movs	r2, r1
  if(speed == 0)
 8007828:	2800      	cmp	r0, #0
 800782a:	d005      	beq.n	8007838 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800782c:	4905      	ldr	r1, [pc, #20]	; (8007844 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800782e:	4806      	ldr	r0, [pc, #24]	; (8007848 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8007830:	f7ff feda 	bl	80075e8 <USBD_GetString>
}
 8007834:	4803      	ldr	r0, [pc, #12]	; (8007844 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007836:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007838:	4902      	ldr	r1, [pc, #8]	; (8007844 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800783a:	4803      	ldr	r0, [pc, #12]	; (8007848 <USBD_FS_InterfaceStrDescriptor+0x24>)
 800783c:	f7ff fed4 	bl	80075e8 <USBD_GetString>
 8007840:	e7f8      	b.n	8007834 <USBD_FS_InterfaceStrDescriptor+0x10>
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	20000634 	.word	0x20000634
 8007848:	08009494 	.word	0x08009494

0800784c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800784c:	2800      	cmp	r0, #0
 800784e:	d003      	beq.n	8007858 <USBD_Get_USB_Status+0xc>
 8007850:	2802      	cmp	r0, #2
 8007852:	d003      	beq.n	800785c <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007854:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007856:	4770      	bx	lr
      usb_status = USBD_OK;
 8007858:	2000      	movs	r0, #0
 800785a:	e7fc      	b.n	8007856 <USBD_Get_USB_Status+0xa>
      usb_status = USBD_BUSY;
 800785c:	2001      	movs	r0, #1
    break;
 800785e:	e7fa      	b.n	8007856 <USBD_Get_USB_Status+0xa>

08007860 <SystemClockConfig_Resume>:
{
 8007860:	b510      	push	{r4, lr}
  SystemClock_Config();
 8007862:	f7fb fdf3 	bl	800344c <SystemClock_Config>
}
 8007866:	bd10      	pop	{r4, pc}

08007868 <HAL_PCD_MspInit>:
{
 8007868:	b500      	push	{lr}
 800786a:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 800786c:	6802      	ldr	r2, [r0, #0]
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <HAL_PCD_MspInit+0x38>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_PCD_MspInit+0x10>
}
 8007874:	b003      	add	sp, #12
 8007876:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8007878:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <HAL_PCD_MspInit+0x3c>)
 800787a:	69d1      	ldr	r1, [r2, #28]
 800787c:	2080      	movs	r0, #128	; 0x80
 800787e:	0400      	lsls	r0, r0, #16
 8007880:	4301      	orrs	r1, r0
 8007882:	61d1      	str	r1, [r2, #28]
 8007884:	69d3      	ldr	r3, [r2, #28]
 8007886:	4003      	ands	r3, r0
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	201f      	movs	r0, #31
 8007892:	f7fc f83b 	bl	800390c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007896:	201f      	movs	r0, #31
 8007898:	f7fc f86a 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 800789c:	e7ea      	b.n	8007874 <HAL_PCD_MspInit+0xc>
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	40005c00 	.word	0x40005c00
 80078a4:	40021000 	.word	0x40021000

080078a8 <HAL_PCD_SetupStageCallback>:
{
 80078a8:	b510      	push	{r4, lr}
 80078aa:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078ac:	2387      	movs	r3, #135	; 0x87
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	58c0      	ldr	r0, [r0, r3]
 80078b2:	31ed      	adds	r1, #237	; 0xed
 80078b4:	31ff      	adds	r1, #255	; 0xff
 80078b6:	f7ff fad9 	bl	8006e6c <USBD_LL_SetupStage>
}
 80078ba:	bd10      	pop	{r4, pc}

080078bc <HAL_PCD_DataOutStageCallback>:
{
 80078bc:	b510      	push	{r4, lr}
 80078be:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078c0:	2287      	movs	r2, #135	; 0x87
 80078c2:	0092      	lsls	r2, r2, #2
 80078c4:	5880      	ldr	r0, [r0, r2]
 80078c6:	00ca      	lsls	r2, r1, #3
 80078c8:	1a52      	subs	r2, r2, r1
 80078ca:	0094      	lsls	r4, r2, #2
 80078cc:	191b      	adds	r3, r3, r4
 80078ce:	3319      	adds	r3, #25
 80078d0:	33ff      	adds	r3, #255	; 0xff
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	f7ff fafe 	bl	8006ed4 <USBD_LL_DataOutStage>
}
 80078d8:	bd10      	pop	{r4, pc}

080078da <HAL_PCD_DataInStageCallback>:
{
 80078da:	b510      	push	{r4, lr}
 80078dc:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078de:	2287      	movs	r2, #135	; 0x87
 80078e0:	0092      	lsls	r2, r2, #2
 80078e2:	5880      	ldr	r0, [r0, r2]
 80078e4:	00ca      	lsls	r2, r1, #3
 80078e6:	1a52      	subs	r2, r2, r1
 80078e8:	0094      	lsls	r4, r2, #2
 80078ea:	191b      	adds	r3, r3, r4
 80078ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ee:	f7ff fb2e 	bl	8006f4e <USBD_LL_DataInStage>
}
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <HAL_PCD_SOFCallback>:
{
 80078f4:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078f6:	2387      	movs	r3, #135	; 0x87
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	58c0      	ldr	r0, [r0, r3]
 80078fc:	f7ff fbc1 	bl	8007082 <USBD_LL_SOF>
}
 8007900:	bd10      	pop	{r4, pc}

08007902 <HAL_PCD_ResetCallback>:
{ 
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007906:	6883      	ldr	r3, [r0, #8]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d001      	beq.n	8007910 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800790c:	f7fb fe2a 	bl	8003564 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007910:	2587      	movs	r5, #135	; 0x87
 8007912:	00ad      	lsls	r5, r5, #2
 8007914:	2101      	movs	r1, #1
 8007916:	5960      	ldr	r0, [r4, r5]
 8007918:	f7ff fb9e 	bl	8007058 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800791c:	5960      	ldr	r0, [r4, r5]
 800791e:	f7ff fb78 	bl	8007012 <USBD_LL_Reset>
}
 8007922:	bd70      	pop	{r4, r5, r6, pc}

08007924 <HAL_PCD_SuspendCallback>:
{
 8007924:	b510      	push	{r4, lr}
 8007926:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007928:	2387      	movs	r3, #135	; 0x87
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	58c0      	ldr	r0, [r0, r3]
 800792e:	f7ff fb96 	bl	800705e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007932:	69a3      	ldr	r3, [r4, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007938:	4a02      	ldr	r2, [pc, #8]	; (8007944 <HAL_PCD_SuspendCallback+0x20>)
 800793a:	6913      	ldr	r3, [r2, #16]
 800793c:	2106      	movs	r1, #6
 800793e:	430b      	orrs	r3, r1
 8007940:	6113      	str	r3, [r2, #16]
}
 8007942:	bd10      	pop	{r4, pc}
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <HAL_PCD_ResumeCallback>:
{
 8007948:	b510      	push	{r4, lr}
 800794a:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 800794c:	6983      	ldr	r3, [r0, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007952:	2387      	movs	r3, #135	; 0x87
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	58e0      	ldr	r0, [r4, r3]
 8007958:	f7ff fb8c 	bl	8007074 <USBD_LL_Resume>
}
 800795c:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800795e:	4a04      	ldr	r2, [pc, #16]	; (8007970 <HAL_PCD_ResumeCallback+0x28>)
 8007960:	6913      	ldr	r3, [r2, #16]
 8007962:	2106      	movs	r1, #6
 8007964:	438b      	bics	r3, r1
 8007966:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007968:	f7ff ff7a 	bl	8007860 <SystemClockConfig_Resume>
 800796c:	e7f1      	b.n	8007952 <HAL_PCD_ResumeCallback+0xa>
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	e000ed00 	.word	0xe000ed00

08007974 <USBD_LL_Init>:
{
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007978:	4819      	ldr	r0, [pc, #100]	; (80079e0 <USBD_LL_Init+0x6c>)
 800797a:	2387      	movs	r3, #135	; 0x87
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8007980:	3304      	adds	r3, #4
 8007982:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8007984:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <USBD_LL_Init+0x70>)
 8007986:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007988:	2308      	movs	r3, #8
 800798a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800798c:	3b06      	subs	r3, #6
 800798e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007990:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007992:	2300      	movs	r3, #0
 8007994:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007996:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007998:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800799a:	f7fc f9bd 	bl	8003d18 <HAL_PCD_Init>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d11b      	bne.n	80079da <USBD_LL_Init+0x66>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80079a2:	2588      	movs	r5, #136	; 0x88
 80079a4:	00ad      	lsls	r5, r5, #2
 80079a6:	2318      	movs	r3, #24
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	5960      	ldr	r0, [r4, r5]
 80079ae:	f7fd fac5 	bl	8004f3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80079b2:	2358      	movs	r3, #88	; 0x58
 80079b4:	2200      	movs	r2, #0
 80079b6:	2180      	movs	r1, #128	; 0x80
 80079b8:	5960      	ldr	r0, [r4, r5]
 80079ba:	f7fd fabf 	bl	8004f3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80079be:	2398      	movs	r3, #152	; 0x98
 80079c0:	2200      	movs	r2, #0
 80079c2:	2181      	movs	r1, #129	; 0x81
 80079c4:	5960      	ldr	r0, [r4, r5]
 80079c6:	f7fd fab9 	bl	8004f3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80079ca:	5960      	ldr	r0, [r4, r5]
 80079cc:	23d8      	movs	r3, #216	; 0xd8
 80079ce:	2200      	movs	r2, #0
 80079d0:	2101      	movs	r1, #1
 80079d2:	f7fd fab3 	bl	8004f3c <HAL_PCDEx_PMAConfig>
}
 80079d6:	2000      	movs	r0, #0
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80079da:	f7fb fdc3 	bl	8003564 <Error_Handler>
 80079de:	e7e0      	b.n	80079a2 <USBD_LL_Init+0x2e>
 80079e0:	20000834 	.word	0x20000834
 80079e4:	40005c00 	.word	0x40005c00

080079e8 <USBD_LL_Start>:
{
 80079e8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80079ea:	2388      	movs	r3, #136	; 0x88
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	58c0      	ldr	r0, [r0, r3]
 80079f0:	f7fc f9f2 	bl	8003dd8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f4:	f7ff ff2a 	bl	800784c <USBD_Get_USB_Status>
}
 80079f8:	bd10      	pop	{r4, pc}

080079fa <USBD_LL_OpenEP>:
{
 80079fa:	b510      	push	{r4, lr}
 80079fc:	0014      	movs	r4, r2
 80079fe:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a00:	2388      	movs	r3, #136	; 0x88
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	58c0      	ldr	r0, [r0, r3]
 8007a06:	0023      	movs	r3, r4
 8007a08:	f7fc fa0e 	bl	8003e28 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0c:	f7ff ff1e 	bl	800784c <USBD_Get_USB_Status>
}
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <USBD_LL_CloseEP>:
{
 8007a12:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a14:	2388      	movs	r3, #136	; 0x88
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	58c0      	ldr	r0, [r0, r3]
 8007a1a:	f7fc fbaf 	bl	800417c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1e:	f7ff ff15 	bl	800784c <USBD_Get_USB_Status>
}
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <USBD_LL_StallEP>:
{
 8007a24:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a26:	2388      	movs	r3, #136	; 0x88
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	58c0      	ldr	r0, [r0, r3]
 8007a2c:	f7fc fd8e 	bl	800454c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a30:	f7ff ff0c 	bl	800784c <USBD_Get_USB_Status>
}
 8007a34:	bd10      	pop	{r4, pc}

08007a36 <USBD_LL_ClearStallEP>:
{
 8007a36:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007a38:	2388      	movs	r3, #136	; 0x88
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	58c0      	ldr	r0, [r0, r3]
 8007a3e:	f7fc fde7 	bl	8004610 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a42:	f7ff ff03 	bl	800784c <USBD_Get_USB_Status>
}
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <USBD_LL_IsStallEP>:
{
 8007a48:	000a      	movs	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a4a:	2388      	movs	r3, #136	; 0x88
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8007a50:	b249      	sxtb	r1, r1
 8007a52:	2900      	cmp	r1, #0
 8007a54:	db09      	blt.n	8007a6a <USBD_LL_IsStallEP+0x22>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007a56:	217f      	movs	r1, #127	; 0x7f
 8007a58:	4011      	ands	r1, r2
 8007a5a:	00ca      	lsls	r2, r1, #3
 8007a5c:	1a51      	subs	r1, r2, r1
 8007a5e:	008a      	lsls	r2, r1, #2
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	330b      	adds	r3, #11
 8007a64:	33ff      	adds	r3, #255	; 0xff
 8007a66:	7818      	ldrb	r0, [r3, #0]
}
 8007a68:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007a6a:	217f      	movs	r1, #127	; 0x7f
 8007a6c:	4011      	ands	r1, r2
 8007a6e:	00c8      	lsls	r0, r1, #3
 8007a70:	1a41      	subs	r1, r0, r1
 8007a72:	008a      	lsls	r2, r1, #2
 8007a74:	189b      	adds	r3, r3, r2
 8007a76:	332a      	adds	r3, #42	; 0x2a
 8007a78:	7818      	ldrb	r0, [r3, #0]
 8007a7a:	e7f5      	b.n	8007a68 <USBD_LL_IsStallEP+0x20>

08007a7c <USBD_LL_SetUSBAddress>:
{
 8007a7c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a7e:	2388      	movs	r3, #136	; 0x88
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	58c0      	ldr	r0, [r0, r3]
 8007a84:	f7fc f9b4 	bl	8003df0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a88:	f7ff fee0 	bl	800784c <USBD_Get_USB_Status>
}
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <USBD_LL_Transmit>:
{
 8007a8e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a90:	2488      	movs	r4, #136	; 0x88
 8007a92:	00a4      	lsls	r4, r4, #2
 8007a94:	5900      	ldr	r0, [r0, r4]
 8007a96:	f7fc fe3f 	bl	8004718 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9a:	f7ff fed7 	bl	800784c <USBD_Get_USB_Status>
}
 8007a9e:	bd10      	pop	{r4, pc}

08007aa0 <USBD_LL_PrepareReceive>:
{
 8007aa0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aa2:	2488      	movs	r4, #136	; 0x88
 8007aa4:	00a4      	lsls	r4, r4, #2
 8007aa6:	5900      	ldr	r0, [r0, r4]
 8007aa8:	f7fc fc50 	bl	800434c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	f7ff fece 	bl	800784c <USBD_Get_USB_Status>
}
 8007ab0:	bd10      	pop	{r4, pc}
	...

08007ab4 <USBD_static_malloc>:
}
 8007ab4:	4800      	ldr	r0, [pc, #0]	; (8007ab8 <USBD_static_malloc+0x4>)
 8007ab6:	4770      	bx	lr
 8007ab8:	200001bc 	.word	0x200001bc

08007abc <USBD_static_free>:
}
 8007abc:	4770      	bx	lr
	...

08007ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007ac0:	480d      	ldr	r0, [pc, #52]	; (8007af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007ac2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ac4:	480d      	ldr	r0, [pc, #52]	; (8007afc <LoopForever+0x6>)
  ldr r1, =_edata
 8007ac6:	490e      	ldr	r1, [pc, #56]	; (8007b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ac8:	4a0e      	ldr	r2, [pc, #56]	; (8007b04 <LoopForever+0xe>)
  movs r3, #0
 8007aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007acc:	e002      	b.n	8007ad4 <LoopCopyDataInit>

08007ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ad2:	3304      	adds	r3, #4

08007ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ad8:	d3f9      	bcc.n	8007ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ada:	4a0b      	ldr	r2, [pc, #44]	; (8007b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007adc:	4c0b      	ldr	r4, [pc, #44]	; (8007b0c <LoopForever+0x16>)
  movs r3, #0
 8007ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ae0:	e001      	b.n	8007ae6 <LoopFillZerobss>

08007ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ae4:	3204      	adds	r2, #4

08007ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ae8:	d3fb      	bcc.n	8007ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007aea:	f7fb feaf 	bl	800384c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8007aee:	f000 f817 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007af2:	f7fb fcd7 	bl	80034a4 <main>

08007af6 <LoopForever>:

LoopForever:
    b LoopForever
 8007af6:	e7fe      	b.n	8007af6 <LoopForever>
  ldr   r0, =_estack
 8007af8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8007afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b00:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8007b04:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 8007b08:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8007b0c:	20000a58 	.word	0x20000a58

08007b10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b10:	e7fe      	b.n	8007b10 <ADC1_COMP_IRQHandler>
	...

08007b14 <__errno>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	; (8007b1c <__errno+0x8>)
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	20000130 	.word	0x20000130

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	2600      	movs	r6, #0
 8007b24:	4d0c      	ldr	r5, [pc, #48]	; (8007b58 <__libc_init_array+0x38>)
 8007b26:	4c0d      	ldr	r4, [pc, #52]	; (8007b5c <__libc_init_array+0x3c>)
 8007b28:	1b64      	subs	r4, r4, r5
 8007b2a:	10a4      	asrs	r4, r4, #2
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	2600      	movs	r6, #0
 8007b32:	f001 fb95 	bl	8009260 <_init>
 8007b36:	4d0a      	ldr	r5, [pc, #40]	; (8007b60 <__libc_init_array+0x40>)
 8007b38:	4c0a      	ldr	r4, [pc, #40]	; (8007b64 <__libc_init_array+0x44>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	00b3      	lsls	r3, r6, #2
 8007b46:	58eb      	ldr	r3, [r5, r3]
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	00b3      	lsls	r3, r6, #2
 8007b50:	58eb      	ldr	r3, [r5, r3]
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	080096e8 	.word	0x080096e8
 8007b5c:	080096e8 	.word	0x080096e8
 8007b60:	080096e8 	.word	0x080096e8
 8007b64:	080096ec 	.word	0x080096ec

08007b68 <malloc>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <malloc+0x10>)
 8007b6c:	0001      	movs	r1, r0
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	f000 f86a 	bl	8007c48 <_malloc_r>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	20000130 	.word	0x20000130

08007b7c <free>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <free+0x10>)
 8007b80:	0001      	movs	r1, r0
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	f000 f816 	bl	8007bb4 <_free_r>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20000130 	.word	0x20000130

08007b90 <memcpy>:
 8007b90:	2300      	movs	r3, #0
 8007b92:	b510      	push	{r4, lr}
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d100      	bne.n	8007b9a <memcpy+0xa>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	5ccc      	ldrb	r4, [r1, r3]
 8007b9c:	54c4      	strb	r4, [r0, r3]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	e7f8      	b.n	8007b94 <memcpy+0x4>

08007ba2 <memset>:
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	1882      	adds	r2, r0, r2
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d100      	bne.n	8007bac <memset+0xa>
 8007baa:	4770      	bx	lr
 8007bac:	7019      	strb	r1, [r3, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	e7f9      	b.n	8007ba6 <memset+0x4>
	...

08007bb4 <_free_r>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	0005      	movs	r5, r0
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d010      	beq.n	8007bde <_free_r+0x2a>
 8007bbc:	1f0c      	subs	r4, r1, #4
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da00      	bge.n	8007bc6 <_free_r+0x12>
 8007bc4:	18e4      	adds	r4, r4, r3
 8007bc6:	0028      	movs	r0, r5
 8007bc8:	f000 f8ae 	bl	8007d28 <__malloc_lock>
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <_free_r+0x90>)
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <_free_r+0x2c>
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	6014      	str	r4, [r2, #0]
 8007bd8:	0028      	movs	r0, r5
 8007bda:	f000 f8a6 	bl	8007d2a <__malloc_unlock>
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d909      	bls.n	8007bf8 <_free_r+0x44>
 8007be4:	6821      	ldr	r1, [r4, #0]
 8007be6:	1860      	adds	r0, r4, r1
 8007be8:	4283      	cmp	r3, r0
 8007bea:	d1f3      	bne.n	8007bd4 <_free_r+0x20>
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	1841      	adds	r1, r0, r1
 8007bf2:	6021      	str	r1, [r4, #0]
 8007bf4:	e7ee      	b.n	8007bd4 <_free_r+0x20>
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d001      	beq.n	8007c02 <_free_r+0x4e>
 8007bfe:	42a2      	cmp	r2, r4
 8007c00:	d9f9      	bls.n	8007bf6 <_free_r+0x42>
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	1858      	adds	r0, r3, r1
 8007c06:	42a0      	cmp	r0, r4
 8007c08:	d10b      	bne.n	8007c22 <_free_r+0x6e>
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1809      	adds	r1, r1, r0
 8007c0e:	1858      	adds	r0, r3, r1
 8007c10:	6019      	str	r1, [r3, #0]
 8007c12:	4282      	cmp	r2, r0
 8007c14:	d1e0      	bne.n	8007bd8 <_free_r+0x24>
 8007c16:	6810      	ldr	r0, [r2, #0]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	1841      	adds	r1, r0, r1
 8007c1c:	6019      	str	r1, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	e7da      	b.n	8007bd8 <_free_r+0x24>
 8007c22:	42a0      	cmp	r0, r4
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x78>
 8007c26:	230c      	movs	r3, #12
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	e7d5      	b.n	8007bd8 <_free_r+0x24>
 8007c2c:	6821      	ldr	r1, [r4, #0]
 8007c2e:	1860      	adds	r0, r4, r1
 8007c30:	4282      	cmp	r2, r0
 8007c32:	d103      	bne.n	8007c3c <_free_r+0x88>
 8007c34:	6810      	ldr	r0, [r2, #0]
 8007c36:	6852      	ldr	r2, [r2, #4]
 8007c38:	1841      	adds	r1, r0, r1
 8007c3a:	6021      	str	r1, [r4, #0]
 8007c3c:	6062      	str	r2, [r4, #4]
 8007c3e:	605c      	str	r4, [r3, #4]
 8007c40:	e7ca      	b.n	8007bd8 <_free_r+0x24>
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	20000214 	.word	0x20000214

08007c48 <_malloc_r>:
 8007c48:	2303      	movs	r3, #3
 8007c4a:	b570      	push	{r4, r5, r6, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	439d      	bics	r5, r3
 8007c50:	3508      	adds	r5, #8
 8007c52:	0006      	movs	r6, r0
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	d21e      	bcs.n	8007c96 <_malloc_r+0x4e>
 8007c58:	250c      	movs	r5, #12
 8007c5a:	42a9      	cmp	r1, r5
 8007c5c:	d81d      	bhi.n	8007c9a <_malloc_r+0x52>
 8007c5e:	0030      	movs	r0, r6
 8007c60:	f000 f862 	bl	8007d28 <__malloc_lock>
 8007c64:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <_malloc_r+0xb4>)
 8007c66:	6814      	ldr	r4, [r2, #0]
 8007c68:	0021      	movs	r1, r4
 8007c6a:	2900      	cmp	r1, #0
 8007c6c:	d119      	bne.n	8007ca2 <_malloc_r+0x5a>
 8007c6e:	4c24      	ldr	r4, [pc, #144]	; (8007d00 <_malloc_r+0xb8>)
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <_malloc_r+0x36>
 8007c76:	0030      	movs	r0, r6
 8007c78:	f000 f844 	bl	8007d04 <_sbrk_r>
 8007c7c:	6020      	str	r0, [r4, #0]
 8007c7e:	0029      	movs	r1, r5
 8007c80:	0030      	movs	r0, r6
 8007c82:	f000 f83f 	bl	8007d04 <_sbrk_r>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	d12c      	bne.n	8007ce4 <_malloc_r+0x9c>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	0030      	movs	r0, r6
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f000 f84b 	bl	8007d2a <__malloc_unlock>
 8007c94:	e003      	b.n	8007c9e <_malloc_r+0x56>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	dadf      	bge.n	8007c5a <_malloc_r+0x12>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
 8007ca2:	680b      	ldr	r3, [r1, #0]
 8007ca4:	1b5b      	subs	r3, r3, r5
 8007ca6:	d41a      	bmi.n	8007cde <_malloc_r+0x96>
 8007ca8:	2b0b      	cmp	r3, #11
 8007caa:	d903      	bls.n	8007cb4 <_malloc_r+0x6c>
 8007cac:	600b      	str	r3, [r1, #0]
 8007cae:	18cc      	adds	r4, r1, r3
 8007cb0:	6025      	str	r5, [r4, #0]
 8007cb2:	e003      	b.n	8007cbc <_malloc_r+0x74>
 8007cb4:	428c      	cmp	r4, r1
 8007cb6:	d10e      	bne.n	8007cd6 <_malloc_r+0x8e>
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	0030      	movs	r0, r6
 8007cbe:	f000 f834 	bl	8007d2a <__malloc_unlock>
 8007cc2:	0020      	movs	r0, r4
 8007cc4:	2207      	movs	r2, #7
 8007cc6:	300b      	adds	r0, #11
 8007cc8:	1d23      	adds	r3, r4, #4
 8007cca:	4390      	bics	r0, r2
 8007ccc:	1ac3      	subs	r3, r0, r3
 8007cce:	d0e7      	beq.n	8007ca0 <_malloc_r+0x58>
 8007cd0:	425a      	negs	r2, r3
 8007cd2:	50e2      	str	r2, [r4, r3]
 8007cd4:	e7e4      	b.n	8007ca0 <_malloc_r+0x58>
 8007cd6:	684b      	ldr	r3, [r1, #4]
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	000c      	movs	r4, r1
 8007cdc:	e7ee      	b.n	8007cbc <_malloc_r+0x74>
 8007cde:	000c      	movs	r4, r1
 8007ce0:	6849      	ldr	r1, [r1, #4]
 8007ce2:	e7c2      	b.n	8007c6a <_malloc_r+0x22>
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	1cc4      	adds	r4, r0, #3
 8007ce8:	439c      	bics	r4, r3
 8007cea:	42a0      	cmp	r0, r4
 8007cec:	d0e0      	beq.n	8007cb0 <_malloc_r+0x68>
 8007cee:	1a21      	subs	r1, r4, r0
 8007cf0:	0030      	movs	r0, r6
 8007cf2:	f000 f807 	bl	8007d04 <_sbrk_r>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d1da      	bne.n	8007cb0 <_malloc_r+0x68>
 8007cfa:	e7c6      	b.n	8007c8a <_malloc_r+0x42>
 8007cfc:	20000214 	.word	0x20000214
 8007d00:	20000218 	.word	0x20000218

08007d04 <_sbrk_r>:
 8007d04:	2300      	movs	r3, #0
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	4c06      	ldr	r4, [pc, #24]	; (8007d24 <_sbrk_r+0x20>)
 8007d0a:	0005      	movs	r5, r0
 8007d0c:	0008      	movs	r0, r1
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	f7fb fd7e 	bl	8003810 <_sbrk>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d103      	bne.n	8007d20 <_sbrk_r+0x1c>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d000      	beq.n	8007d20 <_sbrk_r+0x1c>
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	20000a54 	.word	0x20000a54

08007d28 <__malloc_lock>:
 8007d28:	4770      	bx	lr

08007d2a <__malloc_unlock>:
 8007d2a:	4770      	bx	lr

08007d2c <cos>:
 8007d2c:	b530      	push	{r4, r5, lr}
 8007d2e:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <cos+0x7c>)
 8007d30:	004b      	lsls	r3, r1, #1
 8007d32:	b087      	sub	sp, #28
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	4293      	cmp	r3, r2
 8007d38:	dc04      	bgt.n	8007d44 <cos+0x18>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f000 fb17 	bl	8008370 <__kernel_cos>
 8007d42:	e006      	b.n	8007d52 <cos+0x26>
 8007d44:	4a19      	ldr	r2, [pc, #100]	; (8007dac <cos+0x80>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	dd05      	ble.n	8007d56 <cos+0x2a>
 8007d4a:	0002      	movs	r2, r0
 8007d4c:	000b      	movs	r3, r1
 8007d4e:	f7fa fa93 	bl	8002278 <__aeabi_dsub>
 8007d52:	b007      	add	sp, #28
 8007d54:	bd30      	pop	{r4, r5, pc}
 8007d56:	aa02      	add	r2, sp, #8
 8007d58:	f000 f926 	bl	8007fa8 <__ieee754_rem_pio2>
 8007d5c:	9c04      	ldr	r4, [sp, #16]
 8007d5e:	9d05      	ldr	r5, [sp, #20]
 8007d60:	2303      	movs	r3, #3
 8007d62:	4003      	ands	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d008      	beq.n	8007d7a <cos+0x4e>
 8007d68:	9802      	ldr	r0, [sp, #8]
 8007d6a:	9903      	ldr	r1, [sp, #12]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d00f      	beq.n	8007d90 <cos+0x64>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d112      	bne.n	8007d9a <cos+0x6e>
 8007d74:	0022      	movs	r2, r4
 8007d76:	002b      	movs	r3, r5
 8007d78:	e7e1      	b.n	8007d3e <cos+0x12>
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	0022      	movs	r2, r4
 8007d7e:	9802      	ldr	r0, [sp, #8]
 8007d80:	9903      	ldr	r1, [sp, #12]
 8007d82:	002b      	movs	r3, r5
 8007d84:	f000 ff44 	bl	8008c10 <__kernel_sin>
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	061b      	lsls	r3, r3, #24
 8007d8c:	18c9      	adds	r1, r1, r3
 8007d8e:	e7e0      	b.n	8007d52 <cos+0x26>
 8007d90:	0022      	movs	r2, r4
 8007d92:	002b      	movs	r3, r5
 8007d94:	f000 faec 	bl	8008370 <__kernel_cos>
 8007d98:	e7f6      	b.n	8007d88 <cos+0x5c>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	0022      	movs	r2, r4
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	002b      	movs	r3, r5
 8007da2:	f000 ff35 	bl	8008c10 <__kernel_sin>
 8007da6:	e7d4      	b.n	8007d52 <cos+0x26>
 8007da8:	3fe921fb 	.word	0x3fe921fb
 8007dac:	7fefffff 	.word	0x7fefffff

08007db0 <sin>:
 8007db0:	b530      	push	{r4, r5, lr}
 8007db2:	4a20      	ldr	r2, [pc, #128]	; (8007e34 <sin+0x84>)
 8007db4:	004b      	lsls	r3, r1, #1
 8007db6:	b087      	sub	sp, #28
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	dc06      	bgt.n	8007dcc <sin+0x1c>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f000 ff23 	bl	8008c10 <__kernel_sin>
 8007dca:	e006      	b.n	8007dda <sin+0x2a>
 8007dcc:	4a1a      	ldr	r2, [pc, #104]	; (8007e38 <sin+0x88>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	dd05      	ble.n	8007dde <sin+0x2e>
 8007dd2:	0002      	movs	r2, r0
 8007dd4:	000b      	movs	r3, r1
 8007dd6:	f7fa fa4f 	bl	8002278 <__aeabi_dsub>
 8007dda:	b007      	add	sp, #28
 8007ddc:	bd30      	pop	{r4, r5, pc}
 8007dde:	aa02      	add	r2, sp, #8
 8007de0:	f000 f8e2 	bl	8007fa8 <__ieee754_rem_pio2>
 8007de4:	9c04      	ldr	r4, [sp, #16]
 8007de6:	9d05      	ldr	r5, [sp, #20]
 8007de8:	2303      	movs	r3, #3
 8007dea:	4003      	ands	r3, r0
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d00a      	beq.n	8007e06 <sin+0x56>
 8007df0:	9802      	ldr	r0, [sp, #8]
 8007df2:	9903      	ldr	r1, [sp, #12]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d00d      	beq.n	8007e14 <sin+0x64>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d115      	bne.n	8007e28 <sin+0x78>
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	0022      	movs	r2, r4
 8007e02:	002b      	movs	r3, r5
 8007e04:	e7df      	b.n	8007dc6 <sin+0x16>
 8007e06:	0022      	movs	r2, r4
 8007e08:	9802      	ldr	r0, [sp, #8]
 8007e0a:	9903      	ldr	r1, [sp, #12]
 8007e0c:	002b      	movs	r3, r5
 8007e0e:	f000 faaf 	bl	8008370 <__kernel_cos>
 8007e12:	e7e2      	b.n	8007dda <sin+0x2a>
 8007e14:	2301      	movs	r3, #1
 8007e16:	0022      	movs	r2, r4
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	002b      	movs	r3, r5
 8007e1c:	f000 fef8 	bl	8008c10 <__kernel_sin>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	061b      	lsls	r3, r3, #24
 8007e24:	18c9      	adds	r1, r1, r3
 8007e26:	e7d8      	b.n	8007dda <sin+0x2a>
 8007e28:	0022      	movs	r2, r4
 8007e2a:	002b      	movs	r3, r5
 8007e2c:	f000 faa0 	bl	8008370 <__kernel_cos>
 8007e30:	e7f6      	b.n	8007e20 <sin+0x70>
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	3fe921fb 	.word	0x3fe921fb
 8007e38:	7fefffff 	.word	0x7fefffff

08007e3c <atan2>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	f000 f801 	bl	8007e44 <__ieee754_atan2>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <__ieee754_atan2>:
 8007e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e46:	4254      	negs	r4, r2
 8007e48:	005e      	lsls	r6, r3, #1
 8007e4a:	4314      	orrs	r4, r2
 8007e4c:	4d48      	ldr	r5, [pc, #288]	; (8007f70 <__ieee754_atan2+0x12c>)
 8007e4e:	0876      	lsrs	r6, r6, #1
 8007e50:	0fe4      	lsrs	r4, r4, #31
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	9100      	str	r1, [sp, #0]
 8007e56:	4334      	orrs	r4, r6
 8007e58:	42ac      	cmp	r4, r5
 8007e5a:	d808      	bhi.n	8007e6e <__ieee754_atan2+0x2a>
 8007e5c:	4244      	negs	r4, r0
 8007e5e:	004d      	lsls	r5, r1, #1
 8007e60:	4304      	orrs	r4, r0
 8007e62:	4f43      	ldr	r7, [pc, #268]	; (8007f70 <__ieee754_atan2+0x12c>)
 8007e64:	086d      	lsrs	r5, r5, #1
 8007e66:	0fe4      	lsrs	r4, r4, #31
 8007e68:	432c      	orrs	r4, r5
 8007e6a:	42bc      	cmp	r4, r7
 8007e6c:	d903      	bls.n	8007e76 <__ieee754_atan2+0x32>
 8007e6e:	f7f9 f83f 	bl	8000ef0 <__aeabi_dadd>
 8007e72:	b003      	add	sp, #12
 8007e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e76:	4c3f      	ldr	r4, [pc, #252]	; (8007f74 <__ieee754_atan2+0x130>)
 8007e78:	191c      	adds	r4, r3, r4
 8007e7a:	4314      	orrs	r4, r2
 8007e7c:	d102      	bne.n	8007e84 <__ieee754_atan2+0x40>
 8007e7e:	f000 ff75 	bl	8008d6c <atan>
 8007e82:	e7f6      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007e84:	179c      	asrs	r4, r3, #30
 8007e86:	46a4      	mov	ip, r4
 8007e88:	2402      	movs	r4, #2
 8007e8a:	4667      	mov	r7, ip
 8007e8c:	403c      	ands	r4, r7
 8007e8e:	9f00      	ldr	r7, [sp, #0]
 8007e90:	0fff      	lsrs	r7, r7, #31
 8007e92:	433c      	orrs	r4, r7
 8007e94:	9f01      	ldr	r7, [sp, #4]
 8007e96:	432f      	orrs	r7, r5
 8007e98:	d106      	bne.n	8007ea8 <__ieee754_atan2+0x64>
 8007e9a:	2c02      	cmp	r4, #2
 8007e9c:	d02c      	beq.n	8007ef8 <__ieee754_atan2+0xb4>
 8007e9e:	2c03      	cmp	r4, #3
 8007ea0:	d1e7      	bne.n	8007e72 <__ieee754_atan2+0x2e>
 8007ea2:	4835      	ldr	r0, [pc, #212]	; (8007f78 <__ieee754_atan2+0x134>)
 8007ea4:	4935      	ldr	r1, [pc, #212]	; (8007f7c <__ieee754_atan2+0x138>)
 8007ea6:	e7e4      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007ea8:	0037      	movs	r7, r6
 8007eaa:	4317      	orrs	r7, r2
 8007eac:	d105      	bne.n	8007eba <__ieee754_atan2+0x76>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	4831      	ldr	r0, [pc, #196]	; (8007f78 <__ieee754_atan2+0x134>)
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da59      	bge.n	8007f6a <__ieee754_atan2+0x126>
 8007eb6:	4932      	ldr	r1, [pc, #200]	; (8007f80 <__ieee754_atan2+0x13c>)
 8007eb8:	e7db      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007eba:	4f2d      	ldr	r7, [pc, #180]	; (8007f70 <__ieee754_atan2+0x12c>)
 8007ebc:	42be      	cmp	r6, r7
 8007ebe:	d11e      	bne.n	8007efe <__ieee754_atan2+0xba>
 8007ec0:	42b5      	cmp	r5, r6
 8007ec2:	d10e      	bne.n	8007ee2 <__ieee754_atan2+0x9e>
 8007ec4:	2c02      	cmp	r4, #2
 8007ec6:	d006      	beq.n	8007ed6 <__ieee754_atan2+0x92>
 8007ec8:	2c03      	cmp	r4, #3
 8007eca:	d007      	beq.n	8007edc <__ieee754_atan2+0x98>
 8007ecc:	482a      	ldr	r0, [pc, #168]	; (8007f78 <__ieee754_atan2+0x134>)
 8007ece:	2c01      	cmp	r4, #1
 8007ed0:	d149      	bne.n	8007f66 <__ieee754_atan2+0x122>
 8007ed2:	492c      	ldr	r1, [pc, #176]	; (8007f84 <__ieee754_atan2+0x140>)
 8007ed4:	e7cd      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007ed6:	482c      	ldr	r0, [pc, #176]	; (8007f88 <__ieee754_atan2+0x144>)
 8007ed8:	492c      	ldr	r1, [pc, #176]	; (8007f8c <__ieee754_atan2+0x148>)
 8007eda:	e7ca      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007edc:	482a      	ldr	r0, [pc, #168]	; (8007f88 <__ieee754_atan2+0x144>)
 8007ede:	492c      	ldr	r1, [pc, #176]	; (8007f90 <__ieee754_atan2+0x14c>)
 8007ee0:	e7c7      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007ee2:	2c02      	cmp	r4, #2
 8007ee4:	d008      	beq.n	8007ef8 <__ieee754_atan2+0xb4>
 8007ee6:	2c03      	cmp	r4, #3
 8007ee8:	d0db      	beq.n	8007ea2 <__ieee754_atan2+0x5e>
 8007eea:	2000      	movs	r0, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	2c01      	cmp	r4, #1
 8007ef0:	d1bf      	bne.n	8007e72 <__ieee754_atan2+0x2e>
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	0609      	lsls	r1, r1, #24
 8007ef6:	e7bc      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007ef8:	481f      	ldr	r0, [pc, #124]	; (8007f78 <__ieee754_atan2+0x134>)
 8007efa:	4926      	ldr	r1, [pc, #152]	; (8007f94 <__ieee754_atan2+0x150>)
 8007efc:	e7b9      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007efe:	4f1c      	ldr	r7, [pc, #112]	; (8007f70 <__ieee754_atan2+0x12c>)
 8007f00:	42bd      	cmp	r5, r7
 8007f02:	d0d4      	beq.n	8007eae <__ieee754_atan2+0x6a>
 8007f04:	1bad      	subs	r5, r5, r6
 8007f06:	152d      	asrs	r5, r5, #20
 8007f08:	2d3c      	cmp	r5, #60	; 0x3c
 8007f0a:	dc16      	bgt.n	8007f3a <__ieee754_atan2+0xf6>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da01      	bge.n	8007f14 <__ieee754_atan2+0xd0>
 8007f10:	353c      	adds	r5, #60	; 0x3c
 8007f12:	db15      	blt.n	8007f40 <__ieee754_atan2+0xfc>
 8007f14:	f7f9 fafc 	bl	8001510 <__aeabi_ddiv>
 8007f18:	f001 f8b0 	bl	800907c <fabs>
 8007f1c:	f000 ff26 	bl	8008d6c <atan>
 8007f20:	2c01      	cmp	r4, #1
 8007f22:	d010      	beq.n	8007f46 <__ieee754_atan2+0x102>
 8007f24:	2c02      	cmp	r4, #2
 8007f26:	d013      	beq.n	8007f50 <__ieee754_atan2+0x10c>
 8007f28:	2c00      	cmp	r4, #0
 8007f2a:	d0a2      	beq.n	8007e72 <__ieee754_atan2+0x2e>
 8007f2c:	4a1a      	ldr	r2, [pc, #104]	; (8007f98 <__ieee754_atan2+0x154>)
 8007f2e:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <__ieee754_atan2+0x158>)
 8007f30:	f7fa f9a2 	bl	8002278 <__aeabi_dsub>
 8007f34:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <__ieee754_atan2+0x134>)
 8007f36:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <__ieee754_atan2+0x150>)
 8007f38:	e012      	b.n	8007f60 <__ieee754_atan2+0x11c>
 8007f3a:	480f      	ldr	r0, [pc, #60]	; (8007f78 <__ieee754_atan2+0x134>)
 8007f3c:	4918      	ldr	r1, [pc, #96]	; (8007fa0 <__ieee754_atan2+0x15c>)
 8007f3e:	e7ef      	b.n	8007f20 <__ieee754_atan2+0xdc>
 8007f40:	2000      	movs	r0, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	e7ec      	b.n	8007f20 <__ieee754_atan2+0xdc>
 8007f46:	2480      	movs	r4, #128	; 0x80
 8007f48:	0624      	lsls	r4, r4, #24
 8007f4a:	190b      	adds	r3, r1, r4
 8007f4c:	0019      	movs	r1, r3
 8007f4e:	e790      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007f50:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <__ieee754_atan2+0x154>)
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <__ieee754_atan2+0x158>)
 8007f54:	f7fa f990 	bl	8002278 <__aeabi_dsub>
 8007f58:	0002      	movs	r2, r0
 8007f5a:	000b      	movs	r3, r1
 8007f5c:	4806      	ldr	r0, [pc, #24]	; (8007f78 <__ieee754_atan2+0x134>)
 8007f5e:	490d      	ldr	r1, [pc, #52]	; (8007f94 <__ieee754_atan2+0x150>)
 8007f60:	f7fa f98a 	bl	8002278 <__aeabi_dsub>
 8007f64:	e785      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007f66:	490f      	ldr	r1, [pc, #60]	; (8007fa4 <__ieee754_atan2+0x160>)
 8007f68:	e783      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007f6a:	490d      	ldr	r1, [pc, #52]	; (8007fa0 <__ieee754_atan2+0x15c>)
 8007f6c:	e781      	b.n	8007e72 <__ieee754_atan2+0x2e>
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	c0100000 	.word	0xc0100000
 8007f78:	54442d18 	.word	0x54442d18
 8007f7c:	c00921fb 	.word	0xc00921fb
 8007f80:	bff921fb 	.word	0xbff921fb
 8007f84:	bfe921fb 	.word	0xbfe921fb
 8007f88:	7f3321d2 	.word	0x7f3321d2
 8007f8c:	4002d97c 	.word	0x4002d97c
 8007f90:	c002d97c 	.word	0xc002d97c
 8007f94:	400921fb 	.word	0x400921fb
 8007f98:	33145c07 	.word	0x33145c07
 8007f9c:	3ca1a626 	.word	0x3ca1a626
 8007fa0:	3ff921fb 	.word	0x3ff921fb
 8007fa4:	3fe921fb 	.word	0x3fe921fb

08007fa8 <__ieee754_rem_pio2>:
 8007fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007faa:	004b      	lsls	r3, r1, #1
 8007fac:	b091      	sub	sp, #68	; 0x44
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	0017      	movs	r7, r2
 8007fb4:	4bda      	ldr	r3, [pc, #872]	; (8008320 <__ieee754_rem_pio2+0x378>)
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	9108      	str	r1, [sp, #32]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	dc09      	bgt.n	8007fd2 <__ieee754_rem_pio2+0x2a>
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	000b      	movs	r3, r1
 8007fc2:	603a      	str	r2, [r7, #0]
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60ba      	str	r2, [r7, #8]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	2600      	movs	r6, #0
 8007fd0:	e022      	b.n	8008018 <__ieee754_rem_pio2+0x70>
 8007fd2:	4bd4      	ldr	r3, [pc, #848]	; (8008324 <__ieee754_rem_pio2+0x37c>)
 8007fd4:	9a04      	ldr	r2, [sp, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	dc6a      	bgt.n	80080b0 <__ieee754_rem_pio2+0x108>
 8007fda:	4ed3      	ldr	r6, [pc, #844]	; (8008328 <__ieee754_rem_pio2+0x380>)
 8007fdc:	4ad3      	ldr	r2, [pc, #844]	; (800832c <__ieee754_rem_pio2+0x384>)
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	dd33      	ble.n	800804a <__ieee754_rem_pio2+0xa2>
 8007fe2:	4bd1      	ldr	r3, [pc, #836]	; (8008328 <__ieee754_rem_pio2+0x380>)
 8007fe4:	f7fa f948 	bl	8002278 <__aeabi_dsub>
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	0004      	movs	r4, r0
 8007fec:	000d      	movs	r5, r1
 8007fee:	42b3      	cmp	r3, r6
 8007ff0:	d015      	beq.n	800801e <__ieee754_rem_pio2+0x76>
 8007ff2:	4acf      	ldr	r2, [pc, #828]	; (8008330 <__ieee754_rem_pio2+0x388>)
 8007ff4:	4bcf      	ldr	r3, [pc, #828]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 8007ff6:	f7fa f93f 	bl	8002278 <__aeabi_dsub>
 8007ffa:	0002      	movs	r2, r0
 8007ffc:	000b      	movs	r3, r1
 8007ffe:	0020      	movs	r0, r4
 8008000:	603a      	str	r2, [r7, #0]
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	0029      	movs	r1, r5
 8008006:	f7fa f937 	bl	8002278 <__aeabi_dsub>
 800800a:	4ac9      	ldr	r2, [pc, #804]	; (8008330 <__ieee754_rem_pio2+0x388>)
 800800c:	4bc9      	ldr	r3, [pc, #804]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 800800e:	f7fa f933 	bl	8002278 <__aeabi_dsub>
 8008012:	2601      	movs	r6, #1
 8008014:	60b8      	str	r0, [r7, #8]
 8008016:	60f9      	str	r1, [r7, #12]
 8008018:	0030      	movs	r0, r6
 800801a:	b011      	add	sp, #68	; 0x44
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801e:	22d3      	movs	r2, #211	; 0xd3
 8008020:	4bc4      	ldr	r3, [pc, #784]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 8008022:	0552      	lsls	r2, r2, #21
 8008024:	f7fa f928 	bl	8002278 <__aeabi_dsub>
 8008028:	4ac3      	ldr	r2, [pc, #780]	; (8008338 <__ieee754_rem_pio2+0x390>)
 800802a:	4bc4      	ldr	r3, [pc, #784]	; (800833c <__ieee754_rem_pio2+0x394>)
 800802c:	0004      	movs	r4, r0
 800802e:	000d      	movs	r5, r1
 8008030:	f7fa f922 	bl	8002278 <__aeabi_dsub>
 8008034:	0002      	movs	r2, r0
 8008036:	000b      	movs	r3, r1
 8008038:	0020      	movs	r0, r4
 800803a:	603a      	str	r2, [r7, #0]
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	0029      	movs	r1, r5
 8008040:	f7fa f91a 	bl	8002278 <__aeabi_dsub>
 8008044:	4abc      	ldr	r2, [pc, #752]	; (8008338 <__ieee754_rem_pio2+0x390>)
 8008046:	4bbd      	ldr	r3, [pc, #756]	; (800833c <__ieee754_rem_pio2+0x394>)
 8008048:	e7e1      	b.n	800800e <__ieee754_rem_pio2+0x66>
 800804a:	4bb7      	ldr	r3, [pc, #732]	; (8008328 <__ieee754_rem_pio2+0x380>)
 800804c:	f7f8 ff50 	bl	8000ef0 <__aeabi_dadd>
 8008050:	9b04      	ldr	r3, [sp, #16]
 8008052:	0004      	movs	r4, r0
 8008054:	000d      	movs	r5, r1
 8008056:	42b3      	cmp	r3, r6
 8008058:	d014      	beq.n	8008084 <__ieee754_rem_pio2+0xdc>
 800805a:	4ab5      	ldr	r2, [pc, #724]	; (8008330 <__ieee754_rem_pio2+0x388>)
 800805c:	4bb5      	ldr	r3, [pc, #724]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 800805e:	f7f8 ff47 	bl	8000ef0 <__aeabi_dadd>
 8008062:	0002      	movs	r2, r0
 8008064:	000b      	movs	r3, r1
 8008066:	0020      	movs	r0, r4
 8008068:	603a      	str	r2, [r7, #0]
 800806a:	607b      	str	r3, [r7, #4]
 800806c:	0029      	movs	r1, r5
 800806e:	f7fa f903 	bl	8002278 <__aeabi_dsub>
 8008072:	4aaf      	ldr	r2, [pc, #700]	; (8008330 <__ieee754_rem_pio2+0x388>)
 8008074:	4baf      	ldr	r3, [pc, #700]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 8008076:	f7f8 ff3b 	bl	8000ef0 <__aeabi_dadd>
 800807a:	2601      	movs	r6, #1
 800807c:	60b8      	str	r0, [r7, #8]
 800807e:	60f9      	str	r1, [r7, #12]
 8008080:	4276      	negs	r6, r6
 8008082:	e7c9      	b.n	8008018 <__ieee754_rem_pio2+0x70>
 8008084:	22d3      	movs	r2, #211	; 0xd3
 8008086:	4bab      	ldr	r3, [pc, #684]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 8008088:	0552      	lsls	r2, r2, #21
 800808a:	f7f8 ff31 	bl	8000ef0 <__aeabi_dadd>
 800808e:	4aaa      	ldr	r2, [pc, #680]	; (8008338 <__ieee754_rem_pio2+0x390>)
 8008090:	4baa      	ldr	r3, [pc, #680]	; (800833c <__ieee754_rem_pio2+0x394>)
 8008092:	0004      	movs	r4, r0
 8008094:	000d      	movs	r5, r1
 8008096:	f7f8 ff2b 	bl	8000ef0 <__aeabi_dadd>
 800809a:	0002      	movs	r2, r0
 800809c:	000b      	movs	r3, r1
 800809e:	0020      	movs	r0, r4
 80080a0:	603a      	str	r2, [r7, #0]
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	0029      	movs	r1, r5
 80080a6:	f7fa f8e7 	bl	8002278 <__aeabi_dsub>
 80080aa:	4aa3      	ldr	r2, [pc, #652]	; (8008338 <__ieee754_rem_pio2+0x390>)
 80080ac:	4ba3      	ldr	r3, [pc, #652]	; (800833c <__ieee754_rem_pio2+0x394>)
 80080ae:	e7e2      	b.n	8008076 <__ieee754_rem_pio2+0xce>
 80080b0:	4ba3      	ldr	r3, [pc, #652]	; (8008340 <__ieee754_rem_pio2+0x398>)
 80080b2:	9a04      	ldr	r2, [sp, #16]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dd00      	ble.n	80080ba <__ieee754_rem_pio2+0x112>
 80080b8:	e0d2      	b.n	8008260 <__ieee754_rem_pio2+0x2b8>
 80080ba:	f000 ffdf 	bl	800907c <fabs>
 80080be:	4aa1      	ldr	r2, [pc, #644]	; (8008344 <__ieee754_rem_pio2+0x39c>)
 80080c0:	4ba1      	ldr	r3, [pc, #644]	; (8008348 <__ieee754_rem_pio2+0x3a0>)
 80080c2:	0004      	movs	r4, r0
 80080c4:	000d      	movs	r5, r1
 80080c6:	f7f9 fe57 	bl	8001d78 <__aeabi_dmul>
 80080ca:	2200      	movs	r2, #0
 80080cc:	4b9f      	ldr	r3, [pc, #636]	; (800834c <__ieee754_rem_pio2+0x3a4>)
 80080ce:	f7f8 ff0f 	bl	8000ef0 <__aeabi_dadd>
 80080d2:	f7fa fbe7 	bl	80028a4 <__aeabi_d2iz>
 80080d6:	0006      	movs	r6, r0
 80080d8:	f7fa fc18 	bl	800290c <__aeabi_i2d>
 80080dc:	4a93      	ldr	r2, [pc, #588]	; (800832c <__ieee754_rem_pio2+0x384>)
 80080de:	4b92      	ldr	r3, [pc, #584]	; (8008328 <__ieee754_rem_pio2+0x380>)
 80080e0:	9006      	str	r0, [sp, #24]
 80080e2:	9107      	str	r1, [sp, #28]
 80080e4:	f7f9 fe48 	bl	8001d78 <__aeabi_dmul>
 80080e8:	0002      	movs	r2, r0
 80080ea:	000b      	movs	r3, r1
 80080ec:	0020      	movs	r0, r4
 80080ee:	0029      	movs	r1, r5
 80080f0:	f7fa f8c2 	bl	8002278 <__aeabi_dsub>
 80080f4:	4a8e      	ldr	r2, [pc, #568]	; (8008330 <__ieee754_rem_pio2+0x388>)
 80080f6:	9002      	str	r0, [sp, #8]
 80080f8:	9103      	str	r1, [sp, #12]
 80080fa:	9806      	ldr	r0, [sp, #24]
 80080fc:	9907      	ldr	r1, [sp, #28]
 80080fe:	4b8d      	ldr	r3, [pc, #564]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 8008100:	f7f9 fe3a 	bl	8001d78 <__aeabi_dmul>
 8008104:	0004      	movs	r4, r0
 8008106:	000d      	movs	r5, r1
 8008108:	2e1f      	cmp	r6, #31
 800810a:	dc30      	bgt.n	800816e <__ieee754_rem_pio2+0x1c6>
 800810c:	4a90      	ldr	r2, [pc, #576]	; (8008350 <__ieee754_rem_pio2+0x3a8>)
 800810e:	1e73      	subs	r3, r6, #1
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	589b      	ldr	r3, [r3, r2]
 8008114:	9a04      	ldr	r2, [sp, #16]
 8008116:	429a      	cmp	r2, r3
 8008118:	d029      	beq.n	800816e <__ieee754_rem_pio2+0x1c6>
 800811a:	9802      	ldr	r0, [sp, #8]
 800811c:	9903      	ldr	r1, [sp, #12]
 800811e:	0022      	movs	r2, r4
 8008120:	002b      	movs	r3, r5
 8008122:	f7fa f8a9 	bl	8002278 <__aeabi_dsub>
 8008126:	6038      	str	r0, [r7, #0]
 8008128:	6079      	str	r1, [r7, #4]
 800812a:	9802      	ldr	r0, [sp, #8]
 800812c:	9903      	ldr	r1, [sp, #12]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	9306      	str	r3, [sp, #24]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	f7fa f89d 	bl	8002278 <__aeabi_dsub>
 800813e:	0022      	movs	r2, r4
 8008140:	002b      	movs	r3, r5
 8008142:	f7fa f899 	bl	8002278 <__aeabi_dsub>
 8008146:	000b      	movs	r3, r1
 8008148:	0002      	movs	r2, r0
 800814a:	60ba      	str	r2, [r7, #8]
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db00      	blt.n	8008156 <__ieee754_rem_pio2+0x1ae>
 8008154:	e760      	b.n	8008018 <__ieee754_rem_pio2+0x70>
 8008156:	2280      	movs	r2, #128	; 0x80
 8008158:	0612      	lsls	r2, r2, #24
 800815a:	4694      	mov	ip, r2
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	1889      	adds	r1, r1, r2
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	60b8      	str	r0, [r7, #8]
 8008166:	4463      	add	r3, ip
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	60f9      	str	r1, [r7, #12]
 800816c:	e788      	b.n	8008080 <__ieee754_rem_pio2+0xd8>
 800816e:	0022      	movs	r2, r4
 8008170:	9802      	ldr	r0, [sp, #8]
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	002b      	movs	r3, r5
 8008176:	f7fa f87f 	bl	8002278 <__aeabi_dsub>
 800817a:	000b      	movs	r3, r1
 800817c:	0002      	movs	r2, r0
 800817e:	603a      	str	r2, [r7, #0]
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	0049      	lsls	r1, r1, #1
 8008186:	151b      	asrs	r3, r3, #20
 8008188:	0d49      	lsrs	r1, r1, #21
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	1a59      	subs	r1, r3, r1
 800818e:	2910      	cmp	r1, #16
 8008190:	ddcb      	ble.n	800812a <__ieee754_rem_pio2+0x182>
 8008192:	9806      	ldr	r0, [sp, #24]
 8008194:	9907      	ldr	r1, [sp, #28]
 8008196:	22d3      	movs	r2, #211	; 0xd3
 8008198:	4b66      	ldr	r3, [pc, #408]	; (8008334 <__ieee754_rem_pio2+0x38c>)
 800819a:	0552      	lsls	r2, r2, #21
 800819c:	f7f9 fdec 	bl	8001d78 <__aeabi_dmul>
 80081a0:	0004      	movs	r4, r0
 80081a2:	000d      	movs	r5, r1
 80081a4:	0002      	movs	r2, r0
 80081a6:	000b      	movs	r3, r1
 80081a8:	9802      	ldr	r0, [sp, #8]
 80081aa:	9903      	ldr	r1, [sp, #12]
 80081ac:	f7fa f864 	bl	8002278 <__aeabi_dsub>
 80081b0:	0002      	movs	r2, r0
 80081b2:	000b      	movs	r3, r1
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	9802      	ldr	r0, [sp, #8]
 80081ba:	9903      	ldr	r1, [sp, #12]
 80081bc:	f7fa f85c 	bl	8002278 <__aeabi_dsub>
 80081c0:	0022      	movs	r2, r4
 80081c2:	002b      	movs	r3, r5
 80081c4:	f7fa f858 	bl	8002278 <__aeabi_dsub>
 80081c8:	0004      	movs	r4, r0
 80081ca:	000d      	movs	r5, r1
 80081cc:	9806      	ldr	r0, [sp, #24]
 80081ce:	9907      	ldr	r1, [sp, #28]
 80081d0:	4a59      	ldr	r2, [pc, #356]	; (8008338 <__ieee754_rem_pio2+0x390>)
 80081d2:	4b5a      	ldr	r3, [pc, #360]	; (800833c <__ieee754_rem_pio2+0x394>)
 80081d4:	f7f9 fdd0 	bl	8001d78 <__aeabi_dmul>
 80081d8:	0022      	movs	r2, r4
 80081da:	002b      	movs	r3, r5
 80081dc:	f7fa f84c 	bl	8002278 <__aeabi_dsub>
 80081e0:	0002      	movs	r2, r0
 80081e2:	000b      	movs	r3, r1
 80081e4:	0004      	movs	r4, r0
 80081e6:	000d      	movs	r5, r1
 80081e8:	9804      	ldr	r0, [sp, #16]
 80081ea:	9905      	ldr	r1, [sp, #20]
 80081ec:	f7fa f844 	bl	8002278 <__aeabi_dsub>
 80081f0:	000b      	movs	r3, r1
 80081f2:	0002      	movs	r2, r0
 80081f4:	0049      	lsls	r1, r1, #1
 80081f6:	603a      	str	r2, [r7, #0]
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	0d49      	lsrs	r1, r1, #21
 80081fe:	1a59      	subs	r1, r3, r1
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	9b05      	ldr	r3, [sp, #20]
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	2931      	cmp	r1, #49	; 0x31
 800820a:	dd8e      	ble.n	800812a <__ieee754_rem_pio2+0x182>
 800820c:	9806      	ldr	r0, [sp, #24]
 800820e:	9907      	ldr	r1, [sp, #28]
 8008210:	22b8      	movs	r2, #184	; 0xb8
 8008212:	4b4a      	ldr	r3, [pc, #296]	; (800833c <__ieee754_rem_pio2+0x394>)
 8008214:	0592      	lsls	r2, r2, #22
 8008216:	f7f9 fdaf 	bl	8001d78 <__aeabi_dmul>
 800821a:	0004      	movs	r4, r0
 800821c:	000d      	movs	r5, r1
 800821e:	0002      	movs	r2, r0
 8008220:	000b      	movs	r3, r1
 8008222:	9802      	ldr	r0, [sp, #8]
 8008224:	9903      	ldr	r1, [sp, #12]
 8008226:	f7fa f827 	bl	8002278 <__aeabi_dsub>
 800822a:	0002      	movs	r2, r0
 800822c:	000b      	movs	r3, r1
 800822e:	9002      	str	r0, [sp, #8]
 8008230:	9103      	str	r1, [sp, #12]
 8008232:	9804      	ldr	r0, [sp, #16]
 8008234:	9905      	ldr	r1, [sp, #20]
 8008236:	f7fa f81f 	bl	8002278 <__aeabi_dsub>
 800823a:	0022      	movs	r2, r4
 800823c:	002b      	movs	r3, r5
 800823e:	f7fa f81b 	bl	8002278 <__aeabi_dsub>
 8008242:	0004      	movs	r4, r0
 8008244:	000d      	movs	r5, r1
 8008246:	9806      	ldr	r0, [sp, #24]
 8008248:	9907      	ldr	r1, [sp, #28]
 800824a:	4a42      	ldr	r2, [pc, #264]	; (8008354 <__ieee754_rem_pio2+0x3ac>)
 800824c:	4b42      	ldr	r3, [pc, #264]	; (8008358 <__ieee754_rem_pio2+0x3b0>)
 800824e:	f7f9 fd93 	bl	8001d78 <__aeabi_dmul>
 8008252:	0022      	movs	r2, r4
 8008254:	002b      	movs	r3, r5
 8008256:	f7fa f80f 	bl	8002278 <__aeabi_dsub>
 800825a:	0004      	movs	r4, r0
 800825c:	000d      	movs	r5, r1
 800825e:	e75c      	b.n	800811a <__ieee754_rem_pio2+0x172>
 8008260:	4b3e      	ldr	r3, [pc, #248]	; (800835c <__ieee754_rem_pio2+0x3b4>)
 8008262:	9a04      	ldr	r2, [sp, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	dd08      	ble.n	800827a <__ieee754_rem_pio2+0x2d2>
 8008268:	0002      	movs	r2, r0
 800826a:	000b      	movs	r3, r1
 800826c:	f7fa f804 	bl	8002278 <__aeabi_dsub>
 8008270:	60b8      	str	r0, [r7, #8]
 8008272:	60f9      	str	r1, [r7, #12]
 8008274:	6038      	str	r0, [r7, #0]
 8008276:	6079      	str	r1, [r7, #4]
 8008278:	e6a9      	b.n	8007fce <__ieee754_rem_pio2+0x26>
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	4938      	ldr	r1, [pc, #224]	; (8008360 <__ieee754_rem_pio2+0x3b8>)
 800827e:	1512      	asrs	r2, r2, #20
 8008280:	1852      	adds	r2, r2, r1
 8008282:	0513      	lsls	r3, r2, #20
 8008284:	9202      	str	r2, [sp, #8]
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	0004      	movs	r4, r0
 800828a:	1ad5      	subs	r5, r2, r3
 800828c:	0029      	movs	r1, r5
 800828e:	f7fa fb09 	bl	80028a4 <__aeabi_d2iz>
 8008292:	f7fa fb3b 	bl	800290c <__aeabi_i2d>
 8008296:	0002      	movs	r2, r0
 8008298:	000b      	movs	r3, r1
 800829a:	0020      	movs	r0, r4
 800829c:	0029      	movs	r1, r5
 800829e:	920a      	str	r2, [sp, #40]	; 0x28
 80082a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a2:	f7f9 ffe9 	bl	8002278 <__aeabi_dsub>
 80082a6:	2200      	movs	r2, #0
 80082a8:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <__ieee754_rem_pio2+0x3bc>)
 80082aa:	f7f9 fd65 	bl	8001d78 <__aeabi_dmul>
 80082ae:	0004      	movs	r4, r0
 80082b0:	000d      	movs	r5, r1
 80082b2:	f7fa faf7 	bl	80028a4 <__aeabi_d2iz>
 80082b6:	f7fa fb29 	bl	800290c <__aeabi_i2d>
 80082ba:	0002      	movs	r2, r0
 80082bc:	000b      	movs	r3, r1
 80082be:	ae0a      	add	r6, sp, #40	; 0x28
 80082c0:	60b2      	str	r2, [r6, #8]
 80082c2:	60f3      	str	r3, [r6, #12]
 80082c4:	0020      	movs	r0, r4
 80082c6:	0029      	movs	r1, r5
 80082c8:	f7f9 ffd6 	bl	8002278 <__aeabi_dsub>
 80082cc:	2200      	movs	r2, #0
 80082ce:	4b25      	ldr	r3, [pc, #148]	; (8008364 <__ieee754_rem_pio2+0x3bc>)
 80082d0:	f7f9 fd52 	bl	8001d78 <__aeabi_dmul>
 80082d4:	2403      	movs	r4, #3
 80082d6:	6130      	str	r0, [r6, #16]
 80082d8:	6171      	str	r1, [r6, #20]
 80082da:	1e65      	subs	r5, r4, #1
 80082dc:	00eb      	lsls	r3, r5, #3
 80082de:	18f3      	adds	r3, r6, r3
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	6859      	ldr	r1, [r3, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	f7f8 f89e 	bl	8000428 <__aeabi_dcmpeq>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d13d      	bne.n	800836c <__ieee754_rem_pio2+0x3c4>
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <__ieee754_rem_pio2+0x3c0>)
 80082f2:	0030      	movs	r0, r6
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	2302      	movs	r3, #2
 80082f8:	9a02      	ldr	r2, [sp, #8]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	0039      	movs	r1, r7
 80082fe:	0023      	movs	r3, r4
 8008300:	f000 f912 	bl	8008528 <__kernel_rem_pio2>
 8008304:	9b08      	ldr	r3, [sp, #32]
 8008306:	0006      	movs	r6, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	db00      	blt.n	800830e <__ieee754_rem_pio2+0x366>
 800830c:	e684      	b.n	8008018 <__ieee754_rem_pio2+0x70>
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	0612      	lsls	r2, r2, #24
 8008314:	189b      	adds	r3, r3, r2
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	189b      	adds	r3, r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	e6af      	b.n	8008080 <__ieee754_rem_pio2+0xd8>
 8008320:	3fe921fb 	.word	0x3fe921fb
 8008324:	4002d97b 	.word	0x4002d97b
 8008328:	3ff921fb 	.word	0x3ff921fb
 800832c:	54400000 	.word	0x54400000
 8008330:	1a626331 	.word	0x1a626331
 8008334:	3dd0b461 	.word	0x3dd0b461
 8008338:	2e037073 	.word	0x2e037073
 800833c:	3ba3198a 	.word	0x3ba3198a
 8008340:	413921fb 	.word	0x413921fb
 8008344:	6dc9c883 	.word	0x6dc9c883
 8008348:	3fe45f30 	.word	0x3fe45f30
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	080094d0 	.word	0x080094d0
 8008354:	252049c1 	.word	0x252049c1
 8008358:	397b839a 	.word	0x397b839a
 800835c:	7fefffff 	.word	0x7fefffff
 8008360:	fffffbea 	.word	0xfffffbea
 8008364:	41700000 	.word	0x41700000
 8008368:	08009550 	.word	0x08009550
 800836c:	002c      	movs	r4, r5
 800836e:	e7b4      	b.n	80082da <__ieee754_rem_pio2+0x332>

08008370 <__kernel_cos>:
 8008370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	9204      	str	r2, [sp, #16]
 8008376:	9305      	str	r3, [sp, #20]
 8008378:	4b58      	ldr	r3, [pc, #352]	; (80084dc <__kernel_cos+0x16c>)
 800837a:	004d      	lsls	r5, r1, #1
 800837c:	9001      	str	r0, [sp, #4]
 800837e:	9100      	str	r1, [sp, #0]
 8008380:	086d      	lsrs	r5, r5, #1
 8008382:	429d      	cmp	r5, r3
 8008384:	dc06      	bgt.n	8008394 <__kernel_cos+0x24>
 8008386:	9801      	ldr	r0, [sp, #4]
 8008388:	9900      	ldr	r1, [sp, #0]
 800838a:	f7fa fa8b 	bl	80028a4 <__aeabi_d2iz>
 800838e:	2800      	cmp	r0, #0
 8008390:	d100      	bne.n	8008394 <__kernel_cos+0x24>
 8008392:	e0a0      	b.n	80084d6 <__kernel_cos+0x166>
 8008394:	9a01      	ldr	r2, [sp, #4]
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	9801      	ldr	r0, [sp, #4]
 800839a:	9900      	ldr	r1, [sp, #0]
 800839c:	f7f9 fcec 	bl	8001d78 <__aeabi_dmul>
 80083a0:	0006      	movs	r6, r0
 80083a2:	000f      	movs	r7, r1
 80083a4:	4a4e      	ldr	r2, [pc, #312]	; (80084e0 <__kernel_cos+0x170>)
 80083a6:	4b4f      	ldr	r3, [pc, #316]	; (80084e4 <__kernel_cos+0x174>)
 80083a8:	f7f9 fce6 	bl	8001d78 <__aeabi_dmul>
 80083ac:	4a4e      	ldr	r2, [pc, #312]	; (80084e8 <__kernel_cos+0x178>)
 80083ae:	4b4f      	ldr	r3, [pc, #316]	; (80084ec <__kernel_cos+0x17c>)
 80083b0:	f7f8 fd9e 	bl	8000ef0 <__aeabi_dadd>
 80083b4:	0032      	movs	r2, r6
 80083b6:	003b      	movs	r3, r7
 80083b8:	f7f9 fcde 	bl	8001d78 <__aeabi_dmul>
 80083bc:	4a4c      	ldr	r2, [pc, #304]	; (80084f0 <__kernel_cos+0x180>)
 80083be:	4b4d      	ldr	r3, [pc, #308]	; (80084f4 <__kernel_cos+0x184>)
 80083c0:	f7f9 ff5a 	bl	8002278 <__aeabi_dsub>
 80083c4:	0032      	movs	r2, r6
 80083c6:	003b      	movs	r3, r7
 80083c8:	f7f9 fcd6 	bl	8001d78 <__aeabi_dmul>
 80083cc:	4a4a      	ldr	r2, [pc, #296]	; (80084f8 <__kernel_cos+0x188>)
 80083ce:	4b4b      	ldr	r3, [pc, #300]	; (80084fc <__kernel_cos+0x18c>)
 80083d0:	f7f8 fd8e 	bl	8000ef0 <__aeabi_dadd>
 80083d4:	0032      	movs	r2, r6
 80083d6:	003b      	movs	r3, r7
 80083d8:	f7f9 fcce 	bl	8001d78 <__aeabi_dmul>
 80083dc:	4a48      	ldr	r2, [pc, #288]	; (8008500 <__kernel_cos+0x190>)
 80083de:	4b49      	ldr	r3, [pc, #292]	; (8008504 <__kernel_cos+0x194>)
 80083e0:	f7f9 ff4a 	bl	8002278 <__aeabi_dsub>
 80083e4:	0032      	movs	r2, r6
 80083e6:	003b      	movs	r3, r7
 80083e8:	f7f9 fcc6 	bl	8001d78 <__aeabi_dmul>
 80083ec:	4a46      	ldr	r2, [pc, #280]	; (8008508 <__kernel_cos+0x198>)
 80083ee:	4b47      	ldr	r3, [pc, #284]	; (800850c <__kernel_cos+0x19c>)
 80083f0:	f7f8 fd7e 	bl	8000ef0 <__aeabi_dadd>
 80083f4:	003b      	movs	r3, r7
 80083f6:	0032      	movs	r2, r6
 80083f8:	f7f9 fcbe 	bl	8001d78 <__aeabi_dmul>
 80083fc:	4b44      	ldr	r3, [pc, #272]	; (8008510 <__kernel_cos+0x1a0>)
 80083fe:	9002      	str	r0, [sp, #8]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	429d      	cmp	r5, r3
 8008404:	dc29      	bgt.n	800845a <__kernel_cos+0xea>
 8008406:	2200      	movs	r2, #0
 8008408:	4b42      	ldr	r3, [pc, #264]	; (8008514 <__kernel_cos+0x1a4>)
 800840a:	0030      	movs	r0, r6
 800840c:	0039      	movs	r1, r7
 800840e:	f7f9 fcb3 	bl	8001d78 <__aeabi_dmul>
 8008412:	9a02      	ldr	r2, [sp, #8]
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	9006      	str	r0, [sp, #24]
 8008418:	9107      	str	r1, [sp, #28]
 800841a:	0030      	movs	r0, r6
 800841c:	0039      	movs	r1, r7
 800841e:	f7f9 fcab 	bl	8001d78 <__aeabi_dmul>
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	9b05      	ldr	r3, [sp, #20]
 8008426:	0004      	movs	r4, r0
 8008428:	000d      	movs	r5, r1
 800842a:	9801      	ldr	r0, [sp, #4]
 800842c:	9900      	ldr	r1, [sp, #0]
 800842e:	f7f9 fca3 	bl	8001d78 <__aeabi_dmul>
 8008432:	0002      	movs	r2, r0
 8008434:	000b      	movs	r3, r1
 8008436:	0020      	movs	r0, r4
 8008438:	0029      	movs	r1, r5
 800843a:	f7f9 ff1d 	bl	8002278 <__aeabi_dsub>
 800843e:	0002      	movs	r2, r0
 8008440:	000b      	movs	r3, r1
 8008442:	9806      	ldr	r0, [sp, #24]
 8008444:	9907      	ldr	r1, [sp, #28]
 8008446:	f7f9 ff17 	bl	8002278 <__aeabi_dsub>
 800844a:	0002      	movs	r2, r0
 800844c:	2000      	movs	r0, #0
 800844e:	000b      	movs	r3, r1
 8008450:	4931      	ldr	r1, [pc, #196]	; (8008518 <__kernel_cos+0x1a8>)
 8008452:	f7f9 ff11 	bl	8002278 <__aeabi_dsub>
 8008456:	b00b      	add	sp, #44	; 0x2c
 8008458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845a:	4b30      	ldr	r3, [pc, #192]	; (800851c <__kernel_cos+0x1ac>)
 800845c:	429d      	cmp	r5, r3
 800845e:	dc37      	bgt.n	80084d0 <__kernel_cos+0x160>
 8008460:	2200      	movs	r2, #0
 8008462:	492f      	ldr	r1, [pc, #188]	; (8008520 <__kernel_cos+0x1b0>)
 8008464:	0014      	movs	r4, r2
 8008466:	186b      	adds	r3, r5, r1
 8008468:	001d      	movs	r5, r3
 800846a:	0022      	movs	r2, r4
 800846c:	002b      	movs	r3, r5
 800846e:	2000      	movs	r0, #0
 8008470:	4929      	ldr	r1, [pc, #164]	; (8008518 <__kernel_cos+0x1a8>)
 8008472:	f7f9 ff01 	bl	8002278 <__aeabi_dsub>
 8008476:	2200      	movs	r2, #0
 8008478:	9006      	str	r0, [sp, #24]
 800847a:	9107      	str	r1, [sp, #28]
 800847c:	4b25      	ldr	r3, [pc, #148]	; (8008514 <__kernel_cos+0x1a4>)
 800847e:	0030      	movs	r0, r6
 8008480:	0039      	movs	r1, r7
 8008482:	f7f9 fc79 	bl	8001d78 <__aeabi_dmul>
 8008486:	0022      	movs	r2, r4
 8008488:	002b      	movs	r3, r5
 800848a:	f7f9 fef5 	bl	8002278 <__aeabi_dsub>
 800848e:	9a02      	ldr	r2, [sp, #8]
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	9008      	str	r0, [sp, #32]
 8008494:	9109      	str	r1, [sp, #36]	; 0x24
 8008496:	0030      	movs	r0, r6
 8008498:	0039      	movs	r1, r7
 800849a:	f7f9 fc6d 	bl	8001d78 <__aeabi_dmul>
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	9b05      	ldr	r3, [sp, #20]
 80084a2:	0004      	movs	r4, r0
 80084a4:	000d      	movs	r5, r1
 80084a6:	9801      	ldr	r0, [sp, #4]
 80084a8:	9900      	ldr	r1, [sp, #0]
 80084aa:	f7f9 fc65 	bl	8001d78 <__aeabi_dmul>
 80084ae:	0002      	movs	r2, r0
 80084b0:	000b      	movs	r3, r1
 80084b2:	0020      	movs	r0, r4
 80084b4:	0029      	movs	r1, r5
 80084b6:	f7f9 fedf 	bl	8002278 <__aeabi_dsub>
 80084ba:	0002      	movs	r2, r0
 80084bc:	000b      	movs	r3, r1
 80084be:	9808      	ldr	r0, [sp, #32]
 80084c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c2:	f7f9 fed9 	bl	8002278 <__aeabi_dsub>
 80084c6:	0002      	movs	r2, r0
 80084c8:	000b      	movs	r3, r1
 80084ca:	9806      	ldr	r0, [sp, #24]
 80084cc:	9907      	ldr	r1, [sp, #28]
 80084ce:	e7c0      	b.n	8008452 <__kernel_cos+0xe2>
 80084d0:	2400      	movs	r4, #0
 80084d2:	4d14      	ldr	r5, [pc, #80]	; (8008524 <__kernel_cos+0x1b4>)
 80084d4:	e7c9      	b.n	800846a <__kernel_cos+0xfa>
 80084d6:	2000      	movs	r0, #0
 80084d8:	490f      	ldr	r1, [pc, #60]	; (8008518 <__kernel_cos+0x1a8>)
 80084da:	e7bc      	b.n	8008456 <__kernel_cos+0xe6>
 80084dc:	3e3fffff 	.word	0x3e3fffff
 80084e0:	be8838d4 	.word	0xbe8838d4
 80084e4:	bda8fae9 	.word	0xbda8fae9
 80084e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80084ec:	3e21ee9e 	.word	0x3e21ee9e
 80084f0:	809c52ad 	.word	0x809c52ad
 80084f4:	3e927e4f 	.word	0x3e927e4f
 80084f8:	19cb1590 	.word	0x19cb1590
 80084fc:	3efa01a0 	.word	0x3efa01a0
 8008500:	16c15177 	.word	0x16c15177
 8008504:	3f56c16c 	.word	0x3f56c16c
 8008508:	5555554c 	.word	0x5555554c
 800850c:	3fa55555 	.word	0x3fa55555
 8008510:	3fd33332 	.word	0x3fd33332
 8008514:	3fe00000 	.word	0x3fe00000
 8008518:	3ff00000 	.word	0x3ff00000
 800851c:	3fe90000 	.word	0x3fe90000
 8008520:	ffe00000 	.word	0xffe00000
 8008524:	3fd20000 	.word	0x3fd20000

08008528 <__kernel_rem_pio2>:
 8008528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852a:	0015      	movs	r5, r2
 800852c:	4cd4      	ldr	r4, [pc, #848]	; (8008880 <__kernel_rem_pio2+0x358>)
 800852e:	44a5      	add	sp, r4
 8008530:	930c      	str	r3, [sp, #48]	; 0x30
 8008532:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008534:	900d      	str	r0, [sp, #52]	; 0x34
 8008536:	009a      	lsls	r2, r3, #2
 8008538:	4bd2      	ldr	r3, [pc, #840]	; (8008884 <__kernel_rem_pio2+0x35c>)
 800853a:	9106      	str	r1, [sp, #24]
 800853c:	58d3      	ldr	r3, [r2, r3]
 800853e:	1ee8      	subs	r0, r5, #3
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008544:	2118      	movs	r1, #24
 8008546:	3b01      	subs	r3, #1
 8008548:	930a      	str	r3, [sp, #40]	; 0x28
 800854a:	f7f7 fe71 	bl	8000230 <__divsi3>
 800854e:	43c3      	mvns	r3, r0
 8008550:	0004      	movs	r4, r0
 8008552:	17db      	asrs	r3, r3, #31
 8008554:	401c      	ands	r4, r3
 8008556:	2318      	movs	r3, #24
 8008558:	1c62      	adds	r2, r4, #1
 800855a:	425b      	negs	r3, r3
 800855c:	4353      	muls	r3, r2
 800855e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008560:	195b      	adds	r3, r3, r5
 8008562:	4694      	mov	ip, r2
 8008564:	2500      	movs	r5, #0
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	1aa7      	subs	r7, r4, r2
 800856c:	4463      	add	r3, ip
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008572:	00be      	lsls	r6, r7, #2
 8008574:	199e      	adds	r6, r3, r6
 8008576:	9b00      	ldr	r3, [sp, #0]
 8008578:	429d      	cmp	r5, r3
 800857a:	dd0b      	ble.n	8008594 <__kernel_rem_pio2+0x6c>
 800857c:	2500      	movs	r5, #0
 800857e:	9b08      	ldr	r3, [sp, #32]
 8008580:	429d      	cmp	r5, r3
 8008582:	dc3c      	bgt.n	80085fe <__kernel_rem_pio2+0xd6>
 8008584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008586:	2600      	movs	r6, #0
 8008588:	195f      	adds	r7, r3, r5
 800858a:	00fb      	lsls	r3, r7, #3
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	2700      	movs	r7, #0
 8008590:	2300      	movs	r3, #0
 8008592:	e028      	b.n	80085e6 <__kernel_rem_pio2+0xbe>
 8008594:	42ef      	cmn	r7, r5
 8008596:	d40a      	bmi.n	80085ae <__kernel_rem_pio2+0x86>
 8008598:	00ab      	lsls	r3, r5, #2
 800859a:	58f0      	ldr	r0, [r6, r3]
 800859c:	f7fa f9b6 	bl	800290c <__aeabi_i2d>
 80085a0:	00eb      	lsls	r3, r5, #3
 80085a2:	aa26      	add	r2, sp, #152	; 0x98
 80085a4:	18d3      	adds	r3, r2, r3
 80085a6:	6018      	str	r0, [r3, #0]
 80085a8:	6059      	str	r1, [r3, #4]
 80085aa:	3501      	adds	r5, #1
 80085ac:	e7e3      	b.n	8008576 <__kernel_rem_pio2+0x4e>
 80085ae:	2000      	movs	r0, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	e7f5      	b.n	80085a0 <__kernel_rem_pio2+0x78>
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	1ad1      	subs	r1, r2, r3
 80085bc:	3908      	subs	r1, #8
 80085be:	aa26      	add	r2, sp, #152	; 0x98
 80085c0:	1851      	adds	r1, r2, r1
 80085c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	6849      	ldr	r1, [r1, #4]
 80085c8:	18d3      	adds	r3, r2, r3
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f7f9 fbd3 	bl	8001d78 <__aeabi_dmul>
 80085d2:	000b      	movs	r3, r1
 80085d4:	0002      	movs	r2, r0
 80085d6:	0039      	movs	r1, r7
 80085d8:	0030      	movs	r0, r6
 80085da:	f7f8 fc89 	bl	8000ef0 <__aeabi_dadd>
 80085de:	0006      	movs	r6, r0
 80085e0:	000f      	movs	r7, r1
 80085e2:	9b00      	ldr	r3, [sp, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ec:	4293      	cmp	r3, r2
 80085ee:	dde1      	ble.n	80085b4 <__kernel_rem_pio2+0x8c>
 80085f0:	00eb      	lsls	r3, r5, #3
 80085f2:	aa76      	add	r2, sp, #472	; 0x1d8
 80085f4:	18d3      	adds	r3, r2, r3
 80085f6:	601e      	str	r6, [r3, #0]
 80085f8:	605f      	str	r7, [r3, #4]
 80085fa:	3501      	adds	r5, #1
 80085fc:	e7bf      	b.n	800857e <__kernel_rem_pio2+0x56>
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	aa12      	add	r2, sp, #72	; 0x48
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	189b      	adds	r3, r3, r2
 8008606:	9310      	str	r3, [sp, #64]	; 0x40
 8008608:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800860a:	00a4      	lsls	r4, r4, #2
 800860c:	191b      	adds	r3, r3, r4
 800860e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	425b      	negs	r3, r3
 8008616:	930e      	str	r3, [sp, #56]	; 0x38
 8008618:	9b08      	ldr	r3, [sp, #32]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	aa76      	add	r2, sp, #472	; 0x1d8
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	18d3      	adds	r3, r2, r3
 8008624:	681e      	ldr	r6, [r3, #0]
 8008626:	685f      	ldr	r7, [r3, #4]
 8008628:	9b00      	ldr	r3, [sp, #0]
 800862a:	a912      	add	r1, sp, #72	; 0x48
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	185b      	adds	r3, r3, r1
 8008630:	9c00      	ldr	r4, [sp, #0]
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	9211      	str	r2, [sp, #68]	; 0x44
 8008636:	2c00      	cmp	r4, #0
 8008638:	dc73      	bgt.n	8008722 <__kernel_rem_pio2+0x1fa>
 800863a:	9a02      	ldr	r2, [sp, #8]
 800863c:	0030      	movs	r0, r6
 800863e:	0039      	movs	r1, r7
 8008640:	f000 fda2 	bl	8009188 <scalbn>
 8008644:	23ff      	movs	r3, #255	; 0xff
 8008646:	2200      	movs	r2, #0
 8008648:	059b      	lsls	r3, r3, #22
 800864a:	0004      	movs	r4, r0
 800864c:	000d      	movs	r5, r1
 800864e:	f7f9 fb93 	bl	8001d78 <__aeabi_dmul>
 8008652:	f000 fd17 	bl	8009084 <floor>
 8008656:	2200      	movs	r2, #0
 8008658:	4b8b      	ldr	r3, [pc, #556]	; (8008888 <__kernel_rem_pio2+0x360>)
 800865a:	f7f9 fb8d 	bl	8001d78 <__aeabi_dmul>
 800865e:	0002      	movs	r2, r0
 8008660:	000b      	movs	r3, r1
 8008662:	0020      	movs	r0, r4
 8008664:	0029      	movs	r1, r5
 8008666:	f7f9 fe07 	bl	8002278 <__aeabi_dsub>
 800866a:	000d      	movs	r5, r1
 800866c:	0004      	movs	r4, r0
 800866e:	f7fa f919 	bl	80028a4 <__aeabi_d2iz>
 8008672:	9007      	str	r0, [sp, #28]
 8008674:	f7fa f94a 	bl	800290c <__aeabi_i2d>
 8008678:	000b      	movs	r3, r1
 800867a:	0002      	movs	r2, r0
 800867c:	0029      	movs	r1, r5
 800867e:	0020      	movs	r0, r4
 8008680:	f7f9 fdfa 	bl	8002278 <__aeabi_dsub>
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	0006      	movs	r6, r0
 8008688:	000f      	movs	r7, r1
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd72      	ble.n	8008774 <__kernel_rem_pio2+0x24c>
 800868e:	2118      	movs	r1, #24
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	aa12      	add	r2, sp, #72	; 0x48
 8008694:	3b01      	subs	r3, #1
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	589a      	ldr	r2, [r3, r2]
 800869a:	9802      	ldr	r0, [sp, #8]
 800869c:	9c07      	ldr	r4, [sp, #28]
 800869e:	1a09      	subs	r1, r1, r0
 80086a0:	0010      	movs	r0, r2
 80086a2:	4108      	asrs	r0, r1
 80086a4:	1824      	adds	r4, r4, r0
 80086a6:	4088      	lsls	r0, r1
 80086a8:	1a10      	subs	r0, r2, r0
 80086aa:	aa12      	add	r2, sp, #72	; 0x48
 80086ac:	5098      	str	r0, [r3, r2]
 80086ae:	2317      	movs	r3, #23
 80086b0:	9a02      	ldr	r2, [sp, #8]
 80086b2:	9407      	str	r4, [sp, #28]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	4118      	asrs	r0, r3
 80086b8:	9004      	str	r0, [sp, #16]
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd6b      	ble.n	8008798 <__kernel_rem_pio2+0x270>
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	2200      	movs	r2, #0
 80086c4:	3301      	adds	r3, #1
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	2301      	movs	r3, #1
 80086ca:	2580      	movs	r5, #128	; 0x80
 80086cc:	0014      	movs	r4, r2
 80086ce:	469c      	mov	ip, r3
 80086d0:	046d      	lsls	r5, r5, #17
 80086d2:	9b00      	ldr	r3, [sp, #0]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	dd00      	ble.n	80086da <__kernel_rem_pio2+0x1b2>
 80086d8:	e0a3      	b.n	8008822 <__kernel_rem_pio2+0x2fa>
 80086da:	9b02      	ldr	r3, [sp, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dd05      	ble.n	80086ec <__kernel_rem_pio2+0x1c4>
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d100      	bne.n	80086e6 <__kernel_rem_pio2+0x1be>
 80086e4:	e0b1      	b.n	800884a <__kernel_rem_pio2+0x322>
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d100      	bne.n	80086ec <__kernel_rem_pio2+0x1c4>
 80086ea:	e0b9      	b.n	8008860 <__kernel_rem_pio2+0x338>
 80086ec:	9b04      	ldr	r3, [sp, #16]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d152      	bne.n	8008798 <__kernel_rem_pio2+0x270>
 80086f2:	0032      	movs	r2, r6
 80086f4:	003b      	movs	r3, r7
 80086f6:	2000      	movs	r0, #0
 80086f8:	4964      	ldr	r1, [pc, #400]	; (800888c <__kernel_rem_pio2+0x364>)
 80086fa:	f7f9 fdbd 	bl	8002278 <__aeabi_dsub>
 80086fe:	0006      	movs	r6, r0
 8008700:	000f      	movs	r7, r1
 8008702:	2c00      	cmp	r4, #0
 8008704:	d048      	beq.n	8008798 <__kernel_rem_pio2+0x270>
 8008706:	9a02      	ldr	r2, [sp, #8]
 8008708:	2000      	movs	r0, #0
 800870a:	4960      	ldr	r1, [pc, #384]	; (800888c <__kernel_rem_pio2+0x364>)
 800870c:	f000 fd3c 	bl	8009188 <scalbn>
 8008710:	0002      	movs	r2, r0
 8008712:	000b      	movs	r3, r1
 8008714:	0030      	movs	r0, r6
 8008716:	0039      	movs	r1, r7
 8008718:	f7f9 fdae 	bl	8002278 <__aeabi_dsub>
 800871c:	0006      	movs	r6, r0
 800871e:	000f      	movs	r7, r1
 8008720:	e03a      	b.n	8008798 <__kernel_rem_pio2+0x270>
 8008722:	2200      	movs	r2, #0
 8008724:	4b5a      	ldr	r3, [pc, #360]	; (8008890 <__kernel_rem_pio2+0x368>)
 8008726:	0030      	movs	r0, r6
 8008728:	0039      	movs	r1, r7
 800872a:	f7f9 fb25 	bl	8001d78 <__aeabi_dmul>
 800872e:	f7fa f8b9 	bl	80028a4 <__aeabi_d2iz>
 8008732:	f7fa f8eb 	bl	800290c <__aeabi_i2d>
 8008736:	2200      	movs	r2, #0
 8008738:	4b56      	ldr	r3, [pc, #344]	; (8008894 <__kernel_rem_pio2+0x36c>)
 800873a:	9004      	str	r0, [sp, #16]
 800873c:	9105      	str	r1, [sp, #20]
 800873e:	f7f9 fb1b 	bl	8001d78 <__aeabi_dmul>
 8008742:	0002      	movs	r2, r0
 8008744:	000b      	movs	r3, r1
 8008746:	0030      	movs	r0, r6
 8008748:	0039      	movs	r1, r7
 800874a:	f7f9 fd95 	bl	8002278 <__aeabi_dsub>
 800874e:	f7fa f8a9 	bl	80028a4 <__aeabi_d2iz>
 8008752:	00a5      	lsls	r5, r4, #2
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008758:	426d      	negs	r5, r5
 800875a:	3c01      	subs	r4, #1
 800875c:	5158      	str	r0, [r3, r5]
 800875e:	00e3      	lsls	r3, r4, #3
 8008760:	18d3      	adds	r3, r2, r3
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	9804      	ldr	r0, [sp, #16]
 8008768:	9905      	ldr	r1, [sp, #20]
 800876a:	f7f8 fbc1 	bl	8000ef0 <__aeabi_dadd>
 800876e:	0006      	movs	r6, r0
 8008770:	000f      	movs	r7, r1
 8008772:	e760      	b.n	8008636 <__kernel_rem_pio2+0x10e>
 8008774:	9b02      	ldr	r3, [sp, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d107      	bne.n	800878a <__kernel_rem_pio2+0x262>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	aa12      	add	r2, sp, #72	; 0x48
 800877e:	3b01      	subs	r3, #1
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	5898      	ldr	r0, [r3, r2]
 8008784:	15c3      	asrs	r3, r0, #23
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	e797      	b.n	80086ba <__kernel_rem_pio2+0x192>
 800878a:	2200      	movs	r2, #0
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <__kernel_rem_pio2+0x370>)
 800878e:	f7f7 fe6f 	bl	8000470 <__aeabi_dcmpge>
 8008792:	2800      	cmp	r0, #0
 8008794:	d142      	bne.n	800881c <__kernel_rem_pio2+0x2f4>
 8008796:	9004      	str	r0, [sp, #16]
 8008798:	2200      	movs	r2, #0
 800879a:	2300      	movs	r3, #0
 800879c:	0030      	movs	r0, r6
 800879e:	0039      	movs	r1, r7
 80087a0:	f7f7 fe42 	bl	8000428 <__aeabi_dcmpeq>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d100      	bne.n	80087aa <__kernel_rem_pio2+0x282>
 80087a8:	e0b4      	b.n	8008914 <__kernel_rem_pio2+0x3ec>
 80087aa:	2200      	movs	r2, #0
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	1e59      	subs	r1, r3, #1
 80087b0:	9808      	ldr	r0, [sp, #32]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	4298      	cmp	r0, r3
 80087b6:	dd5c      	ble.n	8008872 <__kernel_rem_pio2+0x34a>
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d000      	beq.n	80087be <__kernel_rem_pio2+0x296>
 80087bc:	e084      	b.n	80088c8 <__kernel_rem_pio2+0x3a0>
 80087be:	2301      	movs	r3, #1
 80087c0:	009a      	lsls	r2, r3, #2
 80087c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80087c4:	4252      	negs	r2, r2
 80087c6:	588a      	ldr	r2, [r1, r2]
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	d057      	beq.n	800887c <__kernel_rem_pio2+0x354>
 80087cc:	9a00      	ldr	r2, [sp, #0]
 80087ce:	9900      	ldr	r1, [sp, #0]
 80087d0:	1c57      	adds	r7, r2, #1
 80087d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d4:	18cb      	adds	r3, r1, r3
 80087d6:	1854      	adds	r4, r2, r1
 80087d8:	00e4      	lsls	r4, r4, #3
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	429f      	cmp	r7, r3
 80087e0:	dd00      	ble.n	80087e4 <__kernel_rem_pio2+0x2bc>
 80087e2:	e71a      	b.n	800861a <__kernel_rem_pio2+0xf2>
 80087e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087e6:	ab26      	add	r3, sp, #152	; 0x98
 80087e8:	191e      	adds	r6, r3, r4
 80087ea:	00bb      	lsls	r3, r7, #2
 80087ec:	58d0      	ldr	r0, [r2, r3]
 80087ee:	f7fa f88d 	bl	800290c <__aeabi_i2d>
 80087f2:	2200      	movs	r2, #0
 80087f4:	2300      	movs	r3, #0
 80087f6:	2500      	movs	r5, #0
 80087f8:	6030      	str	r0, [r6, #0]
 80087fa:	6071      	str	r1, [r6, #4]
 80087fc:	9200      	str	r2, [sp, #0]
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	429d      	cmp	r5, r3
 8008804:	dd4c      	ble.n	80088a0 <__kernel_rem_pio2+0x378>
 8008806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008808:	aa76      	add	r2, sp, #472	; 0x1d8
 800880a:	18e3      	adds	r3, r4, r3
 800880c:	18d3      	adds	r3, r2, r3
 800880e:	3701      	adds	r7, #1
 8008810:	9900      	ldr	r1, [sp, #0]
 8008812:	9a01      	ldr	r2, [sp, #4]
 8008814:	3408      	adds	r4, #8
 8008816:	6099      	str	r1, [r3, #8]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	e7df      	b.n	80087dc <__kernel_rem_pio2+0x2b4>
 800881c:	2302      	movs	r3, #2
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	e74e      	b.n	80086c0 <__kernel_rem_pio2+0x198>
 8008822:	0091      	lsls	r1, r2, #2
 8008824:	ab12      	add	r3, sp, #72	; 0x48
 8008826:	58cb      	ldr	r3, [r1, r3]
 8008828:	2c00      	cmp	r4, #0
 800882a:	d108      	bne.n	800883e <__kernel_rem_pio2+0x316>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <__kernel_rem_pio2+0x310>
 8008830:	1aeb      	subs	r3, r5, r3
 8008832:	ac12      	add	r4, sp, #72	; 0x48
 8008834:	510b      	str	r3, [r1, r4]
 8008836:	4663      	mov	r3, ip
 8008838:	3201      	adds	r2, #1
 800883a:	001c      	movs	r4, r3
 800883c:	e749      	b.n	80086d2 <__kernel_rem_pio2+0x1aa>
 800883e:	4817      	ldr	r0, [pc, #92]	; (800889c <__kernel_rem_pio2+0x374>)
 8008840:	1ac3      	subs	r3, r0, r3
 8008842:	a812      	add	r0, sp, #72	; 0x48
 8008844:	500b      	str	r3, [r1, r0]
 8008846:	0023      	movs	r3, r4
 8008848:	e7f6      	b.n	8008838 <__kernel_rem_pio2+0x310>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	aa12      	add	r2, sp, #72	; 0x48
 800884e:	3b01      	subs	r3, #1
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	589a      	ldr	r2, [r3, r2]
 8008854:	9211      	str	r2, [sp, #68]	; 0x44
 8008856:	0252      	lsls	r2, r2, #9
 8008858:	0a52      	lsrs	r2, r2, #9
 800885a:	a912      	add	r1, sp, #72	; 0x48
 800885c:	505a      	str	r2, [r3, r1]
 800885e:	e745      	b.n	80086ec <__kernel_rem_pio2+0x1c4>
 8008860:	9b00      	ldr	r3, [sp, #0]
 8008862:	aa12      	add	r2, sp, #72	; 0x48
 8008864:	3b01      	subs	r3, #1
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	589a      	ldr	r2, [r3, r2]
 800886a:	9211      	str	r2, [sp, #68]	; 0x44
 800886c:	0292      	lsls	r2, r2, #10
 800886e:	0a92      	lsrs	r2, r2, #10
 8008870:	e7f3      	b.n	800885a <__kernel_rem_pio2+0x332>
 8008872:	0098      	lsls	r0, r3, #2
 8008874:	ac12      	add	r4, sp, #72	; 0x48
 8008876:	5900      	ldr	r0, [r0, r4]
 8008878:	4302      	orrs	r2, r0
 800887a:	e799      	b.n	80087b0 <__kernel_rem_pio2+0x288>
 800887c:	3301      	adds	r3, #1
 800887e:	e79f      	b.n	80087c0 <__kernel_rem_pio2+0x298>
 8008880:	fffffd84 	.word	0xfffffd84
 8008884:	08009698 	.word	0x08009698
 8008888:	40200000 	.word	0x40200000
 800888c:	3ff00000 	.word	0x3ff00000
 8008890:	3e700000 	.word	0x3e700000
 8008894:	41700000 	.word	0x41700000
 8008898:	3fe00000 	.word	0x3fe00000
 800889c:	00ffffff 	.word	0x00ffffff
 80088a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a2:	00eb      	lsls	r3, r5, #3
 80088a4:	18d1      	adds	r1, r2, r3
 80088a6:	1af3      	subs	r3, r6, r3
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6808      	ldr	r0, [r1, #0]
 80088ae:	6849      	ldr	r1, [r1, #4]
 80088b0:	f7f9 fa62 	bl	8001d78 <__aeabi_dmul>
 80088b4:	0002      	movs	r2, r0
 80088b6:	000b      	movs	r3, r1
 80088b8:	9800      	ldr	r0, [sp, #0]
 80088ba:	9901      	ldr	r1, [sp, #4]
 80088bc:	f7f8 fb18 	bl	8000ef0 <__aeabi_dadd>
 80088c0:	3501      	adds	r5, #1
 80088c2:	9000      	str	r0, [sp, #0]
 80088c4:	9101      	str	r1, [sp, #4]
 80088c6:	e79b      	b.n	8008800 <__kernel_rem_pio2+0x2d8>
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	9100      	str	r1, [sp, #0]
 80088cc:	3b18      	subs	r3, #24
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	aa12      	add	r2, sp, #72	; 0x48
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	589b      	ldr	r3, [r3, r2]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d014      	beq.n	8008906 <__kernel_rem_pio2+0x3de>
 80088dc:	9a02      	ldr	r2, [sp, #8]
 80088de:	2000      	movs	r0, #0
 80088e0:	49c7      	ldr	r1, [pc, #796]	; (8008c00 <__kernel_rem_pio2+0x6d8>)
 80088e2:	f000 fc51 	bl	8009188 <scalbn>
 80088e6:	0006      	movs	r6, r0
 80088e8:	000f      	movs	r7, r1
 80088ea:	9c00      	ldr	r4, [sp, #0]
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	da4e      	bge.n	800898e <__kernel_rem_pio2+0x466>
 80088f0:	2500      	movs	r5, #0
 80088f2:	9b00      	ldr	r3, [sp, #0]
 80088f4:	1b5b      	subs	r3, r3, r5
 80088f6:	d500      	bpl.n	80088fa <__kernel_rem_pio2+0x3d2>
 80088f8:	e083      	b.n	8008a02 <__kernel_rem_pio2+0x4da>
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	9302      	str	r3, [sp, #8]
 80088fe:	2600      	movs	r6, #0
 8008900:	2700      	movs	r7, #0
 8008902:	2400      	movs	r4, #0
 8008904:	e071      	b.n	80089ea <__kernel_rem_pio2+0x4c2>
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	3b01      	subs	r3, #1
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	3b18      	subs	r3, #24
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	e7dd      	b.n	80088d0 <__kernel_rem_pio2+0x3a8>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	0030      	movs	r0, r6
 8008918:	425a      	negs	r2, r3
 800891a:	0039      	movs	r1, r7
 800891c:	f000 fc34 	bl	8009188 <scalbn>
 8008920:	2200      	movs	r2, #0
 8008922:	4bb8      	ldr	r3, [pc, #736]	; (8008c04 <__kernel_rem_pio2+0x6dc>)
 8008924:	0004      	movs	r4, r0
 8008926:	000d      	movs	r5, r1
 8008928:	f7f7 fda2 	bl	8000470 <__aeabi_dcmpge>
 800892c:	2800      	cmp	r0, #0
 800892e:	d025      	beq.n	800897c <__kernel_rem_pio2+0x454>
 8008930:	2200      	movs	r2, #0
 8008932:	4bb5      	ldr	r3, [pc, #724]	; (8008c08 <__kernel_rem_pio2+0x6e0>)
 8008934:	0020      	movs	r0, r4
 8008936:	0029      	movs	r1, r5
 8008938:	f7f9 fa1e 	bl	8001d78 <__aeabi_dmul>
 800893c:	f7f9 ffb2 	bl	80028a4 <__aeabi_d2iz>
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	0006      	movs	r6, r0
 8008944:	009f      	lsls	r7, r3, #2
 8008946:	f7f9 ffe1 	bl	800290c <__aeabi_i2d>
 800894a:	2200      	movs	r2, #0
 800894c:	4bad      	ldr	r3, [pc, #692]	; (8008c04 <__kernel_rem_pio2+0x6dc>)
 800894e:	f7f9 fa13 	bl	8001d78 <__aeabi_dmul>
 8008952:	0002      	movs	r2, r0
 8008954:	000b      	movs	r3, r1
 8008956:	0020      	movs	r0, r4
 8008958:	0029      	movs	r1, r5
 800895a:	f7f9 fc8d 	bl	8002278 <__aeabi_dsub>
 800895e:	f7f9 ffa1 	bl	80028a4 <__aeabi_d2iz>
 8008962:	ab12      	add	r3, sp, #72	; 0x48
 8008964:	50f8      	str	r0, [r7, r3]
 8008966:	9b00      	ldr	r3, [sp, #0]
 8008968:	aa12      	add	r2, sp, #72	; 0x48
 800896a:	3301      	adds	r3, #1
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	9b02      	ldr	r3, [sp, #8]
 8008970:	3318      	adds	r3, #24
 8008972:	9302      	str	r3, [sp, #8]
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	509e      	str	r6, [r3, r2]
 800897a:	e7af      	b.n	80088dc <__kernel_rem_pio2+0x3b4>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	0020      	movs	r0, r4
 8008980:	0029      	movs	r1, r5
 8008982:	009e      	lsls	r6, r3, #2
 8008984:	f7f9 ff8e 	bl	80028a4 <__aeabi_d2iz>
 8008988:	ab12      	add	r3, sp, #72	; 0x48
 800898a:	50f0      	str	r0, [r6, r3]
 800898c:	e7a6      	b.n	80088dc <__kernel_rem_pio2+0x3b4>
 800898e:	00e5      	lsls	r5, r4, #3
 8008990:	ab76      	add	r3, sp, #472	; 0x1d8
 8008992:	aa12      	add	r2, sp, #72	; 0x48
 8008994:	195d      	adds	r5, r3, r5
 8008996:	00a3      	lsls	r3, r4, #2
 8008998:	5898      	ldr	r0, [r3, r2]
 800899a:	f7f9 ffb7 	bl	800290c <__aeabi_i2d>
 800899e:	0032      	movs	r2, r6
 80089a0:	003b      	movs	r3, r7
 80089a2:	f7f9 f9e9 	bl	8001d78 <__aeabi_dmul>
 80089a6:	2200      	movs	r2, #0
 80089a8:	6028      	str	r0, [r5, #0]
 80089aa:	6069      	str	r1, [r5, #4]
 80089ac:	4b96      	ldr	r3, [pc, #600]	; (8008c08 <__kernel_rem_pio2+0x6e0>)
 80089ae:	0030      	movs	r0, r6
 80089b0:	0039      	movs	r1, r7
 80089b2:	f7f9 f9e1 	bl	8001d78 <__aeabi_dmul>
 80089b6:	3c01      	subs	r4, #1
 80089b8:	0006      	movs	r6, r0
 80089ba:	000f      	movs	r7, r1
 80089bc:	e796      	b.n	80088ec <__kernel_rem_pio2+0x3c4>
 80089be:	9a02      	ldr	r2, [sp, #8]
 80089c0:	00e3      	lsls	r3, r4, #3
 80089c2:	1899      	adds	r1, r3, r2
 80089c4:	aa76      	add	r2, sp, #472	; 0x1d8
 80089c6:	1851      	adds	r1, r2, r1
 80089c8:	4a90      	ldr	r2, [pc, #576]	; (8008c0c <__kernel_rem_pio2+0x6e4>)
 80089ca:	6808      	ldr	r0, [r1, #0]
 80089cc:	6849      	ldr	r1, [r1, #4]
 80089ce:	18d3      	adds	r3, r2, r3
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f7f9 f9d0 	bl	8001d78 <__aeabi_dmul>
 80089d8:	0002      	movs	r2, r0
 80089da:	000b      	movs	r3, r1
 80089dc:	0030      	movs	r0, r6
 80089de:	0039      	movs	r1, r7
 80089e0:	f7f8 fa86 	bl	8000ef0 <__aeabi_dadd>
 80089e4:	0006      	movs	r6, r0
 80089e6:	000f      	movs	r7, r1
 80089e8:	3401      	adds	r4, #1
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	429c      	cmp	r4, r3
 80089ee:	dc01      	bgt.n	80089f4 <__kernel_rem_pio2+0x4cc>
 80089f0:	42ac      	cmp	r4, r5
 80089f2:	dde4      	ble.n	80089be <__kernel_rem_pio2+0x496>
 80089f4:	00eb      	lsls	r3, r5, #3
 80089f6:	aa4e      	add	r2, sp, #312	; 0x138
 80089f8:	18d3      	adds	r3, r2, r3
 80089fa:	601e      	str	r6, [r3, #0]
 80089fc:	605f      	str	r7, [r3, #4]
 80089fe:	3501      	adds	r5, #1
 8008a00:	e777      	b.n	80088f2 <__kernel_rem_pio2+0x3ca>
 8008a02:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d83d      	bhi.n	8008a84 <__kernel_rem_pio2+0x55c>
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f7f7 fb7d 	bl	8000108 <__gnu_thumb1_case_uqi>
 8008a0e:	022b      	.short	0x022b
 8008a10:	4302      	.short	0x4302
 8008a12:	2600      	movs	r6, #0
 8008a14:	0035      	movs	r5, r6
 8008a16:	9c00      	ldr	r4, [sp, #0]
 8008a18:	2c00      	cmp	r4, #0
 8008a1a:	db00      	blt.n	8008a1e <__kernel_rem_pio2+0x4f6>
 8008a1c:	e073      	b.n	8008b06 <__kernel_rem_pio2+0x5de>
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	0029      	movs	r1, r5
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <__kernel_rem_pio2+0x504>
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	061b      	lsls	r3, r3, #24
 8008a2a:	18e9      	adds	r1, r5, r3
 8008a2c:	000b      	movs	r3, r1
 8008a2e:	0032      	movs	r2, r6
 8008a30:	9906      	ldr	r1, [sp, #24]
 8008a32:	2401      	movs	r4, #1
 8008a34:	600a      	str	r2, [r1, #0]
 8008a36:	604b      	str	r3, [r1, #4]
 8008a38:	984e      	ldr	r0, [sp, #312]	; 0x138
 8008a3a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8008a3c:	0032      	movs	r2, r6
 8008a3e:	002b      	movs	r3, r5
 8008a40:	f7f9 fc1a 	bl	8002278 <__aeabi_dsub>
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	db00      	blt.n	8008a4c <__kernel_rem_pio2+0x524>
 8008a4a:	e069      	b.n	8008b20 <__kernel_rem_pio2+0x5f8>
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <__kernel_rem_pio2+0x530>
 8008a52:	2380      	movs	r3, #128	; 0x80
 8008a54:	061b      	lsls	r3, r3, #24
 8008a56:	18c9      	adds	r1, r1, r3
 8008a58:	000b      	movs	r3, r1
 8008a5a:	0002      	movs	r2, r0
 8008a5c:	9906      	ldr	r1, [sp, #24]
 8008a5e:	608a      	str	r2, [r1, #8]
 8008a60:	60cb      	str	r3, [r1, #12]
 8008a62:	e00f      	b.n	8008a84 <__kernel_rem_pio2+0x55c>
 8008a64:	2500      	movs	r5, #0
 8008a66:	002c      	movs	r4, r5
 8008a68:	9b00      	ldr	r3, [sp, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da3b      	bge.n	8008ae6 <__kernel_rem_pio2+0x5be>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <__kernel_rem_pio2+0x552>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	061b      	lsls	r3, r3, #24
 8008a78:	18e4      	adds	r4, r4, r3
 8008a7a:	002a      	movs	r2, r5
 8008a7c:	0023      	movs	r3, r4
 8008a7e:	9906      	ldr	r1, [sp, #24]
 8008a80:	600a      	str	r2, [r1, #0]
 8008a82:	604b      	str	r3, [r1, #4]
 8008a84:	2007      	movs	r0, #7
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	4003      	ands	r3, r0
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	239f      	movs	r3, #159	; 0x9f
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	449d      	add	sp, r3
 8008a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a94:	9b00      	ldr	r3, [sp, #0]
 8008a96:	00dc      	lsls	r4, r3, #3
 8008a98:	ab4e      	add	r3, sp, #312	; 0x138
 8008a9a:	191c      	adds	r4, r3, r4
 8008a9c:	0025      	movs	r5, r4
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	9b02      	ldr	r3, [sp, #8]
 8008aa4:	3d08      	subs	r5, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dc43      	bgt.n	8008b32 <__kernel_rem_pio2+0x60a>
 8008aaa:	9d00      	ldr	r5, [sp, #0]
 8008aac:	3c08      	subs	r4, #8
 8008aae:	2d01      	cmp	r5, #1
 8008ab0:	dc5f      	bgt.n	8008b72 <__kernel_rem_pio2+0x64a>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	002c      	movs	r4, r5
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	dd00      	ble.n	8008abe <__kernel_rem_pio2+0x596>
 8008abc:	e077      	b.n	8008bae <__kernel_rem_pio2+0x686>
 8008abe:	9b04      	ldr	r3, [sp, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d000      	beq.n	8008ac6 <__kernel_rem_pio2+0x59e>
 8008ac4:	e083      	b.n	8008bce <__kernel_rem_pio2+0x6a6>
 8008ac6:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8008ac8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8008aca:	9906      	ldr	r1, [sp, #24]
 8008acc:	600a      	str	r2, [r1, #0]
 8008ace:	604b      	str	r3, [r1, #4]
 8008ad0:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8008ad2:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8008ad4:	9200      	str	r2, [sp, #0]
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	608a      	str	r2, [r1, #8]
 8008ada:	60cb      	str	r3, [r1, #12]
 8008adc:	002a      	movs	r2, r5
 8008ade:	0023      	movs	r3, r4
 8008ae0:	610a      	str	r2, [r1, #16]
 8008ae2:	614b      	str	r3, [r1, #20]
 8008ae4:	e7ce      	b.n	8008a84 <__kernel_rem_pio2+0x55c>
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	aa4e      	add	r2, sp, #312	; 0x138
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	18d3      	adds	r3, r2, r3
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	0028      	movs	r0, r5
 8008af4:	0021      	movs	r1, r4
 8008af6:	f7f8 f9fb 	bl	8000ef0 <__aeabi_dadd>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	0005      	movs	r5, r0
 8008afe:	3b01      	subs	r3, #1
 8008b00:	000c      	movs	r4, r1
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	e7b0      	b.n	8008a68 <__kernel_rem_pio2+0x540>
 8008b06:	00e3      	lsls	r3, r4, #3
 8008b08:	aa4e      	add	r2, sp, #312	; 0x138
 8008b0a:	18d3      	adds	r3, r2, r3
 8008b0c:	0030      	movs	r0, r6
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	0029      	movs	r1, r5
 8008b14:	f7f8 f9ec 	bl	8000ef0 <__aeabi_dadd>
 8008b18:	3c01      	subs	r4, #1
 8008b1a:	0006      	movs	r6, r0
 8008b1c:	000d      	movs	r5, r1
 8008b1e:	e77b      	b.n	8008a18 <__kernel_rem_pio2+0x4f0>
 8008b20:	00e3      	lsls	r3, r4, #3
 8008b22:	aa4e      	add	r2, sp, #312	; 0x138
 8008b24:	18d3      	adds	r3, r2, r3
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f7f8 f9e1 	bl	8000ef0 <__aeabi_dadd>
 8008b2e:	3401      	adds	r4, #1
 8008b30:	e788      	b.n	8008a44 <__kernel_rem_pio2+0x51c>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	9302      	str	r3, [sp, #8]
 8008b38:	682a      	ldr	r2, [r5, #0]
 8008b3a:	686b      	ldr	r3, [r5, #4]
 8008b3c:	9208      	str	r2, [sp, #32]
 8008b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b40:	9808      	ldr	r0, [sp, #32]
 8008b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b44:	68aa      	ldr	r2, [r5, #8]
 8008b46:	68eb      	ldr	r3, [r5, #12]
 8008b48:	920a      	str	r2, [sp, #40]	; 0x28
 8008b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b4c:	f7f8 f9d0 	bl	8000ef0 <__aeabi_dadd>
 8008b50:	0002      	movs	r2, r0
 8008b52:	000b      	movs	r3, r1
 8008b54:	0006      	movs	r6, r0
 8008b56:	000f      	movs	r7, r1
 8008b58:	9808      	ldr	r0, [sp, #32]
 8008b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b5c:	f7f9 fb8c 	bl	8002278 <__aeabi_dsub>
 8008b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b64:	f7f8 f9c4 	bl	8000ef0 <__aeabi_dadd>
 8008b68:	602e      	str	r6, [r5, #0]
 8008b6a:	606f      	str	r7, [r5, #4]
 8008b6c:	60a8      	str	r0, [r5, #8]
 8008b6e:	60e9      	str	r1, [r5, #12]
 8008b70:	e797      	b.n	8008aa2 <__kernel_rem_pio2+0x57a>
 8008b72:	6826      	ldr	r6, [r4, #0]
 8008b74:	6867      	ldr	r7, [r4, #4]
 8008b76:	68a2      	ldr	r2, [r4, #8]
 8008b78:	68e3      	ldr	r3, [r4, #12]
 8008b7a:	0030      	movs	r0, r6
 8008b7c:	0039      	movs	r1, r7
 8008b7e:	9202      	str	r2, [sp, #8]
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	f7f8 f9b5 	bl	8000ef0 <__aeabi_dadd>
 8008b86:	9008      	str	r0, [sp, #32]
 8008b88:	9109      	str	r1, [sp, #36]	; 0x24
 8008b8a:	0002      	movs	r2, r0
 8008b8c:	000b      	movs	r3, r1
 8008b8e:	0030      	movs	r0, r6
 8008b90:	0039      	movs	r1, r7
 8008b92:	f7f9 fb71 	bl	8002278 <__aeabi_dsub>
 8008b96:	9a02      	ldr	r2, [sp, #8]
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	f7f8 f9a9 	bl	8000ef0 <__aeabi_dadd>
 8008b9e:	9a08      	ldr	r2, [sp, #32]
 8008ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba2:	3d01      	subs	r5, #1
 8008ba4:	60a0      	str	r0, [r4, #8]
 8008ba6:	60e1      	str	r1, [r4, #12]
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	e77e      	b.n	8008aac <__kernel_rem_pio2+0x584>
 8008bae:	9b00      	ldr	r3, [sp, #0]
 8008bb0:	aa4e      	add	r2, sp, #312	; 0x138
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	18d3      	adds	r3, r2, r3
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	0028      	movs	r0, r5
 8008bbc:	0021      	movs	r1, r4
 8008bbe:	f7f8 f997 	bl	8000ef0 <__aeabi_dadd>
 8008bc2:	9b00      	ldr	r3, [sp, #0]
 8008bc4:	0005      	movs	r5, r0
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	000c      	movs	r4, r1
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	e773      	b.n	8008ab6 <__kernel_rem_pio2+0x58e>
 8008bce:	9b06      	ldr	r3, [sp, #24]
 8008bd0:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	2280      	movs	r2, #128	; 0x80
 8008bd6:	0612      	lsls	r2, r2, #24
 8008bd8:	4694      	mov	ip, r2
 8008bda:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8008bdc:	9a06      	ldr	r2, [sp, #24]
 8008bde:	4463      	add	r3, ip
 8008be0:	6053      	str	r3, [r2, #4]
 8008be2:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	0013      	movs	r3, r2
 8008be8:	9a00      	ldr	r2, [sp, #0]
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	4662      	mov	r2, ip
 8008bee:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8008bf0:	189b      	adds	r3, r3, r2
 8008bf2:	9a06      	ldr	r2, [sp, #24]
 8008bf4:	60d3      	str	r3, [r2, #12]
 8008bf6:	4663      	mov	r3, ip
 8008bf8:	18e4      	adds	r4, r4, r3
 8008bfa:	6115      	str	r5, [r2, #16]
 8008bfc:	6154      	str	r4, [r2, #20]
 8008bfe:	e741      	b.n	8008a84 <__kernel_rem_pio2+0x55c>
 8008c00:	3ff00000 	.word	0x3ff00000
 8008c04:	41700000 	.word	0x41700000
 8008c08:	3e700000 	.word	0x3e700000
 8008c0c:	08009658 	.word	0x08009658

08008c10 <__kernel_sin>:
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b089      	sub	sp, #36	; 0x24
 8008c14:	9202      	str	r2, [sp, #8]
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	4a46      	ldr	r2, [pc, #280]	; (8008d34 <__kernel_sin+0x124>)
 8008c1a:	004b      	lsls	r3, r1, #1
 8008c1c:	0005      	movs	r5, r0
 8008c1e:	000c      	movs	r4, r1
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	4293      	cmp	r3, r2
 8008c24:	dc03      	bgt.n	8008c2e <__kernel_sin+0x1e>
 8008c26:	f7f9 fe3d 	bl	80028a4 <__aeabi_d2iz>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d04c      	beq.n	8008cc8 <__kernel_sin+0xb8>
 8008c2e:	002a      	movs	r2, r5
 8008c30:	0023      	movs	r3, r4
 8008c32:	0028      	movs	r0, r5
 8008c34:	0021      	movs	r1, r4
 8008c36:	f7f9 f89f 	bl	8001d78 <__aeabi_dmul>
 8008c3a:	0006      	movs	r6, r0
 8008c3c:	000f      	movs	r7, r1
 8008c3e:	0002      	movs	r2, r0
 8008c40:	000b      	movs	r3, r1
 8008c42:	0028      	movs	r0, r5
 8008c44:	0021      	movs	r1, r4
 8008c46:	f7f9 f897 	bl	8001d78 <__aeabi_dmul>
 8008c4a:	4a3b      	ldr	r2, [pc, #236]	; (8008d38 <__kernel_sin+0x128>)
 8008c4c:	9000      	str	r0, [sp, #0]
 8008c4e:	9101      	str	r1, [sp, #4]
 8008c50:	4b3a      	ldr	r3, [pc, #232]	; (8008d3c <__kernel_sin+0x12c>)
 8008c52:	0030      	movs	r0, r6
 8008c54:	0039      	movs	r1, r7
 8008c56:	f7f9 f88f 	bl	8001d78 <__aeabi_dmul>
 8008c5a:	4a39      	ldr	r2, [pc, #228]	; (8008d40 <__kernel_sin+0x130>)
 8008c5c:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <__kernel_sin+0x134>)
 8008c5e:	f7f9 fb0b 	bl	8002278 <__aeabi_dsub>
 8008c62:	0032      	movs	r2, r6
 8008c64:	003b      	movs	r3, r7
 8008c66:	f7f9 f887 	bl	8001d78 <__aeabi_dmul>
 8008c6a:	4a37      	ldr	r2, [pc, #220]	; (8008d48 <__kernel_sin+0x138>)
 8008c6c:	4b37      	ldr	r3, [pc, #220]	; (8008d4c <__kernel_sin+0x13c>)
 8008c6e:	f7f8 f93f 	bl	8000ef0 <__aeabi_dadd>
 8008c72:	0032      	movs	r2, r6
 8008c74:	003b      	movs	r3, r7
 8008c76:	f7f9 f87f 	bl	8001d78 <__aeabi_dmul>
 8008c7a:	4a35      	ldr	r2, [pc, #212]	; (8008d50 <__kernel_sin+0x140>)
 8008c7c:	4b35      	ldr	r3, [pc, #212]	; (8008d54 <__kernel_sin+0x144>)
 8008c7e:	f7f9 fafb 	bl	8002278 <__aeabi_dsub>
 8008c82:	0032      	movs	r2, r6
 8008c84:	003b      	movs	r3, r7
 8008c86:	f7f9 f877 	bl	8001d78 <__aeabi_dmul>
 8008c8a:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <__kernel_sin+0x148>)
 8008c8c:	4a33      	ldr	r2, [pc, #204]	; (8008d5c <__kernel_sin+0x14c>)
 8008c8e:	f7f8 f92f 	bl	8000ef0 <__aeabi_dadd>
 8008c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c94:	9004      	str	r0, [sp, #16]
 8008c96:	9105      	str	r1, [sp, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d119      	bne.n	8008cd0 <__kernel_sin+0xc0>
 8008c9c:	0002      	movs	r2, r0
 8008c9e:	000b      	movs	r3, r1
 8008ca0:	0030      	movs	r0, r6
 8008ca2:	0039      	movs	r1, r7
 8008ca4:	f7f9 f868 	bl	8001d78 <__aeabi_dmul>
 8008ca8:	4a2d      	ldr	r2, [pc, #180]	; (8008d60 <__kernel_sin+0x150>)
 8008caa:	4b2e      	ldr	r3, [pc, #184]	; (8008d64 <__kernel_sin+0x154>)
 8008cac:	f7f9 fae4 	bl	8002278 <__aeabi_dsub>
 8008cb0:	9a00      	ldr	r2, [sp, #0]
 8008cb2:	9b01      	ldr	r3, [sp, #4]
 8008cb4:	f7f9 f860 	bl	8001d78 <__aeabi_dmul>
 8008cb8:	0002      	movs	r2, r0
 8008cba:	000b      	movs	r3, r1
 8008cbc:	0028      	movs	r0, r5
 8008cbe:	0021      	movs	r1, r4
 8008cc0:	f7f8 f916 	bl	8000ef0 <__aeabi_dadd>
 8008cc4:	0005      	movs	r5, r0
 8008cc6:	000c      	movs	r4, r1
 8008cc8:	0028      	movs	r0, r5
 8008cca:	0021      	movs	r1, r4
 8008ccc:	b009      	add	sp, #36	; 0x24
 8008cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	9802      	ldr	r0, [sp, #8]
 8008cd4:	9903      	ldr	r1, [sp, #12]
 8008cd6:	4b24      	ldr	r3, [pc, #144]	; (8008d68 <__kernel_sin+0x158>)
 8008cd8:	f7f9 f84e 	bl	8001d78 <__aeabi_dmul>
 8008cdc:	9a04      	ldr	r2, [sp, #16]
 8008cde:	9b05      	ldr	r3, [sp, #20]
 8008ce0:	9006      	str	r0, [sp, #24]
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	9800      	ldr	r0, [sp, #0]
 8008ce6:	9901      	ldr	r1, [sp, #4]
 8008ce8:	f7f9 f846 	bl	8001d78 <__aeabi_dmul>
 8008cec:	0002      	movs	r2, r0
 8008cee:	000b      	movs	r3, r1
 8008cf0:	9806      	ldr	r0, [sp, #24]
 8008cf2:	9907      	ldr	r1, [sp, #28]
 8008cf4:	f7f9 fac0 	bl	8002278 <__aeabi_dsub>
 8008cf8:	0032      	movs	r2, r6
 8008cfa:	003b      	movs	r3, r7
 8008cfc:	f7f9 f83c 	bl	8001d78 <__aeabi_dmul>
 8008d00:	9a02      	ldr	r2, [sp, #8]
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	f7f9 fab8 	bl	8002278 <__aeabi_dsub>
 8008d08:	4a15      	ldr	r2, [pc, #84]	; (8008d60 <__kernel_sin+0x150>)
 8008d0a:	0006      	movs	r6, r0
 8008d0c:	000f      	movs	r7, r1
 8008d0e:	9800      	ldr	r0, [sp, #0]
 8008d10:	9901      	ldr	r1, [sp, #4]
 8008d12:	4b14      	ldr	r3, [pc, #80]	; (8008d64 <__kernel_sin+0x154>)
 8008d14:	f7f9 f830 	bl	8001d78 <__aeabi_dmul>
 8008d18:	0002      	movs	r2, r0
 8008d1a:	000b      	movs	r3, r1
 8008d1c:	0030      	movs	r0, r6
 8008d1e:	0039      	movs	r1, r7
 8008d20:	f7f8 f8e6 	bl	8000ef0 <__aeabi_dadd>
 8008d24:	0002      	movs	r2, r0
 8008d26:	000b      	movs	r3, r1
 8008d28:	0028      	movs	r0, r5
 8008d2a:	0021      	movs	r1, r4
 8008d2c:	f7f9 faa4 	bl	8002278 <__aeabi_dsub>
 8008d30:	e7c8      	b.n	8008cc4 <__kernel_sin+0xb4>
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	3e3fffff 	.word	0x3e3fffff
 8008d38:	5acfd57c 	.word	0x5acfd57c
 8008d3c:	3de5d93a 	.word	0x3de5d93a
 8008d40:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d44:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d48:	57b1fe7d 	.word	0x57b1fe7d
 8008d4c:	3ec71de3 	.word	0x3ec71de3
 8008d50:	19c161d5 	.word	0x19c161d5
 8008d54:	3f2a01a0 	.word	0x3f2a01a0
 8008d58:	3f811111 	.word	0x3f811111
 8008d5c:	1110f8a6 	.word	0x1110f8a6
 8008d60:	55555549 	.word	0x55555549
 8008d64:	3fc55555 	.word	0x3fc55555
 8008d68:	3fe00000 	.word	0x3fe00000

08008d6c <atan>:
 8008d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6e:	4b9c      	ldr	r3, [pc, #624]	; (8008fe0 <atan+0x274>)
 8008d70:	b085      	sub	sp, #20
 8008d72:	004e      	lsls	r6, r1, #1
 8008d74:	0004      	movs	r4, r0
 8008d76:	000d      	movs	r5, r1
 8008d78:	9103      	str	r1, [sp, #12]
 8008d7a:	0876      	lsrs	r6, r6, #1
 8008d7c:	429e      	cmp	r6, r3
 8008d7e:	dd18      	ble.n	8008db2 <atan+0x46>
 8008d80:	4b98      	ldr	r3, [pc, #608]	; (8008fe4 <atan+0x278>)
 8008d82:	429e      	cmp	r6, r3
 8008d84:	dc02      	bgt.n	8008d8c <atan+0x20>
 8008d86:	d10a      	bne.n	8008d9e <atan+0x32>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d008      	beq.n	8008d9e <atan+0x32>
 8008d8c:	0022      	movs	r2, r4
 8008d8e:	002b      	movs	r3, r5
 8008d90:	0020      	movs	r0, r4
 8008d92:	0029      	movs	r1, r5
 8008d94:	f7f8 f8ac 	bl	8000ef0 <__aeabi_dadd>
 8008d98:	0004      	movs	r4, r0
 8008d9a:	000d      	movs	r5, r1
 8008d9c:	e005      	b.n	8008daa <atan+0x3e>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	4c91      	ldr	r4, [pc, #580]	; (8008fe8 <atan+0x27c>)
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd00      	ble.n	8008da8 <atan+0x3c>
 8008da6:	e118      	b.n	8008fda <atan+0x26e>
 8008da8:	4d90      	ldr	r5, [pc, #576]	; (8008fec <atan+0x280>)
 8008daa:	0020      	movs	r0, r4
 8008dac:	0029      	movs	r1, r5
 8008dae:	b005      	add	sp, #20
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	4b8f      	ldr	r3, [pc, #572]	; (8008ff0 <atan+0x284>)
 8008db4:	429e      	cmp	r6, r3
 8008db6:	dc0f      	bgt.n	8008dd8 <atan+0x6c>
 8008db8:	4b8e      	ldr	r3, [pc, #568]	; (8008ff4 <atan+0x288>)
 8008dba:	429e      	cmp	r6, r3
 8008dbc:	dc09      	bgt.n	8008dd2 <atan+0x66>
 8008dbe:	4a8e      	ldr	r2, [pc, #568]	; (8008ff8 <atan+0x28c>)
 8008dc0:	4b8e      	ldr	r3, [pc, #568]	; (8008ffc <atan+0x290>)
 8008dc2:	f7f8 f895 	bl	8000ef0 <__aeabi_dadd>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4b8d      	ldr	r3, [pc, #564]	; (8009000 <atan+0x294>)
 8008dca:	f7f7 fb47 	bl	800045c <__aeabi_dcmpgt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1eb      	bne.n	8008daa <atan+0x3e>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	e025      	b.n	8008e24 <atan+0xb8>
 8008dd8:	f000 f950 	bl	800907c <fabs>
 8008ddc:	4b89      	ldr	r3, [pc, #548]	; (8009004 <atan+0x298>)
 8008dde:	0004      	movs	r4, r0
 8008de0:	000d      	movs	r5, r1
 8008de2:	429e      	cmp	r6, r3
 8008de4:	dd00      	ble.n	8008de8 <atan+0x7c>
 8008de6:	e0aa      	b.n	8008f3e <atan+0x1d2>
 8008de8:	4b87      	ldr	r3, [pc, #540]	; (8009008 <atan+0x29c>)
 8008dea:	429e      	cmp	r6, r3
 8008dec:	dd00      	ble.n	8008df0 <atan+0x84>
 8008dee:	e090      	b.n	8008f12 <atan+0x1a6>
 8008df0:	0002      	movs	r2, r0
 8008df2:	000b      	movs	r3, r1
 8008df4:	f7f8 f87c 	bl	8000ef0 <__aeabi_dadd>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4b81      	ldr	r3, [pc, #516]	; (8009000 <atan+0x294>)
 8008dfc:	f7f9 fa3c 	bl	8002278 <__aeabi_dsub>
 8008e00:	2380      	movs	r3, #128	; 0x80
 8008e02:	0006      	movs	r6, r0
 8008e04:	000f      	movs	r7, r1
 8008e06:	2200      	movs	r2, #0
 8008e08:	05db      	lsls	r3, r3, #23
 8008e0a:	0020      	movs	r0, r4
 8008e0c:	0029      	movs	r1, r5
 8008e0e:	f7f8 f86f 	bl	8000ef0 <__aeabi_dadd>
 8008e12:	000b      	movs	r3, r1
 8008e14:	0002      	movs	r2, r0
 8008e16:	0039      	movs	r1, r7
 8008e18:	0030      	movs	r0, r6
 8008e1a:	f7f8 fb79 	bl	8001510 <__aeabi_ddiv>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	0004      	movs	r4, r0
 8008e22:	000d      	movs	r5, r1
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	0022      	movs	r2, r4
 8008e28:	002b      	movs	r3, r5
 8008e2a:	0020      	movs	r0, r4
 8008e2c:	0029      	movs	r1, r5
 8008e2e:	f7f8 ffa3 	bl	8001d78 <__aeabi_dmul>
 8008e32:	0002      	movs	r2, r0
 8008e34:	000b      	movs	r3, r1
 8008e36:	9000      	str	r0, [sp, #0]
 8008e38:	9101      	str	r1, [sp, #4]
 8008e3a:	f7f8 ff9d 	bl	8001d78 <__aeabi_dmul>
 8008e3e:	0006      	movs	r6, r0
 8008e40:	000f      	movs	r7, r1
 8008e42:	4a72      	ldr	r2, [pc, #456]	; (800900c <atan+0x2a0>)
 8008e44:	4b72      	ldr	r3, [pc, #456]	; (8009010 <atan+0x2a4>)
 8008e46:	f7f8 ff97 	bl	8001d78 <__aeabi_dmul>
 8008e4a:	4a72      	ldr	r2, [pc, #456]	; (8009014 <atan+0x2a8>)
 8008e4c:	4b72      	ldr	r3, [pc, #456]	; (8009018 <atan+0x2ac>)
 8008e4e:	f7f8 f84f 	bl	8000ef0 <__aeabi_dadd>
 8008e52:	0032      	movs	r2, r6
 8008e54:	003b      	movs	r3, r7
 8008e56:	f7f8 ff8f 	bl	8001d78 <__aeabi_dmul>
 8008e5a:	4a70      	ldr	r2, [pc, #448]	; (800901c <atan+0x2b0>)
 8008e5c:	4b70      	ldr	r3, [pc, #448]	; (8009020 <atan+0x2b4>)
 8008e5e:	f7f8 f847 	bl	8000ef0 <__aeabi_dadd>
 8008e62:	0032      	movs	r2, r6
 8008e64:	003b      	movs	r3, r7
 8008e66:	f7f8 ff87 	bl	8001d78 <__aeabi_dmul>
 8008e6a:	4a6e      	ldr	r2, [pc, #440]	; (8009024 <atan+0x2b8>)
 8008e6c:	4b6e      	ldr	r3, [pc, #440]	; (8009028 <atan+0x2bc>)
 8008e6e:	f7f8 f83f 	bl	8000ef0 <__aeabi_dadd>
 8008e72:	0032      	movs	r2, r6
 8008e74:	003b      	movs	r3, r7
 8008e76:	f7f8 ff7f 	bl	8001d78 <__aeabi_dmul>
 8008e7a:	4a6c      	ldr	r2, [pc, #432]	; (800902c <atan+0x2c0>)
 8008e7c:	4b6c      	ldr	r3, [pc, #432]	; (8009030 <atan+0x2c4>)
 8008e7e:	f7f8 f837 	bl	8000ef0 <__aeabi_dadd>
 8008e82:	0032      	movs	r2, r6
 8008e84:	003b      	movs	r3, r7
 8008e86:	f7f8 ff77 	bl	8001d78 <__aeabi_dmul>
 8008e8a:	4a6a      	ldr	r2, [pc, #424]	; (8009034 <atan+0x2c8>)
 8008e8c:	4b6a      	ldr	r3, [pc, #424]	; (8009038 <atan+0x2cc>)
 8008e8e:	f7f8 f82f 	bl	8000ef0 <__aeabi_dadd>
 8008e92:	9a00      	ldr	r2, [sp, #0]
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	f7f8 ff6f 	bl	8001d78 <__aeabi_dmul>
 8008e9a:	4a68      	ldr	r2, [pc, #416]	; (800903c <atan+0x2d0>)
 8008e9c:	9000      	str	r0, [sp, #0]
 8008e9e:	9101      	str	r1, [sp, #4]
 8008ea0:	4b67      	ldr	r3, [pc, #412]	; (8009040 <atan+0x2d4>)
 8008ea2:	0030      	movs	r0, r6
 8008ea4:	0039      	movs	r1, r7
 8008ea6:	f7f8 ff67 	bl	8001d78 <__aeabi_dmul>
 8008eaa:	4a66      	ldr	r2, [pc, #408]	; (8009044 <atan+0x2d8>)
 8008eac:	4b66      	ldr	r3, [pc, #408]	; (8009048 <atan+0x2dc>)
 8008eae:	f7f9 f9e3 	bl	8002278 <__aeabi_dsub>
 8008eb2:	0032      	movs	r2, r6
 8008eb4:	003b      	movs	r3, r7
 8008eb6:	f7f8 ff5f 	bl	8001d78 <__aeabi_dmul>
 8008eba:	4a64      	ldr	r2, [pc, #400]	; (800904c <atan+0x2e0>)
 8008ebc:	4b64      	ldr	r3, [pc, #400]	; (8009050 <atan+0x2e4>)
 8008ebe:	f7f9 f9db 	bl	8002278 <__aeabi_dsub>
 8008ec2:	0032      	movs	r2, r6
 8008ec4:	003b      	movs	r3, r7
 8008ec6:	f7f8 ff57 	bl	8001d78 <__aeabi_dmul>
 8008eca:	4a62      	ldr	r2, [pc, #392]	; (8009054 <atan+0x2e8>)
 8008ecc:	4b62      	ldr	r3, [pc, #392]	; (8009058 <atan+0x2ec>)
 8008ece:	f7f9 f9d3 	bl	8002278 <__aeabi_dsub>
 8008ed2:	0032      	movs	r2, r6
 8008ed4:	003b      	movs	r3, r7
 8008ed6:	f7f8 ff4f 	bl	8001d78 <__aeabi_dmul>
 8008eda:	4a60      	ldr	r2, [pc, #384]	; (800905c <atan+0x2f0>)
 8008edc:	4b60      	ldr	r3, [pc, #384]	; (8009060 <atan+0x2f4>)
 8008ede:	f7f9 f9cb 	bl	8002278 <__aeabi_dsub>
 8008ee2:	0032      	movs	r2, r6
 8008ee4:	003b      	movs	r3, r7
 8008ee6:	f7f8 ff47 	bl	8001d78 <__aeabi_dmul>
 8008eea:	000b      	movs	r3, r1
 8008eec:	9902      	ldr	r1, [sp, #8]
 8008eee:	0002      	movs	r2, r0
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	d14b      	bne.n	8008f8c <atan+0x220>
 8008ef4:	9800      	ldr	r0, [sp, #0]
 8008ef6:	9901      	ldr	r1, [sp, #4]
 8008ef8:	f7f7 fffa 	bl	8000ef0 <__aeabi_dadd>
 8008efc:	0022      	movs	r2, r4
 8008efe:	002b      	movs	r3, r5
 8008f00:	f7f8 ff3a 	bl	8001d78 <__aeabi_dmul>
 8008f04:	0002      	movs	r2, r0
 8008f06:	000b      	movs	r3, r1
 8008f08:	0020      	movs	r0, r4
 8008f0a:	0029      	movs	r1, r5
 8008f0c:	f7f9 f9b4 	bl	8002278 <__aeabi_dsub>
 8008f10:	e742      	b.n	8008d98 <atan+0x2c>
 8008f12:	2200      	movs	r2, #0
 8008f14:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <atan+0x294>)
 8008f16:	f7f9 f9af 	bl	8002278 <__aeabi_dsub>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	0006      	movs	r6, r0
 8008f1e:	000f      	movs	r7, r1
 8008f20:	4b37      	ldr	r3, [pc, #220]	; (8009000 <atan+0x294>)
 8008f22:	0020      	movs	r0, r4
 8008f24:	0029      	movs	r1, r5
 8008f26:	f7f7 ffe3 	bl	8000ef0 <__aeabi_dadd>
 8008f2a:	000b      	movs	r3, r1
 8008f2c:	0002      	movs	r2, r0
 8008f2e:	0039      	movs	r1, r7
 8008f30:	0030      	movs	r0, r6
 8008f32:	f7f8 faed 	bl	8001510 <__aeabi_ddiv>
 8008f36:	2301      	movs	r3, #1
 8008f38:	0004      	movs	r4, r0
 8008f3a:	000d      	movs	r5, r1
 8008f3c:	e772      	b.n	8008e24 <atan+0xb8>
 8008f3e:	4b49      	ldr	r3, [pc, #292]	; (8009064 <atan+0x2f8>)
 8008f40:	429e      	cmp	r6, r3
 8008f42:	dc19      	bgt.n	8008f78 <atan+0x20c>
 8008f44:	2200      	movs	r2, #0
 8008f46:	4b48      	ldr	r3, [pc, #288]	; (8009068 <atan+0x2fc>)
 8008f48:	f7f9 f996 	bl	8002278 <__aeabi_dsub>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	0006      	movs	r6, r0
 8008f50:	000f      	movs	r7, r1
 8008f52:	4b45      	ldr	r3, [pc, #276]	; (8009068 <atan+0x2fc>)
 8008f54:	0020      	movs	r0, r4
 8008f56:	0029      	movs	r1, r5
 8008f58:	f7f8 ff0e 	bl	8001d78 <__aeabi_dmul>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4b28      	ldr	r3, [pc, #160]	; (8009000 <atan+0x294>)
 8008f60:	f7f7 ffc6 	bl	8000ef0 <__aeabi_dadd>
 8008f64:	000b      	movs	r3, r1
 8008f66:	0002      	movs	r2, r0
 8008f68:	0039      	movs	r1, r7
 8008f6a:	0030      	movs	r0, r6
 8008f6c:	f7f8 fad0 	bl	8001510 <__aeabi_ddiv>
 8008f70:	2302      	movs	r3, #2
 8008f72:	0004      	movs	r4, r0
 8008f74:	000d      	movs	r5, r1
 8008f76:	e755      	b.n	8008e24 <atan+0xb8>
 8008f78:	000b      	movs	r3, r1
 8008f7a:	0002      	movs	r2, r0
 8008f7c:	493b      	ldr	r1, [pc, #236]	; (800906c <atan+0x300>)
 8008f7e:	2000      	movs	r0, #0
 8008f80:	f7f8 fac6 	bl	8001510 <__aeabi_ddiv>
 8008f84:	2303      	movs	r3, #3
 8008f86:	0004      	movs	r4, r0
 8008f88:	000d      	movs	r5, r1
 8008f8a:	e74b      	b.n	8008e24 <atan+0xb8>
 8008f8c:	9902      	ldr	r1, [sp, #8]
 8008f8e:	4f38      	ldr	r7, [pc, #224]	; (8009070 <atan+0x304>)
 8008f90:	00ce      	lsls	r6, r1, #3
 8008f92:	9800      	ldr	r0, [sp, #0]
 8008f94:	9901      	ldr	r1, [sp, #4]
 8008f96:	f7f7 ffab 	bl	8000ef0 <__aeabi_dadd>
 8008f9a:	0022      	movs	r2, r4
 8008f9c:	002b      	movs	r3, r5
 8008f9e:	f7f8 feeb 	bl	8001d78 <__aeabi_dmul>
 8008fa2:	4b34      	ldr	r3, [pc, #208]	; (8009074 <atan+0x308>)
 8008fa4:	19bf      	adds	r7, r7, r6
 8008fa6:	199e      	adds	r6, r3, r6
 8008fa8:	6832      	ldr	r2, [r6, #0]
 8008faa:	6873      	ldr	r3, [r6, #4]
 8008fac:	f7f9 f964 	bl	8002278 <__aeabi_dsub>
 8008fb0:	0022      	movs	r2, r4
 8008fb2:	002b      	movs	r3, r5
 8008fb4:	f7f9 f960 	bl	8002278 <__aeabi_dsub>
 8008fb8:	000b      	movs	r3, r1
 8008fba:	0002      	movs	r2, r0
 8008fbc:	6838      	ldr	r0, [r7, #0]
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	f7f9 f95a 	bl	8002278 <__aeabi_dsub>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	0004      	movs	r4, r0
 8008fc8:	000d      	movs	r5, r1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db00      	blt.n	8008fd0 <atan+0x264>
 8008fce:	e6ec      	b.n	8008daa <atan+0x3e>
 8008fd0:	2180      	movs	r1, #128	; 0x80
 8008fd2:	0609      	lsls	r1, r1, #24
 8008fd4:	186b      	adds	r3, r5, r1
 8008fd6:	001d      	movs	r5, r3
 8008fd8:	e6e7      	b.n	8008daa <atan+0x3e>
 8008fda:	4d27      	ldr	r5, [pc, #156]	; (8009078 <atan+0x30c>)
 8008fdc:	e6e5      	b.n	8008daa <atan+0x3e>
 8008fde:	46c0      	nop			; (mov r8, r8)
 8008fe0:	440fffff 	.word	0x440fffff
 8008fe4:	7ff00000 	.word	0x7ff00000
 8008fe8:	54442d18 	.word	0x54442d18
 8008fec:	bff921fb 	.word	0xbff921fb
 8008ff0:	3fdbffff 	.word	0x3fdbffff
 8008ff4:	3e1fffff 	.word	0x3e1fffff
 8008ff8:	8800759c 	.word	0x8800759c
 8008ffc:	7e37e43c 	.word	0x7e37e43c
 8009000:	3ff00000 	.word	0x3ff00000
 8009004:	3ff2ffff 	.word	0x3ff2ffff
 8009008:	3fe5ffff 	.word	0x3fe5ffff
 800900c:	e322da11 	.word	0xe322da11
 8009010:	3f90ad3a 	.word	0x3f90ad3a
 8009014:	24760deb 	.word	0x24760deb
 8009018:	3fa97b4b 	.word	0x3fa97b4b
 800901c:	a0d03d51 	.word	0xa0d03d51
 8009020:	3fb10d66 	.word	0x3fb10d66
 8009024:	c54c206e 	.word	0xc54c206e
 8009028:	3fb745cd 	.word	0x3fb745cd
 800902c:	920083ff 	.word	0x920083ff
 8009030:	3fc24924 	.word	0x3fc24924
 8009034:	5555550d 	.word	0x5555550d
 8009038:	3fd55555 	.word	0x3fd55555
 800903c:	2c6a6c2f 	.word	0x2c6a6c2f
 8009040:	bfa2b444 	.word	0xbfa2b444
 8009044:	52defd9a 	.word	0x52defd9a
 8009048:	3fadde2d 	.word	0x3fadde2d
 800904c:	af749a6d 	.word	0xaf749a6d
 8009050:	3fb3b0f2 	.word	0x3fb3b0f2
 8009054:	fe231671 	.word	0xfe231671
 8009058:	3fbc71c6 	.word	0x3fbc71c6
 800905c:	9998ebc4 	.word	0x9998ebc4
 8009060:	3fc99999 	.word	0x3fc99999
 8009064:	40037fff 	.word	0x40037fff
 8009068:	3ff80000 	.word	0x3ff80000
 800906c:	bff00000 	.word	0xbff00000
 8009070:	080096a8 	.word	0x080096a8
 8009074:	080096c8 	.word	0x080096c8
 8009078:	3ff921fb 	.word	0x3ff921fb

0800907c <fabs>:
 800907c:	0049      	lsls	r1, r1, #1
 800907e:	084b      	lsrs	r3, r1, #1
 8009080:	0019      	movs	r1, r3
 8009082:	4770      	bx	lr

08009084 <floor>:
 8009084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009086:	004b      	lsls	r3, r1, #1
 8009088:	4a39      	ldr	r2, [pc, #228]	; (8009170 <floor+0xec>)
 800908a:	0d5b      	lsrs	r3, r3, #21
 800908c:	b085      	sub	sp, #20
 800908e:	189e      	adds	r6, r3, r2
 8009090:	9003      	str	r0, [sp, #12]
 8009092:	000c      	movs	r4, r1
 8009094:	0005      	movs	r5, r0
 8009096:	2e13      	cmp	r6, #19
 8009098:	dc34      	bgt.n	8009104 <floor+0x80>
 800909a:	2e00      	cmp	r6, #0
 800909c:	da15      	bge.n	80090ca <floor+0x46>
 800909e:	4a35      	ldr	r2, [pc, #212]	; (8009174 <floor+0xf0>)
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <floor+0xf4>)
 80090a2:	f7f7 ff25 	bl	8000ef0 <__aeabi_dadd>
 80090a6:	2200      	movs	r2, #0
 80090a8:	2300      	movs	r3, #0
 80090aa:	f7f7 f9d7 	bl	800045c <__aeabi_dcmpgt>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d008      	beq.n	80090c4 <floor+0x40>
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	da59      	bge.n	800916a <floor+0xe6>
 80090b6:	0063      	lsls	r3, r4, #1
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	432b      	orrs	r3, r5
 80090bc:	2500      	movs	r5, #0
 80090be:	42ab      	cmp	r3, r5
 80090c0:	d000      	beq.n	80090c4 <floor+0x40>
 80090c2:	4c2e      	ldr	r4, [pc, #184]	; (800917c <floor+0xf8>)
 80090c4:	0028      	movs	r0, r5
 80090c6:	0021      	movs	r1, r4
 80090c8:	e026      	b.n	8009118 <floor+0x94>
 80090ca:	4f2d      	ldr	r7, [pc, #180]	; (8009180 <floor+0xfc>)
 80090cc:	4137      	asrs	r7, r6
 80090ce:	003b      	movs	r3, r7
 80090d0:	400b      	ands	r3, r1
 80090d2:	4303      	orrs	r3, r0
 80090d4:	d020      	beq.n	8009118 <floor+0x94>
 80090d6:	9000      	str	r0, [sp, #0]
 80090d8:	9101      	str	r1, [sp, #4]
 80090da:	4a26      	ldr	r2, [pc, #152]	; (8009174 <floor+0xf0>)
 80090dc:	4b26      	ldr	r3, [pc, #152]	; (8009178 <floor+0xf4>)
 80090de:	9800      	ldr	r0, [sp, #0]
 80090e0:	9901      	ldr	r1, [sp, #4]
 80090e2:	f7f7 ff05 	bl	8000ef0 <__aeabi_dadd>
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	f7f7 f9b7 	bl	800045c <__aeabi_dcmpgt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d0e8      	beq.n	80090c4 <floor+0x40>
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	da03      	bge.n	80090fe <floor+0x7a>
 80090f6:	2380      	movs	r3, #128	; 0x80
 80090f8:	035b      	lsls	r3, r3, #13
 80090fa:	4133      	asrs	r3, r6
 80090fc:	18e4      	adds	r4, r4, r3
 80090fe:	43bc      	bics	r4, r7
 8009100:	2500      	movs	r5, #0
 8009102:	e7df      	b.n	80090c4 <floor+0x40>
 8009104:	2e33      	cmp	r6, #51	; 0x33
 8009106:	dd09      	ble.n	800911c <floor+0x98>
 8009108:	2380      	movs	r3, #128	; 0x80
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	429e      	cmp	r6, r3
 800910e:	d103      	bne.n	8009118 <floor+0x94>
 8009110:	0002      	movs	r2, r0
 8009112:	000b      	movs	r3, r1
 8009114:	f7f7 feec 	bl	8000ef0 <__aeabi_dadd>
 8009118:	b005      	add	sp, #20
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	2701      	movs	r7, #1
 800911e:	4a19      	ldr	r2, [pc, #100]	; (8009184 <floor+0x100>)
 8009120:	427f      	negs	r7, r7
 8009122:	189b      	adds	r3, r3, r2
 8009124:	40df      	lsrs	r7, r3
 8009126:	4207      	tst	r7, r0
 8009128:	d0f6      	beq.n	8009118 <floor+0x94>
 800912a:	9000      	str	r0, [sp, #0]
 800912c:	9101      	str	r1, [sp, #4]
 800912e:	4a11      	ldr	r2, [pc, #68]	; (8009174 <floor+0xf0>)
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <floor+0xf4>)
 8009132:	9800      	ldr	r0, [sp, #0]
 8009134:	9901      	ldr	r1, [sp, #4]
 8009136:	f7f7 fedb 	bl	8000ef0 <__aeabi_dadd>
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	f7f7 f98d 	bl	800045c <__aeabi_dcmpgt>
 8009142:	2800      	cmp	r0, #0
 8009144:	d0be      	beq.n	80090c4 <floor+0x40>
 8009146:	2c00      	cmp	r4, #0
 8009148:	da02      	bge.n	8009150 <floor+0xcc>
 800914a:	2e14      	cmp	r6, #20
 800914c:	d102      	bne.n	8009154 <floor+0xd0>
 800914e:	3401      	adds	r4, #1
 8009150:	43bd      	bics	r5, r7
 8009152:	e7b7      	b.n	80090c4 <floor+0x40>
 8009154:	2334      	movs	r3, #52	; 0x34
 8009156:	1b9e      	subs	r6, r3, r6
 8009158:	3b33      	subs	r3, #51	; 0x33
 800915a:	40b3      	lsls	r3, r6
 800915c:	18ed      	adds	r5, r5, r3
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	429d      	cmp	r5, r3
 8009162:	419b      	sbcs	r3, r3
 8009164:	425b      	negs	r3, r3
 8009166:	18e4      	adds	r4, r4, r3
 8009168:	e7f2      	b.n	8009150 <floor+0xcc>
 800916a:	2500      	movs	r5, #0
 800916c:	002c      	movs	r4, r5
 800916e:	e7a9      	b.n	80090c4 <floor+0x40>
 8009170:	fffffc01 	.word	0xfffffc01
 8009174:	8800759c 	.word	0x8800759c
 8009178:	7e37e43c 	.word	0x7e37e43c
 800917c:	bff00000 	.word	0xbff00000
 8009180:	000fffff 	.word	0x000fffff
 8009184:	fffffbed 	.word	0xfffffbed

08009188 <scalbn>:
 8009188:	004b      	lsls	r3, r1, #1
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	0d5b      	lsrs	r3, r3, #21
 800918e:	0014      	movs	r4, r2
 8009190:	000a      	movs	r2, r1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10e      	bne.n	80091b4 <scalbn+0x2c>
 8009196:	004b      	lsls	r3, r1, #1
 8009198:	085b      	lsrs	r3, r3, #1
 800919a:	4303      	orrs	r3, r0
 800919c:	d011      	beq.n	80091c2 <scalbn+0x3a>
 800919e:	2200      	movs	r2, #0
 80091a0:	4b20      	ldr	r3, [pc, #128]	; (8009224 <scalbn+0x9c>)
 80091a2:	f7f8 fde9 	bl	8001d78 <__aeabi_dmul>
 80091a6:	4b20      	ldr	r3, [pc, #128]	; (8009228 <scalbn+0xa0>)
 80091a8:	000a      	movs	r2, r1
 80091aa:	429c      	cmp	r4, r3
 80091ac:	da0a      	bge.n	80091c4 <scalbn+0x3c>
 80091ae:	4a1f      	ldr	r2, [pc, #124]	; (800922c <scalbn+0xa4>)
 80091b0:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <scalbn+0xa8>)
 80091b2:	e016      	b.n	80091e2 <scalbn+0x5a>
 80091b4:	4d1f      	ldr	r5, [pc, #124]	; (8009234 <scalbn+0xac>)
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	d107      	bne.n	80091ca <scalbn+0x42>
 80091ba:	0002      	movs	r2, r0
 80091bc:	000b      	movs	r3, r1
 80091be:	f7f7 fe97 	bl	8000ef0 <__aeabi_dadd>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	004b      	lsls	r3, r1, #1
 80091c6:	0d5b      	lsrs	r3, r3, #21
 80091c8:	3b36      	subs	r3, #54	; 0x36
 80091ca:	4d1b      	ldr	r5, [pc, #108]	; (8009238 <scalbn+0xb0>)
 80091cc:	18e3      	adds	r3, r4, r3
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	dd0a      	ble.n	80091e8 <scalbn+0x60>
 80091d2:	0002      	movs	r2, r0
 80091d4:	000b      	movs	r3, r1
 80091d6:	4819      	ldr	r0, [pc, #100]	; (800923c <scalbn+0xb4>)
 80091d8:	4919      	ldr	r1, [pc, #100]	; (8009240 <scalbn+0xb8>)
 80091da:	f000 f839 	bl	8009250 <copysign>
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <scalbn+0xb4>)
 80091e0:	4b17      	ldr	r3, [pc, #92]	; (8009240 <scalbn+0xb8>)
 80091e2:	f7f8 fdc9 	bl	8001d78 <__aeabi_dmul>
 80091e6:	e7ec      	b.n	80091c2 <scalbn+0x3a>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd05      	ble.n	80091f8 <scalbn+0x70>
 80091ec:	4c15      	ldr	r4, [pc, #84]	; (8009244 <scalbn+0xbc>)
 80091ee:	051b      	lsls	r3, r3, #20
 80091f0:	4022      	ands	r2, r4
 80091f2:	431a      	orrs	r2, r3
 80091f4:	0011      	movs	r1, r2
 80091f6:	e7e4      	b.n	80091c2 <scalbn+0x3a>
 80091f8:	001d      	movs	r5, r3
 80091fa:	3535      	adds	r5, #53	; 0x35
 80091fc:	da09      	bge.n	8009212 <scalbn+0x8a>
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <scalbn+0xc0>)
 8009200:	0002      	movs	r2, r0
 8009202:	429c      	cmp	r4, r3
 8009204:	dce6      	bgt.n	80091d4 <scalbn+0x4c>
 8009206:	000b      	movs	r3, r1
 8009208:	4808      	ldr	r0, [pc, #32]	; (800922c <scalbn+0xa4>)
 800920a:	4909      	ldr	r1, [pc, #36]	; (8009230 <scalbn+0xa8>)
 800920c:	f000 f820 	bl	8009250 <copysign>
 8009210:	e7cd      	b.n	80091ae <scalbn+0x26>
 8009212:	4c0c      	ldr	r4, [pc, #48]	; (8009244 <scalbn+0xbc>)
 8009214:	3336      	adds	r3, #54	; 0x36
 8009216:	4022      	ands	r2, r4
 8009218:	051b      	lsls	r3, r3, #20
 800921a:	4313      	orrs	r3, r2
 800921c:	0019      	movs	r1, r3
 800921e:	2200      	movs	r2, #0
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <scalbn+0xc4>)
 8009222:	e7de      	b.n	80091e2 <scalbn+0x5a>
 8009224:	43500000 	.word	0x43500000
 8009228:	ffff3cb0 	.word	0xffff3cb0
 800922c:	c2f8f359 	.word	0xc2f8f359
 8009230:	01a56e1f 	.word	0x01a56e1f
 8009234:	000007ff 	.word	0x000007ff
 8009238:	000007fe 	.word	0x000007fe
 800923c:	8800759c 	.word	0x8800759c
 8009240:	7e37e43c 	.word	0x7e37e43c
 8009244:	800fffff 	.word	0x800fffff
 8009248:	0000c350 	.word	0x0000c350
 800924c:	3c900000 	.word	0x3c900000

08009250 <copysign>:
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	004a      	lsls	r2, r1, #1
 8009254:	0fdb      	lsrs	r3, r3, #31
 8009256:	07db      	lsls	r3, r3, #31
 8009258:	0852      	lsrs	r2, r2, #1
 800925a:	431a      	orrs	r2, r3
 800925c:	0011      	movs	r1, r2
 800925e:	bd30      	pop	{r4, r5, pc}

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
