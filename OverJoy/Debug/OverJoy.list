
OverJoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008c28  08008c28  00018c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000194  20000000  08009060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000089c  20000194  080091f4  00020194  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a30  080091f4  00020a30  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023201  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000043bd  00000000  00000000  000433bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c76b  00000000  00000000  0004777a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001150  00000000  00000000  00053ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001100  00000000  00000000  00055038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009273  00000000  00000000  00056138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e66  00000000  00000000  0005f3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00064211  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003218  00000000  00000000  00064290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000194 	.word	0x20000194
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008c10 	.word	0x08008c10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000198 	.word	0x20000198
 8000104:	08008c10 	.word	0x08008c10

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fa49 	bl	80018b0 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 f9a3 	bl	8001774 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fa3b 	bl	80018b0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa31 	bl	80018b0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f9c3 	bl	80017e8 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 f9b9 	bl	80017e8 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	46de      	mov	lr, fp
 800048c:	4645      	mov	r5, r8
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0244      	lsls	r4, r0, #9
 8000492:	0043      	lsls	r3, r0, #1
 8000494:	0fc6      	lsrs	r6, r0, #31
 8000496:	b083      	sub	sp, #12
 8000498:	1c0f      	adds	r7, r1, #0
 800049a:	0a64      	lsrs	r4, r4, #9
 800049c:	0e1b      	lsrs	r3, r3, #24
 800049e:	46b2      	mov	sl, r6
 80004a0:	d053      	beq.n	800054a <__aeabi_fdiv+0xc6>
 80004a2:	2bff      	cmp	r3, #255	; 0xff
 80004a4:	d027      	beq.n	80004f6 <__aeabi_fdiv+0x72>
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	00e4      	lsls	r4, r4, #3
 80004aa:	04d2      	lsls	r2, r2, #19
 80004ac:	4314      	orrs	r4, r2
 80004ae:	227f      	movs	r2, #127	; 0x7f
 80004b0:	4252      	negs	r2, r2
 80004b2:	4690      	mov	r8, r2
 80004b4:	4498      	add	r8, r3
 80004b6:	2300      	movs	r3, #0
 80004b8:	4699      	mov	r9, r3
 80004ba:	469b      	mov	fp, r3
 80004bc:	027d      	lsls	r5, r7, #9
 80004be:	0078      	lsls	r0, r7, #1
 80004c0:	0ffb      	lsrs	r3, r7, #31
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e00      	lsrs	r0, r0, #24
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	d024      	beq.n	8000514 <__aeabi_fdiv+0x90>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d046      	beq.n	800055c <__aeabi_fdiv+0xd8>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	2100      	movs	r1, #0
 80004d2:	00ed      	lsls	r5, r5, #3
 80004d4:	04db      	lsls	r3, r3, #19
 80004d6:	431d      	orrs	r5, r3
 80004d8:	387f      	subs	r0, #127	; 0x7f
 80004da:	4647      	mov	r7, r8
 80004dc:	1a38      	subs	r0, r7, r0
 80004de:	464f      	mov	r7, r9
 80004e0:	430f      	orrs	r7, r1
 80004e2:	00bf      	lsls	r7, r7, #2
 80004e4:	46b9      	mov	r9, r7
 80004e6:	0033      	movs	r3, r6
 80004e8:	9a00      	ldr	r2, [sp, #0]
 80004ea:	4f87      	ldr	r7, [pc, #540]	; (8000708 <__aeabi_fdiv+0x284>)
 80004ec:	4053      	eors	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	58ba      	ldr	r2, [r7, r2]
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	4697      	mov	pc, r2
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d14e      	bne.n	8000598 <__aeabi_fdiv+0x114>
 80004fa:	2308      	movs	r3, #8
 80004fc:	4699      	mov	r9, r3
 80004fe:	33f7      	adds	r3, #247	; 0xf7
 8000500:	4698      	mov	r8, r3
 8000502:	3bfd      	subs	r3, #253	; 0xfd
 8000504:	469b      	mov	fp, r3
 8000506:	027d      	lsls	r5, r7, #9
 8000508:	0078      	lsls	r0, r7, #1
 800050a:	0ffb      	lsrs	r3, r7, #31
 800050c:	0a6d      	lsrs	r5, r5, #9
 800050e:	0e00      	lsrs	r0, r0, #24
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	d1da      	bne.n	80004ca <__aeabi_fdiv+0x46>
 8000514:	2d00      	cmp	r5, #0
 8000516:	d126      	bne.n	8000566 <__aeabi_fdiv+0xe2>
 8000518:	2000      	movs	r0, #0
 800051a:	2101      	movs	r1, #1
 800051c:	0033      	movs	r3, r6
 800051e:	9a00      	ldr	r2, [sp, #0]
 8000520:	4f7a      	ldr	r7, [pc, #488]	; (800070c <__aeabi_fdiv+0x288>)
 8000522:	4053      	eors	r3, r2
 8000524:	4642      	mov	r2, r8
 8000526:	1a10      	subs	r0, r2, r0
 8000528:	464a      	mov	r2, r9
 800052a:	430a      	orrs	r2, r1
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	58ba      	ldr	r2, [r7, r2]
 8000530:	001d      	movs	r5, r3
 8000532:	4697      	mov	pc, r2
 8000534:	9b00      	ldr	r3, [sp, #0]
 8000536:	002c      	movs	r4, r5
 8000538:	469a      	mov	sl, r3
 800053a:	468b      	mov	fp, r1
 800053c:	465b      	mov	r3, fp
 800053e:	2b02      	cmp	r3, #2
 8000540:	d131      	bne.n	80005a6 <__aeabi_fdiv+0x122>
 8000542:	4653      	mov	r3, sl
 8000544:	21ff      	movs	r1, #255	; 0xff
 8000546:	2400      	movs	r4, #0
 8000548:	e038      	b.n	80005bc <__aeabi_fdiv+0x138>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d117      	bne.n	800057e <__aeabi_fdiv+0xfa>
 800054e:	2304      	movs	r3, #4
 8000550:	4699      	mov	r9, r3
 8000552:	2300      	movs	r3, #0
 8000554:	4698      	mov	r8, r3
 8000556:	3301      	adds	r3, #1
 8000558:	469b      	mov	fp, r3
 800055a:	e7af      	b.n	80004bc <__aeabi_fdiv+0x38>
 800055c:	20ff      	movs	r0, #255	; 0xff
 800055e:	2d00      	cmp	r5, #0
 8000560:	d10b      	bne.n	800057a <__aeabi_fdiv+0xf6>
 8000562:	2102      	movs	r1, #2
 8000564:	e7da      	b.n	800051c <__aeabi_fdiv+0x98>
 8000566:	0028      	movs	r0, r5
 8000568:	f002 f924 	bl	80027b4 <__clzsi2>
 800056c:	1f43      	subs	r3, r0, #5
 800056e:	409d      	lsls	r5, r3
 8000570:	2376      	movs	r3, #118	; 0x76
 8000572:	425b      	negs	r3, r3
 8000574:	1a18      	subs	r0, r3, r0
 8000576:	2100      	movs	r1, #0
 8000578:	e7af      	b.n	80004da <__aeabi_fdiv+0x56>
 800057a:	2103      	movs	r1, #3
 800057c:	e7ad      	b.n	80004da <__aeabi_fdiv+0x56>
 800057e:	0020      	movs	r0, r4
 8000580:	f002 f918 	bl	80027b4 <__clzsi2>
 8000584:	1f43      	subs	r3, r0, #5
 8000586:	409c      	lsls	r4, r3
 8000588:	2376      	movs	r3, #118	; 0x76
 800058a:	425b      	negs	r3, r3
 800058c:	1a1b      	subs	r3, r3, r0
 800058e:	4698      	mov	r8, r3
 8000590:	2300      	movs	r3, #0
 8000592:	4699      	mov	r9, r3
 8000594:	469b      	mov	fp, r3
 8000596:	e791      	b.n	80004bc <__aeabi_fdiv+0x38>
 8000598:	230c      	movs	r3, #12
 800059a:	4699      	mov	r9, r3
 800059c:	33f3      	adds	r3, #243	; 0xf3
 800059e:	4698      	mov	r8, r3
 80005a0:	3bfc      	subs	r3, #252	; 0xfc
 80005a2:	469b      	mov	fp, r3
 80005a4:	e78a      	b.n	80004bc <__aeabi_fdiv+0x38>
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d100      	bne.n	80005ac <__aeabi_fdiv+0x128>
 80005aa:	e0a5      	b.n	80006f8 <__aeabi_fdiv+0x274>
 80005ac:	4655      	mov	r5, sl
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fdiv+0x130>
 80005b2:	e081      	b.n	80006b8 <__aeabi_fdiv+0x234>
 80005b4:	2301      	movs	r3, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	2400      	movs	r4, #0
 80005ba:	402b      	ands	r3, r5
 80005bc:	0264      	lsls	r4, r4, #9
 80005be:	05c9      	lsls	r1, r1, #23
 80005c0:	0a60      	lsrs	r0, r4, #9
 80005c2:	07db      	lsls	r3, r3, #31
 80005c4:	4308      	orrs	r0, r1
 80005c6:	4318      	orrs	r0, r3
 80005c8:	b003      	add	sp, #12
 80005ca:	bc3c      	pop	{r2, r3, r4, r5}
 80005cc:	4690      	mov	r8, r2
 80005ce:	4699      	mov	r9, r3
 80005d0:	46a2      	mov	sl, r4
 80005d2:	46ab      	mov	fp, r5
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d6:	2480      	movs	r4, #128	; 0x80
 80005d8:	2300      	movs	r3, #0
 80005da:	03e4      	lsls	r4, r4, #15
 80005dc:	21ff      	movs	r1, #255	; 0xff
 80005de:	e7ed      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005e0:	21ff      	movs	r1, #255	; 0xff
 80005e2:	2400      	movs	r4, #0
 80005e4:	e7ea      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005e6:	2301      	movs	r3, #1
 80005e8:	1a59      	subs	r1, r3, r1
 80005ea:	291b      	cmp	r1, #27
 80005ec:	dd66      	ble.n	80006bc <__aeabi_fdiv+0x238>
 80005ee:	9a01      	ldr	r2, [sp, #4]
 80005f0:	4013      	ands	r3, r2
 80005f2:	2100      	movs	r1, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	e7e1      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	03db      	lsls	r3, r3, #15
 80005fc:	421c      	tst	r4, r3
 80005fe:	d038      	beq.n	8000672 <__aeabi_fdiv+0x1ee>
 8000600:	421d      	tst	r5, r3
 8000602:	d051      	beq.n	80006a8 <__aeabi_fdiv+0x224>
 8000604:	431c      	orrs	r4, r3
 8000606:	0264      	lsls	r4, r4, #9
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	0033      	movs	r3, r6
 800060c:	21ff      	movs	r1, #255	; 0xff
 800060e:	e7d5      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000610:	0163      	lsls	r3, r4, #5
 8000612:	016c      	lsls	r4, r5, #5
 8000614:	42a3      	cmp	r3, r4
 8000616:	d23b      	bcs.n	8000690 <__aeabi_fdiv+0x20c>
 8000618:	261b      	movs	r6, #27
 800061a:	2100      	movs	r1, #0
 800061c:	3801      	subs	r0, #1
 800061e:	2501      	movs	r5, #1
 8000620:	001f      	movs	r7, r3
 8000622:	0049      	lsls	r1, r1, #1
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2f00      	cmp	r7, #0
 8000628:	db01      	blt.n	800062e <__aeabi_fdiv+0x1aa>
 800062a:	429c      	cmp	r4, r3
 800062c:	d801      	bhi.n	8000632 <__aeabi_fdiv+0x1ae>
 800062e:	1b1b      	subs	r3, r3, r4
 8000630:	4329      	orrs	r1, r5
 8000632:	3e01      	subs	r6, #1
 8000634:	2e00      	cmp	r6, #0
 8000636:	d1f3      	bne.n	8000620 <__aeabi_fdiv+0x19c>
 8000638:	001c      	movs	r4, r3
 800063a:	1e63      	subs	r3, r4, #1
 800063c:	419c      	sbcs	r4, r3
 800063e:	430c      	orrs	r4, r1
 8000640:	0001      	movs	r1, r0
 8000642:	317f      	adds	r1, #127	; 0x7f
 8000644:	2900      	cmp	r1, #0
 8000646:	ddce      	ble.n	80005e6 <__aeabi_fdiv+0x162>
 8000648:	0763      	lsls	r3, r4, #29
 800064a:	d004      	beq.n	8000656 <__aeabi_fdiv+0x1d2>
 800064c:	230f      	movs	r3, #15
 800064e:	4023      	ands	r3, r4
 8000650:	2b04      	cmp	r3, #4
 8000652:	d000      	beq.n	8000656 <__aeabi_fdiv+0x1d2>
 8000654:	3404      	adds	r4, #4
 8000656:	0123      	lsls	r3, r4, #4
 8000658:	d503      	bpl.n	8000662 <__aeabi_fdiv+0x1de>
 800065a:	0001      	movs	r1, r0
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <__aeabi_fdiv+0x28c>)
 800065e:	3180      	adds	r1, #128	; 0x80
 8000660:	401c      	ands	r4, r3
 8000662:	29fe      	cmp	r1, #254	; 0xfe
 8000664:	dd0d      	ble.n	8000682 <__aeabi_fdiv+0x1fe>
 8000666:	2301      	movs	r3, #1
 8000668:	9a01      	ldr	r2, [sp, #4]
 800066a:	21ff      	movs	r1, #255	; 0xff
 800066c:	4013      	ands	r3, r2
 800066e:	2400      	movs	r4, #0
 8000670:	e7a4      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	431c      	orrs	r4, r3
 8000678:	0264      	lsls	r4, r4, #9
 800067a:	0a64      	lsrs	r4, r4, #9
 800067c:	0033      	movs	r3, r6
 800067e:	21ff      	movs	r1, #255	; 0xff
 8000680:	e79c      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000682:	2301      	movs	r3, #1
 8000684:	9a01      	ldr	r2, [sp, #4]
 8000686:	01a4      	lsls	r4, r4, #6
 8000688:	0a64      	lsrs	r4, r4, #9
 800068a:	b2c9      	uxtb	r1, r1
 800068c:	4013      	ands	r3, r2
 800068e:	e795      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000690:	1b1b      	subs	r3, r3, r4
 8000692:	261a      	movs	r6, #26
 8000694:	2101      	movs	r1, #1
 8000696:	e7c2      	b.n	800061e <__aeabi_fdiv+0x19a>
 8000698:	9b00      	ldr	r3, [sp, #0]
 800069a:	468b      	mov	fp, r1
 800069c:	469a      	mov	sl, r3
 800069e:	2400      	movs	r4, #0
 80006a0:	e74c      	b.n	800053c <__aeabi_fdiv+0xb8>
 80006a2:	0263      	lsls	r3, r4, #9
 80006a4:	d5e5      	bpl.n	8000672 <__aeabi_fdiv+0x1ee>
 80006a6:	2500      	movs	r5, #0
 80006a8:	2480      	movs	r4, #128	; 0x80
 80006aa:	03e4      	lsls	r4, r4, #15
 80006ac:	432c      	orrs	r4, r5
 80006ae:	0264      	lsls	r4, r4, #9
 80006b0:	0a64      	lsrs	r4, r4, #9
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	21ff      	movs	r1, #255	; 0xff
 80006b6:	e781      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006b8:	9501      	str	r5, [sp, #4]
 80006ba:	e7c1      	b.n	8000640 <__aeabi_fdiv+0x1bc>
 80006bc:	0023      	movs	r3, r4
 80006be:	2020      	movs	r0, #32
 80006c0:	40cb      	lsrs	r3, r1
 80006c2:	1a41      	subs	r1, r0, r1
 80006c4:	408c      	lsls	r4, r1
 80006c6:	1e61      	subs	r1, r4, #1
 80006c8:	418c      	sbcs	r4, r1
 80006ca:	431c      	orrs	r4, r3
 80006cc:	0763      	lsls	r3, r4, #29
 80006ce:	d004      	beq.n	80006da <__aeabi_fdiv+0x256>
 80006d0:	230f      	movs	r3, #15
 80006d2:	4023      	ands	r3, r4
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d000      	beq.n	80006da <__aeabi_fdiv+0x256>
 80006d8:	3404      	adds	r4, #4
 80006da:	0163      	lsls	r3, r4, #5
 80006dc:	d505      	bpl.n	80006ea <__aeabi_fdiv+0x266>
 80006de:	2301      	movs	r3, #1
 80006e0:	9a01      	ldr	r2, [sp, #4]
 80006e2:	2101      	movs	r1, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	2400      	movs	r4, #0
 80006e8:	e768      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006ea:	2301      	movs	r3, #1
 80006ec:	9a01      	ldr	r2, [sp, #4]
 80006ee:	01a4      	lsls	r4, r4, #6
 80006f0:	0a64      	lsrs	r4, r4, #9
 80006f2:	4013      	ands	r3, r2
 80006f4:	2100      	movs	r1, #0
 80006f6:	e761      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	431c      	orrs	r4, r3
 80006fe:	0264      	lsls	r4, r4, #9
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	4653      	mov	r3, sl
 8000704:	21ff      	movs	r1, #255	; 0xff
 8000706:	e759      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000708:	08008c48 	.word	0x08008c48
 800070c:	08008c88 	.word	0x08008c88
 8000710:	f7ffffff 	.word	0xf7ffffff

08000714 <__aeabi_fsub>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	464f      	mov	r7, r9
 8000718:	46d6      	mov	lr, sl
 800071a:	4646      	mov	r6, r8
 800071c:	0044      	lsls	r4, r0, #1
 800071e:	b5c0      	push	{r6, r7, lr}
 8000720:	0fc2      	lsrs	r2, r0, #31
 8000722:	0247      	lsls	r7, r0, #9
 8000724:	0248      	lsls	r0, r1, #9
 8000726:	0a40      	lsrs	r0, r0, #9
 8000728:	4684      	mov	ip, r0
 800072a:	4666      	mov	r6, ip
 800072c:	0a7b      	lsrs	r3, r7, #9
 800072e:	0048      	lsls	r0, r1, #1
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	469a      	mov	sl, r3
 8000734:	0e24      	lsrs	r4, r4, #24
 8000736:	0015      	movs	r5, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	4689      	mov	r9, r1
 800073e:	00f6      	lsls	r6, r6, #3
 8000740:	28ff      	cmp	r0, #255	; 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0x32>
 8000744:	e08f      	b.n	8000866 <__aeabi_fsub+0x152>
 8000746:	2101      	movs	r1, #1
 8000748:	464f      	mov	r7, r9
 800074a:	404f      	eors	r7, r1
 800074c:	0039      	movs	r1, r7
 800074e:	4291      	cmp	r1, r2
 8000750:	d066      	beq.n	8000820 <__aeabi_fsub+0x10c>
 8000752:	1a22      	subs	r2, r4, r0
 8000754:	2a00      	cmp	r2, #0
 8000756:	dc00      	bgt.n	800075a <__aeabi_fsub+0x46>
 8000758:	e09d      	b.n	8000896 <__aeabi_fsub+0x182>
 800075a:	2800      	cmp	r0, #0
 800075c:	d13d      	bne.n	80007da <__aeabi_fsub+0xc6>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fsub+0x50>
 8000762:	e08b      	b.n	800087c <__aeabi_fsub+0x168>
 8000764:	1e51      	subs	r1, r2, #1
 8000766:	2900      	cmp	r1, #0
 8000768:	d000      	beq.n	800076c <__aeabi_fsub+0x58>
 800076a:	e0b5      	b.n	80008d8 <__aeabi_fsub+0x1c4>
 800076c:	2401      	movs	r4, #1
 800076e:	1b9b      	subs	r3, r3, r6
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d544      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	099f      	lsrs	r7, r3, #6
 8000778:	0038      	movs	r0, r7
 800077a:	f002 f81b 	bl	80027b4 <__clzsi2>
 800077e:	3805      	subs	r0, #5
 8000780:	4087      	lsls	r7, r0
 8000782:	4284      	cmp	r4, r0
 8000784:	dd00      	ble.n	8000788 <__aeabi_fsub+0x74>
 8000786:	e096      	b.n	80008b6 <__aeabi_fsub+0x1a2>
 8000788:	1b04      	subs	r4, r0, r4
 800078a:	003a      	movs	r2, r7
 800078c:	2020      	movs	r0, #32
 800078e:	3401      	adds	r4, #1
 8000790:	40e2      	lsrs	r2, r4
 8000792:	1b04      	subs	r4, r0, r4
 8000794:	40a7      	lsls	r7, r4
 8000796:	003b      	movs	r3, r7
 8000798:	1e5f      	subs	r7, r3, #1
 800079a:	41bb      	sbcs	r3, r7
 800079c:	2400      	movs	r4, #0
 800079e:	4313      	orrs	r3, r2
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fsub+0x9a>
 80007a4:	220f      	movs	r2, #15
 80007a6:	401a      	ands	r2, r3
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x9a>
 80007ac:	3304      	adds	r3, #4
 80007ae:	015a      	lsls	r2, r3, #5
 80007b0:	d527      	bpl.n	8000802 <__aeabi_fsub+0xee>
 80007b2:	3401      	adds	r4, #1
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0xa6>
 80007b8:	e079      	b.n	80008ae <__aeabi_fsub+0x19a>
 80007ba:	2201      	movs	r2, #1
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b2e4      	uxtb	r4, r4
 80007c2:	402a      	ands	r2, r5
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	05e4      	lsls	r4, r4, #23
 80007c8:	0a58      	lsrs	r0, r3, #9
 80007ca:	07d2      	lsls	r2, r2, #31
 80007cc:	4320      	orrs	r0, r4
 80007ce:	4310      	orrs	r0, r2
 80007d0:	bc1c      	pop	{r2, r3, r4}
 80007d2:	4690      	mov	r8, r2
 80007d4:	4699      	mov	r9, r3
 80007d6:	46a2      	mov	sl, r4
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	2cff      	cmp	r4, #255	; 0xff
 80007dc:	d0e0      	beq.n	80007a0 <__aeabi_fsub+0x8c>
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	04c9      	lsls	r1, r1, #19
 80007e2:	430e      	orrs	r6, r1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc7b      	bgt.n	80008e0 <__aeabi_fsub+0x1cc>
 80007e8:	0031      	movs	r1, r6
 80007ea:	2020      	movs	r0, #32
 80007ec:	40d1      	lsrs	r1, r2
 80007ee:	1a82      	subs	r2, r0, r2
 80007f0:	4096      	lsls	r6, r2
 80007f2:	1e72      	subs	r2, r6, #1
 80007f4:	4196      	sbcs	r6, r2
 80007f6:	430e      	orrs	r6, r1
 80007f8:	1b9b      	subs	r3, r3, r6
 80007fa:	015a      	lsls	r2, r3, #5
 80007fc:	d4ba      	bmi.n	8000774 <__aeabi_fsub+0x60>
 80007fe:	075a      	lsls	r2, r3, #29
 8000800:	d1d0      	bne.n	80007a4 <__aeabi_fsub+0x90>
 8000802:	2201      	movs	r2, #1
 8000804:	08df      	lsrs	r7, r3, #3
 8000806:	402a      	ands	r2, r5
 8000808:	2cff      	cmp	r4, #255	; 0xff
 800080a:	d133      	bne.n	8000874 <__aeabi_fsub+0x160>
 800080c:	2f00      	cmp	r7, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0xfe>
 8000810:	e0a8      	b.n	8000964 <__aeabi_fsub+0x250>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	03db      	lsls	r3, r3, #15
 8000816:	433b      	orrs	r3, r7
 8000818:	025b      	lsls	r3, r3, #9
 800081a:	0a5b      	lsrs	r3, r3, #9
 800081c:	24ff      	movs	r4, #255	; 0xff
 800081e:	e7d1      	b.n	80007c4 <__aeabi_fsub+0xb0>
 8000820:	1a21      	subs	r1, r4, r0
 8000822:	2900      	cmp	r1, #0
 8000824:	dd4c      	ble.n	80008c0 <__aeabi_fsub+0x1ac>
 8000826:	2800      	cmp	r0, #0
 8000828:	d02a      	beq.n	8000880 <__aeabi_fsub+0x16c>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d0b8      	beq.n	80007a0 <__aeabi_fsub+0x8c>
 800082e:	2080      	movs	r0, #128	; 0x80
 8000830:	04c0      	lsls	r0, r0, #19
 8000832:	4306      	orrs	r6, r0
 8000834:	291b      	cmp	r1, #27
 8000836:	dd00      	ble.n	800083a <__aeabi_fsub+0x126>
 8000838:	e0af      	b.n	800099a <__aeabi_fsub+0x286>
 800083a:	0030      	movs	r0, r6
 800083c:	2720      	movs	r7, #32
 800083e:	40c8      	lsrs	r0, r1
 8000840:	1a79      	subs	r1, r7, r1
 8000842:	408e      	lsls	r6, r1
 8000844:	1e71      	subs	r1, r6, #1
 8000846:	418e      	sbcs	r6, r1
 8000848:	4306      	orrs	r6, r0
 800084a:	199b      	adds	r3, r3, r6
 800084c:	0159      	lsls	r1, r3, #5
 800084e:	d5d6      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000850:	3401      	adds	r4, #1
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x144>
 8000856:	e085      	b.n	8000964 <__aeabi_fsub+0x250>
 8000858:	2201      	movs	r2, #1
 800085a:	497a      	ldr	r1, [pc, #488]	; (8000a44 <__aeabi_fsub+0x330>)
 800085c:	401a      	ands	r2, r3
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	400b      	ands	r3, r1
 8000862:	4313      	orrs	r3, r2
 8000864:	e79c      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000866:	2e00      	cmp	r6, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fsub+0x158>
 800086a:	e770      	b.n	800074e <__aeabi_fsub+0x3a>
 800086c:	e76b      	b.n	8000746 <__aeabi_fsub+0x32>
 800086e:	1e3b      	subs	r3, r7, #0
 8000870:	d1c5      	bne.n	80007fe <__aeabi_fsub+0xea>
 8000872:	2200      	movs	r2, #0
 8000874:	027b      	lsls	r3, r7, #9
 8000876:	0a5b      	lsrs	r3, r3, #9
 8000878:	b2e4      	uxtb	r4, r4
 800087a:	e7a3      	b.n	80007c4 <__aeabi_fsub+0xb0>
 800087c:	0014      	movs	r4, r2
 800087e:	e78f      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d04d      	beq.n	8000920 <__aeabi_fsub+0x20c>
 8000884:	1e48      	subs	r0, r1, #1
 8000886:	2800      	cmp	r0, #0
 8000888:	d157      	bne.n	800093a <__aeabi_fsub+0x226>
 800088a:	199b      	adds	r3, r3, r6
 800088c:	2401      	movs	r4, #1
 800088e:	015a      	lsls	r2, r3, #5
 8000890:	d5b5      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000892:	2402      	movs	r4, #2
 8000894:	e7e0      	b.n	8000858 <__aeabi_fsub+0x144>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d125      	bne.n	80008e6 <__aeabi_fsub+0x1d2>
 800089a:	1c62      	adds	r2, r4, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	2a01      	cmp	r2, #1
 80008a0:	dd72      	ble.n	8000988 <__aeabi_fsub+0x274>
 80008a2:	1b9f      	subs	r7, r3, r6
 80008a4:	017a      	lsls	r2, r7, #5
 80008a6:	d535      	bpl.n	8000914 <__aeabi_fsub+0x200>
 80008a8:	1af7      	subs	r7, r6, r3
 80008aa:	000d      	movs	r5, r1
 80008ac:	e764      	b.n	8000778 <__aeabi_fsub+0x64>
 80008ae:	2201      	movs	r2, #1
 80008b0:	2300      	movs	r3, #0
 80008b2:	402a      	ands	r2, r5
 80008b4:	e786      	b.n	80007c4 <__aeabi_fsub+0xb0>
 80008b6:	003b      	movs	r3, r7
 80008b8:	4a63      	ldr	r2, [pc, #396]	; (8000a48 <__aeabi_fsub+0x334>)
 80008ba:	1a24      	subs	r4, r4, r0
 80008bc:	4013      	ands	r3, r2
 80008be:	e76f      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d16c      	bne.n	800099e <__aeabi_fsub+0x28a>
 80008c4:	1c61      	adds	r1, r4, #1
 80008c6:	b2c8      	uxtb	r0, r1
 80008c8:	2801      	cmp	r0, #1
 80008ca:	dd4e      	ble.n	800096a <__aeabi_fsub+0x256>
 80008cc:	29ff      	cmp	r1, #255	; 0xff
 80008ce:	d049      	beq.n	8000964 <__aeabi_fsub+0x250>
 80008d0:	199b      	adds	r3, r3, r6
 80008d2:	085b      	lsrs	r3, r3, #1
 80008d4:	000c      	movs	r4, r1
 80008d6:	e763      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80008d8:	2aff      	cmp	r2, #255	; 0xff
 80008da:	d041      	beq.n	8000960 <__aeabi_fsub+0x24c>
 80008dc:	000a      	movs	r2, r1
 80008de:	e781      	b.n	80007e4 <__aeabi_fsub+0xd0>
 80008e0:	2601      	movs	r6, #1
 80008e2:	1b9b      	subs	r3, r3, r6
 80008e4:	e789      	b.n	80007fa <__aeabi_fsub+0xe6>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d01c      	beq.n	8000924 <__aeabi_fsub+0x210>
 80008ea:	28ff      	cmp	r0, #255	; 0xff
 80008ec:	d021      	beq.n	8000932 <__aeabi_fsub+0x21e>
 80008ee:	2480      	movs	r4, #128	; 0x80
 80008f0:	04e4      	lsls	r4, r4, #19
 80008f2:	4252      	negs	r2, r2
 80008f4:	4323      	orrs	r3, r4
 80008f6:	2a1b      	cmp	r2, #27
 80008f8:	dd00      	ble.n	80008fc <__aeabi_fsub+0x1e8>
 80008fa:	e096      	b.n	8000a2a <__aeabi_fsub+0x316>
 80008fc:	001c      	movs	r4, r3
 80008fe:	2520      	movs	r5, #32
 8000900:	40d4      	lsrs	r4, r2
 8000902:	1aaa      	subs	r2, r5, r2
 8000904:	4093      	lsls	r3, r2
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	4193      	sbcs	r3, r2
 800090a:	4323      	orrs	r3, r4
 800090c:	1af3      	subs	r3, r6, r3
 800090e:	0004      	movs	r4, r0
 8000910:	000d      	movs	r5, r1
 8000912:	e72d      	b.n	8000770 <__aeabi_fsub+0x5c>
 8000914:	2f00      	cmp	r7, #0
 8000916:	d000      	beq.n	800091a <__aeabi_fsub+0x206>
 8000918:	e72e      	b.n	8000778 <__aeabi_fsub+0x64>
 800091a:	2200      	movs	r2, #0
 800091c:	2400      	movs	r4, #0
 800091e:	e7a9      	b.n	8000874 <__aeabi_fsub+0x160>
 8000920:	000c      	movs	r4, r1
 8000922:	e73d      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d058      	beq.n	80009da <__aeabi_fsub+0x2c6>
 8000928:	43d2      	mvns	r2, r2
 800092a:	2a00      	cmp	r2, #0
 800092c:	d0ee      	beq.n	800090c <__aeabi_fsub+0x1f8>
 800092e:	28ff      	cmp	r0, #255	; 0xff
 8000930:	d1e1      	bne.n	80008f6 <__aeabi_fsub+0x1e2>
 8000932:	0033      	movs	r3, r6
 8000934:	24ff      	movs	r4, #255	; 0xff
 8000936:	000d      	movs	r5, r1
 8000938:	e732      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800093a:	29ff      	cmp	r1, #255	; 0xff
 800093c:	d010      	beq.n	8000960 <__aeabi_fsub+0x24c>
 800093e:	0001      	movs	r1, r0
 8000940:	e778      	b.n	8000834 <__aeabi_fsub+0x120>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d06e      	beq.n	8000a24 <__aeabi_fsub+0x310>
 8000946:	24ff      	movs	r4, #255	; 0xff
 8000948:	2e00      	cmp	r6, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fsub+0x23a>
 800094c:	e728      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	4651      	mov	r1, sl
 8000952:	03d2      	lsls	r2, r2, #15
 8000954:	4211      	tst	r1, r2
 8000956:	d003      	beq.n	8000960 <__aeabi_fsub+0x24c>
 8000958:	4661      	mov	r1, ip
 800095a:	4211      	tst	r1, r2
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x24c>
 800095e:	0033      	movs	r3, r6
 8000960:	24ff      	movs	r4, #255	; 0xff
 8000962:	e71d      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000964:	24ff      	movs	r4, #255	; 0xff
 8000966:	2300      	movs	r3, #0
 8000968:	e72c      	b.n	80007c4 <__aeabi_fsub+0xb0>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d1e9      	bne.n	8000942 <__aeabi_fsub+0x22e>
 800096e:	2b00      	cmp	r3, #0
 8000970:	d063      	beq.n	8000a3a <__aeabi_fsub+0x326>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x264>
 8000976:	e713      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000978:	199b      	adds	r3, r3, r6
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fsub+0x26c>
 800097e:	e73e      	b.n	80007fe <__aeabi_fsub+0xea>
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <__aeabi_fsub+0x334>)
 8000982:	000c      	movs	r4, r1
 8000984:	4013      	ands	r3, r2
 8000986:	e70b      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d11e      	bne.n	80009ca <__aeabi_fsub+0x2b6>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d12f      	bne.n	80009f0 <__aeabi_fsub+0x2dc>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d04f      	beq.n	8000a34 <__aeabi_fsub+0x320>
 8000994:	0033      	movs	r3, r6
 8000996:	000d      	movs	r5, r1
 8000998:	e702      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800099a:	2601      	movs	r6, #1
 800099c:	e755      	b.n	800084a <__aeabi_fsub+0x136>
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d11f      	bne.n	80009e2 <__aeabi_fsub+0x2ce>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d043      	beq.n	8000a2e <__aeabi_fsub+0x31a>
 80009a6:	43c9      	mvns	r1, r1
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d00b      	beq.n	80009c4 <__aeabi_fsub+0x2b0>
 80009ac:	28ff      	cmp	r0, #255	; 0xff
 80009ae:	d039      	beq.n	8000a24 <__aeabi_fsub+0x310>
 80009b0:	291b      	cmp	r1, #27
 80009b2:	dc44      	bgt.n	8000a3e <__aeabi_fsub+0x32a>
 80009b4:	001c      	movs	r4, r3
 80009b6:	2720      	movs	r7, #32
 80009b8:	40cc      	lsrs	r4, r1
 80009ba:	1a79      	subs	r1, r7, r1
 80009bc:	408b      	lsls	r3, r1
 80009be:	1e59      	subs	r1, r3, #1
 80009c0:	418b      	sbcs	r3, r1
 80009c2:	4323      	orrs	r3, r4
 80009c4:	199b      	adds	r3, r3, r6
 80009c6:	0004      	movs	r4, r0
 80009c8:	e740      	b.n	800084c <__aeabi_fsub+0x138>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d11a      	bne.n	8000a04 <__aeabi_fsub+0x2f0>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d124      	bne.n	8000a1c <__aeabi_fsub+0x308>
 80009d2:	2780      	movs	r7, #128	; 0x80
 80009d4:	2200      	movs	r2, #0
 80009d6:	03ff      	lsls	r7, r7, #15
 80009d8:	e71b      	b.n	8000812 <__aeabi_fsub+0xfe>
 80009da:	0033      	movs	r3, r6
 80009dc:	0004      	movs	r4, r0
 80009de:	000d      	movs	r5, r1
 80009e0:	e6de      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80009e2:	28ff      	cmp	r0, #255	; 0xff
 80009e4:	d01e      	beq.n	8000a24 <__aeabi_fsub+0x310>
 80009e6:	2480      	movs	r4, #128	; 0x80
 80009e8:	04e4      	lsls	r4, r4, #19
 80009ea:	4249      	negs	r1, r1
 80009ec:	4323      	orrs	r3, r4
 80009ee:	e7df      	b.n	80009b0 <__aeabi_fsub+0x29c>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x2e2>
 80009f4:	e6d4      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80009f6:	1b9f      	subs	r7, r3, r6
 80009f8:	017a      	lsls	r2, r7, #5
 80009fa:	d400      	bmi.n	80009fe <__aeabi_fsub+0x2ea>
 80009fc:	e737      	b.n	800086e <__aeabi_fsub+0x15a>
 80009fe:	1af3      	subs	r3, r6, r3
 8000a00:	000d      	movs	r5, r1
 8000a02:	e6cd      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a04:	24ff      	movs	r4, #255	; 0xff
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x2f8>
 8000a0a:	e6c9      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	4650      	mov	r0, sl
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4210      	tst	r0, r2
 8000a14:	d0a4      	beq.n	8000960 <__aeabi_fsub+0x24c>
 8000a16:	4660      	mov	r0, ip
 8000a18:	4210      	tst	r0, r2
 8000a1a:	d1a1      	bne.n	8000960 <__aeabi_fsub+0x24c>
 8000a1c:	0033      	movs	r3, r6
 8000a1e:	000d      	movs	r5, r1
 8000a20:	24ff      	movs	r4, #255	; 0xff
 8000a22:	e6bd      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a24:	0033      	movs	r3, r6
 8000a26:	24ff      	movs	r4, #255	; 0xff
 8000a28:	e6ba      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e76e      	b.n	800090c <__aeabi_fsub+0x1f8>
 8000a2e:	0033      	movs	r3, r6
 8000a30:	0004      	movs	r4, r0
 8000a32:	e6b5      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a34:	2700      	movs	r7, #0
 8000a36:	2200      	movs	r2, #0
 8000a38:	e71c      	b.n	8000874 <__aeabi_fsub+0x160>
 8000a3a:	0033      	movs	r3, r6
 8000a3c:	e6b0      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e7c0      	b.n	80009c4 <__aeabi_fsub+0x2b0>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	7dffffff 	.word	0x7dffffff
 8000a48:	fbffffff 	.word	0xfbffffff

08000a4c <__aeabi_i2f>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d030      	beq.n	8000ab4 <__aeabi_i2f+0x68>
 8000a52:	17c3      	asrs	r3, r0, #31
 8000a54:	18c4      	adds	r4, r0, r3
 8000a56:	405c      	eors	r4, r3
 8000a58:	0fc5      	lsrs	r5, r0, #31
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f001 feaa 	bl	80027b4 <__clzsi2>
 8000a60:	239e      	movs	r3, #158	; 0x9e
 8000a62:	1a1b      	subs	r3, r3, r0
 8000a64:	2b96      	cmp	r3, #150	; 0x96
 8000a66:	dc0d      	bgt.n	8000a84 <__aeabi_i2f+0x38>
 8000a68:	2296      	movs	r2, #150	; 0x96
 8000a6a:	1ad2      	subs	r2, r2, r3
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	002a      	movs	r2, r5
 8000a70:	0264      	lsls	r4, r4, #9
 8000a72:	0a64      	lsrs	r4, r4, #9
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	0264      	lsls	r4, r4, #9
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0a60      	lsrs	r0, r4, #9
 8000a7c:	07d2      	lsls	r2, r2, #31
 8000a7e:	4318      	orrs	r0, r3
 8000a80:	4310      	orrs	r0, r2
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	2b99      	cmp	r3, #153	; 0x99
 8000a86:	dc19      	bgt.n	8000abc <__aeabi_i2f+0x70>
 8000a88:	2299      	movs	r2, #153	; 0x99
 8000a8a:	1ad2      	subs	r2, r2, r3
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	dd29      	ble.n	8000ae4 <__aeabi_i2f+0x98>
 8000a90:	4094      	lsls	r4, r2
 8000a92:	0022      	movs	r2, r4
 8000a94:	4c14      	ldr	r4, [pc, #80]	; (8000ae8 <__aeabi_i2f+0x9c>)
 8000a96:	4014      	ands	r4, r2
 8000a98:	0751      	lsls	r1, r2, #29
 8000a9a:	d004      	beq.n	8000aa6 <__aeabi_i2f+0x5a>
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	2a04      	cmp	r2, #4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_i2f+0x5a>
 8000aa4:	3404      	adds	r4, #4
 8000aa6:	0162      	lsls	r2, r4, #5
 8000aa8:	d413      	bmi.n	8000ad2 <__aeabi_i2f+0x86>
 8000aaa:	01a4      	lsls	r4, r4, #6
 8000aac:	0a64      	lsrs	r4, r4, #9
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	002a      	movs	r2, r5
 8000ab2:	e7e0      	b.n	8000a76 <__aeabi_i2f+0x2a>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2400      	movs	r4, #0
 8000aba:	e7dc      	b.n	8000a76 <__aeabi_i2f+0x2a>
 8000abc:	2205      	movs	r2, #5
 8000abe:	0021      	movs	r1, r4
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	40d1      	lsrs	r1, r2
 8000ac4:	22b9      	movs	r2, #185	; 0xb9
 8000ac6:	1ad2      	subs	r2, r2, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	1e62      	subs	r2, r4, #1
 8000acc:	4194      	sbcs	r4, r2
 8000ace:	430c      	orrs	r4, r1
 8000ad0:	e7da      	b.n	8000a88 <__aeabi_i2f+0x3c>
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <__aeabi_i2f+0x9c>)
 8000ad4:	002a      	movs	r2, r5
 8000ad6:	401c      	ands	r4, r3
 8000ad8:	239f      	movs	r3, #159	; 0x9f
 8000ada:	01a4      	lsls	r4, r4, #6
 8000adc:	1a1b      	subs	r3, r3, r0
 8000ade:	0a64      	lsrs	r4, r4, #9
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	e7c8      	b.n	8000a76 <__aeabi_i2f+0x2a>
 8000ae4:	0022      	movs	r2, r4
 8000ae6:	e7d5      	b.n	8000a94 <__aeabi_i2f+0x48>
 8000ae8:	fbffffff 	.word	0xfbffffff

08000aec <__aeabi_dadd>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	4645      	mov	r5, r8
 8000af0:	46de      	mov	lr, fp
 8000af2:	4657      	mov	r7, sl
 8000af4:	464e      	mov	r6, r9
 8000af6:	030c      	lsls	r4, r1, #12
 8000af8:	b5e0      	push	{r5, r6, r7, lr}
 8000afa:	004e      	lsls	r6, r1, #1
 8000afc:	0fc9      	lsrs	r1, r1, #31
 8000afe:	4688      	mov	r8, r1
 8000b00:	000d      	movs	r5, r1
 8000b02:	0a61      	lsrs	r1, r4, #9
 8000b04:	0f44      	lsrs	r4, r0, #29
 8000b06:	430c      	orrs	r4, r1
 8000b08:	00c7      	lsls	r7, r0, #3
 8000b0a:	0319      	lsls	r1, r3, #12
 8000b0c:	0058      	lsls	r0, r3, #1
 8000b0e:	0fdb      	lsrs	r3, r3, #31
 8000b10:	469b      	mov	fp, r3
 8000b12:	0a4b      	lsrs	r3, r1, #9
 8000b14:	0f51      	lsrs	r1, r2, #29
 8000b16:	430b      	orrs	r3, r1
 8000b18:	0d76      	lsrs	r6, r6, #21
 8000b1a:	0d40      	lsrs	r0, r0, #21
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	00d2      	lsls	r2, r2, #3
 8000b20:	45d8      	cmp	r8, fp
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x3a>
 8000b24:	e0ae      	b.n	8000c84 <__aeabi_dadd+0x198>
 8000b26:	1a35      	subs	r5, r6, r0
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dadd+0x42>
 8000b2c:	e0f6      	b.n	8000d1c <__aeabi_dadd+0x230>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d10f      	bne.n	8000b52 <__aeabi_dadd+0x66>
 8000b32:	4313      	orrs	r3, r2
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4c>
 8000b36:	e0db      	b.n	8000cf0 <__aeabi_dadd+0x204>
 8000b38:	1e6b      	subs	r3, r5, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x54>
 8000b3e:	e137      	b.n	8000db0 <__aeabi_dadd+0x2c4>
 8000b40:	1aba      	subs	r2, r7, r2
 8000b42:	4297      	cmp	r7, r2
 8000b44:	41bf      	sbcs	r7, r7
 8000b46:	1a64      	subs	r4, r4, r1
 8000b48:	427f      	negs	r7, r7
 8000b4a:	1be4      	subs	r4, r4, r7
 8000b4c:	2601      	movs	r6, #1
 8000b4e:	0017      	movs	r7, r2
 8000b50:	e024      	b.n	8000b9c <__aeabi_dadd+0xb0>
 8000b52:	4bc6      	ldr	r3, [pc, #792]	; (8000e6c <__aeabi_dadd+0x380>)
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d04d      	beq.n	8000bf4 <__aeabi_dadd+0x108>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	2d38      	cmp	r5, #56	; 0x38
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dadd+0x78>
 8000b62:	e107      	b.n	8000d74 <__aeabi_dadd+0x288>
 8000b64:	2d1f      	cmp	r5, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dadd+0x7e>
 8000b68:	e138      	b.n	8000ddc <__aeabi_dadd+0x2f0>
 8000b6a:	2020      	movs	r0, #32
 8000b6c:	1b43      	subs	r3, r0, r5
 8000b6e:	469a      	mov	sl, r3
 8000b70:	000b      	movs	r3, r1
 8000b72:	4650      	mov	r0, sl
 8000b74:	4083      	lsls	r3, r0
 8000b76:	4699      	mov	r9, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	4648      	mov	r0, r9
 8000b7c:	40eb      	lsrs	r3, r5
 8000b7e:	4318      	orrs	r0, r3
 8000b80:	0003      	movs	r3, r0
 8000b82:	4650      	mov	r0, sl
 8000b84:	4082      	lsls	r2, r0
 8000b86:	1e50      	subs	r0, r2, #1
 8000b88:	4182      	sbcs	r2, r0
 8000b8a:	40e9      	lsrs	r1, r5
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	1aba      	subs	r2, r7, r2
 8000b90:	1a61      	subs	r1, r4, r1
 8000b92:	4297      	cmp	r7, r2
 8000b94:	41a4      	sbcs	r4, r4
 8000b96:	0017      	movs	r7, r2
 8000b98:	4264      	negs	r4, r4
 8000b9a:	1b0c      	subs	r4, r1, r4
 8000b9c:	0223      	lsls	r3, r4, #8
 8000b9e:	d562      	bpl.n	8000c66 <__aeabi_dadd+0x17a>
 8000ba0:	0264      	lsls	r4, r4, #9
 8000ba2:	0a65      	lsrs	r5, r4, #9
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0xbe>
 8000ba8:	e0df      	b.n	8000d6a <__aeabi_dadd+0x27e>
 8000baa:	0028      	movs	r0, r5
 8000bac:	f001 fe02 	bl	80027b4 <__clzsi2>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	3b08      	subs	r3, #8
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0xce>
 8000bb8:	e0d2      	b.n	8000d60 <__aeabi_dadd+0x274>
 8000bba:	2220      	movs	r2, #32
 8000bbc:	003c      	movs	r4, r7
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	409d      	lsls	r5, r3
 8000bc2:	40d4      	lsrs	r4, r2
 8000bc4:	409f      	lsls	r7, r3
 8000bc6:	4325      	orrs	r5, r4
 8000bc8:	429e      	cmp	r6, r3
 8000bca:	dd00      	ble.n	8000bce <__aeabi_dadd+0xe2>
 8000bcc:	e0c4      	b.n	8000d58 <__aeabi_dadd+0x26c>
 8000bce:	1b9e      	subs	r6, r3, r6
 8000bd0:	1c73      	adds	r3, r6, #1
 8000bd2:	2b1f      	cmp	r3, #31
 8000bd4:	dd00      	ble.n	8000bd8 <__aeabi_dadd+0xec>
 8000bd6:	e0f1      	b.n	8000dbc <__aeabi_dadd+0x2d0>
 8000bd8:	2220      	movs	r2, #32
 8000bda:	0038      	movs	r0, r7
 8000bdc:	0029      	movs	r1, r5
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	40d8      	lsrs	r0, r3
 8000be2:	4091      	lsls	r1, r2
 8000be4:	4097      	lsls	r7, r2
 8000be6:	002c      	movs	r4, r5
 8000be8:	4301      	orrs	r1, r0
 8000bea:	1e78      	subs	r0, r7, #1
 8000bec:	4187      	sbcs	r7, r0
 8000bee:	40dc      	lsrs	r4, r3
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	430f      	orrs	r7, r1
 8000bf4:	077b      	lsls	r3, r7, #29
 8000bf6:	d009      	beq.n	8000c0c <__aeabi_dadd+0x120>
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	403b      	ands	r3, r7
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d005      	beq.n	8000c0c <__aeabi_dadd+0x120>
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	42bb      	cmp	r3, r7
 8000c04:	41bf      	sbcs	r7, r7
 8000c06:	427f      	negs	r7, r7
 8000c08:	19e4      	adds	r4, r4, r7
 8000c0a:	001f      	movs	r7, r3
 8000c0c:	0223      	lsls	r3, r4, #8
 8000c0e:	d52c      	bpl.n	8000c6a <__aeabi_dadd+0x17e>
 8000c10:	4b96      	ldr	r3, [pc, #600]	; (8000e6c <__aeabi_dadd+0x380>)
 8000c12:	3601      	adds	r6, #1
 8000c14:	429e      	cmp	r6, r3
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x12e>
 8000c18:	e09a      	b.n	8000d50 <__aeabi_dadd+0x264>
 8000c1a:	4645      	mov	r5, r8
 8000c1c:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <__aeabi_dadd+0x384>)
 8000c1e:	08ff      	lsrs	r7, r7, #3
 8000c20:	401c      	ands	r4, r3
 8000c22:	0760      	lsls	r0, r4, #29
 8000c24:	0576      	lsls	r6, r6, #21
 8000c26:	0264      	lsls	r4, r4, #9
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	0b24      	lsrs	r4, r4, #12
 8000c2c:	0d76      	lsrs	r6, r6, #21
 8000c2e:	2100      	movs	r1, #0
 8000c30:	0324      	lsls	r4, r4, #12
 8000c32:	0b23      	lsrs	r3, r4, #12
 8000c34:	0d0c      	lsrs	r4, r1, #20
 8000c36:	4a8f      	ldr	r2, [pc, #572]	; (8000e74 <__aeabi_dadd+0x388>)
 8000c38:	0524      	lsls	r4, r4, #20
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	4014      	ands	r4, r2
 8000c3e:	0533      	lsls	r3, r6, #20
 8000c40:	4323      	orrs	r3, r4
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	07ed      	lsls	r5, r5, #31
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	432b      	orrs	r3, r5
 8000c4a:	0038      	movs	r0, r7
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	bc3c      	pop	{r2, r3, r4, r5}
 8000c50:	4690      	mov	r8, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	46a2      	mov	sl, r4
 8000c56:	46ab      	mov	fp, r5
 8000c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5a:	4664      	mov	r4, ip
 8000c5c:	4304      	orrs	r4, r0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x176>
 8000c60:	e211      	b.n	8001086 <__aeabi_dadd+0x59a>
 8000c62:	0004      	movs	r4, r0
 8000c64:	4667      	mov	r7, ip
 8000c66:	077b      	lsls	r3, r7, #29
 8000c68:	d1c6      	bne.n	8000bf8 <__aeabi_dadd+0x10c>
 8000c6a:	4645      	mov	r5, r8
 8000c6c:	0760      	lsls	r0, r4, #29
 8000c6e:	08ff      	lsrs	r7, r7, #3
 8000c70:	4307      	orrs	r7, r0
 8000c72:	08e4      	lsrs	r4, r4, #3
 8000c74:	4b7d      	ldr	r3, [pc, #500]	; (8000e6c <__aeabi_dadd+0x380>)
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d030      	beq.n	8000cdc <__aeabi_dadd+0x1f0>
 8000c7a:	0324      	lsls	r4, r4, #12
 8000c7c:	0576      	lsls	r6, r6, #21
 8000c7e:	0b24      	lsrs	r4, r4, #12
 8000c80:	0d76      	lsrs	r6, r6, #21
 8000c82:	e7d4      	b.n	8000c2e <__aeabi_dadd+0x142>
 8000c84:	1a33      	subs	r3, r6, r0
 8000c86:	469a      	mov	sl, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dd78      	ble.n	8000d7e <__aeabi_dadd+0x292>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d031      	beq.n	8000cf4 <__aeabi_dadd+0x208>
 8000c90:	4876      	ldr	r0, [pc, #472]	; (8000e6c <__aeabi_dadd+0x380>)
 8000c92:	4286      	cmp	r6, r0
 8000c94:	d0ae      	beq.n	8000bf4 <__aeabi_dadd+0x108>
 8000c96:	2080      	movs	r0, #128	; 0x80
 8000c98:	0400      	lsls	r0, r0, #16
 8000c9a:	4301      	orrs	r1, r0
 8000c9c:	4653      	mov	r3, sl
 8000c9e:	2b38      	cmp	r3, #56	; 0x38
 8000ca0:	dc00      	bgt.n	8000ca4 <__aeabi_dadd+0x1b8>
 8000ca2:	e0e9      	b.n	8000e78 <__aeabi_dadd+0x38c>
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	1e51      	subs	r1, r2, #1
 8000ca8:	418a      	sbcs	r2, r1
 8000caa:	2100      	movs	r1, #0
 8000cac:	19d2      	adds	r2, r2, r7
 8000cae:	42ba      	cmp	r2, r7
 8000cb0:	41bf      	sbcs	r7, r7
 8000cb2:	1909      	adds	r1, r1, r4
 8000cb4:	427c      	negs	r4, r7
 8000cb6:	0017      	movs	r7, r2
 8000cb8:	190c      	adds	r4, r1, r4
 8000cba:	0223      	lsls	r3, r4, #8
 8000cbc:	d5d3      	bpl.n	8000c66 <__aeabi_dadd+0x17a>
 8000cbe:	4b6b      	ldr	r3, [pc, #428]	; (8000e6c <__aeabi_dadd+0x380>)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x1dc>
 8000cc6:	e13a      	b.n	8000f3e <__aeabi_dadd+0x452>
 8000cc8:	2001      	movs	r0, #1
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <__aeabi_dadd+0x384>)
 8000ccc:	401c      	ands	r4, r3
 8000cce:	087b      	lsrs	r3, r7, #1
 8000cd0:	4007      	ands	r7, r0
 8000cd2:	431f      	orrs	r7, r3
 8000cd4:	07e0      	lsls	r0, r4, #31
 8000cd6:	4307      	orrs	r7, r0
 8000cd8:	0864      	lsrs	r4, r4, #1
 8000cda:	e78b      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000cdc:	0023      	movs	r3, r4
 8000cde:	433b      	orrs	r3, r7
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x1f8>
 8000ce2:	e1cb      	b.n	800107c <__aeabi_dadd+0x590>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0312      	lsls	r2, r2, #12
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	0324      	lsls	r4, r4, #12
 8000cec:	0b24      	lsrs	r4, r4, #12
 8000cee:	e79e      	b.n	8000c2e <__aeabi_dadd+0x142>
 8000cf0:	002e      	movs	r6, r5
 8000cf2:	e77f      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000cf4:	0008      	movs	r0, r1
 8000cf6:	4310      	orrs	r0, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x210>
 8000cfa:	e0b4      	b.n	8000e66 <__aeabi_dadd+0x37a>
 8000cfc:	1e58      	subs	r0, r3, #1
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d000      	beq.n	8000d04 <__aeabi_dadd+0x218>
 8000d02:	e0de      	b.n	8000ec2 <__aeabi_dadd+0x3d6>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	42ba      	cmp	r2, r7
 8000d08:	419b      	sbcs	r3, r3
 8000d0a:	1864      	adds	r4, r4, r1
 8000d0c:	425b      	negs	r3, r3
 8000d0e:	18e4      	adds	r4, r4, r3
 8000d10:	0017      	movs	r7, r2
 8000d12:	2601      	movs	r6, #1
 8000d14:	0223      	lsls	r3, r4, #8
 8000d16:	d5a6      	bpl.n	8000c66 <__aeabi_dadd+0x17a>
 8000d18:	2602      	movs	r6, #2
 8000d1a:	e7d5      	b.n	8000cc8 <__aeabi_dadd+0x1dc>
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d16e      	bne.n	8000dfe <__aeabi_dadd+0x312>
 8000d20:	1c70      	adds	r0, r6, #1
 8000d22:	0540      	lsls	r0, r0, #21
 8000d24:	0d40      	lsrs	r0, r0, #21
 8000d26:	2801      	cmp	r0, #1
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_dadd+0x240>
 8000d2a:	e0f9      	b.n	8000f20 <__aeabi_dadd+0x434>
 8000d2c:	1ab8      	subs	r0, r7, r2
 8000d2e:	4684      	mov	ip, r0
 8000d30:	4287      	cmp	r7, r0
 8000d32:	4180      	sbcs	r0, r0
 8000d34:	1ae5      	subs	r5, r4, r3
 8000d36:	4240      	negs	r0, r0
 8000d38:	1a2d      	subs	r5, r5, r0
 8000d3a:	0228      	lsls	r0, r5, #8
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_dadd+0x254>
 8000d3e:	e089      	b.n	8000e54 <__aeabi_dadd+0x368>
 8000d40:	1bd7      	subs	r7, r2, r7
 8000d42:	42ba      	cmp	r2, r7
 8000d44:	4192      	sbcs	r2, r2
 8000d46:	1b1c      	subs	r4, r3, r4
 8000d48:	4252      	negs	r2, r2
 8000d4a:	1aa5      	subs	r5, r4, r2
 8000d4c:	46d8      	mov	r8, fp
 8000d4e:	e729      	b.n	8000ba4 <__aeabi_dadd+0xb8>
 8000d50:	4645      	mov	r5, r8
 8000d52:	2400      	movs	r4, #0
 8000d54:	2700      	movs	r7, #0
 8000d56:	e76a      	b.n	8000c2e <__aeabi_dadd+0x142>
 8000d58:	4c45      	ldr	r4, [pc, #276]	; (8000e70 <__aeabi_dadd+0x384>)
 8000d5a:	1af6      	subs	r6, r6, r3
 8000d5c:	402c      	ands	r4, r5
 8000d5e:	e749      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000d60:	003d      	movs	r5, r7
 8000d62:	3828      	subs	r0, #40	; 0x28
 8000d64:	4085      	lsls	r5, r0
 8000d66:	2700      	movs	r7, #0
 8000d68:	e72e      	b.n	8000bc8 <__aeabi_dadd+0xdc>
 8000d6a:	0038      	movs	r0, r7
 8000d6c:	f001 fd22 	bl	80027b4 <__clzsi2>
 8000d70:	3020      	adds	r0, #32
 8000d72:	e71d      	b.n	8000bb0 <__aeabi_dadd+0xc4>
 8000d74:	430a      	orrs	r2, r1
 8000d76:	1e51      	subs	r1, r2, #1
 8000d78:	418a      	sbcs	r2, r1
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e707      	b.n	8000b8e <__aeabi_dadd+0xa2>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x298>
 8000d82:	e0f3      	b.n	8000f6c <__aeabi_dadd+0x480>
 8000d84:	1c70      	adds	r0, r6, #1
 8000d86:	0543      	lsls	r3, r0, #21
 8000d88:	0d5b      	lsrs	r3, r3, #21
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	dc00      	bgt.n	8000d90 <__aeabi_dadd+0x2a4>
 8000d8e:	e0ad      	b.n	8000eec <__aeabi_dadd+0x400>
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <__aeabi_dadd+0x380>)
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x2ac>
 8000d96:	e0d1      	b.n	8000f3c <__aeabi_dadd+0x450>
 8000d98:	18ba      	adds	r2, r7, r2
 8000d9a:	42ba      	cmp	r2, r7
 8000d9c:	41bf      	sbcs	r7, r7
 8000d9e:	1864      	adds	r4, r4, r1
 8000da0:	427f      	negs	r7, r7
 8000da2:	19e4      	adds	r4, r4, r7
 8000da4:	07e7      	lsls	r7, r4, #31
 8000da6:	0852      	lsrs	r2, r2, #1
 8000da8:	4317      	orrs	r7, r2
 8000daa:	0864      	lsrs	r4, r4, #1
 8000dac:	0006      	movs	r6, r0
 8000dae:	e721      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000db0:	482e      	ldr	r0, [pc, #184]	; (8000e6c <__aeabi_dadd+0x380>)
 8000db2:	4285      	cmp	r5, r0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x2cc>
 8000db6:	e093      	b.n	8000ee0 <__aeabi_dadd+0x3f4>
 8000db8:	001d      	movs	r5, r3
 8000dba:	e6d0      	b.n	8000b5e <__aeabi_dadd+0x72>
 8000dbc:	0029      	movs	r1, r5
 8000dbe:	3e1f      	subs	r6, #31
 8000dc0:	40f1      	lsrs	r1, r6
 8000dc2:	2b20      	cmp	r3, #32
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_dadd+0x2dc>
 8000dc6:	e08d      	b.n	8000ee4 <__aeabi_dadd+0x3f8>
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432f      	orrs	r7, r5
 8000dd0:	1e7d      	subs	r5, r7, #1
 8000dd2:	41af      	sbcs	r7, r5
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	430f      	orrs	r7, r1
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e744      	b.n	8000c66 <__aeabi_dadd+0x17a>
 8000ddc:	002b      	movs	r3, r5
 8000dde:	0008      	movs	r0, r1
 8000de0:	3b20      	subs	r3, #32
 8000de2:	40d8      	lsrs	r0, r3
 8000de4:	0003      	movs	r3, r0
 8000de6:	2d20      	cmp	r5, #32
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x300>
 8000dea:	e07d      	b.n	8000ee8 <__aeabi_dadd+0x3fc>
 8000dec:	2040      	movs	r0, #64	; 0x40
 8000dee:	1b45      	subs	r5, r0, r5
 8000df0:	40a9      	lsls	r1, r5
 8000df2:	430a      	orrs	r2, r1
 8000df4:	1e51      	subs	r1, r2, #1
 8000df6:	418a      	sbcs	r2, r1
 8000df8:	2100      	movs	r1, #0
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	e6c7      	b.n	8000b8e <__aeabi_dadd+0xa2>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d050      	beq.n	8000ea4 <__aeabi_dadd+0x3b8>
 8000e02:	4e1a      	ldr	r6, [pc, #104]	; (8000e6c <__aeabi_dadd+0x380>)
 8000e04:	42b0      	cmp	r0, r6
 8000e06:	d057      	beq.n	8000eb8 <__aeabi_dadd+0x3cc>
 8000e08:	2680      	movs	r6, #128	; 0x80
 8000e0a:	426b      	negs	r3, r5
 8000e0c:	4699      	mov	r9, r3
 8000e0e:	0436      	lsls	r6, r6, #16
 8000e10:	4334      	orrs	r4, r6
 8000e12:	464b      	mov	r3, r9
 8000e14:	2b38      	cmp	r3, #56	; 0x38
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dadd+0x32e>
 8000e18:	e0d6      	b.n	8000fc8 <__aeabi_dadd+0x4dc>
 8000e1a:	2b1f      	cmp	r3, #31
 8000e1c:	dd00      	ble.n	8000e20 <__aeabi_dadd+0x334>
 8000e1e:	e135      	b.n	800108c <__aeabi_dadd+0x5a0>
 8000e20:	2620      	movs	r6, #32
 8000e22:	1af5      	subs	r5, r6, r3
 8000e24:	0026      	movs	r6, r4
 8000e26:	40ae      	lsls	r6, r5
 8000e28:	46b2      	mov	sl, r6
 8000e2a:	003e      	movs	r6, r7
 8000e2c:	40de      	lsrs	r6, r3
 8000e2e:	46ac      	mov	ip, r5
 8000e30:	0035      	movs	r5, r6
 8000e32:	4656      	mov	r6, sl
 8000e34:	432e      	orrs	r6, r5
 8000e36:	4665      	mov	r5, ip
 8000e38:	40af      	lsls	r7, r5
 8000e3a:	1e7d      	subs	r5, r7, #1
 8000e3c:	41af      	sbcs	r7, r5
 8000e3e:	40dc      	lsrs	r4, r3
 8000e40:	4337      	orrs	r7, r6
 8000e42:	1bd7      	subs	r7, r2, r7
 8000e44:	42ba      	cmp	r2, r7
 8000e46:	4192      	sbcs	r2, r2
 8000e48:	1b0c      	subs	r4, r1, r4
 8000e4a:	4252      	negs	r2, r2
 8000e4c:	1aa4      	subs	r4, r4, r2
 8000e4e:	0006      	movs	r6, r0
 8000e50:	46d8      	mov	r8, fp
 8000e52:	e6a3      	b.n	8000b9c <__aeabi_dadd+0xb0>
 8000e54:	4664      	mov	r4, ip
 8000e56:	4667      	mov	r7, ip
 8000e58:	432c      	orrs	r4, r5
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_dadd+0x372>
 8000e5c:	e6a2      	b.n	8000ba4 <__aeabi_dadd+0xb8>
 8000e5e:	2500      	movs	r5, #0
 8000e60:	2600      	movs	r6, #0
 8000e62:	2700      	movs	r7, #0
 8000e64:	e706      	b.n	8000c74 <__aeabi_dadd+0x188>
 8000e66:	001e      	movs	r6, r3
 8000e68:	e6c4      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	000007ff 	.word	0x000007ff
 8000e70:	ff7fffff 	.word	0xff7fffff
 8000e74:	800fffff 	.word	0x800fffff
 8000e78:	2b1f      	cmp	r3, #31
 8000e7a:	dc63      	bgt.n	8000f44 <__aeabi_dadd+0x458>
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	1ac3      	subs	r3, r0, r3
 8000e80:	0008      	movs	r0, r1
 8000e82:	4098      	lsls	r0, r3
 8000e84:	469c      	mov	ip, r3
 8000e86:	4683      	mov	fp, r0
 8000e88:	4653      	mov	r3, sl
 8000e8a:	0010      	movs	r0, r2
 8000e8c:	40d8      	lsrs	r0, r3
 8000e8e:	0003      	movs	r3, r0
 8000e90:	4658      	mov	r0, fp
 8000e92:	4318      	orrs	r0, r3
 8000e94:	4663      	mov	r3, ip
 8000e96:	409a      	lsls	r2, r3
 8000e98:	1e53      	subs	r3, r2, #1
 8000e9a:	419a      	sbcs	r2, r3
 8000e9c:	4653      	mov	r3, sl
 8000e9e:	4302      	orrs	r2, r0
 8000ea0:	40d9      	lsrs	r1, r3
 8000ea2:	e703      	b.n	8000cac <__aeabi_dadd+0x1c0>
 8000ea4:	0026      	movs	r6, r4
 8000ea6:	433e      	orrs	r6, r7
 8000ea8:	d006      	beq.n	8000eb8 <__aeabi_dadd+0x3cc>
 8000eaa:	43eb      	mvns	r3, r5
 8000eac:	4699      	mov	r9, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0c7      	beq.n	8000e42 <__aeabi_dadd+0x356>
 8000eb2:	4e94      	ldr	r6, [pc, #592]	; (8001104 <__aeabi_dadd+0x618>)
 8000eb4:	42b0      	cmp	r0, r6
 8000eb6:	d1ac      	bne.n	8000e12 <__aeabi_dadd+0x326>
 8000eb8:	000c      	movs	r4, r1
 8000eba:	0017      	movs	r7, r2
 8000ebc:	0006      	movs	r6, r0
 8000ebe:	46d8      	mov	r8, fp
 8000ec0:	e698      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000ec2:	4b90      	ldr	r3, [pc, #576]	; (8001104 <__aeabi_dadd+0x618>)
 8000ec4:	459a      	cmp	sl, r3
 8000ec6:	d00b      	beq.n	8000ee0 <__aeabi_dadd+0x3f4>
 8000ec8:	4682      	mov	sl, r0
 8000eca:	e6e7      	b.n	8000c9c <__aeabi_dadd+0x1b0>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_dadd+0x3e6>
 8000ed0:	e09e      	b.n	8001010 <__aeabi_dadd+0x524>
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	4310      	orrs	r0, r2
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dadd+0x3ee>
 8000ed8:	e0e9      	b.n	80010ae <__aeabi_dadd+0x5c2>
 8000eda:	001c      	movs	r4, r3
 8000edc:	0017      	movs	r7, r2
 8000ede:	46d8      	mov	r8, fp
 8000ee0:	4e88      	ldr	r6, [pc, #544]	; (8001104 <__aeabi_dadd+0x618>)
 8000ee2:	e687      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	e772      	b.n	8000dce <__aeabi_dadd+0x2e2>
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e782      	b.n	8000df2 <__aeabi_dadd+0x306>
 8000eec:	0023      	movs	r3, r4
 8000eee:	433b      	orrs	r3, r7
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_dadd+0x40a>
 8000ef4:	e0ab      	b.n	800104e <__aeabi_dadd+0x562>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x410>
 8000efa:	e0e7      	b.n	80010cc <__aeabi_dadd+0x5e0>
 8000efc:	000b      	movs	r3, r1
 8000efe:	4313      	orrs	r3, r2
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dadd+0x418>
 8000f02:	e677      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000f04:	18ba      	adds	r2, r7, r2
 8000f06:	42ba      	cmp	r2, r7
 8000f08:	41bf      	sbcs	r7, r7
 8000f0a:	1864      	adds	r4, r4, r1
 8000f0c:	427f      	negs	r7, r7
 8000f0e:	19e4      	adds	r4, r4, r7
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	d400      	bmi.n	8000f16 <__aeabi_dadd+0x42a>
 8000f14:	e0f2      	b.n	80010fc <__aeabi_dadd+0x610>
 8000f16:	4b7c      	ldr	r3, [pc, #496]	; (8001108 <__aeabi_dadd+0x61c>)
 8000f18:	0017      	movs	r7, r2
 8000f1a:	401c      	ands	r4, r3
 8000f1c:	0006      	movs	r6, r0
 8000f1e:	e669      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000f20:	0020      	movs	r0, r4
 8000f22:	4338      	orrs	r0, r7
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	d1d1      	bne.n	8000ecc <__aeabi_dadd+0x3e0>
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d15b      	bne.n	8000fe4 <__aeabi_dadd+0x4f8>
 8000f2c:	001c      	movs	r4, r3
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x448>
 8000f32:	e0a8      	b.n	8001086 <__aeabi_dadd+0x59a>
 8000f34:	001c      	movs	r4, r3
 8000f36:	0017      	movs	r7, r2
 8000f38:	46d8      	mov	r8, fp
 8000f3a:	e65b      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000f3c:	0006      	movs	r6, r0
 8000f3e:	2400      	movs	r4, #0
 8000f40:	2700      	movs	r7, #0
 8000f42:	e697      	b.n	8000c74 <__aeabi_dadd+0x188>
 8000f44:	4650      	mov	r0, sl
 8000f46:	000b      	movs	r3, r1
 8000f48:	3820      	subs	r0, #32
 8000f4a:	40c3      	lsrs	r3, r0
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	4653      	mov	r3, sl
 8000f50:	2b20      	cmp	r3, #32
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x46a>
 8000f54:	e095      	b.n	8001082 <__aeabi_dadd+0x596>
 8000f56:	2340      	movs	r3, #64	; 0x40
 8000f58:	4650      	mov	r0, sl
 8000f5a:	1a1b      	subs	r3, r3, r0
 8000f5c:	4099      	lsls	r1, r3
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	1e51      	subs	r1, r2, #1
 8000f62:	418a      	sbcs	r2, r1
 8000f64:	464b      	mov	r3, r9
 8000f66:	2100      	movs	r1, #0
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	e69f      	b.n	8000cac <__aeabi_dadd+0x1c0>
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d130      	bne.n	8000fd2 <__aeabi_dadd+0x4e6>
 8000f70:	0026      	movs	r6, r4
 8000f72:	433e      	orrs	r6, r7
 8000f74:	d067      	beq.n	8001046 <__aeabi_dadd+0x55a>
 8000f76:	43db      	mvns	r3, r3
 8000f78:	469a      	mov	sl, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01c      	beq.n	8000fb8 <__aeabi_dadd+0x4cc>
 8000f7e:	4e61      	ldr	r6, [pc, #388]	; (8001104 <__aeabi_dadd+0x618>)
 8000f80:	42b0      	cmp	r0, r6
 8000f82:	d060      	beq.n	8001046 <__aeabi_dadd+0x55a>
 8000f84:	4653      	mov	r3, sl
 8000f86:	2b38      	cmp	r3, #56	; 0x38
 8000f88:	dd00      	ble.n	8000f8c <__aeabi_dadd+0x4a0>
 8000f8a:	e096      	b.n	80010ba <__aeabi_dadd+0x5ce>
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	dd00      	ble.n	8000f92 <__aeabi_dadd+0x4a6>
 8000f90:	e09f      	b.n	80010d2 <__aeabi_dadd+0x5e6>
 8000f92:	2620      	movs	r6, #32
 8000f94:	1af3      	subs	r3, r6, r3
 8000f96:	0026      	movs	r6, r4
 8000f98:	409e      	lsls	r6, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	46b3      	mov	fp, r6
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	003e      	movs	r6, r7
 8000fa2:	40de      	lsrs	r6, r3
 8000fa4:	0033      	movs	r3, r6
 8000fa6:	465e      	mov	r6, fp
 8000fa8:	431e      	orrs	r6, r3
 8000faa:	4663      	mov	r3, ip
 8000fac:	409f      	lsls	r7, r3
 8000fae:	1e7b      	subs	r3, r7, #1
 8000fb0:	419f      	sbcs	r7, r3
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	40dc      	lsrs	r4, r3
 8000fb6:	4337      	orrs	r7, r6
 8000fb8:	18bf      	adds	r7, r7, r2
 8000fba:	4297      	cmp	r7, r2
 8000fbc:	4192      	sbcs	r2, r2
 8000fbe:	1864      	adds	r4, r4, r1
 8000fc0:	4252      	negs	r2, r2
 8000fc2:	18a4      	adds	r4, r4, r2
 8000fc4:	0006      	movs	r6, r0
 8000fc6:	e678      	b.n	8000cba <__aeabi_dadd+0x1ce>
 8000fc8:	4327      	orrs	r7, r4
 8000fca:	1e7c      	subs	r4, r7, #1
 8000fcc:	41a7      	sbcs	r7, r4
 8000fce:	2400      	movs	r4, #0
 8000fd0:	e737      	b.n	8000e42 <__aeabi_dadd+0x356>
 8000fd2:	4e4c      	ldr	r6, [pc, #304]	; (8001104 <__aeabi_dadd+0x618>)
 8000fd4:	42b0      	cmp	r0, r6
 8000fd6:	d036      	beq.n	8001046 <__aeabi_dadd+0x55a>
 8000fd8:	2680      	movs	r6, #128	; 0x80
 8000fda:	425b      	negs	r3, r3
 8000fdc:	0436      	lsls	r6, r6, #16
 8000fde:	469a      	mov	sl, r3
 8000fe0:	4334      	orrs	r4, r6
 8000fe2:	e7cf      	b.n	8000f84 <__aeabi_dadd+0x498>
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	4310      	orrs	r0, r2
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dadd+0x500>
 8000fea:	e603      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8000fec:	1ab8      	subs	r0, r7, r2
 8000fee:	4684      	mov	ip, r0
 8000ff0:	4567      	cmp	r7, ip
 8000ff2:	41ad      	sbcs	r5, r5
 8000ff4:	1ae0      	subs	r0, r4, r3
 8000ff6:	426d      	negs	r5, r5
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	0205      	lsls	r5, r0, #8
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_dadd+0x514>
 8000ffe:	e62c      	b.n	8000c5a <__aeabi_dadd+0x16e>
 8001000:	1bd7      	subs	r7, r2, r7
 8001002:	42ba      	cmp	r2, r7
 8001004:	4192      	sbcs	r2, r2
 8001006:	1b1c      	subs	r4, r3, r4
 8001008:	4252      	negs	r2, r2
 800100a:	1aa4      	subs	r4, r4, r2
 800100c:	46d8      	mov	r8, fp
 800100e:	e5f1      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8001010:	0018      	movs	r0, r3
 8001012:	4310      	orrs	r0, r2
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x52c>
 8001016:	e763      	b.n	8000ee0 <__aeabi_dadd+0x3f4>
 8001018:	08f8      	lsrs	r0, r7, #3
 800101a:	0767      	lsls	r7, r4, #29
 800101c:	4307      	orrs	r7, r0
 800101e:	2080      	movs	r0, #128	; 0x80
 8001020:	08e4      	lsrs	r4, r4, #3
 8001022:	0300      	lsls	r0, r0, #12
 8001024:	4204      	tst	r4, r0
 8001026:	d008      	beq.n	800103a <__aeabi_dadd+0x54e>
 8001028:	08dd      	lsrs	r5, r3, #3
 800102a:	4205      	tst	r5, r0
 800102c:	d105      	bne.n	800103a <__aeabi_dadd+0x54e>
 800102e:	08d2      	lsrs	r2, r2, #3
 8001030:	0759      	lsls	r1, r3, #29
 8001032:	4311      	orrs	r1, r2
 8001034:	000f      	movs	r7, r1
 8001036:	002c      	movs	r4, r5
 8001038:	46d8      	mov	r8, fp
 800103a:	0f7b      	lsrs	r3, r7, #29
 800103c:	00e4      	lsls	r4, r4, #3
 800103e:	431c      	orrs	r4, r3
 8001040:	00ff      	lsls	r7, r7, #3
 8001042:	4e30      	ldr	r6, [pc, #192]	; (8001104 <__aeabi_dadd+0x618>)
 8001044:	e5d6      	b.n	8000bf4 <__aeabi_dadd+0x108>
 8001046:	000c      	movs	r4, r1
 8001048:	0017      	movs	r7, r2
 800104a:	0006      	movs	r6, r0
 800104c:	e5d2      	b.n	8000bf4 <__aeabi_dadd+0x108>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d038      	beq.n	80010c4 <__aeabi_dadd+0x5d8>
 8001052:	000b      	movs	r3, r1
 8001054:	4313      	orrs	r3, r2
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x56e>
 8001058:	e742      	b.n	8000ee0 <__aeabi_dadd+0x3f4>
 800105a:	08f8      	lsrs	r0, r7, #3
 800105c:	0767      	lsls	r7, r4, #29
 800105e:	4307      	orrs	r7, r0
 8001060:	2080      	movs	r0, #128	; 0x80
 8001062:	08e4      	lsrs	r4, r4, #3
 8001064:	0300      	lsls	r0, r0, #12
 8001066:	4204      	tst	r4, r0
 8001068:	d0e7      	beq.n	800103a <__aeabi_dadd+0x54e>
 800106a:	08cb      	lsrs	r3, r1, #3
 800106c:	4203      	tst	r3, r0
 800106e:	d1e4      	bne.n	800103a <__aeabi_dadd+0x54e>
 8001070:	08d2      	lsrs	r2, r2, #3
 8001072:	0749      	lsls	r1, r1, #29
 8001074:	4311      	orrs	r1, r2
 8001076:	000f      	movs	r7, r1
 8001078:	001c      	movs	r4, r3
 800107a:	e7de      	b.n	800103a <__aeabi_dadd+0x54e>
 800107c:	2700      	movs	r7, #0
 800107e:	2400      	movs	r4, #0
 8001080:	e5d5      	b.n	8000c2e <__aeabi_dadd+0x142>
 8001082:	2100      	movs	r1, #0
 8001084:	e76b      	b.n	8000f5e <__aeabi_dadd+0x472>
 8001086:	2500      	movs	r5, #0
 8001088:	2700      	movs	r7, #0
 800108a:	e5f3      	b.n	8000c74 <__aeabi_dadd+0x188>
 800108c:	464e      	mov	r6, r9
 800108e:	0025      	movs	r5, r4
 8001090:	3e20      	subs	r6, #32
 8001092:	40f5      	lsrs	r5, r6
 8001094:	464b      	mov	r3, r9
 8001096:	002e      	movs	r6, r5
 8001098:	2b20      	cmp	r3, #32
 800109a:	d02d      	beq.n	80010f8 <__aeabi_dadd+0x60c>
 800109c:	2540      	movs	r5, #64	; 0x40
 800109e:	1aed      	subs	r5, r5, r3
 80010a0:	40ac      	lsls	r4, r5
 80010a2:	4327      	orrs	r7, r4
 80010a4:	1e7c      	subs	r4, r7, #1
 80010a6:	41a7      	sbcs	r7, r4
 80010a8:	2400      	movs	r4, #0
 80010aa:	4337      	orrs	r7, r6
 80010ac:	e6c9      	b.n	8000e42 <__aeabi_dadd+0x356>
 80010ae:	2480      	movs	r4, #128	; 0x80
 80010b0:	2500      	movs	r5, #0
 80010b2:	0324      	lsls	r4, r4, #12
 80010b4:	4e13      	ldr	r6, [pc, #76]	; (8001104 <__aeabi_dadd+0x618>)
 80010b6:	2700      	movs	r7, #0
 80010b8:	e5dc      	b.n	8000c74 <__aeabi_dadd+0x188>
 80010ba:	4327      	orrs	r7, r4
 80010bc:	1e7c      	subs	r4, r7, #1
 80010be:	41a7      	sbcs	r7, r4
 80010c0:	2400      	movs	r4, #0
 80010c2:	e779      	b.n	8000fb8 <__aeabi_dadd+0x4cc>
 80010c4:	000c      	movs	r4, r1
 80010c6:	0017      	movs	r7, r2
 80010c8:	4e0e      	ldr	r6, [pc, #56]	; (8001104 <__aeabi_dadd+0x618>)
 80010ca:	e593      	b.n	8000bf4 <__aeabi_dadd+0x108>
 80010cc:	000c      	movs	r4, r1
 80010ce:	0017      	movs	r7, r2
 80010d0:	e590      	b.n	8000bf4 <__aeabi_dadd+0x108>
 80010d2:	4656      	mov	r6, sl
 80010d4:	0023      	movs	r3, r4
 80010d6:	3e20      	subs	r6, #32
 80010d8:	40f3      	lsrs	r3, r6
 80010da:	4699      	mov	r9, r3
 80010dc:	4653      	mov	r3, sl
 80010de:	2b20      	cmp	r3, #32
 80010e0:	d00e      	beq.n	8001100 <__aeabi_dadd+0x614>
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	4656      	mov	r6, sl
 80010e6:	1b9b      	subs	r3, r3, r6
 80010e8:	409c      	lsls	r4, r3
 80010ea:	4327      	orrs	r7, r4
 80010ec:	1e7c      	subs	r4, r7, #1
 80010ee:	41a7      	sbcs	r7, r4
 80010f0:	464b      	mov	r3, r9
 80010f2:	2400      	movs	r4, #0
 80010f4:	431f      	orrs	r7, r3
 80010f6:	e75f      	b.n	8000fb8 <__aeabi_dadd+0x4cc>
 80010f8:	2400      	movs	r4, #0
 80010fa:	e7d2      	b.n	80010a2 <__aeabi_dadd+0x5b6>
 80010fc:	0017      	movs	r7, r2
 80010fe:	e5b2      	b.n	8000c66 <__aeabi_dadd+0x17a>
 8001100:	2400      	movs	r4, #0
 8001102:	e7f2      	b.n	80010ea <__aeabi_dadd+0x5fe>
 8001104:	000007ff 	.word	0x000007ff
 8001108:	ff7fffff 	.word	0xff7fffff

0800110c <__aeabi_ddiv>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	4657      	mov	r7, sl
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	464e      	mov	r6, r9
 8001116:	b5e0      	push	{r5, r6, r7, lr}
 8001118:	004c      	lsls	r4, r1, #1
 800111a:	030e      	lsls	r6, r1, #12
 800111c:	b087      	sub	sp, #28
 800111e:	4683      	mov	fp, r0
 8001120:	4692      	mov	sl, r2
 8001122:	001d      	movs	r5, r3
 8001124:	4680      	mov	r8, r0
 8001126:	0b36      	lsrs	r6, r6, #12
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fcf      	lsrs	r7, r1, #31
 800112c:	2c00      	cmp	r4, #0
 800112e:	d04f      	beq.n	80011d0 <__aeabi_ddiv+0xc4>
 8001130:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <__aeabi_ddiv+0x1e4>)
 8001132:	429c      	cmp	r4, r3
 8001134:	d035      	beq.n	80011a2 <__aeabi_ddiv+0x96>
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	0f42      	lsrs	r2, r0, #29
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	00f6      	lsls	r6, r6, #3
 800113e:	4313      	orrs	r3, r2
 8001140:	4333      	orrs	r3, r6
 8001142:	4699      	mov	r9, r3
 8001144:	00c3      	lsls	r3, r0, #3
 8001146:	4698      	mov	r8, r3
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <__aeabi_ddiv+0x1e8>)
 800114a:	2600      	movs	r6, #0
 800114c:	469c      	mov	ip, r3
 800114e:	2300      	movs	r3, #0
 8001150:	4464      	add	r4, ip
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	032b      	lsls	r3, r5, #12
 8001156:	0b1b      	lsrs	r3, r3, #12
 8001158:	469b      	mov	fp, r3
 800115a:	006b      	lsls	r3, r5, #1
 800115c:	0fed      	lsrs	r5, r5, #31
 800115e:	4650      	mov	r0, sl
 8001160:	0d5b      	lsrs	r3, r3, #21
 8001162:	9501      	str	r5, [sp, #4]
 8001164:	d05e      	beq.n	8001224 <__aeabi_ddiv+0x118>
 8001166:	4a62      	ldr	r2, [pc, #392]	; (80012f0 <__aeabi_ddiv+0x1e4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d053      	beq.n	8001214 <__aeabi_ddiv+0x108>
 800116c:	465a      	mov	r2, fp
 800116e:	00d1      	lsls	r1, r2, #3
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0f40      	lsrs	r0, r0, #29
 8001174:	0412      	lsls	r2, r2, #16
 8001176:	4302      	orrs	r2, r0
 8001178:	430a      	orrs	r2, r1
 800117a:	4693      	mov	fp, r2
 800117c:	4652      	mov	r2, sl
 800117e:	00d1      	lsls	r1, r2, #3
 8001180:	4a5c      	ldr	r2, [pc, #368]	; (80012f4 <__aeabi_ddiv+0x1e8>)
 8001182:	4694      	mov	ip, r2
 8001184:	2200      	movs	r2, #0
 8001186:	4463      	add	r3, ip
 8001188:	0038      	movs	r0, r7
 800118a:	4068      	eors	r0, r5
 800118c:	4684      	mov	ip, r0
 800118e:	9002      	str	r0, [sp, #8]
 8001190:	1ae4      	subs	r4, r4, r3
 8001192:	4316      	orrs	r6, r2
 8001194:	2e0f      	cmp	r6, #15
 8001196:	d900      	bls.n	800119a <__aeabi_ddiv+0x8e>
 8001198:	e0b4      	b.n	8001304 <__aeabi_ddiv+0x1f8>
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <__aeabi_ddiv+0x1ec>)
 800119c:	00b6      	lsls	r6, r6, #2
 800119e:	599b      	ldr	r3, [r3, r6]
 80011a0:	469f      	mov	pc, r3
 80011a2:	0003      	movs	r3, r0
 80011a4:	4333      	orrs	r3, r6
 80011a6:	4699      	mov	r9, r3
 80011a8:	d16c      	bne.n	8001284 <__aeabi_ddiv+0x178>
 80011aa:	2300      	movs	r3, #0
 80011ac:	4698      	mov	r8, r3
 80011ae:	3302      	adds	r3, #2
 80011b0:	2608      	movs	r6, #8
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	e7ce      	b.n	8001154 <__aeabi_ddiv+0x48>
 80011b6:	46cb      	mov	fp, r9
 80011b8:	4641      	mov	r1, r8
 80011ba:	9a03      	ldr	r2, [sp, #12]
 80011bc:	9701      	str	r7, [sp, #4]
 80011be:	2a02      	cmp	r2, #2
 80011c0:	d165      	bne.n	800128e <__aeabi_ddiv+0x182>
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	4c4a      	ldr	r4, [pc, #296]	; (80012f0 <__aeabi_ddiv+0x1e4>)
 80011c6:	469c      	mov	ip, r3
 80011c8:	2300      	movs	r3, #0
 80011ca:	2200      	movs	r2, #0
 80011cc:	4698      	mov	r8, r3
 80011ce:	e06b      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 80011d0:	0003      	movs	r3, r0
 80011d2:	4333      	orrs	r3, r6
 80011d4:	4699      	mov	r9, r3
 80011d6:	d04e      	beq.n	8001276 <__aeabi_ddiv+0x16a>
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0xd2>
 80011dc:	e1bc      	b.n	8001558 <__aeabi_ddiv+0x44c>
 80011de:	0030      	movs	r0, r6
 80011e0:	f001 fae8 	bl	80027b4 <__clzsi2>
 80011e4:	0003      	movs	r3, r0
 80011e6:	3b0b      	subs	r3, #11
 80011e8:	2b1c      	cmp	r3, #28
 80011ea:	dd00      	ble.n	80011ee <__aeabi_ddiv+0xe2>
 80011ec:	e1ac      	b.n	8001548 <__aeabi_ddiv+0x43c>
 80011ee:	221d      	movs	r2, #29
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	465a      	mov	r2, fp
 80011f4:	0001      	movs	r1, r0
 80011f6:	40da      	lsrs	r2, r3
 80011f8:	3908      	subs	r1, #8
 80011fa:	408e      	lsls	r6, r1
 80011fc:	0013      	movs	r3, r2
 80011fe:	4333      	orrs	r3, r6
 8001200:	4699      	mov	r9, r3
 8001202:	465b      	mov	r3, fp
 8001204:	408b      	lsls	r3, r1
 8001206:	4698      	mov	r8, r3
 8001208:	2300      	movs	r3, #0
 800120a:	4c3c      	ldr	r4, [pc, #240]	; (80012fc <__aeabi_ddiv+0x1f0>)
 800120c:	2600      	movs	r6, #0
 800120e:	1a24      	subs	r4, r4, r0
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	e79f      	b.n	8001154 <__aeabi_ddiv+0x48>
 8001214:	4651      	mov	r1, sl
 8001216:	465a      	mov	r2, fp
 8001218:	4311      	orrs	r1, r2
 800121a:	d129      	bne.n	8001270 <__aeabi_ddiv+0x164>
 800121c:	2200      	movs	r2, #0
 800121e:	4693      	mov	fp, r2
 8001220:	3202      	adds	r2, #2
 8001222:	e7b1      	b.n	8001188 <__aeabi_ddiv+0x7c>
 8001224:	4659      	mov	r1, fp
 8001226:	4301      	orrs	r1, r0
 8001228:	d01e      	beq.n	8001268 <__aeabi_ddiv+0x15c>
 800122a:	465b      	mov	r3, fp
 800122c:	2b00      	cmp	r3, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x126>
 8001230:	e19e      	b.n	8001570 <__aeabi_ddiv+0x464>
 8001232:	4658      	mov	r0, fp
 8001234:	f001 fabe 	bl	80027b4 <__clzsi2>
 8001238:	0003      	movs	r3, r0
 800123a:	3b0b      	subs	r3, #11
 800123c:	2b1c      	cmp	r3, #28
 800123e:	dd00      	ble.n	8001242 <__aeabi_ddiv+0x136>
 8001240:	e18f      	b.n	8001562 <__aeabi_ddiv+0x456>
 8001242:	0002      	movs	r2, r0
 8001244:	4659      	mov	r1, fp
 8001246:	3a08      	subs	r2, #8
 8001248:	4091      	lsls	r1, r2
 800124a:	468b      	mov	fp, r1
 800124c:	211d      	movs	r1, #29
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	4651      	mov	r1, sl
 8001252:	40d9      	lsrs	r1, r3
 8001254:	000b      	movs	r3, r1
 8001256:	4659      	mov	r1, fp
 8001258:	430b      	orrs	r3, r1
 800125a:	4651      	mov	r1, sl
 800125c:	469b      	mov	fp, r3
 800125e:	4091      	lsls	r1, r2
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <__aeabi_ddiv+0x1f0>)
 8001262:	2200      	movs	r2, #0
 8001264:	1a1b      	subs	r3, r3, r0
 8001266:	e78f      	b.n	8001188 <__aeabi_ddiv+0x7c>
 8001268:	2300      	movs	r3, #0
 800126a:	2201      	movs	r2, #1
 800126c:	469b      	mov	fp, r3
 800126e:	e78b      	b.n	8001188 <__aeabi_ddiv+0x7c>
 8001270:	4651      	mov	r1, sl
 8001272:	2203      	movs	r2, #3
 8001274:	e788      	b.n	8001188 <__aeabi_ddiv+0x7c>
 8001276:	2300      	movs	r3, #0
 8001278:	4698      	mov	r8, r3
 800127a:	3301      	adds	r3, #1
 800127c:	2604      	movs	r6, #4
 800127e:	2400      	movs	r4, #0
 8001280:	9303      	str	r3, [sp, #12]
 8001282:	e767      	b.n	8001154 <__aeabi_ddiv+0x48>
 8001284:	2303      	movs	r3, #3
 8001286:	46b1      	mov	r9, r6
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	260c      	movs	r6, #12
 800128c:	e762      	b.n	8001154 <__aeabi_ddiv+0x48>
 800128e:	2a03      	cmp	r2, #3
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x188>
 8001292:	e25c      	b.n	800174e <__aeabi_ddiv+0x642>
 8001294:	9b01      	ldr	r3, [sp, #4]
 8001296:	2a01      	cmp	r2, #1
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0x190>
 800129a:	e1e4      	b.n	8001666 <__aeabi_ddiv+0x55a>
 800129c:	4013      	ands	r3, r2
 800129e:	469c      	mov	ip, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	2400      	movs	r4, #0
 80012a4:	2200      	movs	r2, #0
 80012a6:	4698      	mov	r8, r3
 80012a8:	2100      	movs	r1, #0
 80012aa:	0312      	lsls	r2, r2, #12
 80012ac:	0b13      	lsrs	r3, r2, #12
 80012ae:	0d0a      	lsrs	r2, r1, #20
 80012b0:	0512      	lsls	r2, r2, #20
 80012b2:	431a      	orrs	r2, r3
 80012b4:	0523      	lsls	r3, r4, #20
 80012b6:	4c12      	ldr	r4, [pc, #72]	; (8001300 <__aeabi_ddiv+0x1f4>)
 80012b8:	4640      	mov	r0, r8
 80012ba:	4022      	ands	r2, r4
 80012bc:	4313      	orrs	r3, r2
 80012be:	4662      	mov	r2, ip
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	07d2      	lsls	r2, r2, #31
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	4313      	orrs	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	b007      	add	sp, #28
 80012cc:	bc3c      	pop	{r2, r3, r4, r5}
 80012ce:	4690      	mov	r8, r2
 80012d0:	4699      	mov	r9, r3
 80012d2:	46a2      	mov	sl, r4
 80012d4:	46ab      	mov	fp, r5
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2300      	movs	r3, #0
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	469c      	mov	ip, r3
 80012de:	0312      	lsls	r2, r2, #12
 80012e0:	4698      	mov	r8, r3
 80012e2:	4c03      	ldr	r4, [pc, #12]	; (80012f0 <__aeabi_ddiv+0x1e4>)
 80012e4:	e7e0      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 80012e6:	2300      	movs	r3, #0
 80012e8:	4c01      	ldr	r4, [pc, #4]	; (80012f0 <__aeabi_ddiv+0x1e4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	4698      	mov	r8, r3
 80012ee:	e7db      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 80012f0:	000007ff 	.word	0x000007ff
 80012f4:	fffffc01 	.word	0xfffffc01
 80012f8:	08008cc8 	.word	0x08008cc8
 80012fc:	fffffc0d 	.word	0xfffffc0d
 8001300:	800fffff 	.word	0x800fffff
 8001304:	45d9      	cmp	r9, fp
 8001306:	d900      	bls.n	800130a <__aeabi_ddiv+0x1fe>
 8001308:	e139      	b.n	800157e <__aeabi_ddiv+0x472>
 800130a:	d100      	bne.n	800130e <__aeabi_ddiv+0x202>
 800130c:	e134      	b.n	8001578 <__aeabi_ddiv+0x46c>
 800130e:	2300      	movs	r3, #0
 8001310:	4646      	mov	r6, r8
 8001312:	464d      	mov	r5, r9
 8001314:	469a      	mov	sl, r3
 8001316:	3c01      	subs	r4, #1
 8001318:	465b      	mov	r3, fp
 800131a:	0e0a      	lsrs	r2, r1, #24
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	431a      	orrs	r2, r3
 8001320:	020b      	lsls	r3, r1, #8
 8001322:	0c17      	lsrs	r7, r2, #16
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	0413      	lsls	r3, r2, #16
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	0039      	movs	r1, r7
 800132c:	0028      	movs	r0, r5
 800132e:	4690      	mov	r8, r2
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f7fe fef3 	bl	800011c <__udivsi3>
 8001336:	0002      	movs	r2, r0
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	4683      	mov	fp, r0
 800133c:	435a      	muls	r2, r3
 800133e:	0028      	movs	r0, r5
 8001340:	0039      	movs	r1, r7
 8001342:	4691      	mov	r9, r2
 8001344:	f7fe ff70 	bl	8000228 <__aeabi_uidivmod>
 8001348:	0c35      	lsrs	r5, r6, #16
 800134a:	0409      	lsls	r1, r1, #16
 800134c:	430d      	orrs	r5, r1
 800134e:	45a9      	cmp	r9, r5
 8001350:	d90d      	bls.n	800136e <__aeabi_ddiv+0x262>
 8001352:	465b      	mov	r3, fp
 8001354:	4445      	add	r5, r8
 8001356:	3b01      	subs	r3, #1
 8001358:	45a8      	cmp	r8, r5
 800135a:	d900      	bls.n	800135e <__aeabi_ddiv+0x252>
 800135c:	e13a      	b.n	80015d4 <__aeabi_ddiv+0x4c8>
 800135e:	45a9      	cmp	r9, r5
 8001360:	d800      	bhi.n	8001364 <__aeabi_ddiv+0x258>
 8001362:	e137      	b.n	80015d4 <__aeabi_ddiv+0x4c8>
 8001364:	2302      	movs	r3, #2
 8001366:	425b      	negs	r3, r3
 8001368:	469c      	mov	ip, r3
 800136a:	4445      	add	r5, r8
 800136c:	44e3      	add	fp, ip
 800136e:	464b      	mov	r3, r9
 8001370:	1aeb      	subs	r3, r5, r3
 8001372:	0039      	movs	r1, r7
 8001374:	0018      	movs	r0, r3
 8001376:	9304      	str	r3, [sp, #16]
 8001378:	f7fe fed0 	bl	800011c <__udivsi3>
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	0005      	movs	r5, r0
 8001380:	4343      	muls	r3, r0
 8001382:	0039      	movs	r1, r7
 8001384:	9804      	ldr	r0, [sp, #16]
 8001386:	4699      	mov	r9, r3
 8001388:	f7fe ff4e 	bl	8000228 <__aeabi_uidivmod>
 800138c:	0433      	lsls	r3, r6, #16
 800138e:	0409      	lsls	r1, r1, #16
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	430b      	orrs	r3, r1
 8001394:	4599      	cmp	r9, r3
 8001396:	d909      	bls.n	80013ac <__aeabi_ddiv+0x2a0>
 8001398:	4443      	add	r3, r8
 800139a:	1e6a      	subs	r2, r5, #1
 800139c:	4598      	cmp	r8, r3
 800139e:	d900      	bls.n	80013a2 <__aeabi_ddiv+0x296>
 80013a0:	e11a      	b.n	80015d8 <__aeabi_ddiv+0x4cc>
 80013a2:	4599      	cmp	r9, r3
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x29c>
 80013a6:	e117      	b.n	80015d8 <__aeabi_ddiv+0x4cc>
 80013a8:	3d02      	subs	r5, #2
 80013aa:	4443      	add	r3, r8
 80013ac:	464a      	mov	r2, r9
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	465a      	mov	r2, fp
 80013b2:	0412      	lsls	r2, r2, #16
 80013b4:	432a      	orrs	r2, r5
 80013b6:	9903      	ldr	r1, [sp, #12]
 80013b8:	4693      	mov	fp, r2
 80013ba:	0c10      	lsrs	r0, r2, #16
 80013bc:	0c0a      	lsrs	r2, r1, #16
 80013be:	4691      	mov	r9, r2
 80013c0:	0409      	lsls	r1, r1, #16
 80013c2:	465a      	mov	r2, fp
 80013c4:	0c09      	lsrs	r1, r1, #16
 80013c6:	464e      	mov	r6, r9
 80013c8:	000d      	movs	r5, r1
 80013ca:	0412      	lsls	r2, r2, #16
 80013cc:	0c12      	lsrs	r2, r2, #16
 80013ce:	4345      	muls	r5, r0
 80013d0:	9105      	str	r1, [sp, #20]
 80013d2:	4351      	muls	r1, r2
 80013d4:	4372      	muls	r2, r6
 80013d6:	4370      	muls	r0, r6
 80013d8:	1952      	adds	r2, r2, r5
 80013da:	0c0e      	lsrs	r6, r1, #16
 80013dc:	18b2      	adds	r2, r6, r2
 80013de:	4295      	cmp	r5, r2
 80013e0:	d903      	bls.n	80013ea <__aeabi_ddiv+0x2de>
 80013e2:	2580      	movs	r5, #128	; 0x80
 80013e4:	026d      	lsls	r5, r5, #9
 80013e6:	46ac      	mov	ip, r5
 80013e8:	4460      	add	r0, ip
 80013ea:	0c15      	lsrs	r5, r2, #16
 80013ec:	0409      	lsls	r1, r1, #16
 80013ee:	0412      	lsls	r2, r2, #16
 80013f0:	0c09      	lsrs	r1, r1, #16
 80013f2:	1828      	adds	r0, r5, r0
 80013f4:	1852      	adds	r2, r2, r1
 80013f6:	4283      	cmp	r3, r0
 80013f8:	d200      	bcs.n	80013fc <__aeabi_ddiv+0x2f0>
 80013fa:	e0ce      	b.n	800159a <__aeabi_ddiv+0x48e>
 80013fc:	d100      	bne.n	8001400 <__aeabi_ddiv+0x2f4>
 80013fe:	e0c8      	b.n	8001592 <__aeabi_ddiv+0x486>
 8001400:	1a1d      	subs	r5, r3, r0
 8001402:	4653      	mov	r3, sl
 8001404:	1a9e      	subs	r6, r3, r2
 8001406:	45b2      	cmp	sl, r6
 8001408:	4192      	sbcs	r2, r2
 800140a:	4252      	negs	r2, r2
 800140c:	1aab      	subs	r3, r5, r2
 800140e:	469a      	mov	sl, r3
 8001410:	4598      	cmp	r8, r3
 8001412:	d100      	bne.n	8001416 <__aeabi_ddiv+0x30a>
 8001414:	e117      	b.n	8001646 <__aeabi_ddiv+0x53a>
 8001416:	0039      	movs	r1, r7
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe fe7f 	bl	800011c <__udivsi3>
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	0005      	movs	r5, r0
 8001422:	4343      	muls	r3, r0
 8001424:	0039      	movs	r1, r7
 8001426:	4650      	mov	r0, sl
 8001428:	9304      	str	r3, [sp, #16]
 800142a:	f7fe fefd 	bl	8000228 <__aeabi_uidivmod>
 800142e:	9804      	ldr	r0, [sp, #16]
 8001430:	040b      	lsls	r3, r1, #16
 8001432:	0c31      	lsrs	r1, r6, #16
 8001434:	4319      	orrs	r1, r3
 8001436:	4288      	cmp	r0, r1
 8001438:	d909      	bls.n	800144e <__aeabi_ddiv+0x342>
 800143a:	4441      	add	r1, r8
 800143c:	1e6b      	subs	r3, r5, #1
 800143e:	4588      	cmp	r8, r1
 8001440:	d900      	bls.n	8001444 <__aeabi_ddiv+0x338>
 8001442:	e107      	b.n	8001654 <__aeabi_ddiv+0x548>
 8001444:	4288      	cmp	r0, r1
 8001446:	d800      	bhi.n	800144a <__aeabi_ddiv+0x33e>
 8001448:	e104      	b.n	8001654 <__aeabi_ddiv+0x548>
 800144a:	3d02      	subs	r5, #2
 800144c:	4441      	add	r1, r8
 800144e:	9b04      	ldr	r3, [sp, #16]
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	0018      	movs	r0, r3
 8001454:	0039      	movs	r1, r7
 8001456:	9304      	str	r3, [sp, #16]
 8001458:	f7fe fe60 	bl	800011c <__udivsi3>
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	4682      	mov	sl, r0
 8001460:	4343      	muls	r3, r0
 8001462:	0039      	movs	r1, r7
 8001464:	9804      	ldr	r0, [sp, #16]
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	f7fe fede 	bl	8000228 <__aeabi_uidivmod>
 800146c:	9801      	ldr	r0, [sp, #4]
 800146e:	040b      	lsls	r3, r1, #16
 8001470:	0431      	lsls	r1, r6, #16
 8001472:	0c09      	lsrs	r1, r1, #16
 8001474:	4319      	orrs	r1, r3
 8001476:	4288      	cmp	r0, r1
 8001478:	d90d      	bls.n	8001496 <__aeabi_ddiv+0x38a>
 800147a:	4653      	mov	r3, sl
 800147c:	4441      	add	r1, r8
 800147e:	3b01      	subs	r3, #1
 8001480:	4588      	cmp	r8, r1
 8001482:	d900      	bls.n	8001486 <__aeabi_ddiv+0x37a>
 8001484:	e0e8      	b.n	8001658 <__aeabi_ddiv+0x54c>
 8001486:	4288      	cmp	r0, r1
 8001488:	d800      	bhi.n	800148c <__aeabi_ddiv+0x380>
 800148a:	e0e5      	b.n	8001658 <__aeabi_ddiv+0x54c>
 800148c:	2302      	movs	r3, #2
 800148e:	425b      	negs	r3, r3
 8001490:	469c      	mov	ip, r3
 8001492:	4441      	add	r1, r8
 8001494:	44e2      	add	sl, ip
 8001496:	9b01      	ldr	r3, [sp, #4]
 8001498:	042d      	lsls	r5, r5, #16
 800149a:	1ace      	subs	r6, r1, r3
 800149c:	4651      	mov	r1, sl
 800149e:	4329      	orrs	r1, r5
 80014a0:	9d05      	ldr	r5, [sp, #20]
 80014a2:	464f      	mov	r7, r9
 80014a4:	002a      	movs	r2, r5
 80014a6:	040b      	lsls	r3, r1, #16
 80014a8:	0c08      	lsrs	r0, r1, #16
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	435a      	muls	r2, r3
 80014ae:	4345      	muls	r5, r0
 80014b0:	437b      	muls	r3, r7
 80014b2:	4378      	muls	r0, r7
 80014b4:	195b      	adds	r3, r3, r5
 80014b6:	0c17      	lsrs	r7, r2, #16
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	429d      	cmp	r5, r3
 80014bc:	d903      	bls.n	80014c6 <__aeabi_ddiv+0x3ba>
 80014be:	2580      	movs	r5, #128	; 0x80
 80014c0:	026d      	lsls	r5, r5, #9
 80014c2:	46ac      	mov	ip, r5
 80014c4:	4460      	add	r0, ip
 80014c6:	0c1d      	lsrs	r5, r3, #16
 80014c8:	0412      	lsls	r2, r2, #16
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c12      	lsrs	r2, r2, #16
 80014ce:	1828      	adds	r0, r5, r0
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	4286      	cmp	r6, r0
 80014d4:	d200      	bcs.n	80014d8 <__aeabi_ddiv+0x3cc>
 80014d6:	e093      	b.n	8001600 <__aeabi_ddiv+0x4f4>
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x3d0>
 80014da:	e08e      	b.n	80015fa <__aeabi_ddiv+0x4ee>
 80014dc:	2301      	movs	r3, #1
 80014de:	4319      	orrs	r1, r3
 80014e0:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <__aeabi_ddiv+0x658>)
 80014e2:	18e3      	adds	r3, r4, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_ddiv+0x3de>
 80014e8:	e099      	b.n	800161e <__aeabi_ddiv+0x512>
 80014ea:	074a      	lsls	r2, r1, #29
 80014ec:	d000      	beq.n	80014f0 <__aeabi_ddiv+0x3e4>
 80014ee:	e09e      	b.n	800162e <__aeabi_ddiv+0x522>
 80014f0:	465a      	mov	r2, fp
 80014f2:	01d2      	lsls	r2, r2, #7
 80014f4:	d506      	bpl.n	8001504 <__aeabi_ddiv+0x3f8>
 80014f6:	465a      	mov	r2, fp
 80014f8:	4b9b      	ldr	r3, [pc, #620]	; (8001768 <__aeabi_ddiv+0x65c>)
 80014fa:	401a      	ands	r2, r3
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	4693      	mov	fp, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	18e3      	adds	r3, r4, r3
 8001504:	4a99      	ldr	r2, [pc, #612]	; (800176c <__aeabi_ddiv+0x660>)
 8001506:	4293      	cmp	r3, r2
 8001508:	dd68      	ble.n	80015dc <__aeabi_ddiv+0x4d0>
 800150a:	2301      	movs	r3, #1
 800150c:	9a02      	ldr	r2, [sp, #8]
 800150e:	4c98      	ldr	r4, [pc, #608]	; (8001770 <__aeabi_ddiv+0x664>)
 8001510:	401a      	ands	r2, r3
 8001512:	2300      	movs	r3, #0
 8001514:	4694      	mov	ip, r2
 8001516:	4698      	mov	r8, r3
 8001518:	2200      	movs	r2, #0
 800151a:	e6c5      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	464b      	mov	r3, r9
 8001520:	0312      	lsls	r2, r2, #12
 8001522:	4213      	tst	r3, r2
 8001524:	d00a      	beq.n	800153c <__aeabi_ddiv+0x430>
 8001526:	465b      	mov	r3, fp
 8001528:	4213      	tst	r3, r2
 800152a:	d106      	bne.n	800153a <__aeabi_ddiv+0x42e>
 800152c:	431a      	orrs	r2, r3
 800152e:	0312      	lsls	r2, r2, #12
 8001530:	0b12      	lsrs	r2, r2, #12
 8001532:	46ac      	mov	ip, r5
 8001534:	4688      	mov	r8, r1
 8001536:	4c8e      	ldr	r4, [pc, #568]	; (8001770 <__aeabi_ddiv+0x664>)
 8001538:	e6b6      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 800153a:	464b      	mov	r3, r9
 800153c:	431a      	orrs	r2, r3
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	0b12      	lsrs	r2, r2, #12
 8001542:	46bc      	mov	ip, r7
 8001544:	4c8a      	ldr	r4, [pc, #552]	; (8001770 <__aeabi_ddiv+0x664>)
 8001546:	e6af      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 8001548:	0003      	movs	r3, r0
 800154a:	465a      	mov	r2, fp
 800154c:	3b28      	subs	r3, #40	; 0x28
 800154e:	409a      	lsls	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	4691      	mov	r9, r2
 8001554:	4698      	mov	r8, r3
 8001556:	e657      	b.n	8001208 <__aeabi_ddiv+0xfc>
 8001558:	4658      	mov	r0, fp
 800155a:	f001 f92b 	bl	80027b4 <__clzsi2>
 800155e:	3020      	adds	r0, #32
 8001560:	e640      	b.n	80011e4 <__aeabi_ddiv+0xd8>
 8001562:	0003      	movs	r3, r0
 8001564:	4652      	mov	r2, sl
 8001566:	3b28      	subs	r3, #40	; 0x28
 8001568:	409a      	lsls	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	4693      	mov	fp, r2
 800156e:	e677      	b.n	8001260 <__aeabi_ddiv+0x154>
 8001570:	f001 f920 	bl	80027b4 <__clzsi2>
 8001574:	3020      	adds	r0, #32
 8001576:	e65f      	b.n	8001238 <__aeabi_ddiv+0x12c>
 8001578:	4588      	cmp	r8, r1
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0x472>
 800157c:	e6c7      	b.n	800130e <__aeabi_ddiv+0x202>
 800157e:	464b      	mov	r3, r9
 8001580:	07de      	lsls	r6, r3, #31
 8001582:	085d      	lsrs	r5, r3, #1
 8001584:	4643      	mov	r3, r8
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	431e      	orrs	r6, r3
 800158a:	4643      	mov	r3, r8
 800158c:	07db      	lsls	r3, r3, #31
 800158e:	469a      	mov	sl, r3
 8001590:	e6c2      	b.n	8001318 <__aeabi_ddiv+0x20c>
 8001592:	2500      	movs	r5, #0
 8001594:	4592      	cmp	sl, r2
 8001596:	d300      	bcc.n	800159a <__aeabi_ddiv+0x48e>
 8001598:	e733      	b.n	8001402 <__aeabi_ddiv+0x2f6>
 800159a:	9e03      	ldr	r6, [sp, #12]
 800159c:	4659      	mov	r1, fp
 800159e:	46b4      	mov	ip, r6
 80015a0:	44e2      	add	sl, ip
 80015a2:	45b2      	cmp	sl, r6
 80015a4:	41ad      	sbcs	r5, r5
 80015a6:	426d      	negs	r5, r5
 80015a8:	4445      	add	r5, r8
 80015aa:	18eb      	adds	r3, r5, r3
 80015ac:	3901      	subs	r1, #1
 80015ae:	4598      	cmp	r8, r3
 80015b0:	d207      	bcs.n	80015c2 <__aeabi_ddiv+0x4b6>
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d900      	bls.n	80015b8 <__aeabi_ddiv+0x4ac>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x5ac>
 80015b8:	d100      	bne.n	80015bc <__aeabi_ddiv+0x4b0>
 80015ba:	e0bc      	b.n	8001736 <__aeabi_ddiv+0x62a>
 80015bc:	1a1d      	subs	r5, r3, r0
 80015be:	468b      	mov	fp, r1
 80015c0:	e71f      	b.n	8001402 <__aeabi_ddiv+0x2f6>
 80015c2:	4598      	cmp	r8, r3
 80015c4:	d1fa      	bne.n	80015bc <__aeabi_ddiv+0x4b0>
 80015c6:	9d03      	ldr	r5, [sp, #12]
 80015c8:	4555      	cmp	r5, sl
 80015ca:	d9f2      	bls.n	80015b2 <__aeabi_ddiv+0x4a6>
 80015cc:	4643      	mov	r3, r8
 80015ce:	468b      	mov	fp, r1
 80015d0:	1a1d      	subs	r5, r3, r0
 80015d2:	e716      	b.n	8001402 <__aeabi_ddiv+0x2f6>
 80015d4:	469b      	mov	fp, r3
 80015d6:	e6ca      	b.n	800136e <__aeabi_ddiv+0x262>
 80015d8:	0015      	movs	r5, r2
 80015da:	e6e7      	b.n	80013ac <__aeabi_ddiv+0x2a0>
 80015dc:	465a      	mov	r2, fp
 80015de:	08c9      	lsrs	r1, r1, #3
 80015e0:	0752      	lsls	r2, r2, #29
 80015e2:	430a      	orrs	r2, r1
 80015e4:	055b      	lsls	r3, r3, #21
 80015e6:	4690      	mov	r8, r2
 80015e8:	0d5c      	lsrs	r4, r3, #21
 80015ea:	465a      	mov	r2, fp
 80015ec:	2301      	movs	r3, #1
 80015ee:	9902      	ldr	r1, [sp, #8]
 80015f0:	0252      	lsls	r2, r2, #9
 80015f2:	4019      	ands	r1, r3
 80015f4:	0b12      	lsrs	r2, r2, #12
 80015f6:	468c      	mov	ip, r1
 80015f8:	e656      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x4f4>
 80015fe:	e76f      	b.n	80014e0 <__aeabi_ddiv+0x3d4>
 8001600:	4446      	add	r6, r8
 8001602:	1e4a      	subs	r2, r1, #1
 8001604:	45b0      	cmp	r8, r6
 8001606:	d929      	bls.n	800165c <__aeabi_ddiv+0x550>
 8001608:	0011      	movs	r1, r2
 800160a:	4286      	cmp	r6, r0
 800160c:	d000      	beq.n	8001610 <__aeabi_ddiv+0x504>
 800160e:	e765      	b.n	80014dc <__aeabi_ddiv+0x3d0>
 8001610:	9a03      	ldr	r2, [sp, #12]
 8001612:	4293      	cmp	r3, r2
 8001614:	d000      	beq.n	8001618 <__aeabi_ddiv+0x50c>
 8001616:	e761      	b.n	80014dc <__aeabi_ddiv+0x3d0>
 8001618:	e762      	b.n	80014e0 <__aeabi_ddiv+0x3d4>
 800161a:	2101      	movs	r1, #1
 800161c:	4249      	negs	r1, r1
 800161e:	2001      	movs	r0, #1
 8001620:	1ac2      	subs	r2, r0, r3
 8001622:	2a38      	cmp	r2, #56	; 0x38
 8001624:	dd21      	ble.n	800166a <__aeabi_ddiv+0x55e>
 8001626:	9b02      	ldr	r3, [sp, #8]
 8001628:	4003      	ands	r3, r0
 800162a:	469c      	mov	ip, r3
 800162c:	e638      	b.n	80012a0 <__aeabi_ddiv+0x194>
 800162e:	220f      	movs	r2, #15
 8001630:	400a      	ands	r2, r1
 8001632:	2a04      	cmp	r2, #4
 8001634:	d100      	bne.n	8001638 <__aeabi_ddiv+0x52c>
 8001636:	e75b      	b.n	80014f0 <__aeabi_ddiv+0x3e4>
 8001638:	000a      	movs	r2, r1
 800163a:	1d11      	adds	r1, r2, #4
 800163c:	4291      	cmp	r1, r2
 800163e:	4192      	sbcs	r2, r2
 8001640:	4252      	negs	r2, r2
 8001642:	4493      	add	fp, r2
 8001644:	e754      	b.n	80014f0 <__aeabi_ddiv+0x3e4>
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <__aeabi_ddiv+0x658>)
 8001648:	18e3      	adds	r3, r4, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	dde5      	ble.n	800161a <__aeabi_ddiv+0x50e>
 800164e:	2201      	movs	r2, #1
 8001650:	4252      	negs	r2, r2
 8001652:	e7f2      	b.n	800163a <__aeabi_ddiv+0x52e>
 8001654:	001d      	movs	r5, r3
 8001656:	e6fa      	b.n	800144e <__aeabi_ddiv+0x342>
 8001658:	469a      	mov	sl, r3
 800165a:	e71c      	b.n	8001496 <__aeabi_ddiv+0x38a>
 800165c:	42b0      	cmp	r0, r6
 800165e:	d839      	bhi.n	80016d4 <__aeabi_ddiv+0x5c8>
 8001660:	d06e      	beq.n	8001740 <__aeabi_ddiv+0x634>
 8001662:	0011      	movs	r1, r2
 8001664:	e73a      	b.n	80014dc <__aeabi_ddiv+0x3d0>
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	e73a      	b.n	80014e0 <__aeabi_ddiv+0x3d4>
 800166a:	2a1f      	cmp	r2, #31
 800166c:	dc3c      	bgt.n	80016e8 <__aeabi_ddiv+0x5dc>
 800166e:	2320      	movs	r3, #32
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	000c      	movs	r4, r1
 8001674:	4658      	mov	r0, fp
 8001676:	4099      	lsls	r1, r3
 8001678:	4098      	lsls	r0, r3
 800167a:	1e4b      	subs	r3, r1, #1
 800167c:	4199      	sbcs	r1, r3
 800167e:	465b      	mov	r3, fp
 8001680:	40d4      	lsrs	r4, r2
 8001682:	40d3      	lsrs	r3, r2
 8001684:	4320      	orrs	r0, r4
 8001686:	4308      	orrs	r0, r1
 8001688:	001a      	movs	r2, r3
 800168a:	0743      	lsls	r3, r0, #29
 800168c:	d009      	beq.n	80016a2 <__aeabi_ddiv+0x596>
 800168e:	230f      	movs	r3, #15
 8001690:	4003      	ands	r3, r0
 8001692:	2b04      	cmp	r3, #4
 8001694:	d005      	beq.n	80016a2 <__aeabi_ddiv+0x596>
 8001696:	0001      	movs	r1, r0
 8001698:	1d08      	adds	r0, r1, #4
 800169a:	4288      	cmp	r0, r1
 800169c:	419b      	sbcs	r3, r3
 800169e:	425b      	negs	r3, r3
 80016a0:	18d2      	adds	r2, r2, r3
 80016a2:	0213      	lsls	r3, r2, #8
 80016a4:	d53a      	bpl.n	800171c <__aeabi_ddiv+0x610>
 80016a6:	2301      	movs	r3, #1
 80016a8:	9a02      	ldr	r2, [sp, #8]
 80016aa:	2401      	movs	r4, #1
 80016ac:	401a      	ands	r2, r3
 80016ae:	2300      	movs	r3, #0
 80016b0:	4694      	mov	ip, r2
 80016b2:	4698      	mov	r8, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	e5f7      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 80016b8:	2102      	movs	r1, #2
 80016ba:	4249      	negs	r1, r1
 80016bc:	468c      	mov	ip, r1
 80016be:	9d03      	ldr	r5, [sp, #12]
 80016c0:	44e3      	add	fp, ip
 80016c2:	46ac      	mov	ip, r5
 80016c4:	44e2      	add	sl, ip
 80016c6:	45aa      	cmp	sl, r5
 80016c8:	41ad      	sbcs	r5, r5
 80016ca:	426d      	negs	r5, r5
 80016cc:	4445      	add	r5, r8
 80016ce:	18ed      	adds	r5, r5, r3
 80016d0:	1a2d      	subs	r5, r5, r0
 80016d2:	e696      	b.n	8001402 <__aeabi_ddiv+0x2f6>
 80016d4:	1e8a      	subs	r2, r1, #2
 80016d6:	9903      	ldr	r1, [sp, #12]
 80016d8:	004d      	lsls	r5, r1, #1
 80016da:	428d      	cmp	r5, r1
 80016dc:	4189      	sbcs	r1, r1
 80016de:	4249      	negs	r1, r1
 80016e0:	4441      	add	r1, r8
 80016e2:	1876      	adds	r6, r6, r1
 80016e4:	9503      	str	r5, [sp, #12]
 80016e6:	e78f      	b.n	8001608 <__aeabi_ddiv+0x4fc>
 80016e8:	201f      	movs	r0, #31
 80016ea:	4240      	negs	r0, r0
 80016ec:	1ac3      	subs	r3, r0, r3
 80016ee:	4658      	mov	r0, fp
 80016f0:	40d8      	lsrs	r0, r3
 80016f2:	0003      	movs	r3, r0
 80016f4:	2a20      	cmp	r2, #32
 80016f6:	d028      	beq.n	800174a <__aeabi_ddiv+0x63e>
 80016f8:	2040      	movs	r0, #64	; 0x40
 80016fa:	465d      	mov	r5, fp
 80016fc:	1a82      	subs	r2, r0, r2
 80016fe:	4095      	lsls	r5, r2
 8001700:	4329      	orrs	r1, r5
 8001702:	1e4a      	subs	r2, r1, #1
 8001704:	4191      	sbcs	r1, r2
 8001706:	4319      	orrs	r1, r3
 8001708:	2307      	movs	r3, #7
 800170a:	2200      	movs	r2, #0
 800170c:	400b      	ands	r3, r1
 800170e:	d009      	beq.n	8001724 <__aeabi_ddiv+0x618>
 8001710:	230f      	movs	r3, #15
 8001712:	2200      	movs	r2, #0
 8001714:	400b      	ands	r3, r1
 8001716:	0008      	movs	r0, r1
 8001718:	2b04      	cmp	r3, #4
 800171a:	d1bd      	bne.n	8001698 <__aeabi_ddiv+0x58c>
 800171c:	0001      	movs	r1, r0
 800171e:	0753      	lsls	r3, r2, #29
 8001720:	0252      	lsls	r2, r2, #9
 8001722:	0b12      	lsrs	r2, r2, #12
 8001724:	08c9      	lsrs	r1, r1, #3
 8001726:	4319      	orrs	r1, r3
 8001728:	2301      	movs	r3, #1
 800172a:	4688      	mov	r8, r1
 800172c:	9902      	ldr	r1, [sp, #8]
 800172e:	2400      	movs	r4, #0
 8001730:	4019      	ands	r1, r3
 8001732:	468c      	mov	ip, r1
 8001734:	e5b8      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 8001736:	4552      	cmp	r2, sl
 8001738:	d8be      	bhi.n	80016b8 <__aeabi_ddiv+0x5ac>
 800173a:	468b      	mov	fp, r1
 800173c:	2500      	movs	r5, #0
 800173e:	e660      	b.n	8001402 <__aeabi_ddiv+0x2f6>
 8001740:	9d03      	ldr	r5, [sp, #12]
 8001742:	429d      	cmp	r5, r3
 8001744:	d3c6      	bcc.n	80016d4 <__aeabi_ddiv+0x5c8>
 8001746:	0011      	movs	r1, r2
 8001748:	e762      	b.n	8001610 <__aeabi_ddiv+0x504>
 800174a:	2500      	movs	r5, #0
 800174c:	e7d8      	b.n	8001700 <__aeabi_ddiv+0x5f4>
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	465b      	mov	r3, fp
 8001752:	0312      	lsls	r2, r2, #12
 8001754:	431a      	orrs	r2, r3
 8001756:	9b01      	ldr	r3, [sp, #4]
 8001758:	0312      	lsls	r2, r2, #12
 800175a:	0b12      	lsrs	r2, r2, #12
 800175c:	469c      	mov	ip, r3
 800175e:	4688      	mov	r8, r1
 8001760:	4c03      	ldr	r4, [pc, #12]	; (8001770 <__aeabi_ddiv+0x664>)
 8001762:	e5a1      	b.n	80012a8 <__aeabi_ddiv+0x19c>
 8001764:	000003ff 	.word	0x000003ff
 8001768:	feffffff 	.word	0xfeffffff
 800176c:	000007fe 	.word	0x000007fe
 8001770:	000007ff 	.word	0x000007ff

08001774 <__eqdf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	464f      	mov	r7, r9
 8001778:	4646      	mov	r6, r8
 800177a:	46d6      	mov	lr, sl
 800177c:	005c      	lsls	r4, r3, #1
 800177e:	b5c0      	push	{r6, r7, lr}
 8001780:	031f      	lsls	r7, r3, #12
 8001782:	0fdb      	lsrs	r3, r3, #31
 8001784:	469a      	mov	sl, r3
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <__eqdf2+0x70>)
 8001788:	030e      	lsls	r6, r1, #12
 800178a:	004d      	lsls	r5, r1, #1
 800178c:	4684      	mov	ip, r0
 800178e:	4680      	mov	r8, r0
 8001790:	0b36      	lsrs	r6, r6, #12
 8001792:	0d6d      	lsrs	r5, r5, #21
 8001794:	0fc9      	lsrs	r1, r1, #31
 8001796:	4691      	mov	r9, r2
 8001798:	0b3f      	lsrs	r7, r7, #12
 800179a:	0d64      	lsrs	r4, r4, #21
 800179c:	2001      	movs	r0, #1
 800179e:	429d      	cmp	r5, r3
 80017a0:	d008      	beq.n	80017b4 <__eqdf2+0x40>
 80017a2:	429c      	cmp	r4, r3
 80017a4:	d001      	beq.n	80017aa <__eqdf2+0x36>
 80017a6:	42a5      	cmp	r5, r4
 80017a8:	d00b      	beq.n	80017c2 <__eqdf2+0x4e>
 80017aa:	bc1c      	pop	{r2, r3, r4}
 80017ac:	4690      	mov	r8, r2
 80017ae:	4699      	mov	r9, r3
 80017b0:	46a2      	mov	sl, r4
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	4663      	mov	r3, ip
 80017b6:	4333      	orrs	r3, r6
 80017b8:	d1f7      	bne.n	80017aa <__eqdf2+0x36>
 80017ba:	42ac      	cmp	r4, r5
 80017bc:	d1f5      	bne.n	80017aa <__eqdf2+0x36>
 80017be:	433a      	orrs	r2, r7
 80017c0:	d1f3      	bne.n	80017aa <__eqdf2+0x36>
 80017c2:	2001      	movs	r0, #1
 80017c4:	42be      	cmp	r6, r7
 80017c6:	d1f0      	bne.n	80017aa <__eqdf2+0x36>
 80017c8:	45c8      	cmp	r8, r9
 80017ca:	d1ee      	bne.n	80017aa <__eqdf2+0x36>
 80017cc:	4551      	cmp	r1, sl
 80017ce:	d007      	beq.n	80017e0 <__eqdf2+0x6c>
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	d1ea      	bne.n	80017aa <__eqdf2+0x36>
 80017d4:	4663      	mov	r3, ip
 80017d6:	431e      	orrs	r6, r3
 80017d8:	0030      	movs	r0, r6
 80017da:	1e46      	subs	r6, r0, #1
 80017dc:	41b0      	sbcs	r0, r6
 80017de:	e7e4      	b.n	80017aa <__eqdf2+0x36>
 80017e0:	2000      	movs	r0, #0
 80017e2:	e7e2      	b.n	80017aa <__eqdf2+0x36>
 80017e4:	000007ff 	.word	0x000007ff

080017e8 <__gedf2>:
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	4645      	mov	r5, r8
 80017ec:	46de      	mov	lr, fp
 80017ee:	4657      	mov	r7, sl
 80017f0:	464e      	mov	r6, r9
 80017f2:	b5e0      	push	{r5, r6, r7, lr}
 80017f4:	031f      	lsls	r7, r3, #12
 80017f6:	0b3d      	lsrs	r5, r7, #12
 80017f8:	4f2c      	ldr	r7, [pc, #176]	; (80018ac <__gedf2+0xc4>)
 80017fa:	030e      	lsls	r6, r1, #12
 80017fc:	004c      	lsls	r4, r1, #1
 80017fe:	46ab      	mov	fp, r5
 8001800:	005d      	lsls	r5, r3, #1
 8001802:	4684      	mov	ip, r0
 8001804:	0b36      	lsrs	r6, r6, #12
 8001806:	0d64      	lsrs	r4, r4, #21
 8001808:	0fc9      	lsrs	r1, r1, #31
 800180a:	4690      	mov	r8, r2
 800180c:	0d6d      	lsrs	r5, r5, #21
 800180e:	0fdb      	lsrs	r3, r3, #31
 8001810:	42bc      	cmp	r4, r7
 8001812:	d02a      	beq.n	800186a <__gedf2+0x82>
 8001814:	4f25      	ldr	r7, [pc, #148]	; (80018ac <__gedf2+0xc4>)
 8001816:	42bd      	cmp	r5, r7
 8001818:	d02d      	beq.n	8001876 <__gedf2+0x8e>
 800181a:	2c00      	cmp	r4, #0
 800181c:	d10f      	bne.n	800183e <__gedf2+0x56>
 800181e:	4330      	orrs	r0, r6
 8001820:	0007      	movs	r7, r0
 8001822:	4681      	mov	r9, r0
 8001824:	4278      	negs	r0, r7
 8001826:	4178      	adcs	r0, r7
 8001828:	b2c0      	uxtb	r0, r0
 800182a:	2d00      	cmp	r5, #0
 800182c:	d117      	bne.n	800185e <__gedf2+0x76>
 800182e:	465f      	mov	r7, fp
 8001830:	433a      	orrs	r2, r7
 8001832:	d114      	bne.n	800185e <__gedf2+0x76>
 8001834:	464b      	mov	r3, r9
 8001836:	2000      	movs	r0, #0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00a      	beq.n	8001852 <__gedf2+0x6a>
 800183c:	e006      	b.n	800184c <__gedf2+0x64>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d102      	bne.n	8001848 <__gedf2+0x60>
 8001842:	4658      	mov	r0, fp
 8001844:	4302      	orrs	r2, r0
 8001846:	d001      	beq.n	800184c <__gedf2+0x64>
 8001848:	4299      	cmp	r1, r3
 800184a:	d018      	beq.n	800187e <__gedf2+0x96>
 800184c:	4248      	negs	r0, r1
 800184e:	2101      	movs	r1, #1
 8001850:	4308      	orrs	r0, r1
 8001852:	bc3c      	pop	{r2, r3, r4, r5}
 8001854:	4690      	mov	r8, r2
 8001856:	4699      	mov	r9, r3
 8001858:	46a2      	mov	sl, r4
 800185a:	46ab      	mov	fp, r5
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	2800      	cmp	r0, #0
 8001860:	d0f2      	beq.n	8001848 <__gedf2+0x60>
 8001862:	2001      	movs	r0, #1
 8001864:	3b01      	subs	r3, #1
 8001866:	4318      	orrs	r0, r3
 8001868:	e7f3      	b.n	8001852 <__gedf2+0x6a>
 800186a:	0037      	movs	r7, r6
 800186c:	4307      	orrs	r7, r0
 800186e:	d0d1      	beq.n	8001814 <__gedf2+0x2c>
 8001870:	2002      	movs	r0, #2
 8001872:	4240      	negs	r0, r0
 8001874:	e7ed      	b.n	8001852 <__gedf2+0x6a>
 8001876:	465f      	mov	r7, fp
 8001878:	4317      	orrs	r7, r2
 800187a:	d0ce      	beq.n	800181a <__gedf2+0x32>
 800187c:	e7f8      	b.n	8001870 <__gedf2+0x88>
 800187e:	42ac      	cmp	r4, r5
 8001880:	dce4      	bgt.n	800184c <__gedf2+0x64>
 8001882:	da03      	bge.n	800188c <__gedf2+0xa4>
 8001884:	1e48      	subs	r0, r1, #1
 8001886:	2101      	movs	r1, #1
 8001888:	4308      	orrs	r0, r1
 800188a:	e7e2      	b.n	8001852 <__gedf2+0x6a>
 800188c:	455e      	cmp	r6, fp
 800188e:	d8dd      	bhi.n	800184c <__gedf2+0x64>
 8001890:	d006      	beq.n	80018a0 <__gedf2+0xb8>
 8001892:	2000      	movs	r0, #0
 8001894:	455e      	cmp	r6, fp
 8001896:	d2dc      	bcs.n	8001852 <__gedf2+0x6a>
 8001898:	2301      	movs	r3, #1
 800189a:	1e48      	subs	r0, r1, #1
 800189c:	4318      	orrs	r0, r3
 800189e:	e7d8      	b.n	8001852 <__gedf2+0x6a>
 80018a0:	45c4      	cmp	ip, r8
 80018a2:	d8d3      	bhi.n	800184c <__gedf2+0x64>
 80018a4:	2000      	movs	r0, #0
 80018a6:	45c4      	cmp	ip, r8
 80018a8:	d3f6      	bcc.n	8001898 <__gedf2+0xb0>
 80018aa:	e7d2      	b.n	8001852 <__gedf2+0x6a>
 80018ac:	000007ff 	.word	0x000007ff

080018b0 <__ledf2>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	464e      	mov	r6, r9
 80018b4:	4645      	mov	r5, r8
 80018b6:	46de      	mov	lr, fp
 80018b8:	4657      	mov	r7, sl
 80018ba:	005c      	lsls	r4, r3, #1
 80018bc:	b5e0      	push	{r5, r6, r7, lr}
 80018be:	031f      	lsls	r7, r3, #12
 80018c0:	0fdb      	lsrs	r3, r3, #31
 80018c2:	4699      	mov	r9, r3
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <__ledf2+0xc0>)
 80018c6:	030e      	lsls	r6, r1, #12
 80018c8:	004d      	lsls	r5, r1, #1
 80018ca:	0fc9      	lsrs	r1, r1, #31
 80018cc:	4684      	mov	ip, r0
 80018ce:	0b36      	lsrs	r6, r6, #12
 80018d0:	0d6d      	lsrs	r5, r5, #21
 80018d2:	468b      	mov	fp, r1
 80018d4:	4690      	mov	r8, r2
 80018d6:	0b3f      	lsrs	r7, r7, #12
 80018d8:	0d64      	lsrs	r4, r4, #21
 80018da:	429d      	cmp	r5, r3
 80018dc:	d020      	beq.n	8001920 <__ledf2+0x70>
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <__ledf2+0xc0>)
 80018e0:	429c      	cmp	r4, r3
 80018e2:	d022      	beq.n	800192a <__ledf2+0x7a>
 80018e4:	2d00      	cmp	r5, #0
 80018e6:	d112      	bne.n	800190e <__ledf2+0x5e>
 80018e8:	4330      	orrs	r0, r6
 80018ea:	4243      	negs	r3, r0
 80018ec:	4143      	adcs	r3, r0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	d01f      	beq.n	8001934 <__ledf2+0x84>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00c      	beq.n	8001912 <__ledf2+0x62>
 80018f8:	464b      	mov	r3, r9
 80018fa:	2001      	movs	r0, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4303      	orrs	r3, r0
 8001900:	0018      	movs	r0, r3
 8001902:	bc3c      	pop	{r2, r3, r4, r5}
 8001904:	4690      	mov	r8, r2
 8001906:	4699      	mov	r9, r3
 8001908:	46a2      	mov	sl, r4
 800190a:	46ab      	mov	fp, r5
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190e:	2c00      	cmp	r4, #0
 8001910:	d016      	beq.n	8001940 <__ledf2+0x90>
 8001912:	45cb      	cmp	fp, r9
 8001914:	d017      	beq.n	8001946 <__ledf2+0x96>
 8001916:	465b      	mov	r3, fp
 8001918:	4259      	negs	r1, r3
 800191a:	2301      	movs	r3, #1
 800191c:	430b      	orrs	r3, r1
 800191e:	e7ef      	b.n	8001900 <__ledf2+0x50>
 8001920:	0031      	movs	r1, r6
 8001922:	2302      	movs	r3, #2
 8001924:	4301      	orrs	r1, r0
 8001926:	d1eb      	bne.n	8001900 <__ledf2+0x50>
 8001928:	e7d9      	b.n	80018de <__ledf2+0x2e>
 800192a:	0039      	movs	r1, r7
 800192c:	2302      	movs	r3, #2
 800192e:	4311      	orrs	r1, r2
 8001930:	d1e6      	bne.n	8001900 <__ledf2+0x50>
 8001932:	e7d7      	b.n	80018e4 <__ledf2+0x34>
 8001934:	433a      	orrs	r2, r7
 8001936:	d1dd      	bne.n	80018f4 <__ledf2+0x44>
 8001938:	2300      	movs	r3, #0
 800193a:	2800      	cmp	r0, #0
 800193c:	d0e0      	beq.n	8001900 <__ledf2+0x50>
 800193e:	e7ea      	b.n	8001916 <__ledf2+0x66>
 8001940:	433a      	orrs	r2, r7
 8001942:	d1e6      	bne.n	8001912 <__ledf2+0x62>
 8001944:	e7e7      	b.n	8001916 <__ledf2+0x66>
 8001946:	42a5      	cmp	r5, r4
 8001948:	dce5      	bgt.n	8001916 <__ledf2+0x66>
 800194a:	db05      	blt.n	8001958 <__ledf2+0xa8>
 800194c:	42be      	cmp	r6, r7
 800194e:	d8e2      	bhi.n	8001916 <__ledf2+0x66>
 8001950:	d007      	beq.n	8001962 <__ledf2+0xb2>
 8001952:	2300      	movs	r3, #0
 8001954:	42be      	cmp	r6, r7
 8001956:	d2d3      	bcs.n	8001900 <__ledf2+0x50>
 8001958:	4659      	mov	r1, fp
 800195a:	2301      	movs	r3, #1
 800195c:	3901      	subs	r1, #1
 800195e:	430b      	orrs	r3, r1
 8001960:	e7ce      	b.n	8001900 <__ledf2+0x50>
 8001962:	45c4      	cmp	ip, r8
 8001964:	d8d7      	bhi.n	8001916 <__ledf2+0x66>
 8001966:	2300      	movs	r3, #0
 8001968:	45c4      	cmp	ip, r8
 800196a:	d3f5      	bcc.n	8001958 <__ledf2+0xa8>
 800196c:	e7c8      	b.n	8001900 <__ledf2+0x50>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff

08001974 <__aeabi_dmul>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	4645      	mov	r5, r8
 800197a:	46de      	mov	lr, fp
 800197c:	464e      	mov	r6, r9
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	030c      	lsls	r4, r1, #12
 8001982:	4698      	mov	r8, r3
 8001984:	004e      	lsls	r6, r1, #1
 8001986:	0b23      	lsrs	r3, r4, #12
 8001988:	b087      	sub	sp, #28
 800198a:	0007      	movs	r7, r0
 800198c:	4692      	mov	sl, r2
 800198e:	469b      	mov	fp, r3
 8001990:	0d76      	lsrs	r6, r6, #21
 8001992:	0fcd      	lsrs	r5, r1, #31
 8001994:	2e00      	cmp	r6, #0
 8001996:	d06b      	beq.n	8001a70 <__aeabi_dmul+0xfc>
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <__aeabi_dmul+0x1dc>)
 800199a:	429e      	cmp	r6, r3
 800199c:	d035      	beq.n	8001a0a <__aeabi_dmul+0x96>
 800199e:	2480      	movs	r4, #128	; 0x80
 80019a0:	465b      	mov	r3, fp
 80019a2:	0f42      	lsrs	r2, r0, #29
 80019a4:	0424      	lsls	r4, r4, #16
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4314      	orrs	r4, r2
 80019aa:	431c      	orrs	r4, r3
 80019ac:	00c3      	lsls	r3, r0, #3
 80019ae:	4699      	mov	r9, r3
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <__aeabi_dmul+0x1e0>)
 80019b2:	46a3      	mov	fp, r4
 80019b4:	469c      	mov	ip, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	2700      	movs	r7, #0
 80019ba:	4466      	add	r6, ip
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	4643      	mov	r3, r8
 80019c0:	031c      	lsls	r4, r3, #12
 80019c2:	005a      	lsls	r2, r3, #1
 80019c4:	0fdb      	lsrs	r3, r3, #31
 80019c6:	4650      	mov	r0, sl
 80019c8:	0b24      	lsrs	r4, r4, #12
 80019ca:	0d52      	lsrs	r2, r2, #21
 80019cc:	4698      	mov	r8, r3
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dmul+0x5e>
 80019d0:	e076      	b.n	8001ac0 <__aeabi_dmul+0x14c>
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <__aeabi_dmul+0x1dc>)
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d06d      	beq.n	8001ab4 <__aeabi_dmul+0x140>
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	0f41      	lsrs	r1, r0, #29
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	430b      	orrs	r3, r1
 80019e0:	495c      	ldr	r1, [pc, #368]	; (8001b54 <__aeabi_dmul+0x1e0>)
 80019e2:	00e4      	lsls	r4, r4, #3
 80019e4:	468c      	mov	ip, r1
 80019e6:	431c      	orrs	r4, r3
 80019e8:	00c3      	lsls	r3, r0, #3
 80019ea:	2000      	movs	r0, #0
 80019ec:	4462      	add	r2, ip
 80019ee:	4641      	mov	r1, r8
 80019f0:	18b6      	adds	r6, r6, r2
 80019f2:	4069      	eors	r1, r5
 80019f4:	1c72      	adds	r2, r6, #1
 80019f6:	9101      	str	r1, [sp, #4]
 80019f8:	4694      	mov	ip, r2
 80019fa:	4307      	orrs	r7, r0
 80019fc:	2f0f      	cmp	r7, #15
 80019fe:	d900      	bls.n	8001a02 <__aeabi_dmul+0x8e>
 8001a00:	e0b0      	b.n	8001b64 <__aeabi_dmul+0x1f0>
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <__aeabi_dmul+0x1e4>)
 8001a04:	00bf      	lsls	r7, r7, #2
 8001a06:	59d2      	ldr	r2, [r2, r7]
 8001a08:	4697      	mov	pc, r2
 8001a0a:	465b      	mov	r3, fp
 8001a0c:	4303      	orrs	r3, r0
 8001a0e:	4699      	mov	r9, r3
 8001a10:	d000      	beq.n	8001a14 <__aeabi_dmul+0xa0>
 8001a12:	e087      	b.n	8001b24 <__aeabi_dmul+0x1b0>
 8001a14:	2300      	movs	r3, #0
 8001a16:	469b      	mov	fp, r3
 8001a18:	3302      	adds	r3, #2
 8001a1a:	2708      	movs	r7, #8
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	e7ce      	b.n	80019be <__aeabi_dmul+0x4a>
 8001a20:	4642      	mov	r2, r8
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d067      	beq.n	8001af8 <__aeabi_dmul+0x184>
 8001a28:	2803      	cmp	r0, #3
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dmul+0xba>
 8001a2c:	e20e      	b.n	8001e4c <__aeabi_dmul+0x4d8>
 8001a2e:	2801      	cmp	r0, #1
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dmul+0xc0>
 8001a32:	e162      	b.n	8001cfa <__aeabi_dmul+0x386>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2400      	movs	r4, #0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	9901      	ldr	r1, [sp, #4]
 8001a3e:	4001      	ands	r1, r0
 8001a40:	b2cd      	uxtb	r5, r1
 8001a42:	2100      	movs	r1, #0
 8001a44:	0312      	lsls	r2, r2, #12
 8001a46:	0d0b      	lsrs	r3, r1, #20
 8001a48:	0b12      	lsrs	r2, r2, #12
 8001a4a:	051b      	lsls	r3, r3, #20
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <__aeabi_dmul+0x1e8>)
 8001a50:	0524      	lsls	r4, r4, #20
 8001a52:	4013      	ands	r3, r2
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0064      	lsls	r4, r4, #1
 8001a58:	07ed      	lsls	r5, r5, #31
 8001a5a:	0864      	lsrs	r4, r4, #1
 8001a5c:	432c      	orrs	r4, r5
 8001a5e:	4648      	mov	r0, r9
 8001a60:	0021      	movs	r1, r4
 8001a62:	b007      	add	sp, #28
 8001a64:	bc3c      	pop	{r2, r3, r4, r5}
 8001a66:	4690      	mov	r8, r2
 8001a68:	4699      	mov	r9, r3
 8001a6a:	46a2      	mov	sl, r4
 8001a6c:	46ab      	mov	fp, r5
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	4303      	orrs	r3, r0
 8001a72:	4699      	mov	r9, r3
 8001a74:	d04f      	beq.n	8001b16 <__aeabi_dmul+0x1a2>
 8001a76:	465b      	mov	r3, fp
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_dmul+0x10a>
 8001a7c:	e189      	b.n	8001d92 <__aeabi_dmul+0x41e>
 8001a7e:	4658      	mov	r0, fp
 8001a80:	f000 fe98 	bl	80027b4 <__clzsi2>
 8001a84:	0003      	movs	r3, r0
 8001a86:	3b0b      	subs	r3, #11
 8001a88:	2b1c      	cmp	r3, #28
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dmul+0x11a>
 8001a8c:	e17a      	b.n	8001d84 <__aeabi_dmul+0x410>
 8001a8e:	221d      	movs	r2, #29
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	003a      	movs	r2, r7
 8001a94:	0001      	movs	r1, r0
 8001a96:	465c      	mov	r4, fp
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	3908      	subs	r1, #8
 8001a9c:	408c      	lsls	r4, r1
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	408f      	lsls	r7, r1
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	469b      	mov	fp, r3
 8001aa6:	46b9      	mov	r9, r7
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4e2d      	ldr	r6, [pc, #180]	; (8001b60 <__aeabi_dmul+0x1ec>)
 8001aac:	2700      	movs	r7, #0
 8001aae:	1a36      	subs	r6, r6, r0
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	e784      	b.n	80019be <__aeabi_dmul+0x4a>
 8001ab4:	4653      	mov	r3, sl
 8001ab6:	4323      	orrs	r3, r4
 8001ab8:	d12a      	bne.n	8001b10 <__aeabi_dmul+0x19c>
 8001aba:	2400      	movs	r4, #0
 8001abc:	2002      	movs	r0, #2
 8001abe:	e796      	b.n	80019ee <__aeabi_dmul+0x7a>
 8001ac0:	4653      	mov	r3, sl
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	d020      	beq.n	8001b08 <__aeabi_dmul+0x194>
 8001ac6:	2c00      	cmp	r4, #0
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dmul+0x158>
 8001aca:	e157      	b.n	8001d7c <__aeabi_dmul+0x408>
 8001acc:	0020      	movs	r0, r4
 8001ace:	f000 fe71 	bl	80027b4 <__clzsi2>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	3b0b      	subs	r3, #11
 8001ad6:	2b1c      	cmp	r3, #28
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dmul+0x168>
 8001ada:	e149      	b.n	8001d70 <__aeabi_dmul+0x3fc>
 8001adc:	211d      	movs	r1, #29
 8001ade:	1acb      	subs	r3, r1, r3
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	40d9      	lsrs	r1, r3
 8001ae6:	4653      	mov	r3, sl
 8001ae8:	3a08      	subs	r2, #8
 8001aea:	4094      	lsls	r4, r2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	430c      	orrs	r4, r1
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <__aeabi_dmul+0x1ec>)
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	2000      	movs	r0, #0
 8001af6:	e77a      	b.n	80019ee <__aeabi_dmul+0x7a>
 8001af8:	2501      	movs	r5, #1
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	4c14      	ldr	r4, [pc, #80]	; (8001b50 <__aeabi_dmul+0x1dc>)
 8001afe:	401d      	ands	r5, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	4699      	mov	r9, r3
 8001b06:	e79c      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001b08:	2400      	movs	r4, #0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e76e      	b.n	80019ee <__aeabi_dmul+0x7a>
 8001b10:	4653      	mov	r3, sl
 8001b12:	2003      	movs	r0, #3
 8001b14:	e76b      	b.n	80019ee <__aeabi_dmul+0x7a>
 8001b16:	2300      	movs	r3, #0
 8001b18:	469b      	mov	fp, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	2704      	movs	r7, #4
 8001b1e:	2600      	movs	r6, #0
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	e74c      	b.n	80019be <__aeabi_dmul+0x4a>
 8001b24:	2303      	movs	r3, #3
 8001b26:	4681      	mov	r9, r0
 8001b28:	270c      	movs	r7, #12
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	e747      	b.n	80019be <__aeabi_dmul+0x4a>
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	2300      	movs	r3, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	0312      	lsls	r2, r2, #12
 8001b36:	4699      	mov	r9, r3
 8001b38:	4c05      	ldr	r4, [pc, #20]	; (8001b50 <__aeabi_dmul+0x1dc>)
 8001b3a:	e782      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001b3c:	465c      	mov	r4, fp
 8001b3e:	464b      	mov	r3, r9
 8001b40:	9802      	ldr	r0, [sp, #8]
 8001b42:	e76f      	b.n	8001a24 <__aeabi_dmul+0xb0>
 8001b44:	465c      	mov	r4, fp
 8001b46:	464b      	mov	r3, r9
 8001b48:	9501      	str	r5, [sp, #4]
 8001b4a:	9802      	ldr	r0, [sp, #8]
 8001b4c:	e76a      	b.n	8001a24 <__aeabi_dmul+0xb0>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	fffffc01 	.word	0xfffffc01
 8001b58:	08008d08 	.word	0x08008d08
 8001b5c:	800fffff 	.word	0x800fffff
 8001b60:	fffffc0d 	.word	0xfffffc0d
 8001b64:	464a      	mov	r2, r9
 8001b66:	4649      	mov	r1, r9
 8001b68:	0c17      	lsrs	r7, r2, #16
 8001b6a:	0c1a      	lsrs	r2, r3, #16
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	0408      	lsls	r0, r1, #16
 8001b72:	0019      	movs	r1, r3
 8001b74:	0c00      	lsrs	r0, r0, #16
 8001b76:	4341      	muls	r1, r0
 8001b78:	0015      	movs	r5, r2
 8001b7a:	4688      	mov	r8, r1
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	437d      	muls	r5, r7
 8001b80:	4379      	muls	r1, r7
 8001b82:	9503      	str	r5, [sp, #12]
 8001b84:	4689      	mov	r9, r1
 8001b86:	0029      	movs	r1, r5
 8001b88:	0015      	movs	r5, r2
 8001b8a:	4345      	muls	r5, r0
 8001b8c:	444d      	add	r5, r9
 8001b8e:	9502      	str	r5, [sp, #8]
 8001b90:	4645      	mov	r5, r8
 8001b92:	0c2d      	lsrs	r5, r5, #16
 8001b94:	46aa      	mov	sl, r5
 8001b96:	9d02      	ldr	r5, [sp, #8]
 8001b98:	4455      	add	r5, sl
 8001b9a:	45a9      	cmp	r9, r5
 8001b9c:	d906      	bls.n	8001bac <__aeabi_dmul+0x238>
 8001b9e:	468a      	mov	sl, r1
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0249      	lsls	r1, r1, #9
 8001ba4:	4689      	mov	r9, r1
 8001ba6:	44ca      	add	sl, r9
 8001ba8:	4651      	mov	r1, sl
 8001baa:	9103      	str	r1, [sp, #12]
 8001bac:	0c29      	lsrs	r1, r5, #16
 8001bae:	9104      	str	r1, [sp, #16]
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	0409      	lsls	r1, r1, #16
 8001bb4:	042d      	lsls	r5, r5, #16
 8001bb6:	0c09      	lsrs	r1, r1, #16
 8001bb8:	4688      	mov	r8, r1
 8001bba:	0029      	movs	r1, r5
 8001bbc:	0c25      	lsrs	r5, r4, #16
 8001bbe:	0424      	lsls	r4, r4, #16
 8001bc0:	4441      	add	r1, r8
 8001bc2:	0c24      	lsrs	r4, r4, #16
 8001bc4:	9105      	str	r1, [sp, #20]
 8001bc6:	0021      	movs	r1, r4
 8001bc8:	4341      	muls	r1, r0
 8001bca:	4688      	mov	r8, r1
 8001bcc:	0021      	movs	r1, r4
 8001bce:	4379      	muls	r1, r7
 8001bd0:	468a      	mov	sl, r1
 8001bd2:	4368      	muls	r0, r5
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4450      	add	r0, sl
 8001bd8:	4681      	mov	r9, r0
 8001bda:	0c08      	lsrs	r0, r1, #16
 8001bdc:	4448      	add	r0, r9
 8001bde:	436f      	muls	r7, r5
 8001be0:	4582      	cmp	sl, r0
 8001be2:	d903      	bls.n	8001bec <__aeabi_dmul+0x278>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0249      	lsls	r1, r1, #9
 8001be8:	4689      	mov	r9, r1
 8001bea:	444f      	add	r7, r9
 8001bec:	0c01      	lsrs	r1, r0, #16
 8001bee:	4689      	mov	r9, r1
 8001bf0:	0039      	movs	r1, r7
 8001bf2:	4449      	add	r1, r9
 8001bf4:	9102      	str	r1, [sp, #8]
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	040f      	lsls	r7, r1, #16
 8001bfa:	9904      	ldr	r1, [sp, #16]
 8001bfc:	0c3f      	lsrs	r7, r7, #16
 8001bfe:	4688      	mov	r8, r1
 8001c00:	0400      	lsls	r0, r0, #16
 8001c02:	19c0      	adds	r0, r0, r7
 8001c04:	4480      	add	r8, r0
 8001c06:	4641      	mov	r1, r8
 8001c08:	9104      	str	r1, [sp, #16]
 8001c0a:	4659      	mov	r1, fp
 8001c0c:	0c0f      	lsrs	r7, r1, #16
 8001c0e:	0409      	lsls	r1, r1, #16
 8001c10:	0c09      	lsrs	r1, r1, #16
 8001c12:	4688      	mov	r8, r1
 8001c14:	4359      	muls	r1, r3
 8001c16:	468a      	mov	sl, r1
 8001c18:	0039      	movs	r1, r7
 8001c1a:	4351      	muls	r1, r2
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	4641      	mov	r1, r8
 8001c20:	434a      	muls	r2, r1
 8001c22:	4651      	mov	r1, sl
 8001c24:	0c09      	lsrs	r1, r1, #16
 8001c26:	468b      	mov	fp, r1
 8001c28:	437b      	muls	r3, r7
 8001c2a:	18d2      	adds	r2, r2, r3
 8001c2c:	445a      	add	r2, fp
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d903      	bls.n	8001c3a <__aeabi_dmul+0x2c6>
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	025b      	lsls	r3, r3, #9
 8001c36:	469b      	mov	fp, r3
 8001c38:	44d9      	add	r9, fp
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	0409      	lsls	r1, r1, #16
 8001c3e:	0c09      	lsrs	r1, r1, #16
 8001c40:	468a      	mov	sl, r1
 8001c42:	4641      	mov	r1, r8
 8001c44:	4361      	muls	r1, r4
 8001c46:	437c      	muls	r4, r7
 8001c48:	0c13      	lsrs	r3, r2, #16
 8001c4a:	0412      	lsls	r2, r2, #16
 8001c4c:	444b      	add	r3, r9
 8001c4e:	4452      	add	r2, sl
 8001c50:	46a1      	mov	r9, r4
 8001c52:	468a      	mov	sl, r1
 8001c54:	003c      	movs	r4, r7
 8001c56:	4641      	mov	r1, r8
 8001c58:	436c      	muls	r4, r5
 8001c5a:	434d      	muls	r5, r1
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	444d      	add	r5, r9
 8001c60:	0c0f      	lsrs	r7, r1, #16
 8001c62:	197d      	adds	r5, r7, r5
 8001c64:	45a9      	cmp	r9, r5
 8001c66:	d903      	bls.n	8001c70 <__aeabi_dmul+0x2fc>
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0249      	lsls	r1, r1, #9
 8001c6c:	4688      	mov	r8, r1
 8001c6e:	4444      	add	r4, r8
 8001c70:	9f04      	ldr	r7, [sp, #16]
 8001c72:	9903      	ldr	r1, [sp, #12]
 8001c74:	46b8      	mov	r8, r7
 8001c76:	4441      	add	r1, r8
 8001c78:	468b      	mov	fp, r1
 8001c7a:	4583      	cmp	fp, r0
 8001c7c:	4180      	sbcs	r0, r0
 8001c7e:	4241      	negs	r1, r0
 8001c80:	4688      	mov	r8, r1
 8001c82:	4651      	mov	r1, sl
 8001c84:	0408      	lsls	r0, r1, #16
 8001c86:	042f      	lsls	r7, r5, #16
 8001c88:	0c00      	lsrs	r0, r0, #16
 8001c8a:	183f      	adds	r7, r7, r0
 8001c8c:	4658      	mov	r0, fp
 8001c8e:	9902      	ldr	r1, [sp, #8]
 8001c90:	1810      	adds	r0, r2, r0
 8001c92:	4689      	mov	r9, r1
 8001c94:	4290      	cmp	r0, r2
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	444f      	add	r7, r9
 8001c9a:	46ba      	mov	sl, r7
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	4693      	mov	fp, r2
 8001ca2:	44c2      	add	sl, r8
 8001ca4:	44d1      	add	r9, sl
 8001ca6:	44cb      	add	fp, r9
 8001ca8:	428f      	cmp	r7, r1
 8001caa:	41bf      	sbcs	r7, r7
 8001cac:	45c2      	cmp	sl, r8
 8001cae:	4189      	sbcs	r1, r1
 8001cb0:	4599      	cmp	r9, r3
 8001cb2:	419b      	sbcs	r3, r3
 8001cb4:	4593      	cmp	fp, r2
 8001cb6:	4192      	sbcs	r2, r2
 8001cb8:	427f      	negs	r7, r7
 8001cba:	4249      	negs	r1, r1
 8001cbc:	0c2d      	lsrs	r5, r5, #16
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	430f      	orrs	r7, r1
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	197f      	adds	r7, r7, r5
 8001cc8:	18ff      	adds	r7, r7, r3
 8001cca:	465b      	mov	r3, fp
 8001ccc:	193c      	adds	r4, r7, r4
 8001cce:	0ddb      	lsrs	r3, r3, #23
 8001cd0:	9a05      	ldr	r2, [sp, #20]
 8001cd2:	0264      	lsls	r4, r4, #9
 8001cd4:	431c      	orrs	r4, r3
 8001cd6:	0243      	lsls	r3, r0, #9
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	1e5d      	subs	r5, r3, #1
 8001cdc:	41ab      	sbcs	r3, r5
 8001cde:	465a      	mov	r2, fp
 8001ce0:	0dc0      	lsrs	r0, r0, #23
 8001ce2:	4303      	orrs	r3, r0
 8001ce4:	0252      	lsls	r2, r2, #9
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	01e2      	lsls	r2, r4, #7
 8001cea:	d556      	bpl.n	8001d9a <__aeabi_dmul+0x426>
 8001cec:	2001      	movs	r0, #1
 8001cee:	085a      	lsrs	r2, r3, #1
 8001cf0:	4003      	ands	r3, r0
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	07e2      	lsls	r2, r4, #31
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	0864      	lsrs	r4, r4, #1
 8001cfa:	485a      	ldr	r0, [pc, #360]	; (8001e64 <__aeabi_dmul+0x4f0>)
 8001cfc:	4460      	add	r0, ip
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	dd4d      	ble.n	8001d9e <__aeabi_dmul+0x42a>
 8001d02:	075a      	lsls	r2, r3, #29
 8001d04:	d009      	beq.n	8001d1a <__aeabi_dmul+0x3a6>
 8001d06:	220f      	movs	r2, #15
 8001d08:	401a      	ands	r2, r3
 8001d0a:	2a04      	cmp	r2, #4
 8001d0c:	d005      	beq.n	8001d1a <__aeabi_dmul+0x3a6>
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	429a      	cmp	r2, r3
 8001d12:	419b      	sbcs	r3, r3
 8001d14:	425b      	negs	r3, r3
 8001d16:	18e4      	adds	r4, r4, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	01e2      	lsls	r2, r4, #7
 8001d1c:	d504      	bpl.n	8001d28 <__aeabi_dmul+0x3b4>
 8001d1e:	2080      	movs	r0, #128	; 0x80
 8001d20:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <__aeabi_dmul+0x4f4>)
 8001d22:	00c0      	lsls	r0, r0, #3
 8001d24:	4014      	ands	r4, r2
 8001d26:	4460      	add	r0, ip
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <__aeabi_dmul+0x4f8>)
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	dd00      	ble.n	8001d30 <__aeabi_dmul+0x3bc>
 8001d2e:	e6e3      	b.n	8001af8 <__aeabi_dmul+0x184>
 8001d30:	2501      	movs	r5, #1
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	0762      	lsls	r2, r4, #29
 8001d36:	431a      	orrs	r2, r3
 8001d38:	0264      	lsls	r4, r4, #9
 8001d3a:	9b01      	ldr	r3, [sp, #4]
 8001d3c:	4691      	mov	r9, r2
 8001d3e:	0b22      	lsrs	r2, r4, #12
 8001d40:	0544      	lsls	r4, r0, #21
 8001d42:	0d64      	lsrs	r4, r4, #21
 8001d44:	401d      	ands	r5, r3
 8001d46:	e67c      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	4659      	mov	r1, fp
 8001d4c:	0312      	lsls	r2, r2, #12
 8001d4e:	4211      	tst	r1, r2
 8001d50:	d008      	beq.n	8001d64 <__aeabi_dmul+0x3f0>
 8001d52:	4214      	tst	r4, r2
 8001d54:	d106      	bne.n	8001d64 <__aeabi_dmul+0x3f0>
 8001d56:	4322      	orrs	r2, r4
 8001d58:	0312      	lsls	r2, r2, #12
 8001d5a:	0b12      	lsrs	r2, r2, #12
 8001d5c:	4645      	mov	r5, r8
 8001d5e:	4699      	mov	r9, r3
 8001d60:	4c43      	ldr	r4, [pc, #268]	; (8001e70 <__aeabi_dmul+0x4fc>)
 8001d62:	e66e      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001d64:	465b      	mov	r3, fp
 8001d66:	431a      	orrs	r2, r3
 8001d68:	0312      	lsls	r2, r2, #12
 8001d6a:	0b12      	lsrs	r2, r2, #12
 8001d6c:	4c40      	ldr	r4, [pc, #256]	; (8001e70 <__aeabi_dmul+0x4fc>)
 8001d6e:	e668      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001d70:	0003      	movs	r3, r0
 8001d72:	4654      	mov	r4, sl
 8001d74:	3b28      	subs	r3, #40	; 0x28
 8001d76:	409c      	lsls	r4, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e6b9      	b.n	8001af0 <__aeabi_dmul+0x17c>
 8001d7c:	f000 fd1a 	bl	80027b4 <__clzsi2>
 8001d80:	3020      	adds	r0, #32
 8001d82:	e6a6      	b.n	8001ad2 <__aeabi_dmul+0x15e>
 8001d84:	0003      	movs	r3, r0
 8001d86:	3b28      	subs	r3, #40	; 0x28
 8001d88:	409f      	lsls	r7, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	46bb      	mov	fp, r7
 8001d8e:	4699      	mov	r9, r3
 8001d90:	e68a      	b.n	8001aa8 <__aeabi_dmul+0x134>
 8001d92:	f000 fd0f 	bl	80027b4 <__clzsi2>
 8001d96:	3020      	adds	r0, #32
 8001d98:	e674      	b.n	8001a84 <__aeabi_dmul+0x110>
 8001d9a:	46b4      	mov	ip, r6
 8001d9c:	e7ad      	b.n	8001cfa <__aeabi_dmul+0x386>
 8001d9e:	2501      	movs	r5, #1
 8001da0:	1a2a      	subs	r2, r5, r0
 8001da2:	2a38      	cmp	r2, #56	; 0x38
 8001da4:	dd06      	ble.n	8001db4 <__aeabi_dmul+0x440>
 8001da6:	9b01      	ldr	r3, [sp, #4]
 8001da8:	2400      	movs	r4, #0
 8001daa:	401d      	ands	r5, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	2200      	movs	r2, #0
 8001db0:	4699      	mov	r9, r3
 8001db2:	e646      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001db4:	2a1f      	cmp	r2, #31
 8001db6:	dc21      	bgt.n	8001dfc <__aeabi_dmul+0x488>
 8001db8:	2520      	movs	r5, #32
 8001dba:	0020      	movs	r0, r4
 8001dbc:	1aad      	subs	r5, r5, r2
 8001dbe:	001e      	movs	r6, r3
 8001dc0:	40ab      	lsls	r3, r5
 8001dc2:	40a8      	lsls	r0, r5
 8001dc4:	40d6      	lsrs	r6, r2
 8001dc6:	1e5d      	subs	r5, r3, #1
 8001dc8:	41ab      	sbcs	r3, r5
 8001dca:	4330      	orrs	r0, r6
 8001dcc:	4318      	orrs	r0, r3
 8001dce:	40d4      	lsrs	r4, r2
 8001dd0:	0743      	lsls	r3, r0, #29
 8001dd2:	d009      	beq.n	8001de8 <__aeabi_dmul+0x474>
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d005      	beq.n	8001de8 <__aeabi_dmul+0x474>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	1d18      	adds	r0, r3, #4
 8001de0:	4298      	cmp	r0, r3
 8001de2:	419b      	sbcs	r3, r3
 8001de4:	425b      	negs	r3, r3
 8001de6:	18e4      	adds	r4, r4, r3
 8001de8:	0223      	lsls	r3, r4, #8
 8001dea:	d521      	bpl.n	8001e30 <__aeabi_dmul+0x4bc>
 8001dec:	2501      	movs	r5, #1
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	2401      	movs	r4, #1
 8001df2:	401d      	ands	r5, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	2200      	movs	r2, #0
 8001df8:	4699      	mov	r9, r3
 8001dfa:	e622      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001dfc:	251f      	movs	r5, #31
 8001dfe:	0021      	movs	r1, r4
 8001e00:	426d      	negs	r5, r5
 8001e02:	1a28      	subs	r0, r5, r0
 8001e04:	40c1      	lsrs	r1, r0
 8001e06:	0008      	movs	r0, r1
 8001e08:	2a20      	cmp	r2, #32
 8001e0a:	d01d      	beq.n	8001e48 <__aeabi_dmul+0x4d4>
 8001e0c:	355f      	adds	r5, #95	; 0x5f
 8001e0e:	1aaa      	subs	r2, r5, r2
 8001e10:	4094      	lsls	r4, r2
 8001e12:	4323      	orrs	r3, r4
 8001e14:	1e5c      	subs	r4, r3, #1
 8001e16:	41a3      	sbcs	r3, r4
 8001e18:	2507      	movs	r5, #7
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	401d      	ands	r5, r3
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	d009      	beq.n	8001e38 <__aeabi_dmul+0x4c4>
 8001e24:	220f      	movs	r2, #15
 8001e26:	2400      	movs	r4, #0
 8001e28:	401a      	ands	r2, r3
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2a04      	cmp	r2, #4
 8001e2e:	d1d6      	bne.n	8001dde <__aeabi_dmul+0x46a>
 8001e30:	0003      	movs	r3, r0
 8001e32:	0765      	lsls	r5, r4, #29
 8001e34:	0264      	lsls	r4, r4, #9
 8001e36:	0b22      	lsrs	r2, r4, #12
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	432b      	orrs	r3, r5
 8001e3c:	2501      	movs	r5, #1
 8001e3e:	4699      	mov	r9, r3
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	2400      	movs	r4, #0
 8001e44:	401d      	ands	r5, r3
 8001e46:	e5fc      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001e48:	2400      	movs	r4, #0
 8001e4a:	e7e2      	b.n	8001e12 <__aeabi_dmul+0x49e>
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	2501      	movs	r5, #1
 8001e50:	0312      	lsls	r2, r2, #12
 8001e52:	4322      	orrs	r2, r4
 8001e54:	9901      	ldr	r1, [sp, #4]
 8001e56:	0312      	lsls	r2, r2, #12
 8001e58:	0b12      	lsrs	r2, r2, #12
 8001e5a:	400d      	ands	r5, r1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	4c04      	ldr	r4, [pc, #16]	; (8001e70 <__aeabi_dmul+0x4fc>)
 8001e60:	e5ef      	b.n	8001a42 <__aeabi_dmul+0xce>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	000003ff 	.word	0x000003ff
 8001e68:	feffffff 	.word	0xfeffffff
 8001e6c:	000007fe 	.word	0x000007fe
 8001e70:	000007ff 	.word	0x000007ff

08001e74 <__aeabi_dsub>:
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	4646      	mov	r6, r8
 8001e78:	46d6      	mov	lr, sl
 8001e7a:	464f      	mov	r7, r9
 8001e7c:	030c      	lsls	r4, r1, #12
 8001e7e:	b5c0      	push	{r6, r7, lr}
 8001e80:	0fcd      	lsrs	r5, r1, #31
 8001e82:	004e      	lsls	r6, r1, #1
 8001e84:	0a61      	lsrs	r1, r4, #9
 8001e86:	0f44      	lsrs	r4, r0, #29
 8001e88:	430c      	orrs	r4, r1
 8001e8a:	00c1      	lsls	r1, r0, #3
 8001e8c:	0058      	lsls	r0, r3, #1
 8001e8e:	0d40      	lsrs	r0, r0, #21
 8001e90:	4684      	mov	ip, r0
 8001e92:	468a      	mov	sl, r1
 8001e94:	000f      	movs	r7, r1
 8001e96:	0319      	lsls	r1, r3, #12
 8001e98:	0f50      	lsrs	r0, r2, #29
 8001e9a:	0a49      	lsrs	r1, r1, #9
 8001e9c:	4301      	orrs	r1, r0
 8001e9e:	48c6      	ldr	r0, [pc, #792]	; (80021b8 <__aeabi_dsub+0x344>)
 8001ea0:	0d76      	lsrs	r6, r6, #21
 8001ea2:	46a8      	mov	r8, r5
 8001ea4:	0fdb      	lsrs	r3, r3, #31
 8001ea6:	00d2      	lsls	r2, r2, #3
 8001ea8:	4584      	cmp	ip, r0
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x3a>
 8001eac:	e0d8      	b.n	8002060 <__aeabi_dsub+0x1ec>
 8001eae:	2001      	movs	r0, #1
 8001eb0:	4043      	eors	r3, r0
 8001eb2:	42ab      	cmp	r3, r5
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_dsub+0x44>
 8001eb6:	e0a6      	b.n	8002006 <__aeabi_dsub+0x192>
 8001eb8:	4660      	mov	r0, ip
 8001eba:	1a35      	subs	r5, r6, r0
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	dc00      	bgt.n	8001ec2 <__aeabi_dsub+0x4e>
 8001ec0:	e105      	b.n	80020ce <__aeabi_dsub+0x25a>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d110      	bne.n	8001ee8 <__aeabi_dsub+0x74>
 8001ec6:	000b      	movs	r3, r1
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x5a>
 8001ecc:	e0d7      	b.n	800207e <__aeabi_dsub+0x20a>
 8001ece:	1e6b      	subs	r3, r5, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_dsub+0x62>
 8001ed4:	e14b      	b.n	800216e <__aeabi_dsub+0x2fa>
 8001ed6:	4653      	mov	r3, sl
 8001ed8:	1a9f      	subs	r7, r3, r2
 8001eda:	45ba      	cmp	sl, r7
 8001edc:	4180      	sbcs	r0, r0
 8001ede:	1a64      	subs	r4, r4, r1
 8001ee0:	4240      	negs	r0, r0
 8001ee2:	1a24      	subs	r4, r4, r0
 8001ee4:	2601      	movs	r6, #1
 8001ee6:	e01e      	b.n	8001f26 <__aeabi_dsub+0xb2>
 8001ee8:	4bb3      	ldr	r3, [pc, #716]	; (80021b8 <__aeabi_dsub+0x344>)
 8001eea:	429e      	cmp	r6, r3
 8001eec:	d048      	beq.n	8001f80 <__aeabi_dsub+0x10c>
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	4319      	orrs	r1, r3
 8001ef4:	2d38      	cmp	r5, #56	; 0x38
 8001ef6:	dd00      	ble.n	8001efa <__aeabi_dsub+0x86>
 8001ef8:	e119      	b.n	800212e <__aeabi_dsub+0x2ba>
 8001efa:	2d1f      	cmp	r5, #31
 8001efc:	dd00      	ble.n	8001f00 <__aeabi_dsub+0x8c>
 8001efe:	e14c      	b.n	800219a <__aeabi_dsub+0x326>
 8001f00:	2320      	movs	r3, #32
 8001f02:	000f      	movs	r7, r1
 8001f04:	1b5b      	subs	r3, r3, r5
 8001f06:	0010      	movs	r0, r2
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	409f      	lsls	r7, r3
 8001f0c:	40e8      	lsrs	r0, r5
 8001f0e:	1e53      	subs	r3, r2, #1
 8001f10:	419a      	sbcs	r2, r3
 8001f12:	40e9      	lsrs	r1, r5
 8001f14:	4307      	orrs	r7, r0
 8001f16:	4317      	orrs	r7, r2
 8001f18:	4653      	mov	r3, sl
 8001f1a:	1bdf      	subs	r7, r3, r7
 8001f1c:	1a61      	subs	r1, r4, r1
 8001f1e:	45ba      	cmp	sl, r7
 8001f20:	41a4      	sbcs	r4, r4
 8001f22:	4264      	negs	r4, r4
 8001f24:	1b0c      	subs	r4, r1, r4
 8001f26:	0223      	lsls	r3, r4, #8
 8001f28:	d400      	bmi.n	8001f2c <__aeabi_dsub+0xb8>
 8001f2a:	e0c5      	b.n	80020b8 <__aeabi_dsub+0x244>
 8001f2c:	0264      	lsls	r4, r4, #9
 8001f2e:	0a65      	lsrs	r5, r4, #9
 8001f30:	2d00      	cmp	r5, #0
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0xc2>
 8001f34:	e0f6      	b.n	8002124 <__aeabi_dsub+0x2b0>
 8001f36:	0028      	movs	r0, r5
 8001f38:	f000 fc3c 	bl	80027b4 <__clzsi2>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	2b1f      	cmp	r3, #31
 8001f42:	dd00      	ble.n	8001f46 <__aeabi_dsub+0xd2>
 8001f44:	e0e9      	b.n	800211a <__aeabi_dsub+0x2a6>
 8001f46:	2220      	movs	r2, #32
 8001f48:	003c      	movs	r4, r7
 8001f4a:	1ad2      	subs	r2, r2, r3
 8001f4c:	409d      	lsls	r5, r3
 8001f4e:	40d4      	lsrs	r4, r2
 8001f50:	409f      	lsls	r7, r3
 8001f52:	4325      	orrs	r5, r4
 8001f54:	429e      	cmp	r6, r3
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dsub+0xe6>
 8001f58:	e0db      	b.n	8002112 <__aeabi_dsub+0x29e>
 8001f5a:	1b9e      	subs	r6, r3, r6
 8001f5c:	1c73      	adds	r3, r6, #1
 8001f5e:	2b1f      	cmp	r3, #31
 8001f60:	dd00      	ble.n	8001f64 <__aeabi_dsub+0xf0>
 8001f62:	e10a      	b.n	800217a <__aeabi_dsub+0x306>
 8001f64:	2220      	movs	r2, #32
 8001f66:	0038      	movs	r0, r7
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	4097      	lsls	r7, r2
 8001f6e:	002c      	movs	r4, r5
 8001f70:	4091      	lsls	r1, r2
 8001f72:	40d8      	lsrs	r0, r3
 8001f74:	1e7a      	subs	r2, r7, #1
 8001f76:	4197      	sbcs	r7, r2
 8001f78:	40dc      	lsrs	r4, r3
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	4301      	orrs	r1, r0
 8001f7e:	430f      	orrs	r7, r1
 8001f80:	077b      	lsls	r3, r7, #29
 8001f82:	d009      	beq.n	8001f98 <__aeabi_dsub+0x124>
 8001f84:	230f      	movs	r3, #15
 8001f86:	403b      	ands	r3, r7
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d005      	beq.n	8001f98 <__aeabi_dsub+0x124>
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	42bb      	cmp	r3, r7
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	427f      	negs	r7, r7
 8001f94:	19e4      	adds	r4, r4, r7
 8001f96:	001f      	movs	r7, r3
 8001f98:	0223      	lsls	r3, r4, #8
 8001f9a:	d525      	bpl.n	8001fe8 <__aeabi_dsub+0x174>
 8001f9c:	4b86      	ldr	r3, [pc, #536]	; (80021b8 <__aeabi_dsub+0x344>)
 8001f9e:	3601      	adds	r6, #1
 8001fa0:	429e      	cmp	r6, r3
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x132>
 8001fa4:	e0af      	b.n	8002106 <__aeabi_dsub+0x292>
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <__aeabi_dsub+0x348>)
 8001fa8:	2501      	movs	r5, #1
 8001faa:	401c      	ands	r4, r3
 8001fac:	4643      	mov	r3, r8
 8001fae:	0762      	lsls	r2, r4, #29
 8001fb0:	08ff      	lsrs	r7, r7, #3
 8001fb2:	0264      	lsls	r4, r4, #9
 8001fb4:	0576      	lsls	r6, r6, #21
 8001fb6:	4317      	orrs	r7, r2
 8001fb8:	0b24      	lsrs	r4, r4, #12
 8001fba:	0d76      	lsrs	r6, r6, #21
 8001fbc:	401d      	ands	r5, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	0324      	lsls	r4, r4, #12
 8001fc2:	0b23      	lsrs	r3, r4, #12
 8001fc4:	0d0c      	lsrs	r4, r1, #20
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	; (80021c0 <__aeabi_dsub+0x34c>)
 8001fc8:	0524      	lsls	r4, r4, #20
 8001fca:	431c      	orrs	r4, r3
 8001fcc:	4014      	ands	r4, r2
 8001fce:	0533      	lsls	r3, r6, #20
 8001fd0:	4323      	orrs	r3, r4
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	07ed      	lsls	r5, r5, #31
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	432b      	orrs	r3, r5
 8001fda:	0038      	movs	r0, r7
 8001fdc:	0019      	movs	r1, r3
 8001fde:	bc1c      	pop	{r2, r3, r4}
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	46a2      	mov	sl, r4
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe8:	2501      	movs	r5, #1
 8001fea:	4643      	mov	r3, r8
 8001fec:	0762      	lsls	r2, r4, #29
 8001fee:	08ff      	lsrs	r7, r7, #3
 8001ff0:	4317      	orrs	r7, r2
 8001ff2:	08e4      	lsrs	r4, r4, #3
 8001ff4:	401d      	ands	r5, r3
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <__aeabi_dsub+0x344>)
 8001ff8:	429e      	cmp	r6, r3
 8001ffa:	d036      	beq.n	800206a <__aeabi_dsub+0x1f6>
 8001ffc:	0324      	lsls	r4, r4, #12
 8001ffe:	0576      	lsls	r6, r6, #21
 8002000:	0b24      	lsrs	r4, r4, #12
 8002002:	0d76      	lsrs	r6, r6, #21
 8002004:	e7db      	b.n	8001fbe <__aeabi_dsub+0x14a>
 8002006:	4663      	mov	r3, ip
 8002008:	1af3      	subs	r3, r6, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	dc00      	bgt.n	8002010 <__aeabi_dsub+0x19c>
 800200e:	e094      	b.n	800213a <__aeabi_dsub+0x2c6>
 8002010:	4660      	mov	r0, ip
 8002012:	2800      	cmp	r0, #0
 8002014:	d035      	beq.n	8002082 <__aeabi_dsub+0x20e>
 8002016:	4868      	ldr	r0, [pc, #416]	; (80021b8 <__aeabi_dsub+0x344>)
 8002018:	4286      	cmp	r6, r0
 800201a:	d0b1      	beq.n	8001f80 <__aeabi_dsub+0x10c>
 800201c:	2780      	movs	r7, #128	; 0x80
 800201e:	043f      	lsls	r7, r7, #16
 8002020:	4339      	orrs	r1, r7
 8002022:	2b38      	cmp	r3, #56	; 0x38
 8002024:	dc00      	bgt.n	8002028 <__aeabi_dsub+0x1b4>
 8002026:	e0fd      	b.n	8002224 <__aeabi_dsub+0x3b0>
 8002028:	430a      	orrs	r2, r1
 800202a:	0017      	movs	r7, r2
 800202c:	2100      	movs	r1, #0
 800202e:	1e7a      	subs	r2, r7, #1
 8002030:	4197      	sbcs	r7, r2
 8002032:	4457      	add	r7, sl
 8002034:	4557      	cmp	r7, sl
 8002036:	4180      	sbcs	r0, r0
 8002038:	1909      	adds	r1, r1, r4
 800203a:	4244      	negs	r4, r0
 800203c:	190c      	adds	r4, r1, r4
 800203e:	0223      	lsls	r3, r4, #8
 8002040:	d53a      	bpl.n	80020b8 <__aeabi_dsub+0x244>
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <__aeabi_dsub+0x344>)
 8002044:	3601      	adds	r6, #1
 8002046:	429e      	cmp	r6, r3
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x1d8>
 800204a:	e14b      	b.n	80022e4 <__aeabi_dsub+0x470>
 800204c:	2201      	movs	r2, #1
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <__aeabi_dsub+0x348>)
 8002050:	401c      	ands	r4, r3
 8002052:	087b      	lsrs	r3, r7, #1
 8002054:	4017      	ands	r7, r2
 8002056:	431f      	orrs	r7, r3
 8002058:	07e2      	lsls	r2, r4, #31
 800205a:	4317      	orrs	r7, r2
 800205c:	0864      	lsrs	r4, r4, #1
 800205e:	e78f      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002060:	0008      	movs	r0, r1
 8002062:	4310      	orrs	r0, r2
 8002064:	d000      	beq.n	8002068 <__aeabi_dsub+0x1f4>
 8002066:	e724      	b.n	8001eb2 <__aeabi_dsub+0x3e>
 8002068:	e721      	b.n	8001eae <__aeabi_dsub+0x3a>
 800206a:	0023      	movs	r3, r4
 800206c:	433b      	orrs	r3, r7
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x1fe>
 8002070:	e1b9      	b.n	80023e6 <__aeabi_dsub+0x572>
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	0312      	lsls	r2, r2, #12
 8002076:	4314      	orrs	r4, r2
 8002078:	0324      	lsls	r4, r4, #12
 800207a:	0b24      	lsrs	r4, r4, #12
 800207c:	e79f      	b.n	8001fbe <__aeabi_dsub+0x14a>
 800207e:	002e      	movs	r6, r5
 8002080:	e77e      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002082:	0008      	movs	r0, r1
 8002084:	4310      	orrs	r0, r2
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x216>
 8002088:	e0ca      	b.n	8002220 <__aeabi_dsub+0x3ac>
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	4684      	mov	ip, r0
 800208e:	2800      	cmp	r0, #0
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x220>
 8002092:	e0e7      	b.n	8002264 <__aeabi_dsub+0x3f0>
 8002094:	4452      	add	r2, sl
 8002096:	4552      	cmp	r2, sl
 8002098:	4180      	sbcs	r0, r0
 800209a:	1864      	adds	r4, r4, r1
 800209c:	4240      	negs	r0, r0
 800209e:	1824      	adds	r4, r4, r0
 80020a0:	0017      	movs	r7, r2
 80020a2:	2601      	movs	r6, #1
 80020a4:	0223      	lsls	r3, r4, #8
 80020a6:	d507      	bpl.n	80020b8 <__aeabi_dsub+0x244>
 80020a8:	2602      	movs	r6, #2
 80020aa:	e7cf      	b.n	800204c <__aeabi_dsub+0x1d8>
 80020ac:	4664      	mov	r4, ip
 80020ae:	432c      	orrs	r4, r5
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x240>
 80020b2:	e1b3      	b.n	800241c <__aeabi_dsub+0x5a8>
 80020b4:	002c      	movs	r4, r5
 80020b6:	4667      	mov	r7, ip
 80020b8:	077b      	lsls	r3, r7, #29
 80020ba:	d000      	beq.n	80020be <__aeabi_dsub+0x24a>
 80020bc:	e762      	b.n	8001f84 <__aeabi_dsub+0x110>
 80020be:	0763      	lsls	r3, r4, #29
 80020c0:	08ff      	lsrs	r7, r7, #3
 80020c2:	431f      	orrs	r7, r3
 80020c4:	2501      	movs	r5, #1
 80020c6:	4643      	mov	r3, r8
 80020c8:	08e4      	lsrs	r4, r4, #3
 80020ca:	401d      	ands	r5, r3
 80020cc:	e793      	b.n	8001ff6 <__aeabi_dsub+0x182>
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	d178      	bne.n	80021c4 <__aeabi_dsub+0x350>
 80020d2:	1c75      	adds	r5, r6, #1
 80020d4:	056d      	lsls	r5, r5, #21
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	2d01      	cmp	r5, #1
 80020da:	dc00      	bgt.n	80020de <__aeabi_dsub+0x26a>
 80020dc:	e0f2      	b.n	80022c4 <__aeabi_dsub+0x450>
 80020de:	4650      	mov	r0, sl
 80020e0:	1a80      	subs	r0, r0, r2
 80020e2:	4582      	cmp	sl, r0
 80020e4:	41bf      	sbcs	r7, r7
 80020e6:	1a65      	subs	r5, r4, r1
 80020e8:	427f      	negs	r7, r7
 80020ea:	1bed      	subs	r5, r5, r7
 80020ec:	4684      	mov	ip, r0
 80020ee:	0228      	lsls	r0, r5, #8
 80020f0:	d400      	bmi.n	80020f4 <__aeabi_dsub+0x280>
 80020f2:	e08c      	b.n	800220e <__aeabi_dsub+0x39a>
 80020f4:	4650      	mov	r0, sl
 80020f6:	1a17      	subs	r7, r2, r0
 80020f8:	42ba      	cmp	r2, r7
 80020fa:	4192      	sbcs	r2, r2
 80020fc:	1b0c      	subs	r4, r1, r4
 80020fe:	4255      	negs	r5, r2
 8002100:	1b65      	subs	r5, r4, r5
 8002102:	4698      	mov	r8, r3
 8002104:	e714      	b.n	8001f30 <__aeabi_dsub+0xbc>
 8002106:	2501      	movs	r5, #1
 8002108:	4643      	mov	r3, r8
 800210a:	2400      	movs	r4, #0
 800210c:	401d      	ands	r5, r3
 800210e:	2700      	movs	r7, #0
 8002110:	e755      	b.n	8001fbe <__aeabi_dsub+0x14a>
 8002112:	4c2a      	ldr	r4, [pc, #168]	; (80021bc <__aeabi_dsub+0x348>)
 8002114:	1af6      	subs	r6, r6, r3
 8002116:	402c      	ands	r4, r5
 8002118:	e732      	b.n	8001f80 <__aeabi_dsub+0x10c>
 800211a:	003d      	movs	r5, r7
 800211c:	3828      	subs	r0, #40	; 0x28
 800211e:	4085      	lsls	r5, r0
 8002120:	2700      	movs	r7, #0
 8002122:	e717      	b.n	8001f54 <__aeabi_dsub+0xe0>
 8002124:	0038      	movs	r0, r7
 8002126:	f000 fb45 	bl	80027b4 <__clzsi2>
 800212a:	3020      	adds	r0, #32
 800212c:	e706      	b.n	8001f3c <__aeabi_dsub+0xc8>
 800212e:	430a      	orrs	r2, r1
 8002130:	0017      	movs	r7, r2
 8002132:	2100      	movs	r1, #0
 8002134:	1e7a      	subs	r2, r7, #1
 8002136:	4197      	sbcs	r7, r2
 8002138:	e6ee      	b.n	8001f18 <__aeabi_dsub+0xa4>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x2cc>
 800213e:	e0e5      	b.n	800230c <__aeabi_dsub+0x498>
 8002140:	1c73      	adds	r3, r6, #1
 8002142:	469c      	mov	ip, r3
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	2b01      	cmp	r3, #1
 800214a:	dc00      	bgt.n	800214e <__aeabi_dsub+0x2da>
 800214c:	e09f      	b.n	800228e <__aeabi_dsub+0x41a>
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <__aeabi_dsub+0x344>)
 8002150:	459c      	cmp	ip, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2e2>
 8002154:	e0c5      	b.n	80022e2 <__aeabi_dsub+0x46e>
 8002156:	4452      	add	r2, sl
 8002158:	4552      	cmp	r2, sl
 800215a:	4180      	sbcs	r0, r0
 800215c:	1864      	adds	r4, r4, r1
 800215e:	4240      	negs	r0, r0
 8002160:	1824      	adds	r4, r4, r0
 8002162:	07e7      	lsls	r7, r4, #31
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	4317      	orrs	r7, r2
 8002168:	0864      	lsrs	r4, r4, #1
 800216a:	4666      	mov	r6, ip
 800216c:	e708      	b.n	8001f80 <__aeabi_dsub+0x10c>
 800216e:	4812      	ldr	r0, [pc, #72]	; (80021b8 <__aeabi_dsub+0x344>)
 8002170:	4285      	cmp	r5, r0
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x302>
 8002174:	e085      	b.n	8002282 <__aeabi_dsub+0x40e>
 8002176:	001d      	movs	r5, r3
 8002178:	e6bc      	b.n	8001ef4 <__aeabi_dsub+0x80>
 800217a:	0029      	movs	r1, r5
 800217c:	3e1f      	subs	r6, #31
 800217e:	40f1      	lsrs	r1, r6
 8002180:	2b20      	cmp	r3, #32
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x312>
 8002184:	e07f      	b.n	8002286 <__aeabi_dsub+0x412>
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	409d      	lsls	r5, r3
 800218c:	432f      	orrs	r7, r5
 800218e:	1e7d      	subs	r5, r7, #1
 8002190:	41af      	sbcs	r7, r5
 8002192:	2400      	movs	r4, #0
 8002194:	430f      	orrs	r7, r1
 8002196:	2600      	movs	r6, #0
 8002198:	e78e      	b.n	80020b8 <__aeabi_dsub+0x244>
 800219a:	002b      	movs	r3, r5
 800219c:	000f      	movs	r7, r1
 800219e:	3b20      	subs	r3, #32
 80021a0:	40df      	lsrs	r7, r3
 80021a2:	2d20      	cmp	r5, #32
 80021a4:	d071      	beq.n	800228a <__aeabi_dsub+0x416>
 80021a6:	2340      	movs	r3, #64	; 0x40
 80021a8:	1b5d      	subs	r5, r3, r5
 80021aa:	40a9      	lsls	r1, r5
 80021ac:	430a      	orrs	r2, r1
 80021ae:	1e51      	subs	r1, r2, #1
 80021b0:	418a      	sbcs	r2, r1
 80021b2:	2100      	movs	r1, #0
 80021b4:	4317      	orrs	r7, r2
 80021b6:	e6af      	b.n	8001f18 <__aeabi_dsub+0xa4>
 80021b8:	000007ff 	.word	0x000007ff
 80021bc:	ff7fffff 	.word	0xff7fffff
 80021c0:	800fffff 	.word	0x800fffff
 80021c4:	2e00      	cmp	r6, #0
 80021c6:	d03e      	beq.n	8002246 <__aeabi_dsub+0x3d2>
 80021c8:	4eb3      	ldr	r6, [pc, #716]	; (8002498 <__aeabi_dsub+0x624>)
 80021ca:	45b4      	cmp	ip, r6
 80021cc:	d045      	beq.n	800225a <__aeabi_dsub+0x3e6>
 80021ce:	2680      	movs	r6, #128	; 0x80
 80021d0:	0436      	lsls	r6, r6, #16
 80021d2:	426d      	negs	r5, r5
 80021d4:	4334      	orrs	r4, r6
 80021d6:	2d38      	cmp	r5, #56	; 0x38
 80021d8:	dd00      	ble.n	80021dc <__aeabi_dsub+0x368>
 80021da:	e0a8      	b.n	800232e <__aeabi_dsub+0x4ba>
 80021dc:	2d1f      	cmp	r5, #31
 80021de:	dd00      	ble.n	80021e2 <__aeabi_dsub+0x36e>
 80021e0:	e11f      	b.n	8002422 <__aeabi_dsub+0x5ae>
 80021e2:	2620      	movs	r6, #32
 80021e4:	0027      	movs	r7, r4
 80021e6:	4650      	mov	r0, sl
 80021e8:	1b76      	subs	r6, r6, r5
 80021ea:	40b7      	lsls	r7, r6
 80021ec:	40e8      	lsrs	r0, r5
 80021ee:	4307      	orrs	r7, r0
 80021f0:	4650      	mov	r0, sl
 80021f2:	40b0      	lsls	r0, r6
 80021f4:	1e46      	subs	r6, r0, #1
 80021f6:	41b0      	sbcs	r0, r6
 80021f8:	40ec      	lsrs	r4, r5
 80021fa:	4338      	orrs	r0, r7
 80021fc:	1a17      	subs	r7, r2, r0
 80021fe:	42ba      	cmp	r2, r7
 8002200:	4192      	sbcs	r2, r2
 8002202:	1b0c      	subs	r4, r1, r4
 8002204:	4252      	negs	r2, r2
 8002206:	1aa4      	subs	r4, r4, r2
 8002208:	4666      	mov	r6, ip
 800220a:	4698      	mov	r8, r3
 800220c:	e68b      	b.n	8001f26 <__aeabi_dsub+0xb2>
 800220e:	4664      	mov	r4, ip
 8002210:	4667      	mov	r7, ip
 8002212:	432c      	orrs	r4, r5
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x3a4>
 8002216:	e68b      	b.n	8001f30 <__aeabi_dsub+0xbc>
 8002218:	2500      	movs	r5, #0
 800221a:	2600      	movs	r6, #0
 800221c:	2700      	movs	r7, #0
 800221e:	e6ea      	b.n	8001ff6 <__aeabi_dsub+0x182>
 8002220:	001e      	movs	r6, r3
 8002222:	e6ad      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002224:	2b1f      	cmp	r3, #31
 8002226:	dc60      	bgt.n	80022ea <__aeabi_dsub+0x476>
 8002228:	2720      	movs	r7, #32
 800222a:	1af8      	subs	r0, r7, r3
 800222c:	000f      	movs	r7, r1
 800222e:	4684      	mov	ip, r0
 8002230:	4087      	lsls	r7, r0
 8002232:	0010      	movs	r0, r2
 8002234:	40d8      	lsrs	r0, r3
 8002236:	4307      	orrs	r7, r0
 8002238:	4660      	mov	r0, ip
 800223a:	4082      	lsls	r2, r0
 800223c:	1e50      	subs	r0, r2, #1
 800223e:	4182      	sbcs	r2, r0
 8002240:	40d9      	lsrs	r1, r3
 8002242:	4317      	orrs	r7, r2
 8002244:	e6f5      	b.n	8002032 <__aeabi_dsub+0x1be>
 8002246:	0026      	movs	r6, r4
 8002248:	4650      	mov	r0, sl
 800224a:	4306      	orrs	r6, r0
 800224c:	d005      	beq.n	800225a <__aeabi_dsub+0x3e6>
 800224e:	43ed      	mvns	r5, r5
 8002250:	2d00      	cmp	r5, #0
 8002252:	d0d3      	beq.n	80021fc <__aeabi_dsub+0x388>
 8002254:	4e90      	ldr	r6, [pc, #576]	; (8002498 <__aeabi_dsub+0x624>)
 8002256:	45b4      	cmp	ip, r6
 8002258:	d1bd      	bne.n	80021d6 <__aeabi_dsub+0x362>
 800225a:	000c      	movs	r4, r1
 800225c:	0017      	movs	r7, r2
 800225e:	4666      	mov	r6, ip
 8002260:	4698      	mov	r8, r3
 8002262:	e68d      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002264:	488c      	ldr	r0, [pc, #560]	; (8002498 <__aeabi_dsub+0x624>)
 8002266:	4283      	cmp	r3, r0
 8002268:	d00b      	beq.n	8002282 <__aeabi_dsub+0x40e>
 800226a:	4663      	mov	r3, ip
 800226c:	e6d9      	b.n	8002022 <__aeabi_dsub+0x1ae>
 800226e:	2d00      	cmp	r5, #0
 8002270:	d000      	beq.n	8002274 <__aeabi_dsub+0x400>
 8002272:	e096      	b.n	80023a2 <__aeabi_dsub+0x52e>
 8002274:	0008      	movs	r0, r1
 8002276:	4310      	orrs	r0, r2
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x408>
 800227a:	e0e2      	b.n	8002442 <__aeabi_dsub+0x5ce>
 800227c:	000c      	movs	r4, r1
 800227e:	0017      	movs	r7, r2
 8002280:	4698      	mov	r8, r3
 8002282:	4e85      	ldr	r6, [pc, #532]	; (8002498 <__aeabi_dsub+0x624>)
 8002284:	e67c      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002286:	2500      	movs	r5, #0
 8002288:	e780      	b.n	800218c <__aeabi_dsub+0x318>
 800228a:	2100      	movs	r1, #0
 800228c:	e78e      	b.n	80021ac <__aeabi_dsub+0x338>
 800228e:	0023      	movs	r3, r4
 8002290:	4650      	mov	r0, sl
 8002292:	4303      	orrs	r3, r0
 8002294:	2e00      	cmp	r6, #0
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x426>
 8002298:	e0a8      	b.n	80023ec <__aeabi_dsub+0x578>
 800229a:	2b00      	cmp	r3, #0
 800229c:	d100      	bne.n	80022a0 <__aeabi_dsub+0x42c>
 800229e:	e0de      	b.n	800245e <__aeabi_dsub+0x5ea>
 80022a0:	000b      	movs	r3, r1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x434>
 80022a6:	e66b      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80022a8:	4452      	add	r2, sl
 80022aa:	4552      	cmp	r2, sl
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	1864      	adds	r4, r4, r1
 80022b0:	4240      	negs	r0, r0
 80022b2:	1824      	adds	r4, r4, r0
 80022b4:	0017      	movs	r7, r2
 80022b6:	0223      	lsls	r3, r4, #8
 80022b8:	d400      	bmi.n	80022bc <__aeabi_dsub+0x448>
 80022ba:	e6fd      	b.n	80020b8 <__aeabi_dsub+0x244>
 80022bc:	4b77      	ldr	r3, [pc, #476]	; (800249c <__aeabi_dsub+0x628>)
 80022be:	4666      	mov	r6, ip
 80022c0:	401c      	ands	r4, r3
 80022c2:	e65d      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80022c4:	0025      	movs	r5, r4
 80022c6:	4650      	mov	r0, sl
 80022c8:	4305      	orrs	r5, r0
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	d1cf      	bne.n	800226e <__aeabi_dsub+0x3fa>
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d14f      	bne.n	8002372 <__aeabi_dsub+0x4fe>
 80022d2:	000c      	movs	r4, r1
 80022d4:	4314      	orrs	r4, r2
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x466>
 80022d8:	e0a0      	b.n	800241c <__aeabi_dsub+0x5a8>
 80022da:	000c      	movs	r4, r1
 80022dc:	0017      	movs	r7, r2
 80022de:	4698      	mov	r8, r3
 80022e0:	e64e      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80022e2:	4666      	mov	r6, ip
 80022e4:	2400      	movs	r4, #0
 80022e6:	2700      	movs	r7, #0
 80022e8:	e685      	b.n	8001ff6 <__aeabi_dsub+0x182>
 80022ea:	001f      	movs	r7, r3
 80022ec:	0008      	movs	r0, r1
 80022ee:	3f20      	subs	r7, #32
 80022f0:	40f8      	lsrs	r0, r7
 80022f2:	0007      	movs	r7, r0
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d100      	bne.n	80022fa <__aeabi_dsub+0x486>
 80022f8:	e08e      	b.n	8002418 <__aeabi_dsub+0x5a4>
 80022fa:	2040      	movs	r0, #64	; 0x40
 80022fc:	1ac3      	subs	r3, r0, r3
 80022fe:	4099      	lsls	r1, r3
 8002300:	430a      	orrs	r2, r1
 8002302:	1e51      	subs	r1, r2, #1
 8002304:	418a      	sbcs	r2, r1
 8002306:	2100      	movs	r1, #0
 8002308:	4317      	orrs	r7, r2
 800230a:	e692      	b.n	8002032 <__aeabi_dsub+0x1be>
 800230c:	2e00      	cmp	r6, #0
 800230e:	d114      	bne.n	800233a <__aeabi_dsub+0x4c6>
 8002310:	0026      	movs	r6, r4
 8002312:	4650      	mov	r0, sl
 8002314:	4306      	orrs	r6, r0
 8002316:	d062      	beq.n	80023de <__aeabi_dsub+0x56a>
 8002318:	43db      	mvns	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d15c      	bne.n	80023d8 <__aeabi_dsub+0x564>
 800231e:	1887      	adds	r7, r0, r2
 8002320:	4297      	cmp	r7, r2
 8002322:	4192      	sbcs	r2, r2
 8002324:	1864      	adds	r4, r4, r1
 8002326:	4252      	negs	r2, r2
 8002328:	18a4      	adds	r4, r4, r2
 800232a:	4666      	mov	r6, ip
 800232c:	e687      	b.n	800203e <__aeabi_dsub+0x1ca>
 800232e:	4650      	mov	r0, sl
 8002330:	4320      	orrs	r0, r4
 8002332:	1e44      	subs	r4, r0, #1
 8002334:	41a0      	sbcs	r0, r4
 8002336:	2400      	movs	r4, #0
 8002338:	e760      	b.n	80021fc <__aeabi_dsub+0x388>
 800233a:	4e57      	ldr	r6, [pc, #348]	; (8002498 <__aeabi_dsub+0x624>)
 800233c:	45b4      	cmp	ip, r6
 800233e:	d04e      	beq.n	80023de <__aeabi_dsub+0x56a>
 8002340:	2680      	movs	r6, #128	; 0x80
 8002342:	0436      	lsls	r6, r6, #16
 8002344:	425b      	negs	r3, r3
 8002346:	4334      	orrs	r4, r6
 8002348:	2b38      	cmp	r3, #56	; 0x38
 800234a:	dd00      	ble.n	800234e <__aeabi_dsub+0x4da>
 800234c:	e07f      	b.n	800244e <__aeabi_dsub+0x5da>
 800234e:	2b1f      	cmp	r3, #31
 8002350:	dd00      	ble.n	8002354 <__aeabi_dsub+0x4e0>
 8002352:	e08b      	b.n	800246c <__aeabi_dsub+0x5f8>
 8002354:	2620      	movs	r6, #32
 8002356:	0027      	movs	r7, r4
 8002358:	4650      	mov	r0, sl
 800235a:	1af6      	subs	r6, r6, r3
 800235c:	40b7      	lsls	r7, r6
 800235e:	40d8      	lsrs	r0, r3
 8002360:	4307      	orrs	r7, r0
 8002362:	4650      	mov	r0, sl
 8002364:	40b0      	lsls	r0, r6
 8002366:	1e46      	subs	r6, r0, #1
 8002368:	41b0      	sbcs	r0, r6
 800236a:	4307      	orrs	r7, r0
 800236c:	40dc      	lsrs	r4, r3
 800236e:	18bf      	adds	r7, r7, r2
 8002370:	e7d6      	b.n	8002320 <__aeabi_dsub+0x4ac>
 8002372:	000d      	movs	r5, r1
 8002374:	4315      	orrs	r5, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x506>
 8002378:	e602      	b.n	8001f80 <__aeabi_dsub+0x10c>
 800237a:	4650      	mov	r0, sl
 800237c:	1a80      	subs	r0, r0, r2
 800237e:	4582      	cmp	sl, r0
 8002380:	41bf      	sbcs	r7, r7
 8002382:	1a65      	subs	r5, r4, r1
 8002384:	427f      	negs	r7, r7
 8002386:	1bed      	subs	r5, r5, r7
 8002388:	4684      	mov	ip, r0
 800238a:	0228      	lsls	r0, r5, #8
 800238c:	d400      	bmi.n	8002390 <__aeabi_dsub+0x51c>
 800238e:	e68d      	b.n	80020ac <__aeabi_dsub+0x238>
 8002390:	4650      	mov	r0, sl
 8002392:	1a17      	subs	r7, r2, r0
 8002394:	42ba      	cmp	r2, r7
 8002396:	4192      	sbcs	r2, r2
 8002398:	1b0c      	subs	r4, r1, r4
 800239a:	4252      	negs	r2, r2
 800239c:	1aa4      	subs	r4, r4, r2
 800239e:	4698      	mov	r8, r3
 80023a0:	e5ee      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80023a2:	000d      	movs	r5, r1
 80023a4:	4315      	orrs	r5, r2
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x536>
 80023a8:	e76b      	b.n	8002282 <__aeabi_dsub+0x40e>
 80023aa:	4650      	mov	r0, sl
 80023ac:	0767      	lsls	r7, r4, #29
 80023ae:	08c0      	lsrs	r0, r0, #3
 80023b0:	4307      	orrs	r7, r0
 80023b2:	2080      	movs	r0, #128	; 0x80
 80023b4:	08e4      	lsrs	r4, r4, #3
 80023b6:	0300      	lsls	r0, r0, #12
 80023b8:	4204      	tst	r4, r0
 80023ba:	d007      	beq.n	80023cc <__aeabi_dsub+0x558>
 80023bc:	08cd      	lsrs	r5, r1, #3
 80023be:	4205      	tst	r5, r0
 80023c0:	d104      	bne.n	80023cc <__aeabi_dsub+0x558>
 80023c2:	002c      	movs	r4, r5
 80023c4:	4698      	mov	r8, r3
 80023c6:	08d7      	lsrs	r7, r2, #3
 80023c8:	0749      	lsls	r1, r1, #29
 80023ca:	430f      	orrs	r7, r1
 80023cc:	0f7b      	lsrs	r3, r7, #29
 80023ce:	00e4      	lsls	r4, r4, #3
 80023d0:	431c      	orrs	r4, r3
 80023d2:	00ff      	lsls	r7, r7, #3
 80023d4:	4e30      	ldr	r6, [pc, #192]	; (8002498 <__aeabi_dsub+0x624>)
 80023d6:	e5d3      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80023d8:	4e2f      	ldr	r6, [pc, #188]	; (8002498 <__aeabi_dsub+0x624>)
 80023da:	45b4      	cmp	ip, r6
 80023dc:	d1b4      	bne.n	8002348 <__aeabi_dsub+0x4d4>
 80023de:	000c      	movs	r4, r1
 80023e0:	0017      	movs	r7, r2
 80023e2:	4666      	mov	r6, ip
 80023e4:	e5cc      	b.n	8001f80 <__aeabi_dsub+0x10c>
 80023e6:	2700      	movs	r7, #0
 80023e8:	2400      	movs	r4, #0
 80023ea:	e5e8      	b.n	8001fbe <__aeabi_dsub+0x14a>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d039      	beq.n	8002464 <__aeabi_dsub+0x5f0>
 80023f0:	000b      	movs	r3, r1
 80023f2:	4313      	orrs	r3, r2
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x584>
 80023f6:	e744      	b.n	8002282 <__aeabi_dsub+0x40e>
 80023f8:	08c0      	lsrs	r0, r0, #3
 80023fa:	0767      	lsls	r7, r4, #29
 80023fc:	4307      	orrs	r7, r0
 80023fe:	2080      	movs	r0, #128	; 0x80
 8002400:	08e4      	lsrs	r4, r4, #3
 8002402:	0300      	lsls	r0, r0, #12
 8002404:	4204      	tst	r4, r0
 8002406:	d0e1      	beq.n	80023cc <__aeabi_dsub+0x558>
 8002408:	08cb      	lsrs	r3, r1, #3
 800240a:	4203      	tst	r3, r0
 800240c:	d1de      	bne.n	80023cc <__aeabi_dsub+0x558>
 800240e:	08d7      	lsrs	r7, r2, #3
 8002410:	0749      	lsls	r1, r1, #29
 8002412:	430f      	orrs	r7, r1
 8002414:	001c      	movs	r4, r3
 8002416:	e7d9      	b.n	80023cc <__aeabi_dsub+0x558>
 8002418:	2100      	movs	r1, #0
 800241a:	e771      	b.n	8002300 <__aeabi_dsub+0x48c>
 800241c:	2500      	movs	r5, #0
 800241e:	2700      	movs	r7, #0
 8002420:	e5e9      	b.n	8001ff6 <__aeabi_dsub+0x182>
 8002422:	002e      	movs	r6, r5
 8002424:	0027      	movs	r7, r4
 8002426:	3e20      	subs	r6, #32
 8002428:	40f7      	lsrs	r7, r6
 800242a:	2d20      	cmp	r5, #32
 800242c:	d02f      	beq.n	800248e <__aeabi_dsub+0x61a>
 800242e:	2640      	movs	r6, #64	; 0x40
 8002430:	1b75      	subs	r5, r6, r5
 8002432:	40ac      	lsls	r4, r5
 8002434:	4650      	mov	r0, sl
 8002436:	4320      	orrs	r0, r4
 8002438:	1e44      	subs	r4, r0, #1
 800243a:	41a0      	sbcs	r0, r4
 800243c:	2400      	movs	r4, #0
 800243e:	4338      	orrs	r0, r7
 8002440:	e6dc      	b.n	80021fc <__aeabi_dsub+0x388>
 8002442:	2480      	movs	r4, #128	; 0x80
 8002444:	2500      	movs	r5, #0
 8002446:	0324      	lsls	r4, r4, #12
 8002448:	4e13      	ldr	r6, [pc, #76]	; (8002498 <__aeabi_dsub+0x624>)
 800244a:	2700      	movs	r7, #0
 800244c:	e5d3      	b.n	8001ff6 <__aeabi_dsub+0x182>
 800244e:	4650      	mov	r0, sl
 8002450:	4320      	orrs	r0, r4
 8002452:	0007      	movs	r7, r0
 8002454:	1e78      	subs	r0, r7, #1
 8002456:	4187      	sbcs	r7, r0
 8002458:	2400      	movs	r4, #0
 800245a:	18bf      	adds	r7, r7, r2
 800245c:	e760      	b.n	8002320 <__aeabi_dsub+0x4ac>
 800245e:	000c      	movs	r4, r1
 8002460:	0017      	movs	r7, r2
 8002462:	e58d      	b.n	8001f80 <__aeabi_dsub+0x10c>
 8002464:	000c      	movs	r4, r1
 8002466:	0017      	movs	r7, r2
 8002468:	4e0b      	ldr	r6, [pc, #44]	; (8002498 <__aeabi_dsub+0x624>)
 800246a:	e589      	b.n	8001f80 <__aeabi_dsub+0x10c>
 800246c:	001e      	movs	r6, r3
 800246e:	0027      	movs	r7, r4
 8002470:	3e20      	subs	r6, #32
 8002472:	40f7      	lsrs	r7, r6
 8002474:	2b20      	cmp	r3, #32
 8002476:	d00c      	beq.n	8002492 <__aeabi_dsub+0x61e>
 8002478:	2640      	movs	r6, #64	; 0x40
 800247a:	1af3      	subs	r3, r6, r3
 800247c:	409c      	lsls	r4, r3
 800247e:	4650      	mov	r0, sl
 8002480:	4320      	orrs	r0, r4
 8002482:	1e44      	subs	r4, r0, #1
 8002484:	41a0      	sbcs	r0, r4
 8002486:	4307      	orrs	r7, r0
 8002488:	2400      	movs	r4, #0
 800248a:	18bf      	adds	r7, r7, r2
 800248c:	e748      	b.n	8002320 <__aeabi_dsub+0x4ac>
 800248e:	2400      	movs	r4, #0
 8002490:	e7d0      	b.n	8002434 <__aeabi_dsub+0x5c0>
 8002492:	2400      	movs	r4, #0
 8002494:	e7f3      	b.n	800247e <__aeabi_dsub+0x60a>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	000007ff 	.word	0x000007ff
 800249c:	ff7fffff 	.word	0xff7fffff

080024a0 <__aeabi_d2iz>:
 80024a0:	b530      	push	{r4, r5, lr}
 80024a2:	4d13      	ldr	r5, [pc, #76]	; (80024f0 <__aeabi_d2iz+0x50>)
 80024a4:	030a      	lsls	r2, r1, #12
 80024a6:	004b      	lsls	r3, r1, #1
 80024a8:	0b12      	lsrs	r2, r2, #12
 80024aa:	0d5b      	lsrs	r3, r3, #21
 80024ac:	0fc9      	lsrs	r1, r1, #31
 80024ae:	2400      	movs	r4, #0
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	dd10      	ble.n	80024d6 <__aeabi_d2iz+0x36>
 80024b4:	4c0f      	ldr	r4, [pc, #60]	; (80024f4 <__aeabi_d2iz+0x54>)
 80024b6:	42a3      	cmp	r3, r4
 80024b8:	dc0f      	bgt.n	80024da <__aeabi_d2iz+0x3a>
 80024ba:	2480      	movs	r4, #128	; 0x80
 80024bc:	4d0e      	ldr	r5, [pc, #56]	; (80024f8 <__aeabi_d2iz+0x58>)
 80024be:	0364      	lsls	r4, r4, #13
 80024c0:	4322      	orrs	r2, r4
 80024c2:	1aed      	subs	r5, r5, r3
 80024c4:	2d1f      	cmp	r5, #31
 80024c6:	dd0b      	ble.n	80024e0 <__aeabi_d2iz+0x40>
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <__aeabi_d2iz+0x5c>)
 80024ca:	1ac3      	subs	r3, r0, r3
 80024cc:	40da      	lsrs	r2, r3
 80024ce:	4254      	negs	r4, r2
 80024d0:	2900      	cmp	r1, #0
 80024d2:	d100      	bne.n	80024d6 <__aeabi_d2iz+0x36>
 80024d4:	0014      	movs	r4, r2
 80024d6:	0020      	movs	r0, r4
 80024d8:	bd30      	pop	{r4, r5, pc}
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <__aeabi_d2iz+0x60>)
 80024dc:	18cc      	adds	r4, r1, r3
 80024de:	e7fa      	b.n	80024d6 <__aeabi_d2iz+0x36>
 80024e0:	4c08      	ldr	r4, [pc, #32]	; (8002504 <__aeabi_d2iz+0x64>)
 80024e2:	40e8      	lsrs	r0, r5
 80024e4:	46a4      	mov	ip, r4
 80024e6:	4463      	add	r3, ip
 80024e8:	409a      	lsls	r2, r3
 80024ea:	4302      	orrs	r2, r0
 80024ec:	e7ef      	b.n	80024ce <__aeabi_d2iz+0x2e>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	000003fe 	.word	0x000003fe
 80024f4:	0000041d 	.word	0x0000041d
 80024f8:	00000433 	.word	0x00000433
 80024fc:	00000413 	.word	0x00000413
 8002500:	7fffffff 	.word	0x7fffffff
 8002504:	fffffbed 	.word	0xfffffbed

08002508 <__aeabi_i2d>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2800      	cmp	r0, #0
 800250c:	d030      	beq.n	8002570 <__aeabi_i2d+0x68>
 800250e:	17c3      	asrs	r3, r0, #31
 8002510:	18c4      	adds	r4, r0, r3
 8002512:	405c      	eors	r4, r3
 8002514:	0fc5      	lsrs	r5, r0, #31
 8002516:	0020      	movs	r0, r4
 8002518:	f000 f94c 	bl	80027b4 <__clzsi2>
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <__aeabi_i2d+0x74>)
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <__aeabi_i2d+0x78>)
 8002520:	1a1b      	subs	r3, r3, r0
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	2a1f      	cmp	r2, #31
 8002526:	dd18      	ble.n	800255a <__aeabi_i2d+0x52>
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <__aeabi_i2d+0x7c>)
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	4094      	lsls	r4, r2
 800252e:	2200      	movs	r2, #0
 8002530:	0324      	lsls	r4, r4, #12
 8002532:	055b      	lsls	r3, r3, #21
 8002534:	0b24      	lsrs	r4, r4, #12
 8002536:	0d5b      	lsrs	r3, r3, #21
 8002538:	2100      	movs	r1, #0
 800253a:	0010      	movs	r0, r2
 800253c:	0324      	lsls	r4, r4, #12
 800253e:	0d0a      	lsrs	r2, r1, #20
 8002540:	0b24      	lsrs	r4, r4, #12
 8002542:	0512      	lsls	r2, r2, #20
 8002544:	4322      	orrs	r2, r4
 8002546:	4c10      	ldr	r4, [pc, #64]	; (8002588 <__aeabi_i2d+0x80>)
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	4022      	ands	r2, r4
 800254c:	4313      	orrs	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	07ed      	lsls	r5, r5, #31
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	432b      	orrs	r3, r5
 8002556:	0019      	movs	r1, r3
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	0021      	movs	r1, r4
 800255c:	4091      	lsls	r1, r2
 800255e:	000a      	movs	r2, r1
 8002560:	210b      	movs	r1, #11
 8002562:	1a08      	subs	r0, r1, r0
 8002564:	40c4      	lsrs	r4, r0
 8002566:	055b      	lsls	r3, r3, #21
 8002568:	0324      	lsls	r4, r4, #12
 800256a:	0b24      	lsrs	r4, r4, #12
 800256c:	0d5b      	lsrs	r3, r3, #21
 800256e:	e7e3      	b.n	8002538 <__aeabi_i2d+0x30>
 8002570:	2500      	movs	r5, #0
 8002572:	2300      	movs	r3, #0
 8002574:	2400      	movs	r4, #0
 8002576:	2200      	movs	r2, #0
 8002578:	e7de      	b.n	8002538 <__aeabi_i2d+0x30>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	0000041e 	.word	0x0000041e
 8002580:	00000433 	.word	0x00000433
 8002584:	00000413 	.word	0x00000413
 8002588:	800fffff 	.word	0x800fffff

0800258c <__aeabi_ui2d>:
 800258c:	b510      	push	{r4, lr}
 800258e:	1e04      	subs	r4, r0, #0
 8002590:	d028      	beq.n	80025e4 <__aeabi_ui2d+0x58>
 8002592:	f000 f90f 	bl	80027b4 <__clzsi2>
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <__aeabi_ui2d+0x60>)
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <__aeabi_ui2d+0x64>)
 800259a:	1a1b      	subs	r3, r3, r0
 800259c:	1ad2      	subs	r2, r2, r3
 800259e:	2a1f      	cmp	r2, #31
 80025a0:	dd15      	ble.n	80025ce <__aeabi_ui2d+0x42>
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <__aeabi_ui2d+0x68>)
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	4094      	lsls	r4, r2
 80025a8:	2200      	movs	r2, #0
 80025aa:	0324      	lsls	r4, r4, #12
 80025ac:	055b      	lsls	r3, r3, #21
 80025ae:	0b24      	lsrs	r4, r4, #12
 80025b0:	0d5b      	lsrs	r3, r3, #21
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	0324      	lsls	r4, r4, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b24      	lsrs	r4, r4, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	4322      	orrs	r2, r4
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__aeabi_ui2d+0x6c>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	4022      	ands	r2, r4
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	0859      	lsrs	r1, r3, #1
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	0021      	movs	r1, r4
 80025d0:	4091      	lsls	r1, r2
 80025d2:	000a      	movs	r2, r1
 80025d4:	210b      	movs	r1, #11
 80025d6:	1a08      	subs	r0, r1, r0
 80025d8:	40c4      	lsrs	r4, r0
 80025da:	055b      	lsls	r3, r3, #21
 80025dc:	0324      	lsls	r4, r4, #12
 80025de:	0b24      	lsrs	r4, r4, #12
 80025e0:	0d5b      	lsrs	r3, r3, #21
 80025e2:	e7e6      	b.n	80025b2 <__aeabi_ui2d+0x26>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2400      	movs	r4, #0
 80025e8:	2200      	movs	r2, #0
 80025ea:	e7e2      	b.n	80025b2 <__aeabi_ui2d+0x26>
 80025ec:	0000041e 	.word	0x0000041e
 80025f0:	00000433 	.word	0x00000433
 80025f4:	00000413 	.word	0x00000413
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_f2d>:
 80025fc:	0041      	lsls	r1, r0, #1
 80025fe:	0e09      	lsrs	r1, r1, #24
 8002600:	1c4b      	adds	r3, r1, #1
 8002602:	b570      	push	{r4, r5, r6, lr}
 8002604:	b2db      	uxtb	r3, r3
 8002606:	0246      	lsls	r6, r0, #9
 8002608:	0a75      	lsrs	r5, r6, #9
 800260a:	0fc4      	lsrs	r4, r0, #31
 800260c:	2b01      	cmp	r3, #1
 800260e:	dd14      	ble.n	800263a <__aeabi_f2d+0x3e>
 8002610:	23e0      	movs	r3, #224	; 0xe0
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	076d      	lsls	r5, r5, #29
 8002616:	0b36      	lsrs	r6, r6, #12
 8002618:	18cb      	adds	r3, r1, r3
 800261a:	2100      	movs	r1, #0
 800261c:	0d0a      	lsrs	r2, r1, #20
 800261e:	0028      	movs	r0, r5
 8002620:	0512      	lsls	r2, r2, #20
 8002622:	4d1c      	ldr	r5, [pc, #112]	; (8002694 <__aeabi_f2d+0x98>)
 8002624:	4332      	orrs	r2, r6
 8002626:	055b      	lsls	r3, r3, #21
 8002628:	402a      	ands	r2, r5
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	4313      	orrs	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	07e4      	lsls	r4, r4, #31
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	4323      	orrs	r3, r4
 8002636:	0019      	movs	r1, r3
 8002638:	bd70      	pop	{r4, r5, r6, pc}
 800263a:	2900      	cmp	r1, #0
 800263c:	d114      	bne.n	8002668 <__aeabi_f2d+0x6c>
 800263e:	2d00      	cmp	r5, #0
 8002640:	d01e      	beq.n	8002680 <__aeabi_f2d+0x84>
 8002642:	0028      	movs	r0, r5
 8002644:	f000 f8b6 	bl	80027b4 <__clzsi2>
 8002648:	280a      	cmp	r0, #10
 800264a:	dc1c      	bgt.n	8002686 <__aeabi_f2d+0x8a>
 800264c:	230b      	movs	r3, #11
 800264e:	002a      	movs	r2, r5
 8002650:	1a1b      	subs	r3, r3, r0
 8002652:	40da      	lsrs	r2, r3
 8002654:	0003      	movs	r3, r0
 8002656:	3315      	adds	r3, #21
 8002658:	409d      	lsls	r5, r3
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <__aeabi_f2d+0x9c>)
 800265c:	0312      	lsls	r2, r2, #12
 800265e:	1a1b      	subs	r3, r3, r0
 8002660:	055b      	lsls	r3, r3, #21
 8002662:	0b16      	lsrs	r6, r2, #12
 8002664:	0d5b      	lsrs	r3, r3, #21
 8002666:	e7d8      	b.n	800261a <__aeabi_f2d+0x1e>
 8002668:	2d00      	cmp	r5, #0
 800266a:	d006      	beq.n	800267a <__aeabi_f2d+0x7e>
 800266c:	0b32      	lsrs	r2, r6, #12
 800266e:	2680      	movs	r6, #128	; 0x80
 8002670:	0336      	lsls	r6, r6, #12
 8002672:	076d      	lsls	r5, r5, #29
 8002674:	4316      	orrs	r6, r2
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <__aeabi_f2d+0xa0>)
 8002678:	e7cf      	b.n	800261a <__aeabi_f2d+0x1e>
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <__aeabi_f2d+0xa0>)
 800267c:	2600      	movs	r6, #0
 800267e:	e7cc      	b.n	800261a <__aeabi_f2d+0x1e>
 8002680:	2300      	movs	r3, #0
 8002682:	2600      	movs	r6, #0
 8002684:	e7c9      	b.n	800261a <__aeabi_f2d+0x1e>
 8002686:	0003      	movs	r3, r0
 8002688:	002a      	movs	r2, r5
 800268a:	3b0b      	subs	r3, #11
 800268c:	409a      	lsls	r2, r3
 800268e:	2500      	movs	r5, #0
 8002690:	e7e3      	b.n	800265a <__aeabi_f2d+0x5e>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	800fffff 	.word	0x800fffff
 8002698:	00000389 	.word	0x00000389
 800269c:	000007ff 	.word	0x000007ff

080026a0 <__aeabi_d2f>:
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	004c      	lsls	r4, r1, #1
 80026a4:	0d64      	lsrs	r4, r4, #21
 80026a6:	030b      	lsls	r3, r1, #12
 80026a8:	1c62      	adds	r2, r4, #1
 80026aa:	0f45      	lsrs	r5, r0, #29
 80026ac:	0a5b      	lsrs	r3, r3, #9
 80026ae:	0552      	lsls	r2, r2, #21
 80026b0:	432b      	orrs	r3, r5
 80026b2:	0fc9      	lsrs	r1, r1, #31
 80026b4:	00c5      	lsls	r5, r0, #3
 80026b6:	0d52      	lsrs	r2, r2, #21
 80026b8:	2a01      	cmp	r2, #1
 80026ba:	dd28      	ble.n	800270e <__aeabi_d2f+0x6e>
 80026bc:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <__aeabi_d2f+0x108>)
 80026be:	18a6      	adds	r6, r4, r2
 80026c0:	2efe      	cmp	r6, #254	; 0xfe
 80026c2:	dc1b      	bgt.n	80026fc <__aeabi_d2f+0x5c>
 80026c4:	2e00      	cmp	r6, #0
 80026c6:	dd3e      	ble.n	8002746 <__aeabi_d2f+0xa6>
 80026c8:	0180      	lsls	r0, r0, #6
 80026ca:	0002      	movs	r2, r0
 80026cc:	1e50      	subs	r0, r2, #1
 80026ce:	4182      	sbcs	r2, r0
 80026d0:	0f6d      	lsrs	r5, r5, #29
 80026d2:	432a      	orrs	r2, r5
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	075a      	lsls	r2, r3, #29
 80026da:	d004      	beq.n	80026e6 <__aeabi_d2f+0x46>
 80026dc:	220f      	movs	r2, #15
 80026de:	401a      	ands	r2, r3
 80026e0:	2a04      	cmp	r2, #4
 80026e2:	d000      	beq.n	80026e6 <__aeabi_d2f+0x46>
 80026e4:	3304      	adds	r3, #4
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	04d2      	lsls	r2, r2, #19
 80026ea:	401a      	ands	r2, r3
 80026ec:	d05a      	beq.n	80027a4 <__aeabi_d2f+0x104>
 80026ee:	3601      	adds	r6, #1
 80026f0:	2eff      	cmp	r6, #255	; 0xff
 80026f2:	d003      	beq.n	80026fc <__aeabi_d2f+0x5c>
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	b2f4      	uxtb	r4, r6
 80026fa:	e001      	b.n	8002700 <__aeabi_d2f+0x60>
 80026fc:	24ff      	movs	r4, #255	; 0xff
 80026fe:	2300      	movs	r3, #0
 8002700:	0258      	lsls	r0, r3, #9
 8002702:	05e4      	lsls	r4, r4, #23
 8002704:	0a40      	lsrs	r0, r0, #9
 8002706:	07c9      	lsls	r1, r1, #31
 8002708:	4320      	orrs	r0, r4
 800270a:	4308      	orrs	r0, r1
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270e:	2c00      	cmp	r4, #0
 8002710:	d007      	beq.n	8002722 <__aeabi_d2f+0x82>
 8002712:	431d      	orrs	r5, r3
 8002714:	d0f2      	beq.n	80026fc <__aeabi_d2f+0x5c>
 8002716:	2080      	movs	r0, #128	; 0x80
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	0480      	lsls	r0, r0, #18
 800271c:	4303      	orrs	r3, r0
 800271e:	26ff      	movs	r6, #255	; 0xff
 8002720:	e7da      	b.n	80026d8 <__aeabi_d2f+0x38>
 8002722:	432b      	orrs	r3, r5
 8002724:	d003      	beq.n	800272e <__aeabi_d2f+0x8e>
 8002726:	2305      	movs	r3, #5
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	2cff      	cmp	r4, #255	; 0xff
 800272c:	d003      	beq.n	8002736 <__aeabi_d2f+0x96>
 800272e:	025b      	lsls	r3, r3, #9
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	b2e4      	uxtb	r4, r4
 8002734:	e7e4      	b.n	8002700 <__aeabi_d2f+0x60>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d032      	beq.n	80027a0 <__aeabi_d2f+0x100>
 800273a:	2080      	movs	r0, #128	; 0x80
 800273c:	03c0      	lsls	r0, r0, #15
 800273e:	4303      	orrs	r3, r0
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	0a5b      	lsrs	r3, r3, #9
 8002744:	e7dc      	b.n	8002700 <__aeabi_d2f+0x60>
 8002746:	0032      	movs	r2, r6
 8002748:	3217      	adds	r2, #23
 800274a:	db14      	blt.n	8002776 <__aeabi_d2f+0xd6>
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	271e      	movs	r7, #30
 8002750:	0412      	lsls	r2, r2, #16
 8002752:	4313      	orrs	r3, r2
 8002754:	1bbf      	subs	r7, r7, r6
 8002756:	2f1f      	cmp	r7, #31
 8002758:	dc0f      	bgt.n	800277a <__aeabi_d2f+0xda>
 800275a:	4a14      	ldr	r2, [pc, #80]	; (80027ac <__aeabi_d2f+0x10c>)
 800275c:	4694      	mov	ip, r2
 800275e:	4464      	add	r4, ip
 8002760:	002a      	movs	r2, r5
 8002762:	40a5      	lsls	r5, r4
 8002764:	002e      	movs	r6, r5
 8002766:	40a3      	lsls	r3, r4
 8002768:	1e75      	subs	r5, r6, #1
 800276a:	41ae      	sbcs	r6, r5
 800276c:	40fa      	lsrs	r2, r7
 800276e:	4333      	orrs	r3, r6
 8002770:	4313      	orrs	r3, r2
 8002772:	2600      	movs	r6, #0
 8002774:	e7b0      	b.n	80026d8 <__aeabi_d2f+0x38>
 8002776:	2400      	movs	r4, #0
 8002778:	e7d5      	b.n	8002726 <__aeabi_d2f+0x86>
 800277a:	2202      	movs	r2, #2
 800277c:	4252      	negs	r2, r2
 800277e:	1b96      	subs	r6, r2, r6
 8002780:	001a      	movs	r2, r3
 8002782:	40f2      	lsrs	r2, r6
 8002784:	2f20      	cmp	r7, #32
 8002786:	d009      	beq.n	800279c <__aeabi_d2f+0xfc>
 8002788:	4809      	ldr	r0, [pc, #36]	; (80027b0 <__aeabi_d2f+0x110>)
 800278a:	4684      	mov	ip, r0
 800278c:	4464      	add	r4, ip
 800278e:	40a3      	lsls	r3, r4
 8002790:	432b      	orrs	r3, r5
 8002792:	1e5d      	subs	r5, r3, #1
 8002794:	41ab      	sbcs	r3, r5
 8002796:	2600      	movs	r6, #0
 8002798:	4313      	orrs	r3, r2
 800279a:	e79d      	b.n	80026d8 <__aeabi_d2f+0x38>
 800279c:	2300      	movs	r3, #0
 800279e:	e7f7      	b.n	8002790 <__aeabi_d2f+0xf0>
 80027a0:	2300      	movs	r3, #0
 80027a2:	e7ad      	b.n	8002700 <__aeabi_d2f+0x60>
 80027a4:	0034      	movs	r4, r6
 80027a6:	e7bf      	b.n	8002728 <__aeabi_d2f+0x88>
 80027a8:	fffffc80 	.word	0xfffffc80
 80027ac:	fffffc82 	.word	0xfffffc82
 80027b0:	fffffca2 	.word	0xfffffca2

080027b4 <__clzsi2>:
 80027b4:	211c      	movs	r1, #28
 80027b6:	2301      	movs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	4298      	cmp	r0, r3
 80027bc:	d301      	bcc.n	80027c2 <__clzsi2+0xe>
 80027be:	0c00      	lsrs	r0, r0, #16
 80027c0:	3910      	subs	r1, #16
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	4298      	cmp	r0, r3
 80027c6:	d301      	bcc.n	80027cc <__clzsi2+0x18>
 80027c8:	0a00      	lsrs	r0, r0, #8
 80027ca:	3908      	subs	r1, #8
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	4298      	cmp	r0, r3
 80027d0:	d301      	bcc.n	80027d6 <__clzsi2+0x22>
 80027d2:	0900      	lsrs	r0, r0, #4
 80027d4:	3904      	subs	r1, #4
 80027d6:	a202      	add	r2, pc, #8	; (adr r2, 80027e0 <__clzsi2+0x2c>)
 80027d8:	5c10      	ldrb	r0, [r2, r0]
 80027da:	1840      	adds	r0, r0, r1
 80027dc:	4770      	bx	lr
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	02020304 	.word	0x02020304
 80027e4:	01010101 	.word	0x01010101
	...

080027f0 <GetTempValues>:
		GetColibValues();
	}
}

void GetTempValues(void)
{
 80027f0:	b510      	push	{r4, lr}
	TLEReadData(TLE_TEMP_VALUE, &tleValues);
 80027f2:	4c04      	ldr	r4, [pc, #16]	; (8002804 <GetTempValues+0x14>)
 80027f4:	0021      	movs	r1, r4
 80027f6:	2002      	movs	r0, #2
 80027f8:	f000 f934 	bl	8002a64 <TLEReadData>
	sysDataTLE.tempX = tleValues[0];
 80027fc:	8822      	ldrh	r2, [r4, #0]
 80027fe:	4b02      	ldr	r3, [pc, #8]	; (8002808 <GetTempValues+0x18>)
 8002800:	811a      	strh	r2, [r3, #8]
//	sysDataTLE.tempY = tleValues[1];
}
 8002802:	bd10      	pop	{r4, pc}
 8002804:	20000258 	.word	0x20000258
 8002808:	20000218 	.word	0x20000218

0800280c <GetColibValues>:


void GetColibValues(void)
{
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	46ce      	mov	lr, r9
 8002810:	b500      	push	{lr}
 8002812:	b084      	sub	sp, #16
	/*		Offset Definition
	================================================================*/
	sysDataTLE.offset.x = (sysDataTLE.maxX + sysDataTLE.minX) / 2;
 8002814:	4d45      	ldr	r5, [pc, #276]	; (800292c <GetColibValues+0x120>)
 8002816:	882b      	ldrh	r3, [r5, #0]
 8002818:	4699      	mov	r9, r3
 800281a:	88ac      	ldrh	r4, [r5, #4]
 800281c:	191b      	adds	r3, r3, r4
 800281e:	0fd8      	lsrs	r0, r3, #31
 8002820:	18c0      	adds	r0, r0, r3
 8002822:	1040      	asrs	r0, r0, #1
 8002824:	f7fe f912 	bl	8000a4c <__aeabi_i2f>
 8002828:	9000      	str	r0, [sp, #0]
 800282a:	60e8      	str	r0, [r5, #12]
	sysDataTLE.offset.y = (sysDataTLE.maxY + sysDataTLE.minY) / 2;
 800282c:	886e      	ldrh	r6, [r5, #2]
 800282e:	88ef      	ldrh	r7, [r5, #6]
 8002830:	19f3      	adds	r3, r6, r7
 8002832:	0fd8      	lsrs	r0, r3, #31
 8002834:	18c0      	adds	r0, r0, r3
 8002836:	1040      	asrs	r0, r0, #1
 8002838:	f7fe f908 	bl	8000a4c <__aeabi_i2f>
 800283c:	9002      	str	r0, [sp, #8]
 800283e:	6128      	str	r0, [r5, #16]

	/*		Amplitude Definition
	================================================================*/
	sysDataTLE.amplitude.x = (sysDataTLE.maxX - sysDataTLE.minX) / 2;
 8002840:	4649      	mov	r1, r9
 8002842:	1b0b      	subs	r3, r1, r4
 8002844:	0fd8      	lsrs	r0, r3, #31
 8002846:	18c0      	adds	r0, r0, r3
 8002848:	1040      	asrs	r0, r0, #1
 800284a:	f7fe f8ff 	bl	8000a4c <__aeabi_i2f>
 800284e:	6168      	str	r0, [r5, #20]
	sysDataTLE.amplitude.y = (sysDataTLE.maxY - sysDataTLE.minY) / 2;
 8002850:	1bf6      	subs	r6, r6, r7
 8002852:	0ff0      	lsrs	r0, r6, #31
 8002854:	1980      	adds	r0, r0, r6
 8002856:	1040      	asrs	r0, r0, #1
 8002858:	f7fe f8f8 	bl	8000a4c <__aeabi_i2f>
 800285c:	61a8      	str	r0, [r5, #24]

	/*		Temperature-Dependent Behavior
	================================================================*/
	sysDataTLE.tempGrad.x = 0.116296 + (0.0010147 * sysDataTLE.offset.x);
 800285e:	9800      	ldr	r0, [sp, #0]
 8002860:	f7ff fecc 	bl	80025fc <__aeabi_f2d>
 8002864:	4a32      	ldr	r2, [pc, #200]	; (8002930 <GetColibValues+0x124>)
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <GetColibValues+0x128>)
 8002868:	f7ff f884 	bl	8001974 <__aeabi_dmul>
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <GetColibValues+0x12c>)
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <GetColibValues+0x130>)
 8002870:	f7fe f93c 	bl	8000aec <__aeabi_dadd>
 8002874:	f7ff ff14 	bl	80026a0 <__aeabi_d2f>
 8002878:	61e8      	str	r0, [r5, #28]
	sysDataTLE.tempGrad.y = -0.079401 + (0.0010121 * sysDataTLE.offset.y);
 800287a:	9802      	ldr	r0, [sp, #8]
 800287c:	f7ff febe 	bl	80025fc <__aeabi_f2d>
 8002880:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <GetColibValues+0x134>)
 8002882:	4b30      	ldr	r3, [pc, #192]	; (8002944 <GetColibValues+0x138>)
 8002884:	f7ff f876 	bl	8001974 <__aeabi_dmul>
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <GetColibValues+0x13c>)
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <GetColibValues+0x140>)
 800288c:	f7ff faf2 	bl	8001e74 <__aeabi_dsub>
 8002890:	f7ff ff06 	bl	80026a0 <__aeabi_d2f>
 8002894:	6228      	str	r0, [r5, #32]
	/*		Temperature-Dependent Offset Value
	================================================================*/
	TLEReadData(TLE_TEMP_VALUE, &tleValues);
 8002896:	4c2e      	ldr	r4, [pc, #184]	; (8002950 <GetColibValues+0x144>)
 8002898:	0021      	movs	r1, r4
 800289a:	2002      	movs	r0, #2
 800289c:	f000 f8e2 	bl	8002a64 <TLEReadData>
	sysDataTLE.tempDepend.x = sysDataTLE.offset.x + (sysDataTLE.tempGrad.x / -188.75) * (tleValues[0] - sysDataTLE.tempX);
 80028a0:	68e8      	ldr	r0, [r5, #12]
 80028a2:	f7ff feab 	bl	80025fc <__aeabi_f2d>
 80028a6:	9000      	str	r0, [sp, #0]
 80028a8:	9101      	str	r1, [sp, #4]
 80028aa:	69e8      	ldr	r0, [r5, #28]
 80028ac:	f7ff fea6 	bl	80025fc <__aeabi_f2d>
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <GetColibValues+0x148>)
 80028b4:	f7fe fc2a 	bl	800110c <__aeabi_ddiv>
 80028b8:	0006      	movs	r6, r0
 80028ba:	000f      	movs	r7, r1
 80028bc:	8820      	ldrh	r0, [r4, #0]
 80028be:	892b      	ldrh	r3, [r5, #8]
 80028c0:	1ac0      	subs	r0, r0, r3
 80028c2:	f7ff fe21 	bl	8002508 <__aeabi_i2d>
 80028c6:	0003      	movs	r3, r0
 80028c8:	000c      	movs	r4, r1
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	9403      	str	r4, [sp, #12]
 80028ce:	0002      	movs	r2, r0
 80028d0:	000b      	movs	r3, r1
 80028d2:	0030      	movs	r0, r6
 80028d4:	0039      	movs	r1, r7
 80028d6:	f7ff f84d 	bl	8001974 <__aeabi_dmul>
 80028da:	0002      	movs	r2, r0
 80028dc:	000b      	movs	r3, r1
 80028de:	9800      	ldr	r0, [sp, #0]
 80028e0:	9901      	ldr	r1, [sp, #4]
 80028e2:	f7fe f903 	bl	8000aec <__aeabi_dadd>
 80028e6:	f7ff fedb 	bl	80026a0 <__aeabi_d2f>
 80028ea:	6268      	str	r0, [r5, #36]	; 0x24
	sysDataTLE.tempDepend.y = sysDataTLE.offset.y + (sysDataTLE.tempGrad.y / -188.75) * (tleValues[0] - sysDataTLE.tempX);
 80028ec:	6928      	ldr	r0, [r5, #16]
 80028ee:	f7ff fe85 	bl	80025fc <__aeabi_f2d>
 80028f2:	0006      	movs	r6, r0
 80028f4:	000f      	movs	r7, r1
 80028f6:	6a28      	ldr	r0, [r5, #32]
 80028f8:	f7ff fe80 	bl	80025fc <__aeabi_f2d>
 80028fc:	2200      	movs	r2, #0
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <GetColibValues+0x148>)
 8002900:	f7fe fc04 	bl	800110c <__aeabi_ddiv>
 8002904:	0002      	movs	r2, r0
 8002906:	000b      	movs	r3, r1
 8002908:	9802      	ldr	r0, [sp, #8]
 800290a:	9903      	ldr	r1, [sp, #12]
 800290c:	f7ff f832 	bl	8001974 <__aeabi_dmul>
 8002910:	0002      	movs	r2, r0
 8002912:	000b      	movs	r3, r1
 8002914:	0030      	movs	r0, r6
 8002916:	0039      	movs	r1, r7
 8002918:	f7fe f8e8 	bl	8000aec <__aeabi_dadd>
 800291c:	f7ff fec0 	bl	80026a0 <__aeabi_d2f>
 8002920:	62a8      	str	r0, [r5, #40]	; 0x28

}
 8002922:	b004      	add	sp, #16
 8002924:	bc04      	pop	{r2}
 8002926:	4691      	mov	r9, r2
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000218 	.word	0x20000218
 8002930:	d42d135f 	.word	0xd42d135f
 8002934:	3f509ff5 	.word	0x3f509ff5
 8002938:	1ca7d673 	.word	0x1ca7d673
 800293c:	3fbdc593 	.word	0x3fbdc593
 8002940:	199e36b7 	.word	0x199e36b7
 8002944:	3f50950e 	.word	0x3f50950e
 8002948:	ba450acc 	.word	0xba450acc
 800294c:	3fb4539f 	.word	0x3fb4539f
 8002950:	20000258 	.word	0x20000258
 8002954:	c0679800 	.word	0xc0679800

08002958 <GetMaxMinValues>:
{
 8002958:	b510      	push	{r4, lr}
	TLEReadData(TLE_MAIN_VALUES, tleValues);
 800295a:	490c      	ldr	r1, [pc, #48]	; (800298c <GetMaxMinValues+0x34>)
 800295c:	2001      	movs	r0, #1
 800295e:	f000 f881 	bl	8002a64 <TLEReadData>
	if(sysDataTLE.maxX == 0 && sysDataTLE.maxY == 0){
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <GetMaxMinValues+0x38>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <GetMaxMinValues+0x20>
		sysDataTLE.maxX = tleValues[0];
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <GetMaxMinValues+0x34>)
 800296c:	8811      	ldrh	r1, [r2, #0]
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <GetMaxMinValues+0x38>)
 8002970:	8019      	strh	r1, [r3, #0]
		sysDataTLE.maxY = tleValues[1];
 8002972:	8852      	ldrh	r2, [r2, #2]
 8002974:	805a      	strh	r2, [r3, #2]
}
 8002976:	bd10      	pop	{r4, pc}
		sysDataTLE.minX = tleValues[0];
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <GetMaxMinValues+0x34>)
 800297a:	8811      	ldrh	r1, [r2, #0]
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <GetMaxMinValues+0x38>)
 800297e:	8099      	strh	r1, [r3, #4]
		sysDataTLE.minY = tleValues[1];
 8002980:	8852      	ldrh	r2, [r2, #2]
 8002982:	80da      	strh	r2, [r3, #6]
		GetColibValues();
 8002984:	f7ff ff42 	bl	800280c <GetColibValues>
}
 8002988:	e7f5      	b.n	8002976 <GetMaxMinValues+0x1e>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000258 	.word	0x20000258
 8002990:	20000218 	.word	0x20000218

08002994 <ResultAngle>:

float ResultAngle(void)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b087      	sub	sp, #28
	float resultAngle;

	TLEReadData(TLE_MAIN_VALUES, tleValues);
 8002998:	4e30      	ldr	r6, [pc, #192]	; (8002a5c <ResultAngle+0xc8>)
 800299a:	0031      	movs	r1, r6
 800299c:	2001      	movs	r0, #1
 800299e:	f000 f861 	bl	8002a64 <TLEReadData>

	/*		Offset Correction
	================================================================*/
	sysDataTLE.offCor.x = tleValues[0] - sysDataTLE.tempDepend.x;
 80029a2:	8833      	ldrh	r3, [r6, #0]
 80029a4:	4d2e      	ldr	r5, [pc, #184]	; (8002a60 <ResultAngle+0xcc>)
 80029a6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fe f84e 	bl	8000a4c <__aeabi_i2f>
 80029b0:	1c21      	adds	r1, r4, #0
 80029b2:	f7fd feaf 	bl	8000714 <__aeabi_fsub>
 80029b6:	1c04      	adds	r4, r0, #0
 80029b8:	62e8      	str	r0, [r5, #44]	; 0x2c
	sysDataTLE.offCor.y = tleValues[1] - sysDataTLE.tempDepend.y;
 80029ba:	8876      	ldrh	r6, [r6, #2]
 80029bc:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80029be:	0030      	movs	r0, r6
 80029c0:	f7fe f844 	bl	8000a4c <__aeabi_i2f>
 80029c4:	1c39      	adds	r1, r7, #0
 80029c6:	f7fd fea5 	bl	8000714 <__aeabi_fsub>
 80029ca:	1c07      	adds	r7, r0, #0
 80029cc:	6328      	str	r0, [r5, #48]	; 0x30

	/*		Amplitude Normalization
	================================================================*/
	sysDataTLE.ampNorm.x = sysDataTLE.offCor.x / sysDataTLE.amplitude.x;
 80029ce:	6969      	ldr	r1, [r5, #20]
 80029d0:	1c20      	adds	r0, r4, #0
 80029d2:	f7fd fd57 	bl	8000484 <__aeabi_fdiv>
 80029d6:	1c04      	adds	r4, r0, #0
 80029d8:	6368      	str	r0, [r5, #52]	; 0x34
	sysDataTLE.ampNorm.y = sysDataTLE.offCor.y / sysDataTLE.amplitude.y;
 80029da:	69a9      	ldr	r1, [r5, #24]
 80029dc:	1c38      	adds	r0, r7, #0
 80029de:	f7fd fd51 	bl	8000484 <__aeabi_fdiv>
 80029e2:	63a8      	str	r0, [r5, #56]	; 0x38

	/*		Non-Orthogonality Correction
	================================================================*/
	sysDataTLE.nonOrtCor.y = (sysDataTLE.ampNorm.y - sysDataTLE.ampNorm.x * sin(tleValues[1])) / cos(tleValues[0]);
 80029e4:	f7ff fe0a 	bl	80025fc <__aeabi_f2d>
 80029e8:	9002      	str	r0, [sp, #8]
 80029ea:	9103      	str	r1, [sp, #12]
 80029ec:	1c20      	adds	r0, r4, #0
 80029ee:	f7ff fe05 	bl	80025fc <__aeabi_f2d>
 80029f2:	9004      	str	r0, [sp, #16]
 80029f4:	9105      	str	r1, [sp, #20]
 80029f6:	0030      	movs	r0, r6
 80029f8:	f7ff fdc8 	bl	800258c <__aeabi_ui2d>
 80029fc:	f005 f8f2 	bl	8007be4 <sin>
 8002a00:	0002      	movs	r2, r0
 8002a02:	000b      	movs	r3, r1
 8002a04:	9804      	ldr	r0, [sp, #16]
 8002a06:	9905      	ldr	r1, [sp, #20]
 8002a08:	f7fe ffb4 	bl	8001974 <__aeabi_dmul>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	000b      	movs	r3, r1
 8002a10:	9802      	ldr	r0, [sp, #8]
 8002a12:	9903      	ldr	r1, [sp, #12]
 8002a14:	f7ff fa2e 	bl	8001e74 <__aeabi_dsub>
 8002a18:	9002      	str	r0, [sp, #8]
 8002a1a:	9103      	str	r1, [sp, #12]
 8002a1c:	9801      	ldr	r0, [sp, #4]
 8002a1e:	f7ff fdb5 	bl	800258c <__aeabi_ui2d>
 8002a22:	f005 f899 	bl	8007b58 <cos>
 8002a26:	0006      	movs	r6, r0
 8002a28:	000f      	movs	r7, r1
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	9802      	ldr	r0, [sp, #8]
 8002a30:	9903      	ldr	r1, [sp, #12]
 8002a32:	f7fe fb6b 	bl	800110c <__aeabi_ddiv>
 8002a36:	f7ff fe33 	bl	80026a0 <__aeabi_d2f>
 8002a3a:	63e8      	str	r0, [r5, #60]	; 0x3c

	/*		Resulting Angle
	================================================================*/
	return resultAngle = atan(sysDataTLE.nonOrtCor.y / sysDataTLE.ampNorm.x) - cos(tleValues[0]);
 8002a3c:	1c21      	adds	r1, r4, #0
 8002a3e:	f7fd fd21 	bl	8000484 <__aeabi_fdiv>
 8002a42:	f7ff fddb 	bl	80025fc <__aeabi_f2d>
 8002a46:	f004 feff 	bl	8007848 <atan>
 8002a4a:	0032      	movs	r2, r6
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	f7ff fa11 	bl	8001e74 <__aeabi_dsub>
 8002a52:	f7ff fe25 	bl	80026a0 <__aeabi_d2f>
}
 8002a56:	b007      	add	sp, #28
 8002a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20000258 	.word	0x20000258
 8002a60:	20000218 	.word	0x20000218

08002a64 <TLEReadData>:
#include "OJ_TLE.h"

extern SPI_HandleTypeDef hspi2;

uint8_t TLEReadData(uint8_t dataType, void *pData)
{
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	0006      	movs	r6, r0
 8002a6a:	9101      	str	r1, [sp, #4]
	dataStructTLETypeDef *dataStructTLE = (dataStructTLETypeDef *)malloc(sizeof(dataStructTLETypeDef));
 8002a6c:	2012      	movs	r0, #18
 8002a6e:	f004 fe09 	bl	8007684 <malloc>
 8002a72:	0004      	movs	r4, r0
	uint8_t bufRX[16];
	HAL_StatusTypeDef ret;
	uint16_t bufTX;
	uint8_t temp;

	switch (dataType)
 8002a74:	2e01      	cmp	r6, #1
 8002a76:	d031      	beq.n	8002adc <TLEReadData+0x78>
 8002a78:	2e02      	cmp	r6, #2
 8002a7a:	d100      	bne.n	8002a7e <TLEReadData+0x1a>
 8002a7c:	e0d0      	b.n	8002c20 <TLEReadData+0x1bc>
			}
			break;

	}

	dataStructTLE->ctrl1	 = bufRX[0];
 8002a7e:	ab04      	add	r3, sp, #16
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	7022      	strb	r2, [r4, #0]
	dataStructTLE->valueX	 = (bufRX[2] << 8) + bufRX[1];
 8002a84:	789a      	ldrb	r2, [r3, #2]
 8002a86:	0212      	lsls	r2, r2, #8
 8002a88:	7859      	ldrb	r1, [r3, #1]
 8002a8a:	1852      	adds	r2, r2, r1
 8002a8c:	8062      	strh	r2, [r4, #2]
	dataStructTLE->valueY 	 = (bufRX[4] << 8) + bufRX[3];
 8002a8e:	791a      	ldrb	r2, [r3, #4]
 8002a90:	0212      	lsls	r2, r2, #8
 8002a92:	78d9      	ldrb	r1, [r3, #3]
 8002a94:	1852      	adds	r2, r2, r1
 8002a96:	80a2      	strh	r2, [r4, #4]
	dataStructTLE->fcn_stat	 = bufRX[5];
 8002a98:	795a      	ldrb	r2, [r3, #5]
 8002a9a:	71a2      	strb	r2, [r4, #6]
	dataStructTLE->fsync_inv = bufRX[6];
 8002a9c:	799a      	ldrb	r2, [r3, #6]
 8002a9e:	71e2      	strb	r2, [r4, #7]
	dataStructTLE->angt 	 = bufRX[7];
 8002aa0:	79da      	ldrb	r2, [r3, #7]
 8002aa2:	7222      	strb	r2, [r4, #8]
	dataStructTLE->reserved1 = bufRX[8];
 8002aa4:	7a1a      	ldrb	r2, [r3, #8]
 8002aa6:	7262      	strb	r2, [r4, #9]
	dataStructTLE->reserved2 = bufRX[9];
 8002aa8:	7a5a      	ldrb	r2, [r3, #9]
 8002aaa:	72a2      	strb	r2, [r4, #10]
	dataStructTLE->reserved3 = bufRX[10];
 8002aac:	7a9a      	ldrb	r2, [r3, #10]
 8002aae:	72e2      	strb	r2, [r4, #11]
	dataStructTLE->reserved4 = bufRX[11];
 8002ab0:	7ada      	ldrb	r2, [r3, #11]
 8002ab2:	7322      	strb	r2, [r4, #12]
	dataStructTLE->tst		 = bufRX[12];
 8002ab4:	7b1a      	ldrb	r2, [r3, #12]
 8002ab6:	7362      	strb	r2, [r4, #13]
	dataStructTLE->deviceID  = bufRX[13];
 8002ab8:	7b5a      	ldrb	r2, [r3, #13]
 8002aba:	73a2      	strb	r2, [r4, #14]
	dataStructTLE->lock		 = bufRX[14];
 8002abc:	7b9a      	ldrb	r2, [r3, #14]
 8002abe:	73e2      	strb	r2, [r4, #15]
	dataStructTLE->ctrl2	 = bufRX[15];
 8002ac0:	7bdb      	ldrb	r3, [r3, #15]
 8002ac2:	7423      	strb	r3, [r4, #16]

//	dataStructTLE->valueX = 0xFFFF - dataStructTLE->valueX;
//	dataStructTLE->valueY = 0xFFFF - dataStructTLE->valueY;

	switch (dataType)
 8002ac4:	2e01      	cmp	r6, #1
 8002ac6:	d100      	bne.n	8002aca <TLEReadData+0x66>
 8002ac8:	e197      	b.n	8002dfa <TLEReadData+0x396>
 8002aca:	2e02      	cmp	r6, #2
 8002acc:	d100      	bne.n	8002ad0 <TLEReadData+0x6c>
 8002ace:	e19a      	b.n	8002e06 <TLEReadData+0x3a2>
			}
			break;

	}

	free(dataStructTLE);
 8002ad0:	0020      	movs	r0, r4
 8002ad2:	f004 fde1 	bl	8007698 <free>
	return 0;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	b009      	add	sp, #36	; 0x24
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bufTX = TLE_UPDATE;
 8002adc:	ab02      	add	r3, sp, #8
 8002ade:	1d9f      	adds	r7, r3, #6
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	803b      	strh	r3, [r7, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	48ca      	ldr	r0, [pc, #808]	; (8002e14 <TLEReadData+0x3b0>)
 8002aea:	f000 fe8d 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002aee:	2202      	movs	r2, #2
 8002af0:	0039      	movs	r1, r7
 8002af2:	48c9      	ldr	r0, [pc, #804]	; (8002e18 <TLEReadData+0x3b4>)
 8002af4:	f002 ffdc 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002af8:	48c7      	ldr	r0, [pc, #796]	; (8002e18 <TLEReadData+0x3b4>)
 8002afa:	f003 fad7 	bl	80060ac <HAL_SPI_GetState>
 8002afe:	2801      	cmp	r0, #1
 8002b00:	d1fa      	bne.n	8002af8 <TLEReadData+0x94>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002b02:	4fc4      	ldr	r7, [pc, #784]	; (8002e14 <TLEReadData+0x3b0>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	2110      	movs	r1, #16
 8002b08:	0038      	movs	r0, r7
 8002b0a:	f000 fe7d 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8002b0e:	ab02      	add	r3, sp, #8
 8002b10:	1d9d      	adds	r5, r3, #6
 8002b12:	2387      	movs	r3, #135	; 0x87
 8002b14:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2110      	movs	r1, #16
 8002b1a:	0038      	movs	r0, r7
 8002b1c:	f000 fe74 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002b20:	2201      	movs	r2, #1
 8002b22:	0029      	movs	r1, r5
 8002b24:	48bc      	ldr	r0, [pc, #752]	; (8002e18 <TLEReadData+0x3b4>)
 8002b26:	f002 ffc3 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002b2a:	48bb      	ldr	r0, [pc, #748]	; (8002e18 <TLEReadData+0x3b4>)
 8002b2c:	f003 fabe 	bl	80060ac <HAL_SPI_GetState>
 8002b30:	2801      	cmp	r0, #1
 8002b32:	d1fa      	bne.n	8002b2a <TLEReadData+0xc6>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002b34:	4fb8      	ldr	r7, [pc, #736]	; (8002e18 <TLEReadData+0x3b4>)
 8002b36:	2301      	movs	r3, #1
 8002b38:	2201      	movs	r2, #1
 8002b3a:	a904      	add	r1, sp, #16
 8002b3c:	0038      	movs	r0, r7
 8002b3e:	f002 feef 	bl	8005920 <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX, 7);
 8002b42:	2207      	movs	r2, #7
 8002b44:	a904      	add	r1, sp, #16
 8002b46:	0038      	movs	r0, r7
 8002b48:	f003 f93a 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002b4c:	48b2      	ldr	r0, [pc, #712]	; (8002e18 <TLEReadData+0x3b4>)
 8002b4e:	f003 faad 	bl	80060ac <HAL_SPI_GetState>
 8002b52:	2801      	cmp	r0, #1
 8002b54:	d1fa      	bne.n	8002b4c <TLEReadData+0xe8>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002b56:	4faf      	ldr	r7, [pc, #700]	; (8002e14 <TLEReadData+0x3b0>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	0038      	movs	r0, r7
 8002b5e:	f000 fe53 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 8002b62:	ab02      	add	r3, sp, #8
 8002b64:	1d9d      	adds	r5, r3, #6
 8002b66:	23bf      	movs	r3, #191	; 0xbf
 8002b68:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	0038      	movs	r0, r7
 8002b70:	f000 fe4a 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002b74:	2201      	movs	r2, #1
 8002b76:	0029      	movs	r1, r5
 8002b78:	48a7      	ldr	r0, [pc, #668]	; (8002e18 <TLEReadData+0x3b4>)
 8002b7a:	f002 ff99 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002b7e:	48a6      	ldr	r0, [pc, #664]	; (8002e18 <TLEReadData+0x3b4>)
 8002b80:	f003 fa94 	bl	80060ac <HAL_SPI_GetState>
 8002b84:	2801      	cmp	r0, #1
 8002b86:	d1fa      	bne.n	8002b7e <TLEReadData+0x11a>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002b88:	4fa3      	ldr	r7, [pc, #652]	; (8002e18 <TLEReadData+0x3b4>)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	a904      	add	r1, sp, #16
 8002b90:	0038      	movs	r0, r7
 8002b92:	f002 fec5 	bl	8005920 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+7, 7);
 8002b96:	2207      	movs	r2, #7
 8002b98:	210f      	movs	r1, #15
 8002b9a:	ab02      	add	r3, sp, #8
 8002b9c:	469c      	mov	ip, r3
 8002b9e:	4461      	add	r1, ip
 8002ba0:	0038      	movs	r0, r7
 8002ba2:	f003 f90d 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002ba6:	489c      	ldr	r0, [pc, #624]	; (8002e18 <TLEReadData+0x3b4>)
 8002ba8:	f003 fa80 	bl	80060ac <HAL_SPI_GetState>
 8002bac:	2801      	cmp	r0, #1
 8002bae:	d1fa      	bne.n	8002ba6 <TLEReadData+0x142>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002bb0:	4f98      	ldr	r7, [pc, #608]	; (8002e14 <TLEReadData+0x3b0>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	0038      	movs	r0, r7
 8002bb8:	f000 fe26 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 8002bbc:	ab02      	add	r3, sp, #8
 8002bbe:	1d9d      	adds	r5, r3, #6
 8002bc0:	23f2      	movs	r3, #242	; 0xf2
 8002bc2:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	0038      	movs	r0, r7
 8002bca:	f000 fe1d 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	0029      	movs	r1, r5
 8002bd2:	4891      	ldr	r0, [pc, #580]	; (8002e18 <TLEReadData+0x3b4>)
 8002bd4:	f002 ff6c 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002bd8:	488f      	ldr	r0, [pc, #572]	; (8002e18 <TLEReadData+0x3b4>)
 8002bda:	f003 fa67 	bl	80060ac <HAL_SPI_GetState>
 8002bde:	2801      	cmp	r0, #1
 8002be0:	d1fa      	bne.n	8002bd8 <TLEReadData+0x174>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002be2:	4f8d      	ldr	r7, [pc, #564]	; (8002e18 <TLEReadData+0x3b4>)
 8002be4:	2301      	movs	r3, #1
 8002be6:	2201      	movs	r2, #1
 8002be8:	a904      	add	r1, sp, #16
 8002bea:	0038      	movs	r0, r7
 8002bec:	f002 fe98 	bl	8005920 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+14, 2);
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	2116      	movs	r1, #22
 8002bf4:	ab02      	add	r3, sp, #8
 8002bf6:	469c      	mov	ip, r3
 8002bf8:	4461      	add	r1, ip
 8002bfa:	0038      	movs	r0, r7
 8002bfc:	f003 f8e0 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c00:	4885      	ldr	r0, [pc, #532]	; (8002e18 <TLEReadData+0x3b4>)
 8002c02:	f003 fa53 	bl	80060ac <HAL_SPI_GetState>
 8002c06:	2801      	cmp	r0, #1
 8002c08:	d1fa      	bne.n	8002c00 <TLEReadData+0x19c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	4881      	ldr	r0, [pc, #516]	; (8002e14 <TLEReadData+0x3b0>)
 8002c10:	f000 fdfa 	bl	8003808 <HAL_GPIO_WritePin>
				memcpy(pData, &dataStructTLE->valueX, 4);
 8002c14:	1ca1      	adds	r1, r4, #2
 8002c16:	2204      	movs	r2, #4
 8002c18:	9801      	ldr	r0, [sp, #4]
 8002c1a:	f004 fd47 	bl	80076ac <memcpy>
			break;
 8002c1e:	e72e      	b.n	8002a7e <TLEReadData+0x1a>
				bufTX = (bufTX << 8) + temp;
 8002c20:	ab02      	add	r3, sp, #8
 8002c22:	1d9f      	adds	r7, r3, #6
 8002c24:	4b7d      	ldr	r3, [pc, #500]	; (8002e1c <TLEReadData+0x3b8>)
 8002c26:	803b      	strh	r3, [r7, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	4879      	ldr	r0, [pc, #484]	; (8002e14 <TLEReadData+0x3b0>)
 8002c2e:	f000 fdeb 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002c32:	2202      	movs	r2, #2
 8002c34:	0039      	movs	r1, r7
 8002c36:	4878      	ldr	r0, [pc, #480]	; (8002e18 <TLEReadData+0x3b4>)
 8002c38:	f002 ff3a 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c3c:	4876      	ldr	r0, [pc, #472]	; (8002e18 <TLEReadData+0x3b4>)
 8002c3e:	f003 fa35 	bl	80060ac <HAL_SPI_GetState>
 8002c42:	2801      	cmp	r0, #1
 8002c44:	d1fa      	bne.n	8002c3c <TLEReadData+0x1d8>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002c46:	4f73      	ldr	r7, [pc, #460]	; (8002e14 <TLEReadData+0x3b0>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	0038      	movs	r0, r7
 8002c4e:	f000 fddb 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 8002c52:	ab02      	add	r3, sp, #8
 8002c54:	1d9d      	adds	r5, r3, #6
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <TLEReadData+0x3bc>)
 8002c58:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	0038      	movs	r0, r7
 8002c60:	f000 fdd2 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002c64:	2202      	movs	r2, #2
 8002c66:	0029      	movs	r1, r5
 8002c68:	486b      	ldr	r0, [pc, #428]	; (8002e18 <TLEReadData+0x3b4>)
 8002c6a:	f002 ff21 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c6e:	486a      	ldr	r0, [pc, #424]	; (8002e18 <TLEReadData+0x3b4>)
 8002c70:	f003 fa1c 	bl	80060ac <HAL_SPI_GetState>
 8002c74:	2801      	cmp	r0, #1
 8002c76:	d1fa      	bne.n	8002c6e <TLEReadData+0x20a>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002c78:	4f66      	ldr	r7, [pc, #408]	; (8002e14 <TLEReadData+0x3b0>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	2110      	movs	r1, #16
 8002c7e:	0038      	movs	r0, r7
 8002c80:	f000 fdc2 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_UPDATE;
 8002c84:	ab02      	add	r3, sp, #8
 8002c86:	1d9d      	adds	r5, r3, #6
 8002c88:	2300      	movs	r3, #0
 8002c8a:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2110      	movs	r1, #16
 8002c90:	0038      	movs	r0, r7
 8002c92:	f000 fdb9 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002c96:	2202      	movs	r2, #2
 8002c98:	0029      	movs	r1, r5
 8002c9a:	485f      	ldr	r0, [pc, #380]	; (8002e18 <TLEReadData+0x3b4>)
 8002c9c:	f002 ff08 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002ca0:	485d      	ldr	r0, [pc, #372]	; (8002e18 <TLEReadData+0x3b4>)
 8002ca2:	f003 fa03 	bl	80060ac <HAL_SPI_GetState>
 8002ca6:	2801      	cmp	r0, #1
 8002ca8:	d1fa      	bne.n	8002ca0 <TLEReadData+0x23c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002caa:	4f5a      	ldr	r7, [pc, #360]	; (8002e14 <TLEReadData+0x3b0>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	2110      	movs	r1, #16
 8002cb0:	0038      	movs	r0, r7
 8002cb2:	f000 fda9 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8002cb6:	ab02      	add	r3, sp, #8
 8002cb8:	1d9d      	adds	r5, r3, #6
 8002cba:	2387      	movs	r3, #135	; 0x87
 8002cbc:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	0038      	movs	r0, r7
 8002cc4:	f000 fda0 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	0029      	movs	r1, r5
 8002ccc:	4852      	ldr	r0, [pc, #328]	; (8002e18 <TLEReadData+0x3b4>)
 8002cce:	f002 feef 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002cd2:	4851      	ldr	r0, [pc, #324]	; (8002e18 <TLEReadData+0x3b4>)
 8002cd4:	f003 f9ea 	bl	80060ac <HAL_SPI_GetState>
 8002cd8:	2801      	cmp	r0, #1
 8002cda:	d1fa      	bne.n	8002cd2 <TLEReadData+0x26e>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002cdc:	4f4e      	ldr	r7, [pc, #312]	; (8002e18 <TLEReadData+0x3b4>)
 8002cde:	2301      	movs	r3, #1
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	a904      	add	r1, sp, #16
 8002ce4:	0038      	movs	r0, r7
 8002ce6:	f002 fe1b 	bl	8005920 <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX, 7);
 8002cea:	2207      	movs	r2, #7
 8002cec:	a904      	add	r1, sp, #16
 8002cee:	0038      	movs	r0, r7
 8002cf0:	f003 f866 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002cf4:	4848      	ldr	r0, [pc, #288]	; (8002e18 <TLEReadData+0x3b4>)
 8002cf6:	f003 f9d9 	bl	80060ac <HAL_SPI_GetState>
 8002cfa:	2801      	cmp	r0, #1
 8002cfc:	d1fa      	bne.n	8002cf4 <TLEReadData+0x290>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002cfe:	4f45      	ldr	r7, [pc, #276]	; (8002e14 <TLEReadData+0x3b0>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	2110      	movs	r1, #16
 8002d04:	0038      	movs	r0, r7
 8002d06:	f000 fd7f 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 8002d0a:	ab02      	add	r3, sp, #8
 8002d0c:	1d9d      	adds	r5, r3, #6
 8002d0e:	23bf      	movs	r3, #191	; 0xbf
 8002d10:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2110      	movs	r1, #16
 8002d16:	0038      	movs	r0, r7
 8002d18:	f000 fd76 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	0029      	movs	r1, r5
 8002d20:	483d      	ldr	r0, [pc, #244]	; (8002e18 <TLEReadData+0x3b4>)
 8002d22:	f002 fec5 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d26:	483c      	ldr	r0, [pc, #240]	; (8002e18 <TLEReadData+0x3b4>)
 8002d28:	f003 f9c0 	bl	80060ac <HAL_SPI_GetState>
 8002d2c:	2801      	cmp	r0, #1
 8002d2e:	d1fa      	bne.n	8002d26 <TLEReadData+0x2c2>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002d30:	4f39      	ldr	r7, [pc, #228]	; (8002e18 <TLEReadData+0x3b4>)
 8002d32:	2301      	movs	r3, #1
 8002d34:	2201      	movs	r2, #1
 8002d36:	a904      	add	r1, sp, #16
 8002d38:	0038      	movs	r0, r7
 8002d3a:	f002 fdf1 	bl	8005920 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+7, 7);
 8002d3e:	2207      	movs	r2, #7
 8002d40:	210f      	movs	r1, #15
 8002d42:	ab02      	add	r3, sp, #8
 8002d44:	469c      	mov	ip, r3
 8002d46:	4461      	add	r1, ip
 8002d48:	0038      	movs	r0, r7
 8002d4a:	f003 f839 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d4e:	4832      	ldr	r0, [pc, #200]	; (8002e18 <TLEReadData+0x3b4>)
 8002d50:	f003 f9ac 	bl	80060ac <HAL_SPI_GetState>
 8002d54:	2801      	cmp	r0, #1
 8002d56:	d1fa      	bne.n	8002d4e <TLEReadData+0x2ea>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002d58:	4f2e      	ldr	r7, [pc, #184]	; (8002e14 <TLEReadData+0x3b0>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	0038      	movs	r0, r7
 8002d60:	f000 fd52 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 8002d64:	ab02      	add	r3, sp, #8
 8002d66:	1d9d      	adds	r5, r3, #6
 8002d68:	23f2      	movs	r3, #242	; 0xf2
 8002d6a:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2110      	movs	r1, #16
 8002d70:	0038      	movs	r0, r7
 8002d72:	f000 fd49 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002d76:	2201      	movs	r2, #1
 8002d78:	0029      	movs	r1, r5
 8002d7a:	4827      	ldr	r0, [pc, #156]	; (8002e18 <TLEReadData+0x3b4>)
 8002d7c:	f002 fe98 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d80:	4825      	ldr	r0, [pc, #148]	; (8002e18 <TLEReadData+0x3b4>)
 8002d82:	f003 f993 	bl	80060ac <HAL_SPI_GetState>
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d1fa      	bne.n	8002d80 <TLEReadData+0x31c>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002d8a:	4f23      	ldr	r7, [pc, #140]	; (8002e18 <TLEReadData+0x3b4>)
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2201      	movs	r2, #1
 8002d90:	a904      	add	r1, sp, #16
 8002d92:	0038      	movs	r0, r7
 8002d94:	f002 fdc4 	bl	8005920 <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)bufRX+14, 2);
 8002d98:	2202      	movs	r2, #2
 8002d9a:	2116      	movs	r1, #22
 8002d9c:	ab02      	add	r3, sp, #8
 8002d9e:	469c      	mov	ip, r3
 8002da0:	4461      	add	r1, ip
 8002da2:	0038      	movs	r0, r7
 8002da4:	f003 f80c 	bl	8005dc0 <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002da8:	481b      	ldr	r0, [pc, #108]	; (8002e18 <TLEReadData+0x3b4>)
 8002daa:	f003 f97f 	bl	80060ac <HAL_SPI_GetState>
 8002dae:	2801      	cmp	r0, #1
 8002db0:	d1fa      	bne.n	8002da8 <TLEReadData+0x344>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002db2:	4f18      	ldr	r7, [pc, #96]	; (8002e14 <TLEReadData+0x3b0>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	2110      	movs	r1, #16
 8002db8:	0038      	movs	r0, r7
 8002dba:	f000 fd25 	bl	8003808 <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 8002dbe:	ab02      	add	r3, sp, #8
 8002dc0:	1d9d      	adds	r5, r3, #6
 8002dc2:	2361      	movs	r3, #97	; 0x61
 8002dc4:	802b      	strh	r3, [r5, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2110      	movs	r1, #16
 8002dca:	0038      	movs	r0, r7
 8002dcc:	f000 fd1c 	bl	8003808 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	0029      	movs	r1, r5
 8002dd4:	4810      	ldr	r0, [pc, #64]	; (8002e18 <TLEReadData+0x3b4>)
 8002dd6:	f002 fe6b 	bl	8005ab0 <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002dda:	480f      	ldr	r0, [pc, #60]	; (8002e18 <TLEReadData+0x3b4>)
 8002ddc:	f003 f966 	bl	80060ac <HAL_SPI_GetState>
 8002de0:	2801      	cmp	r0, #1
 8002de2:	d1fa      	bne.n	8002dda <TLEReadData+0x376>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	2110      	movs	r1, #16
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <TLEReadData+0x3b0>)
 8002dea:	f000 fd0d 	bl	8003808 <HAL_GPIO_WritePin>
				memcpy(pData, &dataStructTLE->valueX, 2);
 8002dee:	1ca1      	adds	r1, r4, #2
 8002df0:	2202      	movs	r2, #2
 8002df2:	9801      	ldr	r0, [sp, #4]
 8002df4:	f004 fc5a 	bl	80076ac <memcpy>
			break;
 8002df8:	e641      	b.n	8002a7e <TLEReadData+0x1a>
				memcpy(pData, &dataStructTLE->valueX, 4);
 8002dfa:	1ca1      	adds	r1, r4, #2
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	9801      	ldr	r0, [sp, #4]
 8002e00:	f004 fc54 	bl	80076ac <memcpy>
			break;
 8002e04:	e664      	b.n	8002ad0 <TLEReadData+0x6c>
				memcpy(pData, &dataStructTLE->valueX, 4);
 8002e06:	1ca1      	adds	r1, r4, #2
 8002e08:	2204      	movs	r2, #4
 8002e0a:	9801      	ldr	r0, [sp, #4]
 8002e0c:	f004 fc4e 	bl	80076ac <memcpy>
			break;
 8002e10:	e65e      	b.n	8002ad0 <TLEReadData+0x6c>
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	48000400 	.word	0x48000400
 8002e18:	2000025c 	.word	0x2000025c
 8002e1c:	00005a71 	.word	0x00005a71
 8002e20:	ffff8061 	.word	0xffff8061

08002e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	2214      	movs	r2, #20
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	a803      	add	r0, sp, #12
 8002e2e:	f004 fc46 	bl	80076be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <MX_GPIO_Init+0xb4>)
 8002e34:	6959      	ldr	r1, [r3, #20]
 8002e36:	2080      	movs	r0, #128	; 0x80
 8002e38:	0300      	lsls	r0, r0, #12
 8002e3a:	4301      	orrs	r1, r0
 8002e3c:	6159      	str	r1, [r3, #20]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	4002      	ands	r2, r0
 8002e42:	9200      	str	r2, [sp, #0]
 8002e44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	6959      	ldr	r1, [r3, #20]
 8002e48:	2080      	movs	r0, #128	; 0x80
 8002e4a:	0280      	lsls	r0, r0, #10
 8002e4c:	4301      	orrs	r1, r0
 8002e4e:	6159      	str	r1, [r3, #20]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	4002      	ands	r2, r0
 8002e54:	9201      	str	r2, [sp, #4]
 8002e56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	02c9      	lsls	r1, r1, #11
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	400b      	ands	r3, r1
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e6a:	2790      	movs	r7, #144	; 0x90
 8002e6c:	05ff      	lsls	r7, r7, #23
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2120      	movs	r1, #32
 8002e72:	0038      	movs	r0, r7
 8002e74:	f000 fcc8 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e78:	4e18      	ldr	r6, [pc, #96]	; (8002edc <MX_GPIO_Init+0xb8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	0030      	movs	r0, r6
 8002e80:	f000 fcc2 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	019b      	lsls	r3, r3, #6
 8002e88:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <MX_GPIO_Init+0xbc>)
 8002e8c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2500      	movs	r5, #0
 8002e90:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e92:	a903      	add	r1, sp, #12
 8002e94:	4813      	ldr	r0, [pc, #76]	; (8002ee4 <MX_GPIO_Init+0xc0>)
 8002e96:	f000 fbe9 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9e:	2401      	movs	r4, #1
 8002ea0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	a903      	add	r1, sp, #12
 8002ea8:	0038      	movs	r0, r7
 8002eaa:	f000 fbdf 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	3b0d      	subs	r3, #13
 8002eb8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002eba:	a903      	add	r1, sp, #12
 8002ebc:	0030      	movs	r0, r6
 8002ebe:	f000 fbd5 	bl	800366c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	2007      	movs	r0, #7
 8002ec8:	f000 faae 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ecc:	2007      	movs	r0, #7
 8002ece:	f000 fadd 	bl	800348c <HAL_NVIC_EnableIRQ>

}
 8002ed2:	b009      	add	sp, #36	; 0x24
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	10310000 	.word	0x10310000
 8002ee4:	48000800 	.word	0x48000800

08002ee8 <MX_DMA_Init>:
{
 8002ee8:	b500      	push	{lr}
 8002eea:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <MX_DMA_Init+0x2c>)
 8002eee:	6951      	ldr	r1, [r2, #20]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4319      	orrs	r1, r3
 8002ef4:	6151      	str	r1, [r2, #20]
 8002ef6:	6952      	ldr	r2, [r2, #20]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	200b      	movs	r0, #11
 8002f04:	f000 fa90 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002f08:	200b      	movs	r0, #11
 8002f0a:	f000 fabf 	bl	800348c <HAL_NVIC_EnableIRQ>
}
 8002f0e:	b003      	add	sp, #12
 8002f10:	bd00      	pop	{pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40021000 	.word	0x40021000

08002f18 <MX_TIM3_Init>:
{
 8002f18:	b530      	push	{r4, r5, lr}
 8002f1a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	2100      	movs	r1, #0
 8002f20:	a808      	add	r0, sp, #32
 8002f22:	f004 fbcc 	bl	80076be <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f26:	221c      	movs	r2, #28
 8002f28:	2100      	movs	r1, #0
 8002f2a:	a801      	add	r0, sp, #4
 8002f2c:	f004 fbc7 	bl	80076be <memset>
  htim3.Instance = TIM3;
 8002f30:	4c11      	ldr	r4, [pc, #68]	; (8002f78 <MX_TIM3_Init+0x60>)
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <MX_TIM3_Init+0x64>)
 8002f34:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 2;
 8002f36:	2302      	movs	r3, #2
 8002f38:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 3;
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f42:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f44:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f46:	0020      	movs	r0, r4
 8002f48:	f003 faa8 	bl	800649c <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	9508      	str	r5, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4e:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f50:	a908      	add	r1, sp, #32
 8002f52:	0020      	movs	r0, r4
 8002f54:	f003 fbb4 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f58:	2360      	movs	r3, #96	; 0x60
 8002f5a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002f5c:	9502      	str	r5, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5e:	9503      	str	r5, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f60:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f62:	2204      	movs	r2, #4
 8002f64:	a901      	add	r1, sp, #4
 8002f66:	0020      	movs	r0, r4
 8002f68:	f003 faf6 	bl	8006558 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f000 f94b 	bl	8003208 <HAL_TIM_MspPostInit>
}
 8002f72:	b00b      	add	sp, #44	; 0x2c
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	2000030c 	.word	0x2000030c
 8002f7c:	40000400 	.word	0x40000400

08002f80 <MX_SPI2_Init>:
{
 8002f80:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8002f82:	4810      	ldr	r0, [pc, #64]	; (8002fc4 <MX_SPI2_Init+0x44>)
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_SPI2_Init+0x48>)
 8002f86:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f88:	2382      	movs	r3, #130	; 0x82
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f94:	23e0      	movs	r3, #224	; 0xe0
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002fa6:	3ac9      	subs	r2, #201	; 0xc9
 8002fa8:	3aff      	subs	r2, #255	; 0xff
 8002faa:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fac:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fae:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002fb2:	3a31      	subs	r2, #49	; 0x31
 8002fb4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb8:	3308      	adds	r3, #8
 8002fba:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fbc:	f002 faf6 	bl	80055ac <HAL_SPI_Init>
}
 8002fc0:	bd10      	pop	{r4, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	2000025c 	.word	0x2000025c
 8002fc8:	40003800 	.word	0x40003800

08002fcc <SystemClock_Config>:
{
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd0:	2234      	movs	r2, #52	; 0x34
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	a80b      	add	r0, sp, #44	; 0x2c
 8002fd6:	f004 fb72 	bl	80076be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fda:	2210      	movs	r2, #16
 8002fdc:	2100      	movs	r1, #0
 8002fde:	a807      	add	r0, sp, #28
 8002fe0:	f004 fb6d 	bl	80076be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe4:	221c      	movs	r2, #28
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4668      	mov	r0, sp
 8002fea:	f004 fb68 	bl	80076be <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ff2:	3b1f      	subs	r3, #31
 8002ff4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff6:	a80b      	add	r0, sp, #44	; 0x2c
 8002ff8:	f001 fd4c 	bl	8004a94 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003000:	3b04      	subs	r3, #4
 8003002:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003004:	2400      	movs	r4, #0
 8003006:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003008:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800300a:	2101      	movs	r1, #1
 800300c:	a807      	add	r0, sp, #28
 800300e:	f002 f807 	bl	8005020 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	9300      	str	r3, [sp, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003018:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800301a:	4668      	mov	r0, sp
 800301c:	f002 f8f4 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
}
 8003020:	b018      	add	sp, #96	; 0x60
 8003022:	bd10      	pop	{r4, pc}

08003024 <main>:
{
 8003024:	b510      	push	{r4, lr}
  HAL_Init();
 8003026:	f000 f9cf 	bl	80033c8 <HAL_Init>
  SystemClock_Config();
 800302a:	f7ff ffcf 	bl	8002fcc <SystemClock_Config>
  MX_GPIO_Init();
 800302e:	f7ff fef9 	bl	8002e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8003032:	f7ff ff59 	bl	8002ee8 <MX_DMA_Init>
  MX_TIM3_Init();
 8003036:	f7ff ff6f 	bl	8002f18 <MX_TIM3_Init>
  MX_SPI2_Init();
 800303a:	f7ff ffa1 	bl	8002f80 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800303e:	f004 f8c5 	bl	80071cc <MX_USB_DEVICE_Init>
	joyStates.a1 = 1;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <main+0x60>)
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
	joyStates.a2 = 2;
 8003048:	3201      	adds	r2, #1
 800304a:	705a      	strb	r2, [r3, #1]
	joyStates.a3 = 3;
 800304c:	2103      	movs	r1, #3
 800304e:	7099      	strb	r1, [r3, #2]
	joyStates.a4 = 4;
 8003050:	3101      	adds	r1, #1
 8003052:	70d9      	strb	r1, [r3, #3]
	joyStates.a5 = 5;
 8003054:	3101      	adds	r1, #1
 8003056:	7119      	strb	r1, [r3, #4]
	joyStates.a6 = 6;
 8003058:	3101      	adds	r1, #1
 800305a:	7159      	strb	r1, [r3, #5]
	joyStates.a7 = 7;
 800305c:	3101      	adds	r1, #1
 800305e:	7199      	strb	r1, [r3, #6]
	joyStates.a8 = 8;
 8003060:	3101      	adds	r1, #1
 8003062:	71d9      	strb	r1, [r3, #7]
	TIM3->CCR2 = 2;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <main+0x64>)
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003068:	3904      	subs	r1, #4
 800306a:	4808      	ldr	r0, [pc, #32]	; (800308c <main+0x68>)
 800306c:	f003 faf6 	bl	800665c <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	f000 f9c7 	bl	8003404 <HAL_Delay>
	GetTempValues();
 8003076:	f7ff fbbb 	bl	80027f0 <GetTempValues>
	  resultAngle = ResultAngle();
 800307a:	f7ff fc8b 	bl	8002994 <ResultAngle>
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <main+0x6c>)
 8003080:	6018      	str	r0, [r3, #0]
 8003082:	e7fa      	b.n	800307a <main+0x56>
 8003084:	20000304 	.word	0x20000304
 8003088:	40000400 	.word	0x40000400
 800308c:	2000030c 	.word	0x2000030c
 8003090:	2000039c 	.word	0x2000039c

08003094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003096:	6802      	ldr	r2, [r0, #0]
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d000      	beq.n	80030a0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800309e:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80030a0:	f000 f9a2 	bl	80033e8 <HAL_IncTick>
}
 80030a4:	e7fb      	b.n	800309e <HAL_TIM_PeriodElapsedCallback+0xa>
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40001000 	.word	0x40001000

080030ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b500      	push	{lr}
 80030b2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_MspInit+0x3c>)
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	2201      	movs	r2, #1
 80030ba:	4311      	orrs	r1, r2
 80030bc:	6199      	str	r1, [r3, #24]
 80030be:	6999      	ldr	r1, [r3, #24]
 80030c0:	400a      	ands	r2, r1
 80030c2:	9200      	str	r2, [sp, #0]
 80030c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0549      	lsls	r1, r1, #21
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	400b      	ands	r3, r1
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	2004      	movs	r0, #4
 80030de:	f000 f9a3 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80030e2:	2004      	movs	r0, #4
 80030e4:	f000 f9d2 	bl	800348c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e8:	b003      	add	sp, #12
 80030ea:	bd00      	pop	{pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f6:	2214      	movs	r2, #20
 80030f8:	2100      	movs	r1, #0
 80030fa:	a803      	add	r0, sp, #12
 80030fc:	f004 fadf 	bl	80076be <memset>
  if(hspi->Instance==SPI2)
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_SPI_MspInit+0xd0>)
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003108:	b009      	add	sp, #36	; 0x24
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_SPI_MspInit+0xd4>)
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	2080      	movs	r0, #128	; 0x80
 8003112:	01c0      	lsls	r0, r0, #7
 8003114:	4301      	orrs	r1, r0
 8003116:	61d9      	str	r1, [r3, #28]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	4002      	ands	r2, r0
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	02c9      	lsls	r1, r1, #11
 8003126:	430a      	orrs	r2, r1
 8003128:	615a      	str	r2, [r3, #20]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	400b      	ands	r3, r1
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2502      	movs	r5, #2
 800313a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800313c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313e:	2703      	movs	r7, #3
 8003140:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	4e21      	ldr	r6, [pc, #132]	; (80031c8 <HAL_SPI_MspInit+0xd8>)
 8003144:	a903      	add	r1, sp, #12
 8003146:	0030      	movs	r0, r6
 8003148:	f000 fa90 	bl	800366c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003154:	2301      	movs	r3, #1
 8003156:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003158:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800315a:	2500      	movs	r5, #0
 800315c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	a903      	add	r1, sp, #12
 8003160:	0030      	movs	r0, r6
 8003162:	f000 fa83 	bl	800366c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003166:	4819      	ldr	r0, [pc, #100]	; (80031cc <HAL_SPI_MspInit+0xdc>)
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_SPI_MspInit+0xe0>)
 800316a:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316c:	2310      	movs	r3, #16
 800316e:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	6085      	str	r5, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003172:	3370      	adds	r3, #112	; 0x70
 8003174:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003176:	6105      	str	r5, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003178:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800317a:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800317c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800317e:	f000 f9b9 	bl	80034f4 <HAL_DMA_Init>
 8003182:	2800      	cmp	r0, #0
 8003184:	d116      	bne.n	80031b4 <HAL_SPI_MspInit+0xc4>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_SPI_MspInit+0xdc>)
 8003188:	6563      	str	r3, [r4, #84]	; 0x54
 800318a:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800318c:	4811      	ldr	r0, [pc, #68]	; (80031d4 <HAL_SPI_MspInit+0xe4>)
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_SPI_MspInit+0xe8>)
 8003190:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003192:	2300      	movs	r3, #0
 8003194:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003196:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	60c2      	str	r2, [r0, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800319c:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319e:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80031a0:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031a2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80031a4:	f000 f9a6 	bl	80034f4 <HAL_DMA_Init>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d106      	bne.n	80031ba <HAL_SPI_MspInit+0xca>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_SPI_MspInit+0xe4>)
 80031ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80031b0:	625c      	str	r4, [r3, #36]	; 0x24
}
 80031b2:	e7a9      	b.n	8003108 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 80031b4:	f7ff ff7a 	bl	80030ac <Error_Handler>
 80031b8:	e7e5      	b.n	8003186 <HAL_SPI_MspInit+0x96>
      Error_Handler();
 80031ba:	f7ff ff77 	bl	80030ac <Error_Handler>
 80031be:	e7f5      	b.n	80031ac <HAL_SPI_MspInit+0xbc>
 80031c0:	40003800 	.word	0x40003800
 80031c4:	40021000 	.word	0x40021000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	20000358 	.word	0x20000358
 80031d0:	40020058 	.word	0x40020058
 80031d4:	200002c0 	.word	0x200002c0
 80031d8:	40020044 	.word	0x40020044

080031dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031dc:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 80031de:	6802      	ldr	r2, [r0, #0]
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_TIM_PWM_MspInit+0x24>)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_MspInit+0xe>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031e6:	b002      	add	sp, #8
 80031e8:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ea:	4a06      	ldr	r2, [pc, #24]	; (8003204 <HAL_TIM_PWM_MspInit+0x28>)
 80031ec:	69d1      	ldr	r1, [r2, #28]
 80031ee:	2302      	movs	r3, #2
 80031f0:	4319      	orrs	r1, r3
 80031f2:	61d1      	str	r1, [r2, #28]
 80031f4:	69d2      	ldr	r2, [r2, #28]
 80031f6:	4013      	ands	r3, r2
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	9b01      	ldr	r3, [sp, #4]
}
 80031fc:	e7f3      	b.n	80031e6 <HAL_TIM_PWM_MspInit+0xa>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40000400 	.word	0x40000400
 8003204:	40021000 	.word	0x40021000

08003208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003208:	b510      	push	{r4, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	2214      	movs	r2, #20
 8003210:	2100      	movs	r1, #0
 8003212:	a801      	add	r0, sp, #4
 8003214:	f004 fa53 	bl	80076be <memset>
  if(htim->Instance==TIM3)
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_TIM_MspPostInit+0x4c>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003220:	b006      	add	sp, #24
 8003222:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_TIM_MspPostInit+0x50>)
 8003226:	6951      	ldr	r1, [r2, #20]
 8003228:	2080      	movs	r0, #128	; 0x80
 800322a:	02c0      	lsls	r0, r0, #11
 800322c:	4301      	orrs	r1, r0
 800322e:	6151      	str	r1, [r2, #20]
 8003230:	6953      	ldr	r3, [r2, #20]
 8003232:	4003      	ands	r3, r0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GEN_Pin;
 8003238:	2320      	movs	r3, #32
 800323a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	3b1e      	subs	r3, #30
 800323e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003240:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	3301      	adds	r3, #1
 8003244:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003246:	3b02      	subs	r3, #2
 8003248:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GEN_GPIO_Port, &GPIO_InitStruct);
 800324a:	a901      	add	r1, sp, #4
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <HAL_TIM_MspPostInit+0x54>)
 800324e:	f000 fa0d 	bl	800366c <HAL_GPIO_Init>
}
 8003252:	e7e5      	b.n	8003220 <HAL_TIM_MspPostInit+0x18>
 8003254:	40000400 	.word	0x40000400
 8003258:	40021000 	.word	0x40021000
 800325c:	48000400 	.word	0x48000400

08003260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b500      	push	{lr}
 8003262:	b087      	sub	sp, #28
 8003264:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003266:	2200      	movs	r2, #0
 8003268:	2011      	movs	r0, #17
 800326a:	f000 f8dd 	bl	8003428 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800326e:	2011      	movs	r0, #17
 8003270:	f000 f90c 	bl	800348c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <HAL_InitTick+0x64>)
 8003276:	69d1      	ldr	r1, [r2, #28]
 8003278:	2310      	movs	r3, #16
 800327a:	4319      	orrs	r1, r3
 800327c:	61d1      	str	r1, [r2, #28]
 800327e:	69d2      	ldr	r2, [r2, #28]
 8003280:	4013      	ands	r3, r2
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003286:	a901      	add	r1, sp, #4
 8003288:	a802      	add	r0, sp, #8
 800328a:	f001 ffa1 	bl	80051d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800328e:	f001 ff8f 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003292:	490d      	ldr	r1, [pc, #52]	; (80032c8 <HAL_InitTick+0x68>)
 8003294:	f7fc ff42 	bl	800011c <__udivsi3>
 8003298:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800329a:	480c      	ldr	r0, [pc, #48]	; (80032cc <HAL_InitTick+0x6c>)
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_InitTick+0x70>)
 800329e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_InitTick+0x74>)
 80032a2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032a4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032ac:	f003 f8dc 	bl	8006468 <HAL_TIM_Base_Init>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d002      	beq.n	80032ba <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
}
 80032b6:	b007      	add	sp, #28
 80032b8:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 80032ba:	4804      	ldr	r0, [pc, #16]	; (80032cc <HAL_InitTick+0x6c>)
 80032bc:	f002 ffc5 	bl	800624a <HAL_TIM_Base_Start_IT>
 80032c0:	e7f9      	b.n	80032b6 <HAL_InitTick+0x56>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	000f4240 	.word	0x000f4240
 80032cc:	200003a4 	.word	0x200003a4
 80032d0:	40001000 	.word	0x40001000
 80032d4:	000003e7 	.word	0x000003e7

080032d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032d8:	4770      	bx	lr

080032da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032da:	e7fe      	b.n	80032da <HardFault_Handler>

080032dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032de:	4770      	bx	lr

080032e0 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e0:	4770      	bx	lr

080032e2 <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80032e2:	4770      	bx	lr

080032e4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80032e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032e6:	2080      	movs	r0, #128	; 0x80
 80032e8:	0180      	lsls	r0, r0, #6
 80032ea:	f000 fa95 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
//		joyStates.a7 = 0;
//  }
//  else{
//	  joyStates.a7 = 1;
//  }
  GetMaxMinValues();
 80032ee:	f7ff fb33 	bl	8002958 <GetMaxMinValues>
//	}
//	else{
//		joyStates.a7 = 0;
//	}
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80032f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80032f6:	4803      	ldr	r0, [pc, #12]	; (8003304 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 80032f8:	f000 f963 	bl	80035c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80032fe:	f000 f960 	bl	80035c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003302:	bd10      	pop	{r4, pc}
 8003304:	200002c0 	.word	0x200002c0
 8003308:	20000358 	.word	0x20000358

0800330c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800330c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800330e:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM6_DAC_IRQHandler+0xc>)
 8003310:	f002 ffaa 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	200003a4 	.word	0x200003a4

0800331c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800331c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800331e:	4802      	ldr	r0, [pc, #8]	; (8003328 <USB_IRQHandler+0xc>)
 8003320:	f001 fb0a 	bl	8004938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003324:	bd10      	pop	{r4, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	2000080c 	.word	0x2000080c

0800332c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800332c:	b510      	push	{r4, lr}
 800332e:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <_sbrk+0x34>)
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	2a00      	cmp	r2, #0
 8003336:	d008      	beq.n	800334a <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <_sbrk+0x34>)
 800333a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800333c:	18c3      	adds	r3, r0, r3
 800333e:	466a      	mov	r2, sp
 8003340:	4293      	cmp	r3, r2
 8003342:	d806      	bhi.n	8003352 <_sbrk+0x26>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003344:	4a06      	ldr	r2, [pc, #24]	; (8003360 <_sbrk+0x34>)
 8003346:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003348:	bd10      	pop	{r4, pc}
		heap_end = &end;
 800334a:	4906      	ldr	r1, [pc, #24]	; (8003364 <_sbrk+0x38>)
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <_sbrk+0x34>)
 800334e:	6011      	str	r1, [r2, #0]
 8003350:	e7f2      	b.n	8003338 <_sbrk+0xc>
		errno = ENOMEM;
 8003352:	f004 f96d 	bl	8007630 <__errno>
 8003356:	230c      	movs	r3, #12
 8003358:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800335a:	2001      	movs	r0, #1
 800335c:	4240      	negs	r0, r0
 800335e:	e7f3      	b.n	8003348 <_sbrk+0x1c>
 8003360:	200001b0 	.word	0x200001b0
 8003364:	20000a30 	.word	0x20000a30

08003368 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <SystemInit+0x48>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	430a      	orrs	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	480f      	ldr	r0, [pc, #60]	; (80033b4 <SystemInit+0x4c>)
 8003376:	4002      	ands	r2, r0
 8003378:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <SystemInit+0x50>)
 800337e:	4002      	ands	r2, r0
 8003380:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	480d      	ldr	r0, [pc, #52]	; (80033bc <SystemInit+0x54>)
 8003386:	4002      	ands	r2, r0
 8003388:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	480c      	ldr	r0, [pc, #48]	; (80033c0 <SystemInit+0x58>)
 800338e:	4002      	ands	r2, r0
 8003390:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	200f      	movs	r0, #15
 8003396:	4382      	bics	r2, r0
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800339a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339c:	4809      	ldr	r0, [pc, #36]	; (80033c4 <SystemInit+0x5c>)
 800339e:	4002      	ands	r2, r0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	438a      	bics	r2, r1
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]

}
 80033ac:	4770      	bx	lr
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08ffb80c 	.word	0x08ffb80c
 80033b8:	fef6ffff 	.word	0xfef6ffff
 80033bc:	fffbffff 	.word	0xfffbffff
 80033c0:	ffc0ffff 	.word	0xffc0ffff
 80033c4:	fffcfe2c 	.word	0xfffcfe2c

080033c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ca:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_Init+0x1c>)
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	2110      	movs	r1, #16
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7ff ff43 	bl	8003260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033da:	f7ff fe69 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80033de:	2000      	movs	r0, #0
 80033e0:	bd10      	pop	{r4, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40022000 	.word	0x40022000

080033e8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80033e8:	4a02      	ldr	r2, [pc, #8]	; (80033f4 <HAL_IncTick+0xc>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	4770      	bx	lr
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	200003e4 	.word	0x200003e4

080033f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033f8:	4b01      	ldr	r3, [pc, #4]	; (8003400 <HAL_GetTick+0x8>)
 80033fa:	6818      	ldr	r0, [r3, #0]
}
 80033fc:	4770      	bx	lr
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	200003e4 	.word	0x200003e4

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003404:	b530      	push	{r4, r5, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800340a:	f7ff fff5 	bl	80033f8 <HAL_GetTick>
 800340e:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 8003410:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	1c63      	adds	r3, r4, #1
 8003414:	d000      	beq.n	8003418 <HAL_Delay+0x14>
  {
     wait++;
 8003416:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003418:	f7ff ffee 	bl	80033f8 <HAL_GetTick>
 800341c:	1b40      	subs	r0, r0, r5
 800341e:	42a0      	cmp	r0, r4
 8003420:	d3fa      	bcc.n	8003418 <HAL_Delay+0x14>
  {
  }
}
 8003422:	b003      	add	sp, #12
 8003424:	bd30      	pop	{r4, r5, pc}
	...

08003428 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003428:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800342a:	2800      	cmp	r0, #0
 800342c:	db11      	blt.n	8003452 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800342e:	0883      	lsrs	r3, r0, #2
 8003430:	4d14      	ldr	r5, [pc, #80]	; (8003484 <HAL_NVIC_SetPriority+0x5c>)
 8003432:	33c0      	adds	r3, #192	; 0xc0
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	595c      	ldr	r4, [r3, r5]
 8003438:	2203      	movs	r2, #3
 800343a:	4010      	ands	r0, r2
 800343c:	00c0      	lsls	r0, r0, #3
 800343e:	32fc      	adds	r2, #252	; 0xfc
 8003440:	0016      	movs	r6, r2
 8003442:	4086      	lsls	r6, r0
 8003444:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003446:	0189      	lsls	r1, r1, #6
 8003448:	400a      	ands	r2, r1
 800344a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	4322      	orrs	r2, r4
 800344e:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003450:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003452:	b2c0      	uxtb	r0, r0
 8003454:	230f      	movs	r3, #15
 8003456:	4003      	ands	r3, r0
 8003458:	3b08      	subs	r3, #8
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3306      	adds	r3, #6
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_NVIC_SetPriority+0x60>)
 8003462:	4694      	mov	ip, r2
 8003464:	4463      	add	r3, ip
 8003466:	685d      	ldr	r5, [r3, #4]
 8003468:	2203      	movs	r2, #3
 800346a:	4010      	ands	r0, r2
 800346c:	00c0      	lsls	r0, r0, #3
 800346e:	24ff      	movs	r4, #255	; 0xff
 8003470:	0022      	movs	r2, r4
 8003472:	4082      	lsls	r2, r0
 8003474:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003476:	0189      	lsls	r1, r1, #6
 8003478:	400c      	ands	r4, r1
 800347a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347c:	432c      	orrs	r4, r5
 800347e:	605c      	str	r4, [r3, #4]
 8003480:	e7e6      	b.n	8003450 <HAL_NVIC_SetPriority+0x28>
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800348c:	231f      	movs	r3, #31
 800348e:	4018      	ands	r0, r3
 8003490:	3b1e      	subs	r3, #30
 8003492:	4083      	lsls	r3, r0
 8003494:	4a01      	ldr	r2, [pc, #4]	; (800349c <HAL_NVIC_EnableIRQ+0x10>)
 8003496:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	e000e100 	.word	0xe000e100

080034a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034a2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80034a4:	2401      	movs	r4, #1
 80034a6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80034a8:	40b4      	lsls	r4, r6
 80034aa:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ac:	6804      	ldr	r4, [r0, #0]
 80034ae:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b0:	6843      	ldr	r3, [r0, #4]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d004      	beq.n	80034c0 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80034b6:	6803      	ldr	r3, [r0, #0]
 80034b8:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80034ba:	6803      	ldr	r3, [r0, #0]
 80034bc:	60da      	str	r2, [r3, #12]
  }
}
 80034be:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80034c0:	6803      	ldr	r3, [r0, #0]
 80034c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80034c4:	6803      	ldr	r3, [r0, #0]
 80034c6:	60d9      	str	r1, [r3, #12]
 80034c8:	e7f9      	b.n	80034be <DMA_SetConfig+0x1e>
	...

080034cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	4a06      	ldr	r2, [pc, #24]	; (80034ec <DMA_CalcBaseAndBitshift+0x20>)
 80034d4:	4694      	mov	ip, r2
 80034d6:	4463      	add	r3, ip
 80034d8:	0018      	movs	r0, r3
 80034da:	2114      	movs	r1, #20
 80034dc:	f7fc fe1e 	bl	800011c <__udivsi3>
 80034e0:	0080      	lsls	r0, r0, #2
 80034e2:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <DMA_CalcBaseAndBitshift+0x24>)
 80034e6:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	bffdfff8 	.word	0xbffdfff8
 80034f0:	40020000 	.word	0x40020000

080034f4 <HAL_DMA_Init>:
{ 
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 80034f8:	d024      	beq.n	8003544 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 80034fa:	2521      	movs	r5, #33	; 0x21
 80034fc:	2302      	movs	r3, #2
 80034fe:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8003500:	6801      	ldr	r1, [r0, #0]
 8003502:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003504:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_DMA_Init+0x54>)
 8003506:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003508:	6843      	ldr	r3, [r0, #4]
 800350a:	6880      	ldr	r0, [r0, #8]
 800350c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	68e0      	ldr	r0, [r4, #12]
 8003510:	4303      	orrs	r3, r0
 8003512:	6920      	ldr	r0, [r4, #16]
 8003514:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	6960      	ldr	r0, [r4, #20]
 8003518:	4303      	orrs	r3, r0
 800351a:	69a0      	ldr	r0, [r4, #24]
 800351c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	69e0      	ldr	r0, [r4, #28]
 8003520:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003522:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8003524:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003526:	0020      	movs	r0, r4
 8003528:	f7ff ffd0 	bl	80034cc <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003530:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003532:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003534:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003536:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003538:	2201      	movs	r2, #1
 800353a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 800353c:	321f      	adds	r2, #31
 800353e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003540:	2000      	movs	r0, #0
}  
 8003542:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e7fc      	b.n	8003542 <HAL_DMA_Init+0x4e>
 8003548:	ffffc00f 	.word	0xffffc00f

0800354c <HAL_DMA_Start_IT>:
{
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003550:	2020      	movs	r0, #32
 8003552:	5c20      	ldrb	r0, [r4, r0]
 8003554:	2801      	cmp	r0, #1
 8003556:	d032      	beq.n	80035be <HAL_DMA_Start_IT+0x72>
 8003558:	2501      	movs	r5, #1
 800355a:	2020      	movs	r0, #32
 800355c:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 800355e:	3001      	adds	r0, #1
 8003560:	5c20      	ldrb	r0, [r4, r0]
 8003562:	2801      	cmp	r0, #1
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003566:	2200      	movs	r2, #0
 8003568:	2320      	movs	r3, #32
 800356a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 800356c:	2002      	movs	r0, #2
} 
 800356e:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003570:	3501      	adds	r5, #1
 8003572:	3020      	adds	r0, #32
 8003574:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003576:	2000      	movs	r0, #0
 8003578:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	6828      	ldr	r0, [r5, #0]
 800357e:	2601      	movs	r6, #1
 8003580:	43b0      	bics	r0, r6
 8003582:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003584:	0020      	movs	r0, r4
 8003586:	f7ff ff8b 	bl	80034a0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 800358a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	210e      	movs	r1, #14
 8003596:	430b      	orrs	r3, r1
 8003598:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e7e2      	b.n	800356e <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	210a      	movs	r1, #10
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	3906      	subs	r1, #6
 80035b8:	438b      	bics	r3, r1
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e7ed      	b.n	800359a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80035be:	2002      	movs	r0, #2
 80035c0:	e7d5      	b.n	800356e <HAL_DMA_Start_IT+0x22>

080035c2 <HAL_DMA_IRQHandler>:
{
 80035c2:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80035c6:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80035c8:	6804      	ldr	r4, [r0, #0]
 80035ca:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035ce:	2304      	movs	r3, #4
 80035d0:	408b      	lsls	r3, r1
 80035d2:	4213      	tst	r3, r2
 80035d4:	d012      	beq.n	80035fc <HAL_DMA_IRQHandler+0x3a>
 80035d6:	076b      	lsls	r3, r5, #29
 80035d8:	d510      	bpl.n	80035fc <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	069b      	lsls	r3, r3, #26
 80035de:	d403      	bmi.n	80035e8 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	2204      	movs	r2, #4
 80035e4:	4393      	bics	r3, r2
 80035e6:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80035ea:	2304      	movs	r3, #4
 80035ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035ee:	408b      	lsls	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80035f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d000      	beq.n	80035fa <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 80035f8:	4798      	blx	r3
}  
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035fc:	2302      	movs	r3, #2
 80035fe:	408b      	lsls	r3, r1
 8003600:	4213      	tst	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_IRQHandler+0x74>
 8003604:	07ab      	lsls	r3, r5, #30
 8003606:	d516      	bpl.n	8003636 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	069b      	lsls	r3, r3, #26
 800360c:	d406      	bmi.n	800361c <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	220a      	movs	r2, #10
 8003612:	4393      	bics	r3, r2
 8003614:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003616:	3a09      	subs	r2, #9
 8003618:	2321      	movs	r3, #33	; 0x21
 800361a:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800361c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800361e:	2302      	movs	r3, #2
 8003620:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003622:	408b      	lsls	r3, r1
 8003624:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8003626:	2200      	movs	r2, #0
 8003628:	2320      	movs	r3, #32
 800362a:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 800362c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0e3      	beq.n	80035fa <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8003632:	4798      	blx	r3
 8003634:	e7e1      	b.n	80035fa <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003636:	2308      	movs	r3, #8
 8003638:	408b      	lsls	r3, r1
 800363a:	4213      	tst	r3, r2
 800363c:	d0dd      	beq.n	80035fa <HAL_DMA_IRQHandler+0x38>
 800363e:	072b      	lsls	r3, r5, #28
 8003640:	d5db      	bpl.n	80035fa <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	220e      	movs	r2, #14
 8003646:	4393      	bics	r3, r2
 8003648:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800364a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800364c:	2301      	movs	r3, #1
 800364e:	0019      	movs	r1, r3
 8003650:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003652:	40a1      	lsls	r1, r4
 8003654:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003656:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003658:	2221      	movs	r2, #33	; 0x21
 800365a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 800365c:	2200      	movs	r2, #0
 800365e:	331f      	adds	r3, #31
 8003660:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8003662:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0c8      	beq.n	80035fa <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8003668:	4798      	blx	r3
}  
 800366a:	e7c6      	b.n	80035fa <HAL_DMA_IRQHandler+0x38>

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366e:	46c6      	mov	lr, r8
 8003670:	b500      	push	{lr}
 8003672:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8003674:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003676:	e081      	b.n	800377c <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003678:	08df      	lsrs	r7, r3, #3
 800367a:	3708      	adds	r7, #8
 800367c:	00bf      	lsls	r7, r7, #2
 800367e:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003680:	2507      	movs	r5, #7
 8003682:	401d      	ands	r5, r3
 8003684:	00ad      	lsls	r5, r5, #2
 8003686:	240f      	movs	r4, #15
 8003688:	40ac      	lsls	r4, r5
 800368a:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800368c:	690c      	ldr	r4, [r1, #16]
 800368e:	40ac      	lsls	r4, r5
 8003690:	0025      	movs	r5, r4
 8003692:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003694:	503d      	str	r5, [r7, r0]
 8003696:	e081      	b.n	800379c <HAL_GPIO_Init+0x130>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003698:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800369a:	4664      	mov	r4, ip
 800369c:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800369e:	68ce      	ldr	r6, [r1, #12]
 80036a0:	40be      	lsls	r6, r7
 80036a2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80036a4:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80036a8:	002c      	movs	r4, r5
 80036aa:	4645      	mov	r5, r8
 80036ac:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036ae:	684d      	ldr	r5, [r1, #4]
 80036b0:	092e      	lsrs	r6, r5, #4
 80036b2:	2501      	movs	r5, #1
 80036b4:	4035      	ands	r5, r6
 80036b6:	409d      	lsls	r5, r3
 80036b8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80036ba:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036bc:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036be:	4665      	mov	r5, ip
 80036c0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80036c2:	688d      	ldr	r5, [r1, #8]
 80036c4:	40bd      	lsls	r5, r7
 80036c6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80036c8:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80036ca:	684c      	ldr	r4, [r1, #4]
 80036cc:	00e4      	lsls	r4, r4, #3
 80036ce:	d554      	bpl.n	800377a <HAL_GPIO_Init+0x10e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d0:	4d46      	ldr	r5, [pc, #280]	; (80037ec <HAL_GPIO_Init+0x180>)
 80036d2:	69ae      	ldr	r6, [r5, #24]
 80036d4:	2401      	movs	r4, #1
 80036d6:	4326      	orrs	r6, r4
 80036d8:	61ae      	str	r6, [r5, #24]
 80036da:	69ad      	ldr	r5, [r5, #24]
 80036dc:	402c      	ands	r4, r5
 80036de:	9401      	str	r4, [sp, #4]
 80036e0:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80036e2:	089c      	lsrs	r4, r3, #2
 80036e4:	1ca5      	adds	r5, r4, #2
 80036e6:	00ad      	lsls	r5, r5, #2
 80036e8:	4e41      	ldr	r6, [pc, #260]	; (80037f0 <HAL_GPIO_Init+0x184>)
 80036ea:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80036ec:	2703      	movs	r7, #3
 80036ee:	401f      	ands	r7, r3
 80036f0:	00bd      	lsls	r5, r7, #2
 80036f2:	270f      	movs	r7, #15
 80036f4:	40af      	lsls	r7, r5
 80036f6:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f8:	2790      	movs	r7, #144	; 0x90
 80036fa:	05ff      	lsls	r7, r7, #23
 80036fc:	42b8      	cmp	r0, r7
 80036fe:	d068      	beq.n	80037d2 <HAL_GPIO_Init+0x166>
 8003700:	4f3c      	ldr	r7, [pc, #240]	; (80037f4 <HAL_GPIO_Init+0x188>)
 8003702:	42b8      	cmp	r0, r7
 8003704:	d067      	beq.n	80037d6 <HAL_GPIO_Init+0x16a>
 8003706:	4f3c      	ldr	r7, [pc, #240]	; (80037f8 <HAL_GPIO_Init+0x18c>)
 8003708:	42b8      	cmp	r0, r7
 800370a:	d066      	beq.n	80037da <HAL_GPIO_Init+0x16e>
 800370c:	4f3b      	ldr	r7, [pc, #236]	; (80037fc <HAL_GPIO_Init+0x190>)
 800370e:	42b8      	cmp	r0, r7
 8003710:	d065      	beq.n	80037de <HAL_GPIO_Init+0x172>
 8003712:	4f3b      	ldr	r7, [pc, #236]	; (8003800 <HAL_GPIO_Init+0x194>)
 8003714:	42b8      	cmp	r0, r7
 8003716:	d05a      	beq.n	80037ce <HAL_GPIO_Init+0x162>
 8003718:	2705      	movs	r7, #5
 800371a:	40af      	lsls	r7, r5
 800371c:	003d      	movs	r5, r7
 800371e:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003720:	3402      	adds	r4, #2
 8003722:	00a4      	lsls	r4, r4, #2
 8003724:	4e32      	ldr	r6, [pc, #200]	; (80037f0 <HAL_GPIO_Init+0x184>)
 8003726:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003728:	4c36      	ldr	r4, [pc, #216]	; (8003804 <HAL_GPIO_Init+0x198>)
 800372a:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800372c:	43d4      	mvns	r4, r2
 800372e:	0026      	movs	r6, r4
 8003730:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003732:	684f      	ldr	r7, [r1, #4]
 8003734:	03ff      	lsls	r7, r7, #15
 8003736:	d501      	bpl.n	800373c <HAL_GPIO_Init+0xd0>
        {
          SET_BIT(temp, iocurrent); 
 8003738:	4315      	orrs	r5, r2
 800373a:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800373c:	4d31      	ldr	r5, [pc, #196]	; (8003804 <HAL_GPIO_Init+0x198>)
 800373e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8003740:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003742:	002e      	movs	r6, r5
 8003744:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003746:	684f      	ldr	r7, [r1, #4]
 8003748:	03bf      	lsls	r7, r7, #14
 800374a:	d501      	bpl.n	8003750 <HAL_GPIO_Init+0xe4>
        { 
          SET_BIT(temp, iocurrent); 
 800374c:	4315      	orrs	r5, r2
 800374e:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8003750:	4d2c      	ldr	r5, [pc, #176]	; (8003804 <HAL_GPIO_Init+0x198>)
 8003752:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003754:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003756:	002e      	movs	r6, r5
 8003758:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800375a:	684f      	ldr	r7, [r1, #4]
 800375c:	02ff      	lsls	r7, r7, #11
 800375e:	d501      	bpl.n	8003764 <HAL_GPIO_Init+0xf8>
        {
          SET_BIT(temp, iocurrent); 
 8003760:	4315      	orrs	r5, r2
 8003762:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003764:	4d27      	ldr	r5, [pc, #156]	; (8003804 <HAL_GPIO_Init+0x198>)
 8003766:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003768:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800376a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800376c:	684e      	ldr	r6, [r1, #4]
 800376e:	02b6      	lsls	r6, r6, #10
 8003770:	d501      	bpl.n	8003776 <HAL_GPIO_Init+0x10a>
        {
          SET_BIT(temp, iocurrent); 
 8003772:	432a      	orrs	r2, r5
 8003774:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8003776:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_GPIO_Init+0x198>)
 8003778:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800377a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800377c:	680a      	ldr	r2, [r1, #0]
 800377e:	0014      	movs	r4, r2
 8003780:	40dc      	lsrs	r4, r3
 8003782:	d02e      	beq.n	80037e2 <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003784:	2401      	movs	r4, #1
 8003786:	409c      	lsls	r4, r3
 8003788:	46a0      	mov	r8, r4
 800378a:	4022      	ands	r2, r4
    if(iocurrent)
 800378c:	d0f5      	beq.n	800377a <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800378e:	684d      	ldr	r5, [r1, #4]
 8003790:	2d02      	cmp	r5, #2
 8003792:	d100      	bne.n	8003796 <HAL_GPIO_Init+0x12a>
 8003794:	e770      	b.n	8003678 <HAL_GPIO_Init+0xc>
 8003796:	2d12      	cmp	r5, #18
 8003798:	d100      	bne.n	800379c <HAL_GPIO_Init+0x130>
 800379a:	e76d      	b.n	8003678 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 800379c:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800379e:	005f      	lsls	r7, r3, #1
 80037a0:	2503      	movs	r5, #3
 80037a2:	002c      	movs	r4, r5
 80037a4:	40bc      	lsls	r4, r7
 80037a6:	43e4      	mvns	r4, r4
 80037a8:	46a4      	mov	ip, r4
 80037aa:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ac:	684c      	ldr	r4, [r1, #4]
 80037ae:	4025      	ands	r5, r4
 80037b0:	40bd      	lsls	r5, r7
 80037b2:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80037b4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037b6:	684d      	ldr	r5, [r1, #4]
 80037b8:	1e6e      	subs	r6, r5, #1
 80037ba:	2e01      	cmp	r6, #1
 80037bc:	d800      	bhi.n	80037c0 <HAL_GPIO_Init+0x154>
 80037be:	e76b      	b.n	8003698 <HAL_GPIO_Init+0x2c>
 80037c0:	2d11      	cmp	r5, #17
 80037c2:	d100      	bne.n	80037c6 <HAL_GPIO_Init+0x15a>
 80037c4:	e768      	b.n	8003698 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c6:	2d12      	cmp	r5, #18
 80037c8:	d000      	beq.n	80037cc <HAL_GPIO_Init+0x160>
 80037ca:	e777      	b.n	80036bc <HAL_GPIO_Init+0x50>
 80037cc:	e764      	b.n	8003698 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ce:	2704      	movs	r7, #4
 80037d0:	e7a3      	b.n	800371a <HAL_GPIO_Init+0xae>
 80037d2:	2700      	movs	r7, #0
 80037d4:	e7a1      	b.n	800371a <HAL_GPIO_Init+0xae>
 80037d6:	2701      	movs	r7, #1
 80037d8:	e79f      	b.n	800371a <HAL_GPIO_Init+0xae>
 80037da:	2702      	movs	r7, #2
 80037dc:	e79d      	b.n	800371a <HAL_GPIO_Init+0xae>
 80037de:	2703      	movs	r7, #3
 80037e0:	e79b      	b.n	800371a <HAL_GPIO_Init+0xae>
  } 
}
 80037e2:	b002      	add	sp, #8
 80037e4:	bc04      	pop	{r2}
 80037e6:	4690      	mov	r8, r2
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40010000 	.word	0x40010000
 80037f4:	48000400 	.word	0x48000400
 80037f8:	48000800 	.word	0x48000800
 80037fc:	48000c00 	.word	0x48000c00
 8003800:	48001000 	.word	0x48001000
 8003804:	40010400 	.word	0x40010400

08003808 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003808:	2a00      	cmp	r2, #0
 800380a:	d101      	bne.n	8003810 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800380e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003810:	6181      	str	r1, [r0, #24]
 8003812:	e7fc      	b.n	800380e <HAL_GPIO_WritePin+0x6>

08003814 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003814:	4770      	bx	lr
	...

08003818 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003818:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4218      	tst	r0, r3
 8003820:	d100      	bne.n	8003824 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003822:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003826:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003828:	f7ff fff4 	bl	8003814 <HAL_GPIO_EXTI_Callback>
}
 800382c:	e7f9      	b.n	8003822 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40010400 	.word	0x40010400

08003834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003838:	d058      	beq.n	80038ec <HAL_PCD_Init+0xb8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800383a:	23ea      	movs	r3, #234	; 0xea
 800383c:	33ff      	adds	r3, #255	; 0xff
 800383e:	5cc3      	ldrb	r3, [r0, r3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_PCD_Init+0x1c>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003844:	2203      	movs	r2, #3
 8003846:	23ea      	movs	r3, #234	; 0xea
 8003848:	33ff      	adds	r3, #255	; 0xff
 800384a:	54e2      	strb	r2, [r4, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800384c:	2200      	movs	r2, #0
 800384e:	e018      	b.n	8003882 <HAL_PCD_Init+0x4e>
    hpcd->Lock = HAL_UNLOCKED;
 8003850:	2200      	movs	r2, #0
 8003852:	33e9      	adds	r3, #233	; 0xe9
 8003854:	33ff      	adds	r3, #255	; 0xff
 8003856:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8003858:	f003 fd94 	bl	8007384 <HAL_PCD_MspInit>
 800385c:	e7f2      	b.n	8003844 <HAL_PCD_Init+0x10>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800385e:	00d1      	lsls	r1, r2, #3
 8003860:	1a89      	subs	r1, r1, r2
 8003862:	008b      	lsls	r3, r1, #2
 8003864:	18e3      	adds	r3, r4, r3
 8003866:	0019      	movs	r1, r3
 8003868:	3129      	adds	r1, #41	; 0x29
 800386a:	2001      	movs	r0, #1
 800386c:	7008      	strb	r0, [r1, #0]
   hpcd->IN_ep[i].num = i;
 800386e:	3901      	subs	r1, #1
 8003870:	700a      	strb	r2, [r1, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8003872:	0018      	movs	r0, r3
 8003874:	302b      	adds	r0, #43	; 0x2b
 8003876:	2100      	movs	r1, #0
 8003878:	7001      	strb	r1, [r0, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 800387a:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0U;
 800387c:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0U;
 800387e:	63d9      	str	r1, [r3, #60]	; 0x3c
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8003880:	3201      	adds	r2, #1
 8003882:	6860      	ldr	r0, [r4, #4]
 8003884:	4282      	cmp	r2, r0
 8003886:	d3ea      	bcc.n	800385e <HAL_PCD_Init+0x2a>
 8003888:	2200      	movs	r2, #0
 800388a:	e014      	b.n	80038b6 <HAL_PCD_Init+0x82>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800388c:	00d1      	lsls	r1, r2, #3
 800388e:	1a89      	subs	r1, r1, r2
 8003890:	008b      	lsls	r3, r1, #2
 8003892:	18e3      	adds	r3, r4, r3
 8003894:	001d      	movs	r5, r3
 8003896:	350a      	adds	r5, #10
 8003898:	35ff      	adds	r5, #255	; 0xff
 800389a:	2100      	movs	r1, #0
 800389c:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].num = i;
 800389e:	3d01      	subs	r5, #1
 80038a0:	702a      	strb	r2, [r5, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80038a2:	3503      	adds	r5, #3
 80038a4:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 80038a6:	3509      	adds	r5, #9
 80038a8:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80038aa:	3504      	adds	r5, #4
 80038ac:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 80038ae:	331d      	adds	r3, #29
 80038b0:	33ff      	adds	r3, #255	; 0xff
 80038b2:	6019      	str	r1, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80038b4:	3201      	adds	r2, #1
 80038b6:	4282      	cmp	r2, r0
 80038b8:	d3e8      	bcc.n	800388c <HAL_PCD_Init+0x58>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	2201      	movs	r2, #1
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	52ca      	strh	r2, [r1, r3]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 80038c2:	2200      	movs	r2, #0
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	52ca      	strh	r2, [r1, r3]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80038c8:	2144      	movs	r1, #68	; 0x44
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	5242      	strh	r2, [r0, r1]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80038ce:	310c      	adds	r1, #12
 80038d0:	6820      	ldr	r0, [r4, #0]
 80038d2:	5242      	strh	r2, [r0, r1]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80038d4:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <HAL_PCD_Init+0xbc>)
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	52ca      	strh	r2, [r1, r3]
  
  hpcd->USB_Address = 0U;
 80038da:	3b1c      	subs	r3, #28
 80038dc:	2200      	movs	r2, #0
 80038de:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 80038e0:	23ea      	movs	r3, #234	; 0xea
 80038e2:	33ff      	adds	r3, #255	; 0xff
 80038e4:	2201      	movs	r2, #1
 80038e6:	54e2      	strb	r2, [r4, r3]

 return HAL_OK;
 80038e8:	2000      	movs	r0, #0
}
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
 80038ee:	e7fc      	b.n	80038ea <HAL_PCD_Init+0xb6>
 80038f0:	ffffbf00 	.word	0xffffbf00

080038f4 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80038f4:	6801      	ldr	r1, [r0, #0]
 80038f6:	2258      	movs	r2, #88	; 0x58
 80038f8:	5a8b      	ldrh	r3, [r1, r2]
 80038fa:	4803      	ldr	r0, [pc, #12]	; (8003908 <HAL_PCD_Start+0x14>)
 80038fc:	4303      	orrs	r3, r0
 80038fe:	b29b      	uxth	r3, r3
 8003900:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 8003902:	2000      	movs	r0, #0
 8003904:	4770      	bx	lr
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	ffff8000 	.word	0xffff8000

0800390c <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 800390c:	23f4      	movs	r3, #244	; 0xf4
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	5cc3      	ldrb	r3, [r0, r3]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d013      	beq.n	800393e <HAL_PCD_SetAddress+0x32>
 8003916:	2201      	movs	r2, #1
 8003918:	23f4      	movs	r3, #244	; 0xf4
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	54c2      	strb	r2, [r0, r3]

   if(address == 0U) 
 800391e:	2900      	cmp	r1, #0
 8003920:	d10a      	bne.n	8003938 <HAL_PCD_SetAddress+0x2c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8003922:	327f      	adds	r2, #127	; 0x7f
 8003924:	3b9d      	subs	r3, #157	; 0x9d
 8003926:	3bff      	subs	r3, #255	; 0xff
 8003928:	6801      	ldr	r1, [r0, #0]
 800392a:	52ca      	strh	r2, [r1, r3]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 800392c:	2200      	movs	r2, #0
 800392e:	23f4      	movs	r3, #244	; 0xf4
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003934:	2000      	movs	r0, #0
}
 8003936:	4770      	bx	lr
     hpcd->USB_Address = address;
 8003938:	2324      	movs	r3, #36	; 0x24
 800393a:	54c1      	strb	r1, [r0, r3]
 800393c:	e7f6      	b.n	800392c <HAL_PCD_SetAddress+0x20>
   __HAL_LOCK(hpcd); 
 800393e:	2002      	movs	r0, #2
 8003940:	e7f9      	b.n	8003936 <HAL_PCD_SetAddress+0x2a>
	...

08003944 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003944:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8003946:	b24e      	sxtb	r6, r1
 8003948:	2e00      	cmp	r6, #0
 800394a:	db65      	blt.n	8003a18 <HAL_PCD_EP_Open+0xd4>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800394c:	247f      	movs	r4, #127	; 0x7f
 800394e:	400c      	ands	r4, r1
 8003950:	00e5      	lsls	r5, r4, #3
 8003952:	1b2d      	subs	r5, r5, r4
 8003954:	00ac      	lsls	r4, r5, #2
 8003956:	3409      	adds	r4, #9
 8003958:	34ff      	adds	r4, #255	; 0xff
 800395a:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 800395c:	257f      	movs	r5, #127	; 0x7f
 800395e:	400d      	ands	r5, r1
 8003960:	7025      	strb	r5, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003962:	0ff6      	lsrs	r6, r6, #31
 8003964:	7066      	strb	r6, [r4, #1]
  ep->maxpacket = ep_mps;
 8003966:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8003968:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 800396a:	23f4      	movs	r3, #244	; 0xf4
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	5cc3      	ldrb	r3, [r0, r3]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d100      	bne.n	8003976 <HAL_PCD_EP_Open+0x32>
 8003974:	e175      	b.n	8003c62 <HAL_PCD_EP_Open+0x31e>
 8003976:	2201      	movs	r2, #1
 8003978:	23f4      	movs	r3, #244	; 0xf4
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	54c2      	strb	r2, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 800397e:	78e3      	ldrb	r3, [r4, #3]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d100      	bne.n	8003986 <HAL_PCD_EP_Open+0x42>
 8003984:	e074      	b.n	8003a70 <HAL_PCD_EP_Open+0x12c>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04e      	beq.n	8003a28 <HAL_PCD_EP_Open+0xe4>
 800398a:	2b02      	cmp	r3, #2
 800398c:	d059      	beq.n	8003a42 <HAL_PCD_EP_Open+0xfe>
 800398e:	2b03      	cmp	r3, #3
 8003990:	d061      	beq.n	8003a56 <HAL_PCD_EP_Open+0x112>
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8003992:	7822      	ldrb	r2, [r4, #0]
 8003994:	0093      	lsls	r3, r2, #2
 8003996:	6801      	ldr	r1, [r0, #0]
 8003998:	468c      	mov	ip, r1
 800399a:	4463      	add	r3, ip
 800399c:	8819      	ldrh	r1, [r3, #0]
 800399e:	4db2      	ldr	r5, [pc, #712]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 80039a0:	4029      	ands	r1, r5
 80039a2:	430a      	orrs	r2, r1
 80039a4:	49b1      	ldr	r1, [pc, #708]	; (8003c6c <HAL_PCD_EP_Open+0x328>)
 80039a6:	430a      	orrs	r2, r1
 80039a8:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 80039aa:	7aa3      	ldrb	r3, [r4, #10]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d000      	beq.n	80039b2 <HAL_PCD_EP_Open+0x6e>
 80039b0:	e0b5      	b.n	8003b1e <HAL_PCD_EP_Open+0x1da>
  {
    if (ep->is_in)
 80039b2:	7863      	ldrb	r3, [r4, #1]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d100      	bne.n	80039ba <HAL_PCD_EP_Open+0x76>
 80039b8:	e067      	b.n	8003a8a <HAL_PCD_EP_Open+0x146>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80039ba:	6801      	ldr	r1, [r0, #0]
 80039bc:	2350      	movs	r3, #80	; 0x50
 80039be:	5acb      	ldrh	r3, [r1, r3]
 80039c0:	7822      	ldrb	r2, [r4, #0]
 80039c2:	00d2      	lsls	r2, r2, #3
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	185b      	adds	r3, r3, r1
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	4694      	mov	ip, r2
 80039ce:	4463      	add	r3, ip
 80039d0:	88a2      	ldrh	r2, [r4, #4]
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80039d8:	7823      	ldrb	r3, [r4, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	6802      	ldr	r2, [r0, #0]
 80039de:	4694      	mov	ip, r2
 80039e0:	4463      	add	r3, ip
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	0651      	lsls	r1, r2, #25
 80039e6:	d503      	bpl.n	80039f0 <HAL_PCD_EP_Open+0xac>
 80039e8:	402a      	ands	r2, r5
 80039ea:	49a1      	ldr	r1, [pc, #644]	; (8003c70 <HAL_PCD_EP_Open+0x32c>)
 80039ec:	430a      	orrs	r2, r1
 80039ee:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 80039f0:	7822      	ldrb	r2, [r4, #0]
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	469c      	mov	ip, r3
 80039f8:	4462      	add	r2, ip
 80039fa:	8813      	ldrh	r3, [r2, #0]
 80039fc:	499d      	ldr	r1, [pc, #628]	; (8003c74 <HAL_PCD_EP_Open+0x330>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	2120      	movs	r1, #32
 8003a02:	404b      	eors	r3, r1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4999      	ldr	r1, [pc, #612]	; (8003c6c <HAL_PCD_EP_Open+0x328>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	23f4      	movs	r3, #244	; 0xf4
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	54c2      	strb	r2, [r0, r3]
  return ret;
 8003a14:	2000      	movs	r0, #0
}
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003a18:	247f      	movs	r4, #127	; 0x7f
 8003a1a:	400c      	ands	r4, r1
 8003a1c:	00e5      	lsls	r5, r4, #3
 8003a1e:	1b2d      	subs	r5, r5, r4
 8003a20:	00ac      	lsls	r4, r5, #2
 8003a22:	3428      	adds	r4, #40	; 0x28
 8003a24:	1904      	adds	r4, r0, r4
 8003a26:	e799      	b.n	800395c <HAL_PCD_EP_Open+0x18>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8003a28:	7823      	ldrb	r3, [r4, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	6802      	ldr	r2, [r0, #0]
 8003a2e:	4694      	mov	ip, r2
 8003a30:	4463      	add	r3, ip
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	4990      	ldr	r1, [pc, #576]	; (8003c78 <HAL_PCD_EP_Open+0x334>)
 8003a36:	4011      	ands	r1, r2
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	801a      	strh	r2, [r3, #0]
    break;
 8003a40:	e7a7      	b.n	8003992 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8003a42:	7823      	ldrb	r3, [r4, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	6802      	ldr	r2, [r0, #0]
 8003a48:	4694      	mov	ip, r2
 8003a4a:	4463      	add	r3, ip
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	498a      	ldr	r1, [pc, #552]	; (8003c78 <HAL_PCD_EP_Open+0x334>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	801a      	strh	r2, [r3, #0]
    break;
 8003a54:	e79d      	b.n	8003992 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8003a56:	7823      	ldrb	r3, [r4, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	6802      	ldr	r2, [r0, #0]
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	4463      	add	r3, ip
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	4985      	ldr	r1, [pc, #532]	; (8003c78 <HAL_PCD_EP_Open+0x334>)
 8003a64:	4011      	ands	r1, r2
 8003a66:	22c0      	movs	r2, #192	; 0xc0
 8003a68:	00d2      	lsls	r2, r2, #3
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	801a      	strh	r2, [r3, #0]
    break;
 8003a6e:	e790      	b.n	8003992 <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8003a70:	7823      	ldrb	r3, [r4, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	6802      	ldr	r2, [r0, #0]
 8003a76:	4694      	mov	ip, r2
 8003a78:	4463      	add	r3, ip
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	497e      	ldr	r1, [pc, #504]	; (8003c78 <HAL_PCD_EP_Open+0x334>)
 8003a7e:	4011      	ands	r1, r2
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	00d2      	lsls	r2, r2, #3
 8003a84:	430a      	orrs	r2, r1
 8003a86:	801a      	strh	r2, [r3, #0]
    break;
 8003a88:	e783      	b.n	8003992 <HAL_PCD_EP_Open+0x4e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003a8a:	6801      	ldr	r1, [r0, #0]
 8003a8c:	2550      	movs	r5, #80	; 0x50
 8003a8e:	5b4b      	ldrh	r3, [r1, r5]
 8003a90:	7822      	ldrb	r2, [r4, #0]
 8003a92:	00d2      	lsls	r2, r2, #3
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	185b      	adds	r3, r3, r1
 8003a98:	4a78      	ldr	r2, [pc, #480]	; (8003c7c <HAL_PCD_EP_Open+0x338>)
 8003a9a:	4694      	mov	ip, r2
 8003a9c:	4463      	add	r3, ip
 8003a9e:	88a2      	ldrh	r2, [r4, #4]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003aa6:	6801      	ldr	r1, [r0, #0]
 8003aa8:	5b4b      	ldrh	r3, [r1, r5]
 8003aaa:	7822      	ldrb	r2, [r4, #0]
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	185b      	adds	r3, r3, r1
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_PCD_EP_Open+0x33c>)
 8003ab4:	4694      	mov	ip, r2
 8003ab6:	4463      	add	r3, ip
 8003ab8:	68e1      	ldr	r1, [r4, #12]
 8003aba:	293e      	cmp	r1, #62	; 0x3e
 8003abc:	d926      	bls.n	8003b0c <HAL_PCD_EP_Open+0x1c8>
 8003abe:	094a      	lsrs	r2, r1, #5
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	06c9      	lsls	r1, r1, #27
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_Open+0x186>
 8003ac6:	3a01      	subs	r2, #1
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	0292      	lsls	r2, r2, #10
 8003acc:	b292      	uxth	r2, r2
 8003ace:	496d      	ldr	r1, [pc, #436]	; (8003c84 <HAL_PCD_EP_Open+0x340>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003ad4:	7823      	ldrb	r3, [r4, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	6802      	ldr	r2, [r0, #0]
 8003ada:	4694      	mov	ip, r2
 8003adc:	4463      	add	r3, ip
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	0451      	lsls	r1, r2, #17
 8003ae2:	d504      	bpl.n	8003aee <HAL_PCD_EP_Open+0x1aa>
 8003ae4:	4960      	ldr	r1, [pc, #384]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	4967      	ldr	r1, [pc, #412]	; (8003c88 <HAL_PCD_EP_Open+0x344>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003aee:	7823      	ldrb	r3, [r4, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	6802      	ldr	r2, [r0, #0]
 8003af4:	4694      	mov	ip, r2
 8003af6:	4463      	add	r3, ip
 8003af8:	8819      	ldrh	r1, [r3, #0]
 8003afa:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <HAL_PCD_EP_Open+0x348>)
 8003afc:	4011      	ands	r1, r2
 8003afe:	22c0      	movs	r2, #192	; 0xc0
 8003b00:	0192      	lsls	r2, r2, #6
 8003b02:	4051      	eors	r1, r2
 8003b04:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <HAL_PCD_EP_Open+0x328>)
 8003b06:	430a      	orrs	r2, r1
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	e77f      	b.n	8003a0c <HAL_PCD_EP_Open+0xc8>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003b0c:	084a      	lsrs	r2, r1, #1
 8003b0e:	b292      	uxth	r2, r2
 8003b10:	07c9      	lsls	r1, r1, #31
 8003b12:	d501      	bpl.n	8003b18 <HAL_PCD_EP_Open+0x1d4>
 8003b14:	3201      	adds	r2, #1
 8003b16:	b292      	uxth	r2, r2
 8003b18:	0292      	lsls	r2, r2, #10
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e7da      	b.n	8003ad4 <HAL_PCD_EP_Open+0x190>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8003b1e:	7823      	ldrb	r3, [r4, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	6802      	ldr	r2, [r0, #0]
 8003b24:	4694      	mov	ip, r2
 8003b26:	4463      	add	r3, ip
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	4959      	ldr	r1, [pc, #356]	; (8003c90 <HAL_PCD_EP_Open+0x34c>)
 8003b2c:	4011      	ands	r1, r2
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_PCD_EP_Open+0x350>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8003b34:	6801      	ldr	r1, [r0, #0]
 8003b36:	2650      	movs	r6, #80	; 0x50
 8003b38:	5b8b      	ldrh	r3, [r1, r6]
 8003b3a:	7822      	ldrb	r2, [r4, #0]
 8003b3c:	00d2      	lsls	r2, r2, #3
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	185b      	adds	r3, r3, r1
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	00d2      	lsls	r2, r2, #3
 8003b46:	4694      	mov	ip, r2
 8003b48:	4463      	add	r3, ip
 8003b4a:	88e2      	ldrh	r2, [r4, #6]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	438a      	bics	r2, r1
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	6805      	ldr	r5, [r0, #0]
 8003b54:	5bab      	ldrh	r3, [r5, r6]
 8003b56:	7822      	ldrb	r2, [r4, #0]
 8003b58:	00d2      	lsls	r2, r2, #3
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	195b      	adds	r3, r3, r5
 8003b5e:	4a47      	ldr	r2, [pc, #284]	; (8003c7c <HAL_PCD_EP_Open+0x338>)
 8003b60:	4694      	mov	ip, r2
 8003b62:	4463      	add	r3, ip
 8003b64:	8922      	ldrh	r2, [r4, #8]
 8003b66:	438a      	bics	r2, r1
 8003b68:	801a      	strh	r2, [r3, #0]
    if (ep->is_in==0U)
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d13d      	bne.n	8003bec <HAL_PCD_EP_Open+0x2a8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003b70:	7823      	ldrb	r3, [r4, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	6802      	ldr	r2, [r0, #0]
 8003b76:	4694      	mov	ip, r2
 8003b78:	4463      	add	r3, ip
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	0451      	lsls	r1, r2, #17
 8003b7e:	d504      	bpl.n	8003b8a <HAL_PCD_EP_Open+0x246>
 8003b80:	4939      	ldr	r1, [pc, #228]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	4940      	ldr	r1, [pc, #256]	; (8003c88 <HAL_PCD_EP_Open+0x344>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003b8a:	7823      	ldrb	r3, [r4, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	6802      	ldr	r2, [r0, #0]
 8003b90:	4694      	mov	ip, r2
 8003b92:	4463      	add	r3, ip
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	0651      	lsls	r1, r2, #25
 8003b98:	d504      	bpl.n	8003ba4 <HAL_PCD_EP_Open+0x260>
 8003b9a:	4933      	ldr	r1, [pc, #204]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_PCD_EP_Open+0x32c>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003ba4:	7823      	ldrb	r3, [r4, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	6802      	ldr	r2, [r0, #0]
 8003baa:	4694      	mov	ip, r2
 8003bac:	4463      	add	r3, ip
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	492d      	ldr	r1, [pc, #180]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003bb2:	4011      	ands	r1, r2
 8003bb4:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <HAL_PCD_EP_Open+0x32c>)
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003bba:	7821      	ldrb	r1, [r4, #0]
 8003bbc:	0089      	lsls	r1, r1, #2
 8003bbe:	6803      	ldr	r3, [r0, #0]
 8003bc0:	469c      	mov	ip, r3
 8003bc2:	4461      	add	r1, ip
 8003bc4:	880b      	ldrh	r3, [r1, #0]
 8003bc6:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <HAL_PCD_EP_Open+0x348>)
 8003bc8:	401a      	ands	r2, r3
 8003bca:	23c0      	movs	r3, #192	; 0xc0
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	4053      	eors	r3, r2
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <HAL_PCD_EP_Open+0x328>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003bd6:	7823      	ldrb	r3, [r4, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	6801      	ldr	r1, [r0, #0]
 8003bdc:	468c      	mov	ip, r1
 8003bde:	4463      	add	r3, ip
 8003be0:	8819      	ldrh	r1, [r3, #0]
 8003be2:	4c24      	ldr	r4, [pc, #144]	; (8003c74 <HAL_PCD_EP_Open+0x330>)
 8003be4:	4021      	ands	r1, r4
 8003be6:	430a      	orrs	r2, r1
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e70f      	b.n	8003a0c <HAL_PCD_EP_Open+0xc8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003bec:	7823      	ldrb	r3, [r4, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	6802      	ldr	r2, [r0, #0]
 8003bf2:	4694      	mov	ip, r2
 8003bf4:	4463      	add	r3, ip
 8003bf6:	881a      	ldrh	r2, [r3, #0]
 8003bf8:	0451      	lsls	r1, r2, #17
 8003bfa:	d504      	bpl.n	8003c06 <HAL_PCD_EP_Open+0x2c2>
 8003bfc:	491a      	ldr	r1, [pc, #104]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003bfe:	400a      	ands	r2, r1
 8003c00:	4921      	ldr	r1, [pc, #132]	; (8003c88 <HAL_PCD_EP_Open+0x344>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003c06:	7823      	ldrb	r3, [r4, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	6802      	ldr	r2, [r0, #0]
 8003c0c:	4694      	mov	ip, r2
 8003c0e:	4463      	add	r3, ip
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	0651      	lsls	r1, r2, #25
 8003c14:	d504      	bpl.n	8003c20 <HAL_PCD_EP_Open+0x2dc>
 8003c16:	4914      	ldr	r1, [pc, #80]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	4915      	ldr	r1, [pc, #84]	; (8003c70 <HAL_PCD_EP_Open+0x32c>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003c20:	7823      	ldrb	r3, [r4, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	6802      	ldr	r2, [r0, #0]
 8003c26:	4694      	mov	ip, r2
 8003c28:	4463      	add	r3, ip
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <HAL_PCD_EP_Open+0x324>)
 8003c2e:	4011      	ands	r1, r2
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_PCD_EP_Open+0x344>)
 8003c32:	430a      	orrs	r2, r1
 8003c34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003c36:	7821      	ldrb	r1, [r4, #0]
 8003c38:	0089      	lsls	r1, r1, #2
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	469c      	mov	ip, r3
 8003c3e:	4461      	add	r1, ip
 8003c40:	880b      	ldrh	r3, [r1, #0]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_PCD_EP_Open+0x330>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_PCD_EP_Open+0x328>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003c4c:	7823      	ldrb	r3, [r4, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	6801      	ldr	r1, [r0, #0]
 8003c52:	468c      	mov	ip, r1
 8003c54:	4463      	add	r3, ip
 8003c56:	8819      	ldrh	r1, [r3, #0]
 8003c58:	4c0c      	ldr	r4, [pc, #48]	; (8003c8c <HAL_PCD_EP_Open+0x348>)
 8003c5a:	4021      	ands	r1, r4
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e6d4      	b.n	8003a0c <HAL_PCD_EP_Open+0xc8>
  __HAL_LOCK(hpcd); 
 8003c62:	2002      	movs	r0, #2
 8003c64:	e6d7      	b.n	8003a16 <HAL_PCD_EP_Open+0xd2>
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	00000f0f 	.word	0x00000f0f
 8003c6c:	ffff8080 	.word	0xffff8080
 8003c70:	ffff80c0 	.word	0xffff80c0
 8003c74:	ffff8fbf 	.word	0xffff8fbf
 8003c78:	ffff898f 	.word	0xffff898f
 8003c7c:	00000404 	.word	0x00000404
 8003c80:	00000406 	.word	0x00000406
 8003c84:	ffff8000 	.word	0xffff8000
 8003c88:	ffffc080 	.word	0xffffc080
 8003c8c:	ffffbf8f 	.word	0xffffbf8f
 8003c90:	00000e0f 	.word	0x00000e0f
 8003c94:	ffff8180 	.word	0xffff8180

08003c98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003c98:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8003c9a:	b24a      	sxtb	r2, r1
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	db3a      	blt.n	8003d16 <HAL_PCD_EP_Close+0x7e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003ca0:	237f      	movs	r3, #127	; 0x7f
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	00dc      	lsls	r4, r3, #3
 8003ca6:	1ae4      	subs	r4, r4, r3
 8003ca8:	00a3      	lsls	r3, r4, #2
 8003caa:	3309      	adds	r3, #9
 8003cac:	33ff      	adds	r3, #255	; 0xff
 8003cae:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 8003cb0:	247f      	movs	r4, #127	; 0x7f
 8003cb2:	4021      	ands	r1, r4
 8003cb4:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003cb6:	0fd2      	lsrs	r2, r2, #31
 8003cb8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8003cba:	22f4      	movs	r2, #244	; 0xf4
 8003cbc:	0052      	lsls	r2, r2, #1
 8003cbe:	5c82      	ldrb	r2, [r0, r2]
 8003cc0:	2a01      	cmp	r2, #1
 8003cc2:	d100      	bne.n	8003cc6 <HAL_PCD_EP_Close+0x2e>
 8003cc4:	e0c1      	b.n	8003e4a <HAL_PCD_EP_Close+0x1b2>
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	22f4      	movs	r2, #244	; 0xf4
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	5481      	strb	r1, [r0, r2]

  if (ep->doublebuffer == 0U) 
 8003cce:	7a9a      	ldrb	r2, [r3, #10]
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	d141      	bne.n	8003d58 <HAL_PCD_EP_Close+0xc0>
  {
    if (ep->is_in)
 8003cd4:	785a      	ldrb	r2, [r3, #1]
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	d025      	beq.n	8003d26 <HAL_PCD_EP_Close+0x8e>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	6801      	ldr	r1, [r0, #0]
 8003ce0:	468c      	mov	ip, r1
 8003ce2:	4462      	add	r2, ip
 8003ce4:	8811      	ldrh	r1, [r2, #0]
 8003ce6:	064c      	lsls	r4, r1, #25
 8003ce8:	d504      	bpl.n	8003cf4 <HAL_PCD_EP_Close+0x5c>
 8003cea:	4c59      	ldr	r4, [pc, #356]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003cec:	4021      	ands	r1, r4
 8003cee:	4c59      	ldr	r4, [pc, #356]	; (8003e54 <HAL_PCD_EP_Close+0x1bc>)
 8003cf0:	4321      	orrs	r1, r4
 8003cf2:	8011      	strh	r1, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	6802      	ldr	r2, [r0, #0]
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	4463      	add	r3, ip
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	4955      	ldr	r1, [pc, #340]	; (8003e58 <HAL_PCD_EP_Close+0x1c0>)
 8003d02:	4011      	ands	r1, r2
 8003d04:	4a55      	ldr	r2, [pc, #340]	; (8003e5c <HAL_PCD_EP_Close+0x1c4>)
 8003d06:	430a      	orrs	r2, r1
 8003d08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	23f4      	movs	r3, #244	; 0xf4
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003d16:	237f      	movs	r3, #127	; 0x7f
 8003d18:	400b      	ands	r3, r1
 8003d1a:	00dc      	lsls	r4, r3, #3
 8003d1c:	1ae4      	subs	r4, r4, r3
 8003d1e:	00a3      	lsls	r3, r4, #2
 8003d20:	3328      	adds	r3, #40	; 0x28
 8003d22:	18c3      	adds	r3, r0, r3
 8003d24:	e7c4      	b.n	8003cb0 <HAL_PCD_EP_Close+0x18>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	0092      	lsls	r2, r2, #2
 8003d2a:	6801      	ldr	r1, [r0, #0]
 8003d2c:	468c      	mov	ip, r1
 8003d2e:	4462      	add	r2, ip
 8003d30:	8811      	ldrh	r1, [r2, #0]
 8003d32:	044c      	lsls	r4, r1, #17
 8003d34:	d504      	bpl.n	8003d40 <HAL_PCD_EP_Close+0xa8>
 8003d36:	4c46      	ldr	r4, [pc, #280]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003d38:	4021      	ands	r1, r4
 8003d3a:	4c49      	ldr	r4, [pc, #292]	; (8003e60 <HAL_PCD_EP_Close+0x1c8>)
 8003d3c:	4321      	orrs	r1, r4
 8003d3e:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	6802      	ldr	r2, [r0, #0]
 8003d46:	4694      	mov	ip, r2
 8003d48:	4463      	add	r3, ip
 8003d4a:	881a      	ldrh	r2, [r3, #0]
 8003d4c:	4945      	ldr	r1, [pc, #276]	; (8003e64 <HAL_PCD_EP_Close+0x1cc>)
 8003d4e:	4011      	ands	r1, r2
 8003d50:	4a42      	ldr	r2, [pc, #264]	; (8003e5c <HAL_PCD_EP_Close+0x1c4>)
 8003d52:	430a      	orrs	r2, r1
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e7d8      	b.n	8003d0a <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 8003d58:	785a      	ldrb	r2, [r3, #1]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d13a      	bne.n	8003dd4 <HAL_PCD_EP_Close+0x13c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	0092      	lsls	r2, r2, #2
 8003d62:	6801      	ldr	r1, [r0, #0]
 8003d64:	468c      	mov	ip, r1
 8003d66:	4462      	add	r2, ip
 8003d68:	8811      	ldrh	r1, [r2, #0]
 8003d6a:	044c      	lsls	r4, r1, #17
 8003d6c:	d504      	bpl.n	8003d78 <HAL_PCD_EP_Close+0xe0>
 8003d6e:	4c38      	ldr	r4, [pc, #224]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003d70:	4021      	ands	r1, r4
 8003d72:	4c3b      	ldr	r4, [pc, #236]	; (8003e60 <HAL_PCD_EP_Close+0x1c8>)
 8003d74:	4321      	orrs	r1, r4
 8003d76:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	6801      	ldr	r1, [r0, #0]
 8003d7e:	468c      	mov	ip, r1
 8003d80:	4462      	add	r2, ip
 8003d82:	8811      	ldrh	r1, [r2, #0]
 8003d84:	064c      	lsls	r4, r1, #25
 8003d86:	d504      	bpl.n	8003d92 <HAL_PCD_EP_Close+0xfa>
 8003d88:	4c31      	ldr	r4, [pc, #196]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003d8a:	4021      	ands	r1, r4
 8003d8c:	4c31      	ldr	r4, [pc, #196]	; (8003e54 <HAL_PCD_EP_Close+0x1bc>)
 8003d8e:	4321      	orrs	r1, r4
 8003d90:	8011      	strh	r1, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	0092      	lsls	r2, r2, #2
 8003d96:	6801      	ldr	r1, [r0, #0]
 8003d98:	468c      	mov	ip, r1
 8003d9a:	4462      	add	r2, ip
 8003d9c:	8811      	ldrh	r1, [r2, #0]
 8003d9e:	4c2c      	ldr	r4, [pc, #176]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003da0:	400c      	ands	r4, r1
 8003da2:	492c      	ldr	r1, [pc, #176]	; (8003e54 <HAL_PCD_EP_Close+0x1bc>)
 8003da4:	4321      	orrs	r1, r4
 8003da6:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003da8:	781c      	ldrb	r4, [r3, #0]
 8003daa:	00a4      	lsls	r4, r4, #2
 8003dac:	6802      	ldr	r2, [r0, #0]
 8003dae:	4694      	mov	ip, r2
 8003db0:	4464      	add	r4, ip
 8003db2:	8822      	ldrh	r2, [r4, #0]
 8003db4:	492b      	ldr	r1, [pc, #172]	; (8003e64 <HAL_PCD_EP_Close+0x1cc>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	4928      	ldr	r1, [pc, #160]	; (8003e5c <HAL_PCD_EP_Close+0x1c4>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	6802      	ldr	r2, [r0, #0]
 8003dc4:	4694      	mov	ip, r2
 8003dc6:	4463      	add	r3, ip
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	4c23      	ldr	r4, [pc, #140]	; (8003e58 <HAL_PCD_EP_Close+0x1c0>)
 8003dcc:	4022      	ands	r2, r4
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	8019      	strh	r1, [r3, #0]
 8003dd2:	e79a      	b.n	8003d0a <HAL_PCD_EP_Close+0x72>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	6801      	ldr	r1, [r0, #0]
 8003dda:	468c      	mov	ip, r1
 8003ddc:	4462      	add	r2, ip
 8003dde:	8811      	ldrh	r1, [r2, #0]
 8003de0:	044c      	lsls	r4, r1, #17
 8003de2:	d504      	bpl.n	8003dee <HAL_PCD_EP_Close+0x156>
 8003de4:	4c1a      	ldr	r4, [pc, #104]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003de6:	4021      	ands	r1, r4
 8003de8:	4c1d      	ldr	r4, [pc, #116]	; (8003e60 <HAL_PCD_EP_Close+0x1c8>)
 8003dea:	4321      	orrs	r1, r4
 8003dec:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	6801      	ldr	r1, [r0, #0]
 8003df4:	468c      	mov	ip, r1
 8003df6:	4462      	add	r2, ip
 8003df8:	8811      	ldrh	r1, [r2, #0]
 8003dfa:	064c      	lsls	r4, r1, #25
 8003dfc:	d504      	bpl.n	8003e08 <HAL_PCD_EP_Close+0x170>
 8003dfe:	4c14      	ldr	r4, [pc, #80]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003e00:	4021      	ands	r1, r4
 8003e02:	4c14      	ldr	r4, [pc, #80]	; (8003e54 <HAL_PCD_EP_Close+0x1bc>)
 8003e04:	4321      	orrs	r1, r4
 8003e06:	8011      	strh	r1, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	6801      	ldr	r1, [r0, #0]
 8003e0e:	468c      	mov	ip, r1
 8003e10:	4462      	add	r2, ip
 8003e12:	8811      	ldrh	r1, [r2, #0]
 8003e14:	4c0e      	ldr	r4, [pc, #56]	; (8003e50 <HAL_PCD_EP_Close+0x1b8>)
 8003e16:	400c      	ands	r4, r1
 8003e18:	4911      	ldr	r1, [pc, #68]	; (8003e60 <HAL_PCD_EP_Close+0x1c8>)
 8003e1a:	4321      	orrs	r1, r4
 8003e1c:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003e1e:	781c      	ldrb	r4, [r3, #0]
 8003e20:	00a4      	lsls	r4, r4, #2
 8003e22:	6802      	ldr	r2, [r0, #0]
 8003e24:	4694      	mov	ip, r2
 8003e26:	4464      	add	r4, ip
 8003e28:	8822      	ldrh	r2, [r4, #0]
 8003e2a:	490b      	ldr	r1, [pc, #44]	; (8003e58 <HAL_PCD_EP_Close+0x1c0>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	490b      	ldr	r1, [pc, #44]	; (8003e5c <HAL_PCD_EP_Close+0x1c4>)
 8003e30:	430a      	orrs	r2, r1
 8003e32:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	6802      	ldr	r2, [r0, #0]
 8003e3a:	4694      	mov	ip, r2
 8003e3c:	4463      	add	r3, ip
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	4c08      	ldr	r4, [pc, #32]	; (8003e64 <HAL_PCD_EP_Close+0x1cc>)
 8003e42:	4022      	ands	r2, r4
 8003e44:	4311      	orrs	r1, r2
 8003e46:	8019      	strh	r1, [r3, #0]
 8003e48:	e75f      	b.n	8003d0a <HAL_PCD_EP_Close+0x72>
  __HAL_LOCK(hpcd); 
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	e762      	b.n	8003d14 <HAL_PCD_EP_Close+0x7c>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	00000f0f 	.word	0x00000f0f
 8003e54:	ffff80c0 	.word	0xffff80c0
 8003e58:	ffff8fbf 	.word	0xffff8fbf
 8003e5c:	ffff8080 	.word	0xffff8080
 8003e60:	ffffc080 	.word	0xffffc080
 8003e64:	ffffbf8f 	.word	0xffffbf8f

08003e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	247f      	movs	r4, #127	; 0x7f
 8003e6c:	4021      	ands	r1, r4
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003e6e:	00cd      	lsls	r5, r1, #3
 8003e70:	1a6d      	subs	r5, r5, r1
 8003e72:	00ac      	lsls	r4, r5, #2
 8003e74:	1904      	adds	r4, r0, r4
 8003e76:	0025      	movs	r5, r4
 8003e78:	3519      	adds	r5, #25
 8003e7a:	35ff      	adds	r5, #255	; 0xff
 8003e7c:	602a      	str	r2, [r5, #0]
  ep->xfer_len = len;
 8003e7e:	0022      	movs	r2, r4
 8003e80:	321d      	adds	r2, #29
 8003e82:	32ff      	adds	r2, #255	; 0xff
 8003e84:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8003e86:	3508      	adds	r5, #8
 8003e88:	2200      	movs	r2, #0
 8003e8a:	602a      	str	r2, [r5, #0]
  ep->is_in = 0U;
 8003e8c:	3d17      	subs	r5, #23
 8003e8e:	702a      	strb	r2, [r5, #0]
  ep->num = ep_addr & 0x7FU;
 8003e90:	0022      	movs	r2, r4
 8003e92:	3209      	adds	r2, #9
 8003e94:	32ff      	adds	r2, #255	; 0xff
 8003e96:	7011      	strb	r1, [r2, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003e98:	3415      	adds	r4, #21
 8003e9a:	34ff      	adds	r4, #255	; 0xff
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d940      	bls.n	8003f24 <HAL_PCD_EP_Receive+0xbc>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003ea2:	00cd      	lsls	r5, r1, #3
 8003ea4:	1a6d      	subs	r5, r5, r1
 8003ea6:	00ac      	lsls	r4, r5, #2
 8003ea8:	1904      	adds	r4, r0, r4
 8003eaa:	341d      	adds	r4, #29
 8003eac:	34ff      	adds	r4, #255	; 0xff
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	6023      	str	r3, [r4, #0]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003eb2:	00cc      	lsls	r4, r1, #3
 8003eb4:	1a64      	subs	r4, r4, r1
 8003eb6:	00a3      	lsls	r3, r4, #2
 8003eb8:	001c      	movs	r4, r3
 8003eba:	18c3      	adds	r3, r0, r3
 8003ebc:	3313      	adds	r3, #19
 8003ebe:	33ff      	adds	r3, #255	; 0xff
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d141      	bne.n	8003f4a <HAL_PCD_EP_Receive+0xe2>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8003ec6:	6805      	ldr	r5, [r0, #0]
 8003ec8:	3350      	adds	r3, #80	; 0x50
 8003eca:	5aeb      	ldrh	r3, [r5, r3]
 8003ecc:	1904      	adds	r4, r0, r4
 8003ece:	3409      	adds	r4, #9
 8003ed0:	34ff      	adds	r4, #255	; 0xff
 8003ed2:	7824      	ldrb	r4, [r4, #0]
 8003ed4:	00e4      	lsls	r4, r4, #3
 8003ed6:	191b      	adds	r3, r3, r4
 8003ed8:	195b      	adds	r3, r3, r5
 8003eda:	4c5e      	ldr	r4, [pc, #376]	; (8004054 <HAL_PCD_EP_Receive+0x1ec>)
 8003edc:	46a4      	mov	ip, r4
 8003ede:	4463      	add	r3, ip
 8003ee0:	2a3e      	cmp	r2, #62	; 0x3e
 8003ee2:	d929      	bls.n	8003f38 <HAL_PCD_EP_Receive+0xd0>
 8003ee4:	0954      	lsrs	r4, r2, #5
 8003ee6:	b2a4      	uxth	r4, r4
 8003ee8:	06d2      	lsls	r2, r2, #27
 8003eea:	d101      	bne.n	8003ef0 <HAL_PCD_EP_Receive+0x88>
 8003eec:	3c01      	subs	r4, #1
 8003eee:	b2a4      	uxth	r4, r4
 8003ef0:	02a4      	lsls	r4, r4, #10
 8003ef2:	b2a4      	uxth	r4, r4
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_PCD_EP_Receive+0x1f0>)
 8003ef6:	4314      	orrs	r4, r2
 8003ef8:	801c      	strh	r4, [r3, #0]
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003efa:	6803      	ldr	r3, [r0, #0]
 8003efc:	00ca      	lsls	r2, r1, #3
 8003efe:	1a51      	subs	r1, r2, r1
 8003f00:	008a      	lsls	r2, r1, #2
 8003f02:	1880      	adds	r0, r0, r2
 8003f04:	3009      	adds	r0, #9
 8003f06:	30ff      	adds	r0, #255	; 0xff
 8003f08:	7802      	ldrb	r2, [r0, #0]
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	8819      	ldrh	r1, [r3, #0]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_PCD_EP_Receive+0x1f4>)
 8003f12:	4011      	ands	r1, r2
 8003f14:	22c0      	movs	r2, #192	; 0xc0
 8003f16:	0192      	lsls	r2, r2, #6
 8003f18:	4051      	eors	r1, r2
 8003f1a:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_PCD_EP_Receive+0x1f8>)
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
}
 8003f20:	2000      	movs	r0, #0
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
    ep->xfer_len =0U;
 8003f24:	00cc      	lsls	r4, r1, #3
 8003f26:	1a64      	subs	r4, r4, r1
 8003f28:	00a2      	lsls	r2, r4, #2
 8003f2a:	1882      	adds	r2, r0, r2
 8003f2c:	321d      	adds	r2, #29
 8003f2e:	32ff      	adds	r2, #255	; 0xff
 8003f30:	2400      	movs	r4, #0
 8003f32:	6014      	str	r4, [r2, #0]
    len=ep->xfer_len;
 8003f34:	001a      	movs	r2, r3
 8003f36:	e7bc      	b.n	8003eb2 <HAL_PCD_EP_Receive+0x4a>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8003f38:	0854      	lsrs	r4, r2, #1
 8003f3a:	b2a4      	uxth	r4, r4
 8003f3c:	07d2      	lsls	r2, r2, #31
 8003f3e:	d501      	bpl.n	8003f44 <HAL_PCD_EP_Receive+0xdc>
 8003f40:	3401      	adds	r4, #1
 8003f42:	b2a4      	uxth	r4, r4
 8003f44:	02a4      	lsls	r4, r4, #10
 8003f46:	801c      	strh	r4, [r3, #0]
 8003f48:	e7d7      	b.n	8003efa <HAL_PCD_EP_Receive+0x92>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8003f4a:	00cc      	lsls	r4, r1, #3
 8003f4c:	1a64      	subs	r4, r4, r1
 8003f4e:	00a3      	lsls	r3, r4, #2
 8003f50:	001c      	movs	r4, r3
 8003f52:	18c3      	adds	r3, r0, r3
 8003f54:	330a      	adds	r3, #10
 8003f56:	33ff      	adds	r3, #255	; 0xff
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d123      	bne.n	8003fa6 <HAL_PCD_EP_Receive+0x13e>
 8003f5e:	6805      	ldr	r5, [r0, #0]
 8003f60:	3350      	adds	r3, #80	; 0x50
 8003f62:	5aeb      	ldrh	r3, [r5, r3]
 8003f64:	1904      	adds	r4, r0, r4
 8003f66:	3409      	adds	r4, #9
 8003f68:	34ff      	adds	r4, #255	; 0xff
 8003f6a:	7824      	ldrb	r4, [r4, #0]
 8003f6c:	00e4      	lsls	r4, r4, #3
 8003f6e:	191b      	adds	r3, r3, r4
 8003f70:	195b      	adds	r3, r3, r5
 8003f72:	4c3c      	ldr	r4, [pc, #240]	; (8004064 <HAL_PCD_EP_Receive+0x1fc>)
 8003f74:	46a4      	mov	ip, r4
 8003f76:	4463      	add	r3, ip
 8003f78:	2a3e      	cmp	r2, #62	; 0x3e
 8003f7a:	d90b      	bls.n	8003f94 <HAL_PCD_EP_Receive+0x12c>
 8003f7c:	0954      	lsrs	r4, r2, #5
 8003f7e:	b2a4      	uxth	r4, r4
 8003f80:	06d5      	lsls	r5, r2, #27
 8003f82:	d101      	bne.n	8003f88 <HAL_PCD_EP_Receive+0x120>
 8003f84:	3c01      	subs	r4, #1
 8003f86:	b2a4      	uxth	r4, r4
 8003f88:	02a4      	lsls	r4, r4, #10
 8003f8a:	b2a4      	uxth	r4, r4
 8003f8c:	4d32      	ldr	r5, [pc, #200]	; (8004058 <HAL_PCD_EP_Receive+0x1f0>)
 8003f8e:	432c      	orrs	r4, r5
 8003f90:	801c      	strh	r4, [r3, #0]
 8003f92:	e00a      	b.n	8003faa <HAL_PCD_EP_Receive+0x142>
 8003f94:	0854      	lsrs	r4, r2, #1
 8003f96:	b2a4      	uxth	r4, r4
 8003f98:	07d5      	lsls	r5, r2, #31
 8003f9a:	d501      	bpl.n	8003fa0 <HAL_PCD_EP_Receive+0x138>
 8003f9c:	3401      	adds	r4, #1
 8003f9e:	b2a4      	uxth	r4, r4
 8003fa0:	02a4      	lsls	r4, r4, #10
 8003fa2:	801c      	strh	r4, [r3, #0]
 8003fa4:	e001      	b.n	8003faa <HAL_PCD_EP_Receive+0x142>
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d024      	beq.n	8003ff4 <HAL_PCD_EP_Receive+0x18c>
 8003faa:	00cc      	lsls	r4, r1, #3
 8003fac:	1a64      	subs	r4, r4, r1
 8003fae:	00a3      	lsls	r3, r4, #2
 8003fb0:	001c      	movs	r4, r3
 8003fb2:	18c3      	adds	r3, r0, r3
 8003fb4:	330a      	adds	r3, #10
 8003fb6:	33ff      	adds	r3, #255	; 0xff
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d135      	bne.n	800402a <HAL_PCD_EP_Receive+0x1c2>
 8003fbe:	6805      	ldr	r5, [r0, #0]
 8003fc0:	3350      	adds	r3, #80	; 0x50
 8003fc2:	5aeb      	ldrh	r3, [r5, r3]
 8003fc4:	1904      	adds	r4, r0, r4
 8003fc6:	3409      	adds	r4, #9
 8003fc8:	34ff      	adds	r4, #255	; 0xff
 8003fca:	7824      	ldrb	r4, [r4, #0]
 8003fcc:	00e4      	lsls	r4, r4, #3
 8003fce:	191b      	adds	r3, r3, r4
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	4c20      	ldr	r4, [pc, #128]	; (8004054 <HAL_PCD_EP_Receive+0x1ec>)
 8003fd4:	46a4      	mov	ip, r4
 8003fd6:	4463      	add	r3, ip
 8003fd8:	2a3e      	cmp	r2, #62	; 0x3e
 8003fda:	d91d      	bls.n	8004018 <HAL_PCD_EP_Receive+0x1b0>
 8003fdc:	0954      	lsrs	r4, r2, #5
 8003fde:	b2a4      	uxth	r4, r4
 8003fe0:	06d2      	lsls	r2, r2, #27
 8003fe2:	d101      	bne.n	8003fe8 <HAL_PCD_EP_Receive+0x180>
 8003fe4:	3c01      	subs	r4, #1
 8003fe6:	b2a4      	uxth	r4, r4
 8003fe8:	02a4      	lsls	r4, r4, #10
 8003fea:	b2a4      	uxth	r4, r4
 8003fec:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <HAL_PCD_EP_Receive+0x1f0>)
 8003fee:	4314      	orrs	r4, r2
 8003ff0:	801c      	strh	r4, [r3, #0]
 8003ff2:	e782      	b.n	8003efa <HAL_PCD_EP_Receive+0x92>
 8003ff4:	6805      	ldr	r5, [r0, #0]
 8003ff6:	334f      	adds	r3, #79	; 0x4f
 8003ff8:	5aeb      	ldrh	r3, [r5, r3]
 8003ffa:	00ce      	lsls	r6, r1, #3
 8003ffc:	1a76      	subs	r6, r6, r1
 8003ffe:	00b4      	lsls	r4, r6, #2
 8004000:	1904      	adds	r4, r0, r4
 8004002:	3409      	adds	r4, #9
 8004004:	34ff      	adds	r4, #255	; 0xff
 8004006:	7824      	ldrb	r4, [r4, #0]
 8004008:	00e4      	lsls	r4, r4, #3
 800400a:	191b      	adds	r3, r3, r4
 800400c:	195b      	adds	r3, r3, r5
 800400e:	4c15      	ldr	r4, [pc, #84]	; (8004064 <HAL_PCD_EP_Receive+0x1fc>)
 8004010:	46a4      	mov	ip, r4
 8004012:	4463      	add	r3, ip
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e7c8      	b.n	8003faa <HAL_PCD_EP_Receive+0x142>
 8004018:	0854      	lsrs	r4, r2, #1
 800401a:	b2a4      	uxth	r4, r4
 800401c:	07d2      	lsls	r2, r2, #31
 800401e:	d501      	bpl.n	8004024 <HAL_PCD_EP_Receive+0x1bc>
 8004020:	3401      	adds	r4, #1
 8004022:	b2a4      	uxth	r4, r4
 8004024:	02a4      	lsls	r4, r4, #10
 8004026:	801c      	strh	r4, [r3, #0]
 8004028:	e767      	b.n	8003efa <HAL_PCD_EP_Receive+0x92>
 800402a:	2b01      	cmp	r3, #1
 800402c:	d000      	beq.n	8004030 <HAL_PCD_EP_Receive+0x1c8>
 800402e:	e764      	b.n	8003efa <HAL_PCD_EP_Receive+0x92>
 8004030:	6805      	ldr	r5, [r0, #0]
 8004032:	334f      	adds	r3, #79	; 0x4f
 8004034:	5aeb      	ldrh	r3, [r5, r3]
 8004036:	00ce      	lsls	r6, r1, #3
 8004038:	1a76      	subs	r6, r6, r1
 800403a:	00b4      	lsls	r4, r6, #2
 800403c:	1904      	adds	r4, r0, r4
 800403e:	3409      	adds	r4, #9
 8004040:	34ff      	adds	r4, #255	; 0xff
 8004042:	7824      	ldrb	r4, [r4, #0]
 8004044:	00e4      	lsls	r4, r4, #3
 8004046:	191b      	adds	r3, r3, r4
 8004048:	195b      	adds	r3, r3, r5
 800404a:	4c02      	ldr	r4, [pc, #8]	; (8004054 <HAL_PCD_EP_Receive+0x1ec>)
 800404c:	46a4      	mov	ip, r4
 800404e:	4463      	add	r3, ip
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	e752      	b.n	8003efa <HAL_PCD_EP_Receive+0x92>
 8004054:	00000406 	.word	0x00000406
 8004058:	ffff8000 	.word	0xffff8000
 800405c:	ffffbf8f 	.word	0xffffbf8f
 8004060:	ffff8080 	.word	0xffff8080
 8004064:	00000402 	.word	0x00000402

08004068 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004068:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800406a:	23f4      	movs	r3, #244	; 0xf4
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	5cc3      	ldrb	r3, [r0, r3]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d04e      	beq.n	8004112 <HAL_PCD_EP_SetStall+0xaa>
 8004074:	2201      	movs	r2, #1
 8004076:	23f4      	movs	r3, #244	; 0xf4
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	54c2      	strb	r2, [r0, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 800407c:	b24c      	sxtb	r4, r1
 800407e:	2c00      	cmp	r4, #0
 8004080:	db20      	blt.n	80040c4 <HAL_PCD_EP_SetStall+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004082:	00ca      	lsls	r2, r1, #3
 8004084:	1a52      	subs	r2, r2, r1
 8004086:	0093      	lsls	r3, r2, #2
 8004088:	3309      	adds	r3, #9
 800408a:	33ff      	adds	r3, #255	; 0xff
 800408c:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 1;
 800408e:	2201      	movs	r2, #1
 8004090:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8004092:	327e      	adds	r2, #126	; 0x7e
 8004094:	4011      	ands	r1, r2
 8004096:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8004098:	0fe4      	lsrs	r4, r4, #31
 800409a:	705c      	strb	r4, [r3, #1]
  
  if (ep->num == 0U)
 800409c:	2900      	cmp	r1, #0
 800409e:	d11a      	bne.n	80040d6 <HAL_PCD_EP_SetStall+0x6e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 80040a0:	0089      	lsls	r1, r1, #2
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	469c      	mov	ip, r3
 80040a6:	4461      	add	r1, ip
 80040a8:	880a      	ldrh	r2, [r1, #0]
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_PCD_EP_SetStall+0xb0>)
 80040ac:	401a      	ands	r2, r3
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_PCD_EP_SetStall+0xb4>)
 80040b0:	405a      	eors	r2, r3
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_PCD_EP_SetStall+0xb8>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	800b      	strh	r3, [r1, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 80040b8:	2200      	movs	r2, #0
 80040ba:	23f4      	movs	r3, #244	; 0xf4
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80040c4:	3b6a      	subs	r3, #106	; 0x6a
 80040c6:	3bff      	subs	r3, #255	; 0xff
 80040c8:	400b      	ands	r3, r1
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	0093      	lsls	r3, r2, #2
 80040d0:	3328      	adds	r3, #40	; 0x28
 80040d2:	18c3      	adds	r3, r0, r3
 80040d4:	e7db      	b.n	800408e <HAL_PCD_EP_SetStall+0x26>
    if (ep->is_in)
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	d00d      	beq.n	80040f6 <HAL_PCD_EP_SetStall+0x8e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 80040da:	0089      	lsls	r1, r1, #2
 80040dc:	6803      	ldr	r3, [r0, #0]
 80040de:	469c      	mov	ip, r3
 80040e0:	4461      	add	r1, ip
 80040e2:	880b      	ldrh	r3, [r1, #0]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <HAL_PCD_EP_SetStall+0xbc>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	2210      	movs	r2, #16
 80040ea:	4053      	eors	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <HAL_PCD_EP_SetStall+0xb8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	800b      	strh	r3, [r1, #0]
 80040f4:	e7e0      	b.n	80040b8 <HAL_PCD_EP_SetStall+0x50>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80040f6:	0089      	lsls	r1, r1, #2
 80040f8:	6803      	ldr	r3, [r0, #0]
 80040fa:	469c      	mov	ip, r3
 80040fc:	4461      	add	r1, ip
 80040fe:	880a      	ldrh	r2, [r1, #0]
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_PCD_EP_SetStall+0xc0>)
 8004102:	401a      	ands	r2, r3
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	405a      	eors	r2, r3
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_PCD_EP_SetStall+0xb8>)
 800410c:	4313      	orrs	r3, r2
 800410e:	800b      	strh	r3, [r1, #0]
 8004110:	e7d2      	b.n	80040b8 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd); 
 8004112:	2002      	movs	r0, #2
 8004114:	e7d5      	b.n	80040c2 <HAL_PCD_EP_SetStall+0x5a>
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	ffffbfbf 	.word	0xffffbfbf
 800411c:	00001010 	.word	0x00001010
 8004120:	ffff8080 	.word	0xffff8080
 8004124:	ffff8fbf 	.word	0xffff8fbf
 8004128:	ffffbf8f 	.word	0xffffbf8f

0800412c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412c:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 800412e:	b24a      	sxtb	r2, r1
 8004130:	2a00      	cmp	r2, #0
 8004132:	db39      	blt.n	80041a8 <HAL_PCD_EP_ClrStall+0x7c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004134:	00cc      	lsls	r4, r1, #3
 8004136:	1a64      	subs	r4, r4, r1
 8004138:	00a3      	lsls	r3, r4, #2
 800413a:	3309      	adds	r3, #9
 800413c:	33ff      	adds	r3, #255	; 0xff
 800413e:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 0U;
 8004140:	2400      	movs	r4, #0
 8004142:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8004144:	347f      	adds	r4, #127	; 0x7f
 8004146:	4021      	ands	r1, r4
 8004148:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800414a:	0fd2      	lsrs	r2, r2, #31
 800414c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800414e:	22f4      	movs	r2, #244	; 0xf4
 8004150:	0052      	lsls	r2, r2, #1
 8004152:	5c82      	ldrb	r2, [r0, r2]
 8004154:	2a01      	cmp	r2, #1
 8004156:	d04b      	beq.n	80041f0 <HAL_PCD_EP_ClrStall+0xc4>
 8004158:	2101      	movs	r1, #1
 800415a:	22f4      	movs	r2, #244	; 0xf4
 800415c:	0052      	lsls	r2, r2, #1
 800415e:	5481      	strb	r1, [r0, r2]
  
  if (ep->is_in)
 8004160:	785a      	ldrb	r2, [r3, #1]
 8004162:	2a00      	cmp	r2, #0
 8004164:	d028      	beq.n	80041b8 <HAL_PCD_EP_ClrStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	6801      	ldr	r1, [r0, #0]
 800416c:	468c      	mov	ip, r1
 800416e:	4462      	add	r2, ip
 8004170:	8811      	ldrh	r1, [r2, #0]
 8004172:	064c      	lsls	r4, r1, #25
 8004174:	d504      	bpl.n	8004180 <HAL_PCD_EP_ClrStall+0x54>
 8004176:	4c1f      	ldr	r4, [pc, #124]	; (80041f4 <HAL_PCD_EP_ClrStall+0xc8>)
 8004178:	4021      	ands	r1, r4
 800417a:	4c1f      	ldr	r4, [pc, #124]	; (80041f8 <HAL_PCD_EP_ClrStall+0xcc>)
 800417c:	4321      	orrs	r1, r4
 800417e:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	6803      	ldr	r3, [r0, #0]
 8004186:	469c      	mov	ip, r3
 8004188:	4462      	add	r2, ip
 800418a:	8813      	ldrh	r3, [r2, #0]
 800418c:	491b      	ldr	r1, [pc, #108]	; (80041fc <HAL_PCD_EP_ClrStall+0xd0>)
 800418e:	400b      	ands	r3, r1
 8004190:	2130      	movs	r1, #48	; 0x30
 8004192:	404b      	eors	r3, r1
 8004194:	b29b      	uxth	r3, r3
 8004196:	491a      	ldr	r1, [pc, #104]	; (8004200 <HAL_PCD_EP_ClrStall+0xd4>)
 8004198:	430b      	orrs	r3, r1
 800419a:	8013      	strh	r3, [r2, #0]
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
  }
  __HAL_UNLOCK(hpcd); 
 800419c:	2200      	movs	r2, #0
 800419e:	23f4      	movs	r3, #244	; 0xf4
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	54c2      	strb	r2, [r0, r3]
    
  return HAL_OK;
 80041a4:	2000      	movs	r0, #0
}
 80041a6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80041a8:	237f      	movs	r3, #127	; 0x7f
 80041aa:	400b      	ands	r3, r1
 80041ac:	00dc      	lsls	r4, r3, #3
 80041ae:	1ae4      	subs	r4, r4, r3
 80041b0:	00a3      	lsls	r3, r4, #2
 80041b2:	3328      	adds	r3, #40	; 0x28
 80041b4:	18c3      	adds	r3, r0, r3
 80041b6:	e7c3      	b.n	8004140 <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	6801      	ldr	r1, [r0, #0]
 80041be:	468c      	mov	ip, r1
 80041c0:	4462      	add	r2, ip
 80041c2:	8811      	ldrh	r1, [r2, #0]
 80041c4:	044c      	lsls	r4, r1, #17
 80041c6:	d504      	bpl.n	80041d2 <HAL_PCD_EP_ClrStall+0xa6>
 80041c8:	4c0a      	ldr	r4, [pc, #40]	; (80041f4 <HAL_PCD_EP_ClrStall+0xc8>)
 80041ca:	4021      	ands	r1, r4
 80041cc:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <HAL_PCD_EP_ClrStall+0xd8>)
 80041ce:	4321      	orrs	r1, r4
 80041d0:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	6802      	ldr	r2, [r0, #0]
 80041d8:	4694      	mov	ip, r2
 80041da:	4463      	add	r3, ip
 80041dc:	8819      	ldrh	r1, [r3, #0]
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_PCD_EP_ClrStall+0xdc>)
 80041e0:	4011      	ands	r1, r2
 80041e2:	22c0      	movs	r2, #192	; 0xc0
 80041e4:	0192      	lsls	r2, r2, #6
 80041e6:	4051      	eors	r1, r2
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <HAL_PCD_EP_ClrStall+0xd4>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	e7d5      	b.n	800419c <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 80041f0:	2002      	movs	r0, #2
 80041f2:	e7d8      	b.n	80041a6 <HAL_PCD_EP_ClrStall+0x7a>
 80041f4:	00000f0f 	.word	0x00000f0f
 80041f8:	ffff80c0 	.word	0xffff80c0
 80041fc:	ffff8fbf 	.word	0xffff8fbf
 8004200:	ffff8080 	.word	0xffff8080
 8004204:	ffffc080 	.word	0xffffc080
 8004208:	ffffbf8f 	.word	0xffffbf8f

0800420c <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800420c:	b510      	push	{r4, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800420e:	3301      	adds	r3, #1
 8004210:	085b      	lsrs	r3, r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8004212:	1812      	adds	r2, r2, r0
 8004214:	2080      	movs	r0, #128	; 0x80
 8004216:	00c0      	lsls	r0, r0, #3
 8004218:	1814      	adds	r4, r2, r0
  
  for (i = n; i != 0; i--)
 800421a:	e007      	b.n	800422c <PCD_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800421c:	780a      	ldrb	r2, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 800421e:	7848      	ldrb	r0, [r1, #1]
 8004220:	0200      	lsls	r0, r0, #8
 8004222:	4302      	orrs	r2, r0
    *pdwVal++ = temp2;
 8004224:	8022      	strh	r2, [r4, #0]
    pbUsrBuf++;
 8004226:	3102      	adds	r1, #2
  for (i = n; i != 0; i--)
 8004228:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 800422a:	3402      	adds	r4, #2
  for (i = n; i != 0; i--)
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f5      	bne.n	800421c <PCD_WritePMA+0x10>
  }
}
 8004230:	bd10      	pop	{r4, pc}
	...

08004234 <HAL_PCD_EP_Transmit>:
{
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	0005      	movs	r5, r0
 8004238:	247f      	movs	r4, #127	; 0x7f
 800423a:	400c      	ands	r4, r1
  ep->xfer_buff = pBuf;  
 800423c:	00e0      	lsls	r0, r4, #3
 800423e:	1b00      	subs	r0, r0, r4
 8004240:	0081      	lsls	r1, r0, #2
 8004242:	1869      	adds	r1, r5, r1
 8004244:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8004246:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0U;
 8004248:	2200      	movs	r2, #0
 800424a:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 800424c:	000a      	movs	r2, r1
 800424e:	3229      	adds	r2, #41	; 0x29
 8004250:	2001      	movs	r0, #1
 8004252:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & 0x7FU;
 8004254:	3a01      	subs	r2, #1
 8004256:	7014      	strb	r4, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 8004258:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800425a:	42bb      	cmp	r3, r7
 800425c:	d933      	bls.n	80042c6 <HAL_PCD_EP_Transmit+0x92>
    ep->xfer_len-=len; 
 800425e:	1bdb      	subs	r3, r3, r7
 8004260:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 8004262:	00e2      	lsls	r2, r4, #3
 8004264:	1b12      	subs	r2, r2, r4
 8004266:	0093      	lsls	r3, r2, #2
 8004268:	001a      	movs	r2, r3
 800426a:	18eb      	adds	r3, r5, r3
 800426c:	3332      	adds	r3, #50	; 0x32
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d030      	beq.n	80042d6 <HAL_PCD_EP_Transmit+0xa2>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8004274:	6828      	ldr	r0, [r5, #0]
 8004276:	00e2      	lsls	r2, r4, #3
 8004278:	1b12      	subs	r2, r2, r4
 800427a:	0093      	lsls	r3, r2, #2
 800427c:	18eb      	adds	r3, r5, r3
 800427e:	3328      	adds	r3, #40	; 0x28
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	5a82      	ldrh	r2, [r0, r2]
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	d574      	bpl.n	8004374 <HAL_PCD_EP_Transmit+0x140>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800428a:	00e6      	lsls	r6, r4, #3
 800428c:	1b36      	subs	r6, r6, r4
 800428e:	00b2      	lsls	r2, r6, #2
 8004290:	18aa      	adds	r2, r5, r2
 8004292:	3229      	adds	r2, #41	; 0x29
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	2a00      	cmp	r2, #0
 8004298:	d13b      	bne.n	8004312 <HAL_PCD_EP_Transmit+0xde>
 800429a:	3250      	adds	r2, #80	; 0x50
 800429c:	5a82      	ldrh	r2, [r0, r2]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	1818      	adds	r0, r3, r0
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_PCD_EP_Transmit+0x1fc>)
 80042a6:	469c      	mov	ip, r3
 80042a8:	4460      	add	r0, ip
 80042aa:	2f3e      	cmp	r7, #62	; 0x3e
 80042ac:	d928      	bls.n	8004300 <HAL_PCD_EP_Transmit+0xcc>
 80042ae:	097b      	lsrs	r3, r7, #5
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	06fa      	lsls	r2, r7, #27
 80042b4:	d101      	bne.n	80042ba <HAL_PCD_EP_Transmit+0x86>
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4a5d      	ldr	r2, [pc, #372]	; (8004434 <HAL_PCD_EP_Transmit+0x200>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	8003      	strh	r3, [r0, #0]
 80042c4:	e027      	b.n	8004316 <HAL_PCD_EP_Transmit+0xe2>
    ep->xfer_len =0U;
 80042c6:	00e1      	lsls	r1, r4, #3
 80042c8:	1b09      	subs	r1, r1, r4
 80042ca:	008a      	lsls	r2, r1, #2
 80042cc:	18aa      	adds	r2, r5, r2
 80042ce:	2100      	movs	r1, #0
 80042d0:	63d1      	str	r1, [r2, #60]	; 0x3c
    len=ep->xfer_len;
 80042d2:	001f      	movs	r7, r3
 80042d4:	e7c5      	b.n	8004262 <HAL_PCD_EP_Transmit+0x2e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80042d6:	b2bf      	uxth	r7, r7
 80042d8:	18ae      	adds	r6, r5, r2
 80042da:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 80042dc:	003b      	movs	r3, r7
 80042de:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80042e0:	6828      	ldr	r0, [r5, #0]
 80042e2:	f7ff ff93 	bl	800420c <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80042e6:	682a      	ldr	r2, [r5, #0]
 80042e8:	2350      	movs	r3, #80	; 0x50
 80042ea:	5ad3      	ldrh	r3, [r2, r3]
 80042ec:	3628      	adds	r6, #40	; 0x28
 80042ee:	7831      	ldrb	r1, [r6, #0]
 80042f0:	00c9      	lsls	r1, r1, #3
 80042f2:	185b      	adds	r3, r3, r1
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	4a50      	ldr	r2, [pc, #320]	; (8004438 <HAL_PCD_EP_Transmit+0x204>)
 80042f8:	4694      	mov	ip, r2
 80042fa:	4463      	add	r3, ip
 80042fc:	801f      	strh	r7, [r3, #0]
 80042fe:	e082      	b.n	8004406 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004300:	087b      	lsrs	r3, r7, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	07fa      	lsls	r2, r7, #31
 8004306:	d501      	bpl.n	800430c <HAL_PCD_EP_Transmit+0xd8>
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	8003      	strh	r3, [r0, #0]
 8004310:	e001      	b.n	8004316 <HAL_PCD_EP_Transmit+0xe2>
 8004312:	2a01      	cmp	r2, #1
 8004314:	d024      	beq.n	8004360 <HAL_PCD_EP_Transmit+0x12c>
      pmabuffer = ep->pmaaddr1;
 8004316:	00e2      	lsls	r2, r4, #3
 8004318:	1b12      	subs	r2, r2, r4
 800431a:	0093      	lsls	r3, r2, #2
 800431c:	18eb      	adds	r3, r5, r3
 800431e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8004320:	b2bb      	uxth	r3, r7
 8004322:	00e1      	lsls	r1, r4, #3
 8004324:	1b09      	subs	r1, r1, r4
 8004326:	008e      	lsls	r6, r1, #2
 8004328:	19ae      	adds	r6, r5, r6
 800432a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800432c:	6828      	ldr	r0, [r5, #0]
 800432e:	f7ff ff6d 	bl	800420c <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8004332:	3629      	adds	r6, #41	; 0x29
 8004334:	7833      	ldrb	r3, [r6, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d055      	beq.n	80043e6 <HAL_PCD_EP_Transmit+0x1b2>
 800433a:	2b01      	cmp	r3, #1
 800433c:	d163      	bne.n	8004406 <HAL_PCD_EP_Transmit+0x1d2>
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	1b12      	subs	r2, r2, r4
 8004342:	0093      	lsls	r3, r2, #2
 8004344:	18eb      	adds	r3, r5, r3
 8004346:	3328      	adds	r3, #40	; 0x28
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	682a      	ldr	r2, [r5, #0]
 800434e:	4694      	mov	ip, r2
 8004350:	4463      	add	r3, ip
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	4939      	ldr	r1, [pc, #228]	; (800443c <HAL_PCD_EP_Transmit+0x208>)
 8004356:	4011      	ands	r1, r2
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <HAL_PCD_EP_Transmit+0x20c>)
 800435a:	430a      	orrs	r2, r1
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e052      	b.n	8004406 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004360:	324f      	adds	r2, #79	; 0x4f
 8004362:	5a82      	ldrh	r2, [r0, r2]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	1818      	adds	r0, r3, r0
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_PCD_EP_Transmit+0x1fc>)
 800436c:	469c      	mov	ip, r3
 800436e:	4460      	add	r0, ip
 8004370:	8007      	strh	r7, [r0, #0]
 8004372:	e7d0      	b.n	8004316 <HAL_PCD_EP_Transmit+0xe2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004374:	00e6      	lsls	r6, r4, #3
 8004376:	1b36      	subs	r6, r6, r4
 8004378:	00b2      	lsls	r2, r6, #2
 800437a:	18aa      	adds	r2, r5, r2
 800437c:	3229      	adds	r2, #41	; 0x29
 800437e:	7812      	ldrb	r2, [r2, #0]
 8004380:	2a00      	cmp	r2, #0
 8004382:	d11e      	bne.n	80043c2 <HAL_PCD_EP_Transmit+0x18e>
 8004384:	3250      	adds	r2, #80	; 0x50
 8004386:	5a82      	ldrh	r2, [r0, r2]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	18d3      	adds	r3, r2, r3
 800438c:	1818      	adds	r0, r3, r0
 800438e:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <HAL_PCD_EP_Transmit+0x204>)
 8004390:	469c      	mov	ip, r3
 8004392:	4460      	add	r0, ip
 8004394:	2f3e      	cmp	r7, #62	; 0x3e
 8004396:	d90b      	bls.n	80043b0 <HAL_PCD_EP_Transmit+0x17c>
 8004398:	097b      	lsrs	r3, r7, #5
 800439a:	b29b      	uxth	r3, r3
 800439c:	06fa      	lsls	r2, r7, #27
 800439e:	d101      	bne.n	80043a4 <HAL_PCD_EP_Transmit+0x170>
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <HAL_PCD_EP_Transmit+0x200>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	8003      	strh	r3, [r0, #0]
 80043ae:	e00a      	b.n	80043c6 <HAL_PCD_EP_Transmit+0x192>
 80043b0:	087b      	lsrs	r3, r7, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	07fa      	lsls	r2, r7, #31
 80043b6:	d501      	bpl.n	80043bc <HAL_PCD_EP_Transmit+0x188>
 80043b8:	3301      	adds	r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	8003      	strh	r3, [r0, #0]
 80043c0:	e001      	b.n	80043c6 <HAL_PCD_EP_Transmit+0x192>
 80043c2:	2a01      	cmp	r2, #1
 80043c4:	d005      	beq.n	80043d2 <HAL_PCD_EP_Transmit+0x19e>
      pmabuffer = ep->pmaaddr0;
 80043c6:	00e2      	lsls	r2, r4, #3
 80043c8:	1b12      	subs	r2, r2, r4
 80043ca:	0093      	lsls	r3, r2, #2
 80043cc:	18eb      	adds	r3, r5, r3
 80043ce:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80043d0:	e7a6      	b.n	8004320 <HAL_PCD_EP_Transmit+0xec>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80043d2:	324f      	adds	r2, #79	; 0x4f
 80043d4:	5a82      	ldrh	r2, [r0, r2]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	1818      	adds	r0, r3, r0
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <HAL_PCD_EP_Transmit+0x204>)
 80043de:	469c      	mov	ip, r3
 80043e0:	4460      	add	r0, ip
 80043e2:	8007      	strh	r7, [r0, #0]
 80043e4:	e7ef      	b.n	80043c6 <HAL_PCD_EP_Transmit+0x192>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80043e6:	00e2      	lsls	r2, r4, #3
 80043e8:	1b12      	subs	r2, r2, r4
 80043ea:	0093      	lsls	r3, r2, #2
 80043ec:	18eb      	adds	r3, r5, r3
 80043ee:	3328      	adds	r3, #40	; 0x28
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	682a      	ldr	r2, [r5, #0]
 80043f6:	4694      	mov	ip, r2
 80043f8:	4463      	add	r3, ip
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	490f      	ldr	r1, [pc, #60]	; (800443c <HAL_PCD_EP_Transmit+0x208>)
 80043fe:	4011      	ands	r1, r2
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_PCD_EP_Transmit+0x210>)
 8004402:	430a      	orrs	r2, r1
 8004404:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8004406:	682a      	ldr	r2, [r5, #0]
 8004408:	00e1      	lsls	r1, r4, #3
 800440a:	1b0c      	subs	r4, r1, r4
 800440c:	00a3      	lsls	r3, r4, #2
 800440e:	18ed      	adds	r5, r5, r3
 8004410:	3528      	adds	r5, #40	; 0x28
 8004412:	782b      	ldrb	r3, [r5, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	18d2      	adds	r2, r2, r3
 8004418:	8813      	ldrh	r3, [r2, #0]
 800441a:	490b      	ldr	r1, [pc, #44]	; (8004448 <HAL_PCD_EP_Transmit+0x214>)
 800441c:	400b      	ands	r3, r1
 800441e:	2130      	movs	r1, #48	; 0x30
 8004420:	404b      	eors	r3, r1
 8004422:	b29b      	uxth	r3, r3
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <HAL_PCD_EP_Transmit+0x218>)
 8004426:	430b      	orrs	r3, r1
 8004428:	8013      	strh	r3, [r2, #0]
}
 800442a:	2000      	movs	r0, #0
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	00000406 	.word	0x00000406
 8004434:	ffff8000 	.word	0xffff8000
 8004438:	00000402 	.word	0x00000402
 800443c:	00000f0f 	.word	0x00000f0f
 8004440:	ffffc080 	.word	0xffffc080
 8004444:	ffff80c0 	.word	0xffff80c0
 8004448:	ffff8fbf 	.word	0xffff8fbf
 800444c:	ffff8080 	.word	0xffff8080

08004450 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004450:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8004452:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8004454:	1810      	adds	r0, r2, r0
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	00d2      	lsls	r2, r2, #3
 800445a:	4694      	mov	ip, r2
 800445c:	4460      	add	r0, ip
  
  for (i = n; i != 0U; i--)
 800445e:	e006      	b.n	800446e <PCD_ReadPMA+0x1e>
  {
    temp = *pdwVal++;
 8004460:	8802      	ldrh	r2, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8004462:	700a      	strb	r2, [r1, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8004464:	0a12      	lsrs	r2, r2, #8
 8004466:	704a      	strb	r2, [r1, #1]
  for (i = n; i != 0U; i--)
 8004468:	3c01      	subs	r4, #1
    temp = *pdwVal++;
 800446a:	3002      	adds	r0, #2
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800446c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800446e:	2c00      	cmp	r4, #0
 8004470:	d1f6      	bne.n	8004460 <PCD_ReadPMA+0x10>
  }
  
  if (wNBytes % 2)
 8004472:	07db      	lsls	r3, r3, #31
 8004474:	d501      	bpl.n	800447a <PCD_ReadPMA+0x2a>
  {
    temp = *pdwVal++;
 8004476:	8803      	ldrh	r3, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8004478:	700b      	strb	r3, [r1, #0]
  }
}
 800447a:	bd10      	pop	{r4, pc}

0800447c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b083      	sub	sp, #12
 8004480:	0005      	movs	r5, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8004482:	2200      	movs	r2, #0
 8004484:	ab01      	add	r3, sp, #4
 8004486:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8004488:	e1b5      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800448a:	8803      	ldrh	r3, [r0, #0]
 800448c:	4aa9      	ldr	r2, [pc, #676]	; (8004734 <PCD_EP_ISR_Handler+0x2b8>)
 800448e:	4013      	ands	r3, r2
 8004490:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004492:	6829      	ldr	r1, [r5, #0]
 8004494:	2350      	movs	r3, #80	; 0x50
 8004496:	5acb      	ldrh	r3, [r1, r3]
 8004498:	2228      	movs	r2, #40	; 0x28
 800449a:	5caa      	ldrb	r2, [r5, r2]
 800449c:	00d2      	lsls	r2, r2, #3
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	185b      	adds	r3, r3, r1
 80044a2:	4aa5      	ldr	r2, [pc, #660]	; (8004738 <PCD_EP_ISR_Handler+0x2bc>)
 80044a4:	4694      	mov	ip, r2
 80044a6:	4463      	add	r3, ip
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	059b      	lsls	r3, r3, #22
 80044ac:	0d9b      	lsrs	r3, r3, #22
 80044ae:	642b      	str	r3, [r5, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80044b0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80044b2:	4694      	mov	ip, r2
 80044b4:	4463      	add	r3, ip
 80044b6:	63ab      	str	r3, [r5, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044b8:	2100      	movs	r1, #0
 80044ba:	0028      	movs	r0, r5
 80044bc:	f002 ff9b 	bl	80073f6 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80044c0:	2324      	movs	r3, #36	; 0x24
 80044c2:	5ceb      	ldrb	r3, [r5, r3]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d100      	bne.n	80044ca <PCD_EP_ISR_Handler+0x4e>
 80044c8:	e195      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
 80044ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d000      	beq.n	80044d2 <PCD_EP_ISR_Handler+0x56>
 80044d0:	e191      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	5cab      	ldrb	r3, [r5, r2]
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	4249      	negs	r1, r1
 80044da:	430b      	orrs	r3, r1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	31cc      	adds	r1, #204	; 0xcc
 80044e0:	6828      	ldr	r0, [r5, #0]
 80044e2:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	54ab      	strb	r3, [r5, r2]
 80044e8:	e185      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044ea:	2350      	movs	r3, #80	; 0x50
 80044ec:	5ac3      	ldrh	r3, [r0, r3]
 80044ee:	2284      	movs	r2, #132	; 0x84
 80044f0:	0052      	lsls	r2, r2, #1
 80044f2:	5caa      	ldrb	r2, [r5, r2]
 80044f4:	00d2      	lsls	r2, r2, #3
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	181b      	adds	r3, r3, r0
 80044fa:	4a90      	ldr	r2, [pc, #576]	; (800473c <PCD_EP_ISR_Handler+0x2c0>)
 80044fc:	4694      	mov	ip, r2
 80044fe:	4463      	add	r3, ip
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	059b      	lsls	r3, r3, #22
 8004504:	0d9b      	lsrs	r3, r3, #22
 8004506:	002a      	movs	r2, r5
 8004508:	3209      	adds	r2, #9
 800450a:	32ff      	adds	r2, #255	; 0xff
 800450c:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 800450e:	0029      	movs	r1, r5
 8004510:	31ed      	adds	r1, #237	; 0xed
 8004512:	31ff      	adds	r1, #255	; 0xff
 8004514:	8892      	ldrh	r2, [r2, #4]
 8004516:	f7ff ff9b 	bl	8004450 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800451a:	682a      	ldr	r2, [r5, #0]
 800451c:	8813      	ldrh	r3, [r2, #0]
 800451e:	4988      	ldr	r1, [pc, #544]	; (8004740 <PCD_EP_ISR_Handler+0x2c4>)
 8004520:	400b      	ands	r3, r1
 8004522:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8004524:	0028      	movs	r0, r5
 8004526:	f002 ff4d 	bl	80073c4 <HAL_PCD_SetupStageCallback>
 800452a:	e164      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800452c:	0014      	movs	r4, r2
 800452e:	8892      	ldrh	r2, [r2, #4]
 8004530:	6921      	ldr	r1, [r4, #16]
 8004532:	f7ff ff8d 	bl	8004450 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	69a2      	ldr	r2, [r4, #24]
 800453a:	4694      	mov	ip, r2
 800453c:	4463      	add	r3, ip
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	e195      	b.n	800486e <PCD_EP_ISR_Handler+0x3f2>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8004542:	084b      	lsrs	r3, r1, #1
 8004544:	b29b      	uxth	r3, r3
 8004546:	07c9      	lsls	r1, r1, #31
 8004548:	d501      	bpl.n	800454e <PCD_EP_ISR_Handler+0xd2>
 800454a:	3301      	adds	r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	029b      	lsls	r3, r3, #10
 8004550:	8013      	strh	r3, [r2, #0]
 8004552:	e1a9      	b.n	80048a8 <PCD_EP_ISR_Handler+0x42c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8004554:	00a6      	lsls	r6, r4, #2
 8004556:	1980      	adds	r0, r0, r6
 8004558:	8802      	ldrh	r2, [r0, #0]
 800455a:	ab01      	add	r3, sp, #4
 800455c:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b21b      	sxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	db31      	blt.n	80045ca <PCD_EP_ISR_Handler+0x14e>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004566:	ab01      	add	r3, sp, #4
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	d400      	bmi.n	8004570 <PCD_EP_ISR_Handler+0xf4>
 800456e:	e142      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	469c      	mov	ip, r3
 8004574:	4466      	add	r6, ip
 8004576:	8833      	ldrh	r3, [r6, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <PCD_EP_ISR_Handler+0x2b8>)
 800457a:	4013      	ands	r3, r2
 800457c:	8033      	strh	r3, [r6, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800457e:	00e2      	lsls	r2, r4, #3
 8004580:	1b12      	subs	r2, r2, r4
 8004582:	0093      	lsls	r3, r2, #2
 8004584:	001a      	movs	r2, r3
 8004586:	18eb      	adds	r3, r5, r3
 8004588:	3332      	adds	r3, #50	; 0x32
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d000      	beq.n	8004592 <PCD_EP_ISR_Handler+0x116>
 8004590:	e0dc      	b.n	800474c <PCD_EP_ISR_Handler+0x2d0>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004592:	6828      	ldr	r0, [r5, #0]
 8004594:	3350      	adds	r3, #80	; 0x50
 8004596:	5ac3      	ldrh	r3, [r0, r3]
 8004598:	18aa      	adds	r2, r5, r2
 800459a:	0011      	movs	r1, r2
 800459c:	3128      	adds	r1, #40	; 0x28
 800459e:	7809      	ldrb	r1, [r1, #0]
 80045a0:	00c9      	lsls	r1, r1, #3
 80045a2:	185b      	adds	r3, r3, r1
 80045a4:	181b      	adds	r3, r3, r0
 80045a6:	4964      	ldr	r1, [pc, #400]	; (8004738 <PCD_EP_ISR_Handler+0x2bc>)
 80045a8:	468c      	mov	ip, r1
 80045aa:	4463      	add	r3, ip
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	059b      	lsls	r3, r3, #22
 80045b0:	0d9b      	lsrs	r3, r3, #22
 80045b2:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 80045b4:	d100      	bne.n	80045b8 <PCD_EP_ISR_Handler+0x13c>
 80045b6:	e0f9      	b.n	80047ac <PCD_EP_ISR_Handler+0x330>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80045b8:	00e2      	lsls	r2, r4, #3
 80045ba:	1b12      	subs	r2, r2, r4
 80045bc:	0091      	lsls	r1, r2, #2
 80045be:	1869      	adds	r1, r5, r1
 80045c0:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80045c2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80045c4:	f7ff fe22 	bl	800420c <PCD_WritePMA>
 80045c8:	e0f0      	b.n	80047ac <PCD_EP_ISR_Handler+0x330>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80045ca:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <PCD_EP_ISR_Handler+0x2c4>)
 80045cc:	401a      	ands	r2, r3
 80045ce:	8002      	strh	r2, [r0, #0]
        if (ep->doublebuffer == 0U)
 80045d0:	00e2      	lsls	r2, r4, #3
 80045d2:	1b12      	subs	r2, r2, r4
 80045d4:	0093      	lsls	r3, r2, #2
 80045d6:	001a      	movs	r2, r3
 80045d8:	18eb      	adds	r3, r5, r3
 80045da:	3313      	adds	r3, #19
 80045dc:	33ff      	adds	r3, #255	; 0xff
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <PCD_EP_ISR_Handler+0x1a4>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045e4:	6828      	ldr	r0, [r5, #0]
 80045e6:	3350      	adds	r3, #80	; 0x50
 80045e8:	5ac3      	ldrh	r3, [r0, r3]
 80045ea:	0011      	movs	r1, r2
 80045ec:	18aa      	adds	r2, r5, r2
 80045ee:	3209      	adds	r2, #9
 80045f0:	32ff      	adds	r2, #255	; 0xff
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	00d2      	lsls	r2, r2, #3
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	181b      	adds	r3, r3, r0
 80045fa:	4a50      	ldr	r2, [pc, #320]	; (800473c <PCD_EP_ISR_Handler+0x2c0>)
 80045fc:	4694      	mov	ip, r2
 80045fe:	4463      	add	r3, ip
 8004600:	881f      	ldrh	r7, [r3, #0]
 8004602:	05bf      	lsls	r7, r7, #22
 8004604:	0dbf      	lsrs	r7, r7, #22
          if (count != 0U)
 8004606:	d034      	beq.n	8004672 <PCD_EP_ISR_Handler+0x1f6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004608:	186b      	adds	r3, r5, r1
 800460a:	001a      	movs	r2, r3
 800460c:	320d      	adds	r2, #13
 800460e:	32ff      	adds	r2, #255	; 0xff
 8004610:	8812      	ldrh	r2, [r2, #0]
 8004612:	3319      	adds	r3, #25
 8004614:	33ff      	adds	r3, #255	; 0xff
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	003b      	movs	r3, r7
 800461a:	f7ff ff19 	bl	8004450 <PCD_ReadPMA>
 800461e:	e028      	b.n	8004672 <PCD_EP_ISR_Handler+0x1f6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8004620:	6828      	ldr	r0, [r5, #0]
 8004622:	00e2      	lsls	r2, r4, #3
 8004624:	1b12      	subs	r2, r2, r4
 8004626:	0093      	lsls	r3, r2, #2
 8004628:	18eb      	adds	r3, r5, r3
 800462a:	3309      	adds	r3, #9
 800462c:	33ff      	adds	r3, #255	; 0xff
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009a      	lsls	r2, r3, #2
 8004632:	5a82      	ldrh	r2, [r0, r2]
 8004634:	0452      	lsls	r2, r2, #17
 8004636:	d556      	bpl.n	80046e6 <PCD_EP_ISR_Handler+0x26a>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004638:	2250      	movs	r2, #80	; 0x50
 800463a:	5a82      	ldrh	r2, [r0, r2]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	18d3      	adds	r3, r2, r3
 8004640:	181b      	adds	r3, r3, r0
 8004642:	4a3d      	ldr	r2, [pc, #244]	; (8004738 <PCD_EP_ISR_Handler+0x2bc>)
 8004644:	4694      	mov	ip, r2
 8004646:	4463      	add	r3, ip
 8004648:	881f      	ldrh	r7, [r3, #0]
 800464a:	05bf      	lsls	r7, r7, #22
 800464c:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 800464e:	d13b      	bne.n	80046c8 <PCD_EP_ISR_Handler+0x24c>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8004650:	00e2      	lsls	r2, r4, #3
 8004652:	1b12      	subs	r2, r2, r4
 8004654:	0093      	lsls	r3, r2, #2
 8004656:	18eb      	adds	r3, r5, r3
 8004658:	3309      	adds	r3, #9
 800465a:	33ff      	adds	r3, #255	; 0xff
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	682a      	ldr	r2, [r5, #0]
 8004662:	4694      	mov	ip, r2
 8004664:	4463      	add	r3, ip
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	4936      	ldr	r1, [pc, #216]	; (8004744 <PCD_EP_ISR_Handler+0x2c8>)
 800466a:	4011      	ands	r1, r2
 800466c:	4a36      	ldr	r2, [pc, #216]	; (8004748 <PCD_EP_ISR_Handler+0x2cc>)
 800466e:	430a      	orrs	r2, r1
 8004670:	801a      	strh	r2, [r3, #0]
        ep->xfer_count+=count;
 8004672:	0039      	movs	r1, r7
 8004674:	00e2      	lsls	r2, r4, #3
 8004676:	1b12      	subs	r2, r2, r4
 8004678:	0093      	lsls	r3, r2, #2
 800467a:	18eb      	adds	r3, r5, r3
 800467c:	0018      	movs	r0, r3
 800467e:	3021      	adds	r0, #33	; 0x21
 8004680:	30ff      	adds	r0, #255	; 0xff
 8004682:	6802      	ldr	r2, [r0, #0]
 8004684:	19d2      	adds	r2, r2, r7
 8004686:	6002      	str	r2, [r0, #0]
        ep->xfer_buff+=count;
 8004688:	001a      	movs	r2, r3
 800468a:	3219      	adds	r2, #25
 800468c:	32ff      	adds	r2, #255	; 0xff
 800468e:	6810      	ldr	r0, [r2, #0]
 8004690:	4684      	mov	ip, r0
 8004692:	4467      	add	r7, ip
 8004694:	6017      	str	r7, [r2, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004696:	331d      	adds	r3, #29
 8004698:	33ff      	adds	r3, #255	; 0xff
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <PCD_EP_ISR_Handler+0x236>
 80046a0:	00e2      	lsls	r2, r4, #3
 80046a2:	1b12      	subs	r2, r2, r4
 80046a4:	0090      	lsls	r0, r2, #2
 80046a6:	1828      	adds	r0, r5, r0
 80046a8:	3015      	adds	r0, #21
 80046aa:	30ff      	adds	r0, #255	; 0xff
 80046ac:	6802      	ldr	r2, [r0, #0]
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d234      	bcs.n	800471c <PCD_EP_ISR_Handler+0x2a0>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	1b12      	subs	r2, r2, r4
 80046b6:	0093      	lsls	r3, r2, #2
 80046b8:	18eb      	adds	r3, r5, r3
 80046ba:	3309      	adds	r3, #9
 80046bc:	33ff      	adds	r3, #255	; 0xff
 80046be:	7819      	ldrb	r1, [r3, #0]
 80046c0:	0028      	movs	r0, r5
 80046c2:	f002 fe89 	bl	80073d8 <HAL_PCD_DataOutStageCallback>
 80046c6:	e74e      	b.n	8004566 <PCD_EP_ISR_Handler+0xea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046c8:	00e2      	lsls	r2, r4, #3
 80046ca:	1b12      	subs	r2, r2, r4
 80046cc:	0093      	lsls	r3, r2, #2
 80046ce:	18eb      	adds	r3, r5, r3
 80046d0:	001a      	movs	r2, r3
 80046d2:	320f      	adds	r2, #15
 80046d4:	32ff      	adds	r2, #255	; 0xff
 80046d6:	8812      	ldrh	r2, [r2, #0]
 80046d8:	3319      	adds	r3, #25
 80046da:	33ff      	adds	r3, #255	; 0xff
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	003b      	movs	r3, r7
 80046e0:	f7ff feb6 	bl	8004450 <PCD_ReadPMA>
 80046e4:	e7b4      	b.n	8004650 <PCD_EP_ISR_Handler+0x1d4>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046e6:	2250      	movs	r2, #80	; 0x50
 80046e8:	5a82      	ldrh	r2, [r0, r2]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	181b      	adds	r3, r3, r0
 80046f0:	4a12      	ldr	r2, [pc, #72]	; (800473c <PCD_EP_ISR_Handler+0x2c0>)
 80046f2:	4694      	mov	ip, r2
 80046f4:	4463      	add	r3, ip
 80046f6:	881f      	ldrh	r7, [r3, #0]
 80046f8:	05bf      	lsls	r7, r7, #22
 80046fa:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 80046fc:	d0a8      	beq.n	8004650 <PCD_EP_ISR_Handler+0x1d4>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046fe:	00e2      	lsls	r2, r4, #3
 8004700:	1b12      	subs	r2, r2, r4
 8004702:	0093      	lsls	r3, r2, #2
 8004704:	18eb      	adds	r3, r5, r3
 8004706:	001a      	movs	r2, r3
 8004708:	3211      	adds	r2, #17
 800470a:	32ff      	adds	r2, #255	; 0xff
 800470c:	8812      	ldrh	r2, [r2, #0]
 800470e:	3319      	adds	r3, #25
 8004710:	33ff      	adds	r3, #255	; 0xff
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	003b      	movs	r3, r7
 8004716:	f7ff fe9b 	bl	8004450 <PCD_ReadPMA>
 800471a:	e799      	b.n	8004650 <PCD_EP_ISR_Handler+0x1d4>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800471c:	00e1      	lsls	r1, r4, #3
 800471e:	1b09      	subs	r1, r1, r4
 8004720:	008a      	lsls	r2, r1, #2
 8004722:	18aa      	adds	r2, r5, r2
 8004724:	3209      	adds	r2, #9
 8004726:	32ff      	adds	r2, #255	; 0xff
 8004728:	7811      	ldrb	r1, [r2, #0]
 800472a:	003a      	movs	r2, r7
 800472c:	0028      	movs	r0, r5
 800472e:	f7ff fb9b 	bl	8003e68 <HAL_PCD_EP_Receive>
 8004732:	e718      	b.n	8004566 <PCD_EP_ISR_Handler+0xea>
 8004734:	ffff8f0f 	.word	0xffff8f0f
 8004738:	00000402 	.word	0x00000402
 800473c:	00000406 	.word	0x00000406
 8004740:	00000f8f 	.word	0x00000f8f
 8004744:	00000f0f 	.word	0x00000f0f
 8004748:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800474c:	6828      	ldr	r0, [r5, #0]
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	1b12      	subs	r2, r2, r4
 8004752:	0093      	lsls	r3, r2, #2
 8004754:	18eb      	adds	r3, r5, r3
 8004756:	3328      	adds	r3, #40	; 0x28
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	5a82      	ldrh	r2, [r0, r2]
 800475e:	0652      	lsls	r2, r2, #25
 8004760:	d400      	bmi.n	8004764 <PCD_EP_ISR_Handler+0x2e8>
 8004762:	e0b2      	b.n	80048ca <PCD_EP_ISR_Handler+0x44e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004764:	2250      	movs	r2, #80	; 0x50
 8004766:	5a82      	ldrh	r2, [r0, r2]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	18d3      	adds	r3, r2, r3
 800476c:	181b      	adds	r3, r3, r0
 800476e:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <PCD_EP_ISR_Handler+0x49c>)
 8004770:	4694      	mov	ip, r2
 8004772:	4463      	add	r3, ip
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	059b      	lsls	r3, r3, #22
 8004778:	0d9b      	lsrs	r3, r3, #22
 800477a:	00e1      	lsls	r1, r4, #3
 800477c:	1b09      	subs	r1, r1, r4
 800477e:	008a      	lsls	r2, r1, #2
 8004780:	0011      	movs	r1, r2
 8004782:	18aa      	adds	r2, r5, r2
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <PCD_EP_ISR_Handler+0x310>
 800478a:	e098      	b.n	80048be <PCD_EP_ISR_Handler+0x442>
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 800478c:	00e2      	lsls	r2, r4, #3
 800478e:	1b12      	subs	r2, r2, r4
 8004790:	0093      	lsls	r3, r2, #2
 8004792:	18eb      	adds	r3, r5, r3
 8004794:	3328      	adds	r3, #40	; 0x28
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	682a      	ldr	r2, [r5, #0]
 800479c:	4694      	mov	ip, r2
 800479e:	4463      	add	r3, ip
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	495e      	ldr	r1, [pc, #376]	; (800491c <PCD_EP_ISR_Handler+0x4a0>)
 80047a4:	4011      	ands	r1, r2
 80047a6:	4a5e      	ldr	r2, [pc, #376]	; (8004920 <PCD_EP_ISR_Handler+0x4a4>)
 80047a8:	430a      	orrs	r2, r1
 80047aa:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047ac:	6828      	ldr	r0, [r5, #0]
 80047ae:	2350      	movs	r3, #80	; 0x50
 80047b0:	5ac2      	ldrh	r2, [r0, r3]
 80047b2:	00e1      	lsls	r1, r4, #3
 80047b4:	1b09      	subs	r1, r1, r4
 80047b6:	008b      	lsls	r3, r1, #2
 80047b8:	18eb      	adds	r3, r5, r3
 80047ba:	0019      	movs	r1, r3
 80047bc:	3128      	adds	r1, #40	; 0x28
 80047be:	7809      	ldrb	r1, [r1, #0]
 80047c0:	00c9      	lsls	r1, r1, #3
 80047c2:	1852      	adds	r2, r2, r1
 80047c4:	1812      	adds	r2, r2, r0
 80047c6:	4954      	ldr	r1, [pc, #336]	; (8004918 <PCD_EP_ISR_Handler+0x49c>)
 80047c8:	468c      	mov	ip, r1
 80047ca:	4462      	add	r2, ip
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	0592      	lsls	r2, r2, #22
 80047d0:	0d92      	lsrs	r2, r2, #22
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80047d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047d6:	468c      	mov	ip, r1
 80047d8:	4462      	add	r2, ip
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d000      	beq.n	80047e4 <PCD_EP_ISR_Handler+0x368>
 80047e2:	e08c      	b.n	80048fe <PCD_EP_ISR_Handler+0x482>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047e4:	00e3      	lsls	r3, r4, #3
 80047e6:	1b1c      	subs	r4, r3, r4
 80047e8:	00a3      	lsls	r3, r4, #2
 80047ea:	18eb      	adds	r3, r5, r3
 80047ec:	3328      	adds	r3, #40	; 0x28
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	0028      	movs	r0, r5
 80047f2:	f002 fe00 	bl	80073f6 <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80047f6:	6828      	ldr	r0, [r5, #0]
 80047f8:	2344      	movs	r3, #68	; 0x44
 80047fa:	5ac3      	ldrh	r3, [r0, r3]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	466a      	mov	r2, sp
 8004800:	80d3      	strh	r3, [r2, #6]
 8004802:	b21b      	sxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	db00      	blt.n	800480a <PCD_EP_ISR_Handler+0x38e>
 8004808:	e083      	b.n	8004912 <PCD_EP_ISR_Handler+0x496>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800480a:	466b      	mov	r3, sp
 800480c:	88dc      	ldrh	r4, [r3, #6]
 800480e:	230f      	movs	r3, #15
 8004810:	401c      	ands	r4, r3
    if (EPindex == 0U)
 8004812:	d000      	beq.n	8004816 <PCD_EP_ISR_Handler+0x39a>
 8004814:	e69e      	b.n	8004554 <PCD_EP_ISR_Handler+0xd8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004816:	466b      	mov	r3, sp
 8004818:	3306      	adds	r3, #6
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	06db      	lsls	r3, r3, #27
 800481e:	d400      	bmi.n	8004822 <PCD_EP_ISR_Handler+0x3a6>
 8004820:	e633      	b.n	800448a <PCD_EP_ISR_Handler+0xe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004822:	8802      	ldrh	r2, [r0, #0]
 8004824:	ab01      	add	r3, sp, #4
 8004826:	801a      	strh	r2, [r3, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	d500      	bpl.n	8004830 <PCD_EP_ISR_Handler+0x3b4>
 800482e:	e65c      	b.n	80044ea <PCD_EP_ISR_Handler+0x6e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004830:	ab01      	add	r3, sp, #4
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b21b      	sxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	dadd      	bge.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800483a:	8803      	ldrh	r3, [r0, #0]
 800483c:	4a39      	ldr	r2, [pc, #228]	; (8004924 <PCD_EP_ISR_Handler+0x4a8>)
 800483e:	4013      	ands	r3, r2
 8004840:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004842:	6828      	ldr	r0, [r5, #0]
 8004844:	2350      	movs	r3, #80	; 0x50
 8004846:	5ac3      	ldrh	r3, [r0, r3]
 8004848:	2284      	movs	r2, #132	; 0x84
 800484a:	0052      	lsls	r2, r2, #1
 800484c:	5caa      	ldrb	r2, [r5, r2]
 800484e:	00d2      	lsls	r2, r2, #3
 8004850:	189b      	adds	r3, r3, r2
 8004852:	181b      	adds	r3, r3, r0
 8004854:	4a34      	ldr	r2, [pc, #208]	; (8004928 <PCD_EP_ISR_Handler+0x4ac>)
 8004856:	4694      	mov	ip, r2
 8004858:	4463      	add	r3, ip
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	059b      	lsls	r3, r3, #22
 800485e:	0d9b      	lsrs	r3, r3, #22
 8004860:	002a      	movs	r2, r5
 8004862:	3209      	adds	r2, #9
 8004864:	32ff      	adds	r2, #255	; 0xff
 8004866:	6193      	str	r3, [r2, #24]
          if (ep->xfer_count != 0U)
 8004868:	2b00      	cmp	r3, #0
 800486a:	d000      	beq.n	800486e <PCD_EP_ISR_Handler+0x3f2>
 800486c:	e65e      	b.n	800452c <PCD_EP_ISR_Handler+0xb0>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800486e:	2100      	movs	r1, #0
 8004870:	0028      	movs	r0, r5
 8004872:	f002 fdb1 	bl	80073d8 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8004876:	682b      	ldr	r3, [r5, #0]
 8004878:	2250      	movs	r2, #80	; 0x50
 800487a:	5a9a      	ldrh	r2, [r3, r2]
 800487c:	189a      	adds	r2, r3, r2
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <PCD_EP_ISR_Handler+0x4ac>)
 8004880:	469c      	mov	ip, r3
 8004882:	4462      	add	r2, ip
 8004884:	002b      	movs	r3, r5
 8004886:	3309      	adds	r3, #9
 8004888:	33ff      	adds	r3, #255	; 0xff
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	293e      	cmp	r1, #62	; 0x3e
 800488e:	d800      	bhi.n	8004892 <PCD_EP_ISR_Handler+0x416>
 8004890:	e657      	b.n	8004542 <PCD_EP_ISR_Handler+0xc6>
 8004892:	094b      	lsrs	r3, r1, #5
 8004894:	b29b      	uxth	r3, r3
 8004896:	06c9      	lsls	r1, r1, #27
 8004898:	d101      	bne.n	800489e <PCD_EP_ISR_Handler+0x422>
 800489a:	3b01      	subs	r3, #1
 800489c:	b29b      	uxth	r3, r3
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4922      	ldr	r1, [pc, #136]	; (800492c <PCD_EP_ISR_Handler+0x4b0>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 80048a8:	6829      	ldr	r1, [r5, #0]
 80048aa:	880a      	ldrh	r2, [r1, #0]
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <PCD_EP_ISR_Handler+0x4b4>)
 80048ae:	401a      	ands	r2, r3
 80048b0:	23c0      	movs	r3, #192	; 0xc0
 80048b2:	019b      	lsls	r3, r3, #6
 80048b4:	405a      	eors	r2, r3
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <PCD_EP_ISR_Handler+0x4b8>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	800b      	strh	r3, [r1, #0]
 80048bc:	e79b      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80048be:	1869      	adds	r1, r5, r1
 80048c0:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80048c2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80048c4:	f7ff fca2 	bl	800420c <PCD_WritePMA>
 80048c8:	e760      	b.n	800478c <PCD_EP_ISR_Handler+0x310>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048ca:	2250      	movs	r2, #80	; 0x50
 80048cc:	5a82      	ldrh	r2, [r0, r2]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	181b      	adds	r3, r3, r0
 80048d4:	4a14      	ldr	r2, [pc, #80]	; (8004928 <PCD_EP_ISR_Handler+0x4ac>)
 80048d6:	4694      	mov	ip, r2
 80048d8:	4463      	add	r3, ip
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	059b      	lsls	r3, r3, #22
 80048de:	0d9b      	lsrs	r3, r3, #22
 80048e0:	00e1      	lsls	r1, r4, #3
 80048e2:	1b09      	subs	r1, r1, r4
 80048e4:	008a      	lsls	r2, r1, #2
 80048e6:	0011      	movs	r1, r2
 80048e8:	18aa      	adds	r2, r5, r2
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d100      	bne.n	80048f2 <PCD_EP_ISR_Handler+0x476>
 80048f0:	e74c      	b.n	800478c <PCD_EP_ISR_Handler+0x310>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80048f2:	1869      	adds	r1, r5, r1
 80048f4:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80048f6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80048f8:	f7ff fc88 	bl	800420c <PCD_WritePMA>
 80048fc:	e746      	b.n	800478c <PCD_EP_ISR_Handler+0x310>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048fe:	00e1      	lsls	r1, r4, #3
 8004900:	1b0c      	subs	r4, r1, r4
 8004902:	00a1      	lsls	r1, r4, #2
 8004904:	1869      	adds	r1, r5, r1
 8004906:	3128      	adds	r1, #40	; 0x28
 8004908:	7809      	ldrb	r1, [r1, #0]
 800490a:	0028      	movs	r0, r5
 800490c:	f7ff fc92 	bl	8004234 <HAL_PCD_EP_Transmit>
 8004910:	e771      	b.n	80047f6 <PCD_EP_ISR_Handler+0x37a>
        }
      } 
    }
  }
  return HAL_OK;
}
 8004912:	2000      	movs	r0, #0
 8004914:	b003      	add	sp, #12
 8004916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004918:	00000402 	.word	0x00000402
 800491c:	00000f0f 	.word	0x00000f0f
 8004920:	ffffc080 	.word	0xffffc080
 8004924:	00000f8f 	.word	0x00000f8f
 8004928:	00000406 	.word	0x00000406
 800492c:	ffff8000 	.word	0xffff8000
 8004930:	ffffbf8f 	.word	0xffffbf8f
 8004934:	ffff8080 	.word	0xffff8080

08004938 <HAL_PCD_IRQHandler>:
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800493c:	2344      	movs	r3, #68	; 0x44
 800493e:	6802      	ldr	r2, [r0, #0]
 8004940:	5ad3      	ldrh	r3, [r2, r3]
 8004942:	b21b      	sxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	db48      	blt.n	80049da <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	2244      	movs	r2, #68	; 0x44
 800494c:	5a9a      	ldrh	r2, [r3, r2]
 800494e:	0552      	lsls	r2, r2, #21
 8004950:	d446      	bmi.n	80049e0 <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	2244      	movs	r2, #68	; 0x44
 8004956:	5a9a      	ldrh	r2, [r3, r2]
 8004958:	0452      	lsls	r2, r2, #17
 800495a:	d504      	bpl.n	8004966 <HAL_PCD_IRQHandler+0x2e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800495c:	2144      	movs	r1, #68	; 0x44
 800495e:	5a5a      	ldrh	r2, [r3, r1]
 8004960:	4835      	ldr	r0, [pc, #212]	; (8004a38 <HAL_PCD_IRQHandler+0x100>)
 8004962:	4002      	ands	r2, r0
 8004964:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	2244      	movs	r2, #68	; 0x44
 800496a:	5a9a      	ldrh	r2, [r3, r2]
 800496c:	0492      	lsls	r2, r2, #18
 800496e:	d504      	bpl.n	800497a <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8004970:	2144      	movs	r1, #68	; 0x44
 8004972:	5a5a      	ldrh	r2, [r3, r1]
 8004974:	4831      	ldr	r0, [pc, #196]	; (8004a3c <HAL_PCD_IRQHandler+0x104>)
 8004976:	4002      	ands	r2, r0
 8004978:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	2244      	movs	r2, #68	; 0x44
 800497e:	5a9a      	ldrh	r2, [r3, r2]
 8004980:	04d2      	lsls	r2, r2, #19
 8004982:	d43a      	bmi.n	80049fa <HAL_PCD_IRQHandler+0xc2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	2244      	movs	r2, #68	; 0x44
 8004988:	5a9a      	ldrh	r2, [r3, r2]
 800498a:	0512      	lsls	r2, r2, #20
 800498c:	d515      	bpl.n	80049ba <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800498e:	2144      	movs	r1, #68	; 0x44
 8004990:	5a5a      	ldrh	r2, [r3, r1]
 8004992:	482b      	ldr	r0, [pc, #172]	; (8004a40 <HAL_PCD_IRQHandler+0x108>)
 8004994:	4002      	ands	r2, r0
 8004996:	525a      	strh	r2, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	5a83      	ldrh	r3, [r0, r2]
 800499e:	2508      	movs	r5, #8
 80049a0:	432b      	orrs	r3, r5
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	5283      	strh	r3, [r0, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	5a83      	ldrh	r3, [r0, r2]
 80049aa:	2504      	movs	r5, #4
 80049ac:	432b      	orrs	r3, r5
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	5283      	strh	r3, [r0, r2]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	5a5b      	ldrh	r3, [r3, r1]
 80049b6:	04db      	lsls	r3, r3, #19
 80049b8:	d531      	bpl.n	8004a1e <HAL_PCD_IRQHandler+0xe6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	2244      	movs	r2, #68	; 0x44
 80049be:	5a9a      	ldrh	r2, [r3, r2]
 80049c0:	0592      	lsls	r2, r2, #22
 80049c2:	d430      	bmi.n	8004a26 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	2244      	movs	r2, #68	; 0x44
 80049c8:	5a9a      	ldrh	r2, [r3, r2]
 80049ca:	05d2      	lsls	r2, r2, #23
 80049cc:	d504      	bpl.n	80049d8 <HAL_PCD_IRQHandler+0xa0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80049ce:	2144      	movs	r1, #68	; 0x44
 80049d0:	5a5a      	ldrh	r2, [r3, r1]
 80049d2:	481c      	ldr	r0, [pc, #112]	; (8004a44 <HAL_PCD_IRQHandler+0x10c>)
 80049d4:	4002      	ands	r2, r0
 80049d6:	525a      	strh	r2, [r3, r1]
}
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
    PCD_EP_ISR_Handler(hpcd);
 80049da:	f7ff fd4f 	bl	800447c <PCD_EP_ISR_Handler>
 80049de:	e7b3      	b.n	8004948 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80049e0:	2144      	movs	r1, #68	; 0x44
 80049e2:	5a5a      	ldrh	r2, [r3, r1]
 80049e4:	4818      	ldr	r0, [pc, #96]	; (8004a48 <HAL_PCD_IRQHandler+0x110>)
 80049e6:	4002      	ands	r2, r0
 80049e8:	525a      	strh	r2, [r3, r1]
    HAL_PCD_ResetCallback(hpcd);
 80049ea:	0020      	movs	r0, r4
 80049ec:	f002 fd17 	bl	800741e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80049f0:	2100      	movs	r1, #0
 80049f2:	0020      	movs	r0, r4
 80049f4:	f7fe ff8a 	bl	800390c <HAL_PCD_SetAddress>
 80049f8:	e7ab      	b.n	8004952 <HAL_PCD_IRQHandler+0x1a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	5a99      	ldrh	r1, [r3, r2]
 80049fe:	2004      	movs	r0, #4
 8004a00:	4381      	bics	r1, r0
 8004a02:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8004a04:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <HAL_PCD_IRQHandler+0x114>)
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResumeCallback(hpcd);
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	f002 fd2a 	bl	8007464 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	2244      	movs	r2, #68	; 0x44
 8004a14:	5a8b      	ldrh	r3, [r1, r2]
 8004a16:	480e      	ldr	r0, [pc, #56]	; (8004a50 <HAL_PCD_IRQHandler+0x118>)
 8004a18:	4003      	ands	r3, r0
 8004a1a:	528b      	strh	r3, [r1, r2]
 8004a1c:	e7b2      	b.n	8004984 <HAL_PCD_IRQHandler+0x4c>
      HAL_PCD_SuspendCallback(hpcd);
 8004a1e:	0020      	movs	r0, r4
 8004a20:	f002 fd0e 	bl	8007440 <HAL_PCD_SuspendCallback>
 8004a24:	e7c9      	b.n	80049ba <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8004a26:	2144      	movs	r1, #68	; 0x44
 8004a28:	5a5a      	ldrh	r2, [r3, r1]
 8004a2a:	480a      	ldr	r0, [pc, #40]	; (8004a54 <HAL_PCD_IRQHandler+0x11c>)
 8004a2c:	4002      	ands	r2, r0
 8004a2e:	525a      	strh	r2, [r3, r1]
    HAL_PCD_SOFCallback(hpcd);
 8004a30:	0020      	movs	r0, r4
 8004a32:	f002 fced 	bl	8007410 <HAL_PCD_SOFCallback>
 8004a36:	e7c5      	b.n	80049c4 <HAL_PCD_IRQHandler+0x8c>
 8004a38:	ffffbfff 	.word	0xffffbfff
 8004a3c:	ffffdfff 	.word	0xffffdfff
 8004a40:	fffff7ff 	.word	0xfffff7ff
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	fffffbff 	.word	0xfffffbff
 8004a4c:	ffffbd00 	.word	0xffffbd00
 8004a50:	ffffefff 	.word	0xffffefff
 8004a54:	fffffdff 	.word	0xfffffdff

08004a58 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004a58:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a5a:	060c      	lsls	r4, r1, #24
 8004a5c:	d50f      	bpl.n	8004a7e <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004a5e:	247f      	movs	r4, #127	; 0x7f
 8004a60:	4021      	ands	r1, r4
 8004a62:	00cc      	lsls	r4, r1, #3
 8004a64:	1a61      	subs	r1, r4, r1
 8004a66:	008c      	lsls	r4, r1, #2
 8004a68:	3428      	adds	r4, #40	; 0x28
 8004a6a:	1900      	adds	r0, r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	d00d      	beq.n	8004a8c <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8004a70:	2201      	movs	r2, #1
 8004a72:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8004a74:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK;
}
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004a7e:	00cc      	lsls	r4, r1, #3
 8004a80:	1a61      	subs	r1, r4, r1
 8004a82:	008c      	lsls	r4, r1, #2
 8004a84:	3409      	adds	r4, #9
 8004a86:	34ff      	adds	r4, #255	; 0xff
 8004a88:	1900      	adds	r0, r0, r4
 8004a8a:	e7ef      	b.n	8004a6c <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8004a8c:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8004a8e:	8083      	strh	r3, [r0, #4]
 8004a90:	e7f3      	b.n	8004a7a <HAL_PCDEx_PMAConfig+0x22>
	...

08004a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9a:	6803      	ldr	r3, [r0, #0]
 8004a9c:	07db      	lsls	r3, r3, #31
 8004a9e:	d53b      	bpl.n	8004b18 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004aa0:	4bc3      	ldr	r3, [pc, #780]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d02d      	beq.n	8004b08 <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aac:	4bc0      	ldr	r3, [pc, #768]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d01e      	beq.n	8004af6 <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d050      	beq.n	8004b60 <HAL_RCC_OscConfig+0xcc>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d155      	bne.n	8004b6e <HAL_RCC_OscConfig+0xda>
 8004ac2:	4bbb      	ldr	r3, [pc, #748]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	49bb      	ldr	r1, [pc, #748]	; (8004db4 <HAL_RCC_OscConfig+0x320>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	49ba      	ldr	r1, [pc, #744]	; (8004db8 <HAL_RCC_OscConfig+0x324>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d061      	beq.n	8004b9e <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe fc8d 	bl	80033f8 <HAL_GetTick>
 8004ade:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae0:	4bb3      	ldr	r3, [pc, #716]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	039b      	lsls	r3, r3, #14
 8004ae6:	d417      	bmi.n	8004b18 <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fc86 	bl	80033f8 <HAL_GetTick>
 8004aec:	1b40      	subs	r0, r0, r5
 8004aee:	2864      	cmp	r0, #100	; 0x64
 8004af0:	d9f6      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8004af2:	2003      	movs	r0, #3
 8004af4:	e23b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004af6:	4bae      	ldr	r3, [pc, #696]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	22c0      	movs	r2, #192	; 0xc0
 8004afc:	0252      	lsls	r2, r2, #9
 8004afe:	4013      	ands	r3, r2
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	0252      	lsls	r2, r2, #9
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d1d7      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	4ba9      	ldr	r3, [pc, #676]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	039b      	lsls	r3, r3, #14
 8004b0e:	d503      	bpl.n	8004b18 <HAL_RCC_OscConfig+0x84>
 8004b10:	6863      	ldr	r3, [r4, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d100      	bne.n	8004b18 <HAL_RCC_OscConfig+0x84>
 8004b16:	e227      	b.n	8004f68 <HAL_RCC_OscConfig+0x4d4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	079b      	lsls	r3, r3, #30
 8004b1c:	d567      	bpl.n	8004bee <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b1e:	4ba4      	ldr	r3, [pc, #656]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	220c      	movs	r2, #12
 8004b24:	421a      	tst	r2, r3
 8004b26:	d051      	beq.n	8004bcc <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b28:	4ba1      	ldr	r3, [pc, #644]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d042      	beq.n	8004bba <HAL_RCC_OscConfig+0x126>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b34:	68e3      	ldr	r3, [r4, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d07b      	beq.n	8004c32 <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3a:	4a9d      	ldr	r2, [pc, #628]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	2101      	movs	r1, #1
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe fc58 	bl	80033f8 <HAL_GetTick>
 8004b48:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4a:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	079b      	lsls	r3, r3, #30
 8004b50:	d466      	bmi.n	8004c20 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fe fc51 	bl	80033f8 <HAL_GetTick>
 8004b56:	1b40      	subs	r0, r0, r5
 8004b58:	2802      	cmp	r0, #2
 8004b5a:	d9f6      	bls.n	8004b4a <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	e206      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	4a93      	ldr	r2, [pc, #588]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b62:	6811      	ldr	r1, [r2, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	025b      	lsls	r3, r3, #9
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e7b2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x40>
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d009      	beq.n	8004b86 <HAL_RCC_OscConfig+0xf2>
 8004b72:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	498f      	ldr	r1, [pc, #572]	; (8004db4 <HAL_RCC_OscConfig+0x320>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	498e      	ldr	r1, [pc, #568]	; (8004db8 <HAL_RCC_OscConfig+0x324>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e7a6      	b.n	8004ad4 <HAL_RCC_OscConfig+0x40>
 8004b86:	4b8a      	ldr	r3, [pc, #552]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	02d2      	lsls	r2, r2, #11
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	2280      	movs	r2, #128	; 0x80
 8004b96:	0252      	lsls	r2, r2, #9
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e79a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8004b9e:	f7fe fc2b 	bl	80033f8 <HAL_GetTick>
 8004ba2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba4:	4b82      	ldr	r3, [pc, #520]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	039b      	lsls	r3, r3, #14
 8004baa:	d5b5      	bpl.n	8004b18 <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe fc24 	bl	80033f8 <HAL_GetTick>
 8004bb0:	1b40      	subs	r0, r0, r5
 8004bb2:	2864      	cmp	r0, #100	; 0x64
 8004bb4:	d9f6      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	e1d9      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bba:	4b7d      	ldr	r3, [pc, #500]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	22c0      	movs	r2, #192	; 0xc0
 8004bc0:	0252      	lsls	r2, r2, #9
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2280      	movs	r2, #128	; 0x80
 8004bc6:	0212      	lsls	r2, r2, #8
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d1b3      	bne.n	8004b34 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bcc:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	079b      	lsls	r3, r3, #30
 8004bd2:	d504      	bpl.n	8004bde <HAL_RCC_OscConfig+0x14a>
 8004bd4:	68e3      	ldr	r3, [r4, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 8004bda:	2001      	movs	r0, #1
 8004bdc:	e1c7      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4974      	ldr	r1, [pc, #464]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004be0:	680b      	ldr	r3, [r1, #0]
 8004be2:	22f8      	movs	r2, #248	; 0xf8
 8004be4:	4393      	bics	r3, r2
 8004be6:	6922      	ldr	r2, [r4, #16]
 8004be8:	00d2      	lsls	r2, r2, #3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	d544      	bpl.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf4:	69e3      	ldr	r3, [r4, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02e      	beq.n	8004c58 <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfa:	4a6d      	ldr	r2, [pc, #436]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004bfc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004bfe:	2101      	movs	r1, #1
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c04:	f7fe fbf8 	bl	80033f8 <HAL_GetTick>
 8004c08:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	079b      	lsls	r3, r3, #30
 8004c10:	d435      	bmi.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c12:	f7fe fbf1 	bl	80033f8 <HAL_GetTick>
 8004c16:	1b40      	subs	r0, r0, r5
 8004c18:	2802      	cmp	r0, #2
 8004c1a:	d9f6      	bls.n	8004c0a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8004c1c:	2003      	movs	r0, #3
 8004c1e:	e1a6      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c20:	4963      	ldr	r1, [pc, #396]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c22:	680b      	ldr	r3, [r1, #0]
 8004c24:	22f8      	movs	r2, #248	; 0xf8
 8004c26:	4393      	bics	r3, r2
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	00d2      	lsls	r2, r2, #3
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	e7dd      	b.n	8004bee <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8004c32:	4a5f      	ldr	r2, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438b      	bics	r3, r1
 8004c3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fbdc 	bl	80033f8 <HAL_GetTick>
 8004c40:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	4b5b      	ldr	r3, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d5d1      	bpl.n	8004bee <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe fbd5 	bl	80033f8 <HAL_GetTick>
 8004c4e:	1b40      	subs	r0, r0, r5
 8004c50:	2802      	cmp	r0, #2
 8004c52:	d9f6      	bls.n	8004c42 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8004c54:	2003      	movs	r0, #3
 8004c56:	e18a      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c58:	4a55      	ldr	r2, [pc, #340]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	438b      	bics	r3, r1
 8004c60:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c62:	f7fe fbc9 	bl	80033f8 <HAL_GetTick>
 8004c66:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d506      	bpl.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c70:	f7fe fbc2 	bl	80033f8 <HAL_GetTick>
 8004c74:	1b40      	subs	r0, r0, r5
 8004c76:	2802      	cmp	r0, #2
 8004c78:	d9f6      	bls.n	8004c68 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8004c7a:	2003      	movs	r0, #3
 8004c7c:	e177      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	075b      	lsls	r3, r3, #29
 8004c82:	d575      	bpl.n	8004d70 <HAL_RCC_OscConfig+0x2dc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	d40b      	bmi.n	8004ca4 <HAL_RCC_OscConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4a48      	ldr	r2, [pc, #288]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004c8e:	69d1      	ldr	r1, [r2, #28]
 8004c90:	2080      	movs	r0, #128	; 0x80
 8004c92:	0540      	lsls	r0, r0, #21
 8004c94:	4301      	orrs	r1, r0
 8004c96:	61d1      	str	r1, [r2, #28]
 8004c98:	69d3      	ldr	r3, [r2, #28]
 8004c9a:	4003      	ands	r3, r0
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ca0:	2501      	movs	r5, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x212>
    FlagStatus       pwrclkchanged = RESET;
 8004ca4:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <HAL_RCC_OscConfig+0x328>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	d51f      	bpl.n	8004cee <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d030      	beq.n	8004d16 <HAL_RCC_OscConfig+0x282>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d134      	bne.n	8004d22 <HAL_RCC_OscConfig+0x28e>
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	438a      	bics	r2, r1
 8004cc0:	621a      	str	r2, [r3, #32]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	3103      	adds	r1, #3
 8004cc6:	438a      	bics	r2, r1
 8004cc8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d03e      	beq.n	8004d4e <HAL_RCC_OscConfig+0x2ba>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fb92 	bl	80033f8 <HAL_GetTick>
 8004cd4:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	079b      	lsls	r3, r3, #30
 8004cdc:	d446      	bmi.n	8004d6c <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fe fb8b 	bl	80033f8 <HAL_GetTick>
 8004ce2:	1b80      	subs	r0, r0, r6
 8004ce4:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_RCC_OscConfig+0x32c>)
 8004ce6:	4298      	cmp	r0, r3
 8004ce8:	d9f5      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 8004cea:	2003      	movs	r0, #3
 8004cec:	e13f      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cee:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <HAL_RCC_OscConfig+0x328>)
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cfa:	f7fe fb7d 	bl	80033f8 <HAL_GetTick>
 8004cfe:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <HAL_RCC_OscConfig+0x328>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	d4d2      	bmi.n	8004cae <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fe fb76 	bl	80033f8 <HAL_GetTick>
 8004d0c:	1b80      	subs	r0, r0, r6
 8004d0e:	2864      	cmp	r0, #100	; 0x64
 8004d10:	d9f6      	bls.n	8004d00 <HAL_RCC_OscConfig+0x26c>
          return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e12b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d16:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d18:	6a13      	ldr	r3, [r2, #32]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	e7d3      	b.n	8004cca <HAL_RCC_OscConfig+0x236>
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2a6>
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	621a      	str	r2, [r3, #32]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	3103      	adds	r1, #3
 8004d34:	438a      	bics	r2, r1
 8004d36:	621a      	str	r2, [r3, #32]
 8004d38:	e7c7      	b.n	8004cca <HAL_RCC_OscConfig+0x236>
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	2104      	movs	r1, #4
 8004d40:	430a      	orrs	r2, r1
 8004d42:	621a      	str	r2, [r3, #32]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	3903      	subs	r1, #3
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	621a      	str	r2, [r3, #32]
 8004d4c:	e7bd      	b.n	8004cca <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4e:	f7fe fb53 	bl	80033f8 <HAL_GetTick>
 8004d52:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	079b      	lsls	r3, r3, #30
 8004d5a:	d507      	bpl.n	8004d6c <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fe fb4c 	bl	80033f8 <HAL_GetTick>
 8004d60:	1b80      	subs	r0, r0, r6
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <HAL_RCC_OscConfig+0x32c>)
 8004d64:	4298      	cmp	r0, r3
 8004d66:	d9f5      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004d68:	2003      	movs	r0, #3
 8004d6a:	e100      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d6c:	2d01      	cmp	r5, #1
 8004d6e:	d029      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	06db      	lsls	r3, r3, #27
 8004d74:	d558      	bpl.n	8004e28 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d029      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x33c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d7c:	3305      	adds	r3, #5
 8004d7e:	d047      	beq.n	8004e10 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d84:	2104      	movs	r1, #4
 8004d86:	430a      	orrs	r2, r1
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8c:	3903      	subs	r1, #3
 8004d8e:	438a      	bics	r2, r1
 8004d90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fb31 	bl	80033f8 <HAL_GetTick>
 8004d96:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_OscConfig+0x31c>)
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	079b      	lsls	r3, r3, #30
 8004d9e:	d543      	bpl.n	8004e28 <HAL_RCC_OscConfig+0x394>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004da0:	f7fe fb2a 	bl	80033f8 <HAL_GetTick>
 8004da4:	1b40      	subs	r0, r0, r5
 8004da6:	2802      	cmp	r0, #2
 8004da8:	d9f6      	bls.n	8004d98 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8004daa:	2003      	movs	r0, #3
 8004dac:	e0df      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	40021000 	.word	0x40021000
 8004db4:	fffeffff 	.word	0xfffeffff
 8004db8:	fffbffff 	.word	0xfffbffff
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	00001388 	.word	0x00001388
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc4:	4a6c      	ldr	r2, [pc, #432]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004dc6:	69d3      	ldr	r3, [r2, #28]
 8004dc8:	496c      	ldr	r1, [pc, #432]	; (8004f7c <HAL_RCC_OscConfig+0x4e8>)
 8004dca:	400b      	ands	r3, r1
 8004dcc:	61d3      	str	r3, [r2, #28]
 8004dce:	e7cf      	b.n	8004d70 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004dd0:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ddc:	3903      	subs	r1, #3
 8004dde:	430a      	orrs	r2, r1
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004de2:	f7fe fb09 	bl	80033f8 <HAL_GetTick>
 8004de6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	079b      	lsls	r3, r3, #30
 8004dee:	d406      	bmi.n	8004dfe <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004df0:	f7fe fb02 	bl	80033f8 <HAL_GetTick>
 8004df4:	1b40      	subs	r0, r0, r5
 8004df6:	2802      	cmp	r0, #2
 8004df8:	d9f6      	bls.n	8004de8 <HAL_RCC_OscConfig+0x354>
          return HAL_TIMEOUT;
 8004dfa:	2003      	movs	r0, #3
 8004dfc:	e0b7      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004dfe:	495e      	ldr	r1, [pc, #376]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e02:	22f8      	movs	r2, #248	; 0xf8
 8004e04:	4393      	bics	r3, r2
 8004e06:	69a2      	ldr	r2, [r4, #24]
 8004e08:	00d2      	lsls	r2, r2, #3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0x394>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e10:	4a59      	ldr	r2, [pc, #356]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e12:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e14:	2104      	movs	r1, #4
 8004e16:	438b      	bics	r3, r1
 8004e18:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e1a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e1c:	31f4      	adds	r1, #244	; 0xf4
 8004e1e:	438b      	bics	r3, r1
 8004e20:	69a1      	ldr	r1, [r4, #24]
 8004e22:	00c9      	lsls	r1, r1, #3
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	069b      	lsls	r3, r3, #26
 8004e2c:	d545      	bpl.n	8004eba <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004e2e:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	230c      	movs	r3, #12
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d023      	beq.n	8004e82 <HAL_RCC_OscConfig+0x3ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004e3a:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	230c      	movs	r3, #12
 8004e40:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d016      	beq.n	8004e74 <HAL_RCC_OscConfig+0x3e0>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e46:	6a23      	ldr	r3, [r4, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d023      	beq.n	8004e94 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fe face 	bl	80033f8 <HAL_GetTick>
 8004e5c:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e5e:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	03db      	lsls	r3, r3, #15
 8004e64:	d429      	bmi.n	8004eba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e66:	f7fe fac7 	bl	80033f8 <HAL_GetTick>
 8004e6a:	1b40      	subs	r0, r0, r5
 8004e6c:	2802      	cmp	r0, #2
 8004e6e:	d9f6      	bls.n	8004e5e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8004e70:	2003      	movs	r0, #3
 8004e72:	e07c      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	22c0      	movs	r2, #192	; 0xc0
 8004e7a:	0252      	lsls	r2, r2, #9
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d1e1      	bne.n	8004e46 <HAL_RCC_OscConfig+0x3b2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	03db      	lsls	r3, r3, #15
 8004e88:	d517      	bpl.n	8004eba <HAL_RCC_OscConfig+0x426>
 8004e8a:	6a23      	ldr	r3, [r4, #32]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d014      	beq.n	8004eba <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
 8004e92:	e06c      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e94:	4a38      	ldr	r2, [pc, #224]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004e96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e98:	4939      	ldr	r1, [pc, #228]	; (8004f80 <HAL_RCC_OscConfig+0x4ec>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fe faab 	bl	80033f8 <HAL_GetTick>
 8004ea2:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	03db      	lsls	r3, r3, #15
 8004eaa:	d506      	bpl.n	8004eba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eac:	f7fe faa4 	bl	80033f8 <HAL_GetTick>
 8004eb0:	1b40      	subs	r0, r0, r5
 8004eb2:	2802      	cmp	r0, #2
 8004eb4:	d9f6      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x410>
          {
            return HAL_TIMEOUT;
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	e059      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d055      	beq.n	8004f6c <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004ec2:	6851      	ldr	r1, [r2, #4]
 8004ec4:	220c      	movs	r2, #12
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	2a08      	cmp	r2, #8
 8004eca:	d052      	beq.n	8004f72 <HAL_RCC_OscConfig+0x4de>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d012      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x462>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	492b      	ldr	r1, [pc, #172]	; (8004f84 <HAL_RCC_OscConfig+0x4f0>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fe fa8d 	bl	80033f8 <HAL_GetTick>
 8004ede:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	d53d      	bpl.n	8004f64 <HAL_RCC_OscConfig+0x4d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fe fa86 	bl	80033f8 <HAL_GetTick>
 8004eec:	1b00      	subs	r0, r0, r4
 8004eee:	2802      	cmp	r0, #2
 8004ef0:	d9f6      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	e03b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	4922      	ldr	r1, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x4f0>)
 8004efc:	400b      	ands	r3, r1
 8004efe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f00:	f7fe fa7a 	bl	80033f8 <HAL_GetTick>
 8004f04:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	019b      	lsls	r3, r3, #6
 8004f0c:	d506      	bpl.n	8004f1c <HAL_RCC_OscConfig+0x488>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fe fa73 	bl	80033f8 <HAL_GetTick>
 8004f12:	1b40      	subs	r0, r0, r5
 8004f14:	2802      	cmp	r0, #2
 8004f16:	d9f6      	bls.n	8004f06 <HAL_RCC_OscConfig+0x472>
            return HAL_TIMEOUT;
 8004f18:	2003      	movs	r0, #3
 8004f1a:	e028      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	210f      	movs	r1, #15
 8004f22:	438a      	bics	r2, r1
 8004f24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f26:	430a      	orrs	r2, r1
 8004f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4916      	ldr	r1, [pc, #88]	; (8004f88 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	400a      	ands	r2, r1
 8004f30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f34:	4301      	orrs	r1, r0
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	2280      	movs	r2, #128	; 0x80
 8004f3e:	0452      	lsls	r2, r2, #17
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004f44:	f7fe fa58 	bl	80033f8 <HAL_GetTick>
 8004f48:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_OscConfig+0x4e4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	019b      	lsls	r3, r3, #6
 8004f50:	d406      	bmi.n	8004f60 <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f52:	f7fe fa51 	bl	80033f8 <HAL_GetTick>
 8004f56:	1b00      	subs	r0, r0, r4
 8004f58:	2802      	cmp	r0, #2
 8004f5a:	d9f6      	bls.n	8004f4a <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8004f5c:	2003      	movs	r0, #3
 8004f5e:	e006      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	e004      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
 8004f64:	2000      	movs	r0, #0
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 8004f68:	2001      	movs	r0, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 8004f6c:	2000      	movs	r0, #0
}
 8004f6e:	b002      	add	sp, #8
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7fb      	b.n	8004f6e <HAL_RCC_OscConfig+0x4da>
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	efffffff 	.word	0xefffffff
 8004f80:	fffeffff 	.word	0xfffeffff
 8004f84:	feffffff 	.word	0xfeffffff
 8004f88:	ffc27fff 	.word	0xffc27fff

08004f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	b530      	push	{r4, r5, lr}
 8004f8e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004f90:	aa04      	add	r2, sp, #16
 8004f92:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <HAL_RCC_GetSysClockFreq+0x84>)
 8004f94:	0018      	movs	r0, r3
 8004f96:	c832      	ldmia	r0!, {r1, r4, r5}
 8004f98:	c232      	stmia	r2!, {r1, r4, r5}
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	6802      	ldr	r2, [r0, #0]
 8004f9e:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004fa0:	466a      	mov	r2, sp
 8004fa2:	3310      	adds	r3, #16
 8004fa4:	cb13      	ldmia	r3!, {r0, r1, r4}
 8004fa6:	c213      	stmia	r2!, {r0, r1, r4}
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_GetSysClockFreq+0x88>)
 8004fae:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d004      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d026      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fbc:	4816      	ldr	r0, [pc, #88]	; (8005018 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004fbe:	b009      	add	sp, #36	; 0x24
 8004fc0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004fc2:	0c91      	lsrs	r1, r2, #18
 8004fc4:	230f      	movs	r3, #15
 8004fc6:	4019      	ands	r1, r3
 8004fc8:	a804      	add	r0, sp, #16
 8004fca:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004fcc:	4911      	ldr	r1, [pc, #68]	; (8005014 <HAL_RCC_GetSysClockFreq+0x88>)
 8004fce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004fd0:	400b      	ands	r3, r1
 8004fd2:	4669      	mov	r1, sp
 8004fd4:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fd6:	23c0      	movs	r3, #192	; 0xc0
 8004fd8:	025b      	lsls	r3, r3, #9
 8004fda:	401a      	ands	r2, r3
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004fe4:	23c0      	movs	r3, #192	; 0xc0
 8004fe6:	025b      	lsls	r3, r3, #9
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d009      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004fec:	480a      	ldr	r0, [pc, #40]	; (8005018 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004fee:	f7fb f895 	bl	800011c <__udivsi3>
 8004ff2:	4360      	muls	r0, r4
 8004ff4:	e7e3      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004ff6:	4808      	ldr	r0, [pc, #32]	; (8005018 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004ff8:	f7fb f890 	bl	800011c <__udivsi3>
 8004ffc:	4360      	muls	r0, r4
 8004ffe:	e7de      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8005000:	4806      	ldr	r0, [pc, #24]	; (800501c <HAL_RCC_GetSysClockFreq+0x90>)
 8005002:	f7fb f88b 	bl	800011c <__udivsi3>
 8005006:	4360      	muls	r0, r4
 8005008:	e7d9      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 800500a:	4804      	ldr	r0, [pc, #16]	; (800501c <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 800500c:	e7d7      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x32>
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	08008c28 	.word	0x08008c28
 8005014:	40021000 	.word	0x40021000
 8005018:	007a1200 	.word	0x007a1200
 800501c:	02dc6c00 	.word	0x02dc6c00

08005020 <HAL_RCC_ClockConfig>:
{
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	0005      	movs	r5, r0
 8005024:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005026:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_RCC_ClockConfig+0x16c>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2301      	movs	r3, #1
 800502c:	4013      	ands	r3, r2
 800502e:	428b      	cmp	r3, r1
 8005030:	d20b      	bcs.n	800504a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4956      	ldr	r1, [pc, #344]	; (800518c <HAL_RCC_ClockConfig+0x16c>)
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	2201      	movs	r2, #1
 8005038:	4393      	bics	r3, r2
 800503a:	4323      	orrs	r3, r4
 800503c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800503e:	680b      	ldr	r3, [r1, #0]
 8005040:	401a      	ands	r2, r3
 8005042:	4294      	cmp	r4, r2
 8005044:	d001      	beq.n	800504a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
 8005048:	e09d      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	079b      	lsls	r3, r3, #30
 800504e:	d506      	bpl.n	800505e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005050:	4a4f      	ldr	r2, [pc, #316]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 8005052:	6853      	ldr	r3, [r2, #4]
 8005054:	21f0      	movs	r1, #240	; 0xf0
 8005056:	438b      	bics	r3, r1
 8005058:	68a9      	ldr	r1, [r5, #8]
 800505a:	430b      	orrs	r3, r1
 800505c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	07db      	lsls	r3, r3, #31
 8005062:	d564      	bpl.n	800512e <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005064:	686b      	ldr	r3, [r5, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d025      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506a:	2b02      	cmp	r3, #2
 800506c:	d029      	beq.n	80050c2 <HAL_RCC_ClockConfig+0xa2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800506e:	2b03      	cmp	r3, #3
 8005070:	d02d      	beq.n	80050ce <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4a47      	ldr	r2, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	0792      	lsls	r2, r2, #30
 8005078:	d400      	bmi.n	800507c <HAL_RCC_ClockConfig+0x5c>
 800507a:	e085      	b.n	8005188 <HAL_RCC_ClockConfig+0x168>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507c:	4944      	ldr	r1, [pc, #272]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 800507e:	684a      	ldr	r2, [r1, #4]
 8005080:	2003      	movs	r0, #3
 8005082:	4382      	bics	r2, r0
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005088:	f7fe f9b6 	bl	80033f8 <HAL_GetTick>
 800508c:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508e:	686b      	ldr	r3, [r5, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d022      	beq.n	80050da <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005094:	2b02      	cmp	r3, #2
 8005096:	d02e      	beq.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005098:	2b03      	cmp	r3, #3
 800509a:	d03a      	beq.n	8005112 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800509c:	4b3c      	ldr	r3, [pc, #240]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	220c      	movs	r2, #12
 80050a2:	421a      	tst	r2, r3
 80050a4:	d043      	beq.n	800512e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a6:	f7fe f9a7 	bl	80033f8 <HAL_GetTick>
 80050aa:	1b80      	subs	r0, r0, r6
 80050ac:	4b39      	ldr	r3, [pc, #228]	; (8005194 <HAL_RCC_ClockConfig+0x174>)
 80050ae:	4298      	cmp	r0, r3
 80050b0:	d9f4      	bls.n	800509c <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 80050b2:	2003      	movs	r0, #3
 80050b4:	e067      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	4a36      	ldr	r2, [pc, #216]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	0392      	lsls	r2, r2, #14
 80050bc:	d4de      	bmi.n	800507c <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
 80050c0:	e061      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4a33      	ldr	r2, [pc, #204]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	0192      	lsls	r2, r2, #6
 80050c8:	d4d8      	bmi.n	800507c <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80050ca:	2001      	movs	r0, #1
 80050cc:	e05b      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050ce:	4a30      	ldr	r2, [pc, #192]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 80050d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050d2:	03d2      	lsls	r2, r2, #15
 80050d4:	d4d2      	bmi.n	800507c <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
 80050d8:	e055      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050da:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	230c      	movs	r3, #12
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d023      	beq.n	800512e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e6:	f7fe f987 	bl	80033f8 <HAL_GetTick>
 80050ea:	1b80      	subs	r0, r0, r6
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCC_ClockConfig+0x174>)
 80050ee:	4298      	cmp	r0, r3
 80050f0:	d9f3      	bls.n	80050da <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80050f2:	2003      	movs	r0, #3
 80050f4:	e047      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f6:	4b26      	ldr	r3, [pc, #152]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	230c      	movs	r3, #12
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d015      	beq.n	800512e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005102:	f7fe f979 	bl	80033f8 <HAL_GetTick>
 8005106:	1b80      	subs	r0, r0, r6
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_ClockConfig+0x174>)
 800510a:	4298      	cmp	r0, r3
 800510c:	d9f3      	bls.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 800510e:	2003      	movs	r0, #3
 8005110:	e039      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8005112:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	230c      	movs	r3, #12
 8005118:	4013      	ands	r3, r2
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d007      	beq.n	800512e <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511e:	f7fe f96b 	bl	80033f8 <HAL_GetTick>
 8005122:	1b80      	subs	r0, r0, r6
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCC_ClockConfig+0x174>)
 8005126:	4298      	cmp	r0, r3
 8005128:	d9f3      	bls.n	8005112 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 800512a:	2003      	movs	r0, #3
 800512c:	e02b      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_RCC_ClockConfig+0x16c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2301      	movs	r3, #1
 8005134:	4013      	ands	r3, r2
 8005136:	429c      	cmp	r4, r3
 8005138:	d20b      	bcs.n	8005152 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4914      	ldr	r1, [pc, #80]	; (800518c <HAL_RCC_ClockConfig+0x16c>)
 800513c:	680b      	ldr	r3, [r1, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4393      	bics	r3, r2
 8005142:	4323      	orrs	r3, r4
 8005144:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005146:	680b      	ldr	r3, [r1, #0]
 8005148:	401a      	ands	r2, r3
 800514a:	4294      	cmp	r4, r2
 800514c:	d001      	beq.n	8005152 <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 800514e:	2001      	movs	r0, #1
 8005150:	e019      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	075b      	lsls	r3, r3, #29
 8005156:	d506      	bpl.n	8005166 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 800515a:	6853      	ldr	r3, [r2, #4]
 800515c:	490e      	ldr	r1, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x178>)
 800515e:	400b      	ands	r3, r1
 8005160:	68e9      	ldr	r1, [r5, #12]
 8005162:	430b      	orrs	r3, r1
 8005164:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005166:	f7ff ff11 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800516a:	4b09      	ldr	r3, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x170>)
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	0912      	lsrs	r2, r2, #4
 8005170:	230f      	movs	r3, #15
 8005172:	4013      	ands	r3, r2
 8005174:	4a09      	ldr	r2, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x17c>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	40d8      	lsrs	r0, r3
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x180>)
 800517c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800517e:	2000      	movs	r0, #0
 8005180:	f7fe f86e 	bl	8003260 <HAL_InitTick>
  return HAL_OK;
 8005184:	2000      	movs	r0, #0
}
 8005186:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005188:	2001      	movs	r0, #1
 800518a:	e7fc      	b.n	8005186 <HAL_RCC_ClockConfig+0x166>
 800518c:	40022000 	.word	0x40022000
 8005190:	40021000 	.word	0x40021000
 8005194:	00001388 	.word	0x00001388
 8005198:	fffff8ff 	.word	0xfffff8ff
 800519c:	08008d48 	.word	0x08008d48
 80051a0:	20000000 	.word	0x20000000

080051a4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80051a4:	4b01      	ldr	r3, [pc, #4]	; (80051ac <HAL_RCC_GetHCLKFreq+0x8>)
 80051a6:	6818      	ldr	r0, [r3, #0]
}
 80051a8:	4770      	bx	lr
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000000 	.word	0x20000000

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80051b2:	f7ff fff7 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051b6:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	0a12      	lsrs	r2, r2, #8
 80051bc:	2307      	movs	r3, #7
 80051be:	4013      	ands	r3, r2
 80051c0:	4a02      	ldr	r2, [pc, #8]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80051c2:	5cd3      	ldrb	r3, [r2, r3]
 80051c4:	40d8      	lsrs	r0, r3
}    
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	08008d58 	.word	0x08008d58

080051d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80051d2:	2307      	movs	r3, #7
 80051d4:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_GetClockConfig+0x30>)
 80051d8:	685c      	ldr	r4, [r3, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	4022      	ands	r2, r4
 80051de:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80051e0:	685c      	ldr	r4, [r3, #4]
 80051e2:	22f0      	movs	r2, #240	; 0xf0
 80051e4:	4022      	ands	r2, r4
 80051e6:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	22e0      	movs	r2, #224	; 0xe0
 80051ec:	00d2      	lsls	r2, r2, #3
 80051ee:	4013      	ands	r3, r2
 80051f0:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <HAL_RCC_GetClockConfig+0x34>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	2301      	movs	r3, #1
 80051f8:	4013      	ands	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]
}
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	40021000 	.word	0x40021000
 8005204:	40022000 	.word	0x40022000

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800520e:	6803      	ldr	r3, [r0, #0]
 8005210:	03db      	lsls	r3, r3, #15
 8005212:	d535      	bpl.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005214:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	d466      	bmi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4a49      	ldr	r2, [pc, #292]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800521e:	69d1      	ldr	r1, [r2, #28]
 8005220:	2080      	movs	r0, #128	; 0x80
 8005222:	0540      	lsls	r0, r0, #21
 8005224:	4301      	orrs	r1, r0
 8005226:	61d1      	str	r1, [r2, #28]
 8005228:	69d3      	ldr	r3, [r2, #28]
 800522a:	4003      	ands	r3, r0
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005230:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005232:	4b45      	ldr	r3, [pc, #276]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	05db      	lsls	r3, r3, #23
 8005238:	d559      	bpl.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800523a:	4b42      	ldr	r3, [pc, #264]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	22c0      	movs	r2, #192	; 0xc0
 8005240:	0092      	lsls	r2, r2, #2
 8005242:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005244:	d013      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005246:	6861      	ldr	r1, [r4, #4]
 8005248:	400a      	ands	r2, r1
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005250:	6a18      	ldr	r0, [r3, #32]
 8005252:	4a3e      	ldr	r2, [pc, #248]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005254:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005256:	6a1e      	ldr	r6, [r3, #32]
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	0249      	lsls	r1, r1, #9
 800525c:	4331      	orrs	r1, r6
 800525e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005260:	6a19      	ldr	r1, [r3, #32]
 8005262:	4e3b      	ldr	r6, [pc, #236]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005264:	4031      	ands	r1, r6
 8005266:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005268:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800526a:	07c3      	lsls	r3, r0, #31
 800526c:	d453      	bmi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526e:	4a35      	ldr	r2, [pc, #212]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005270:	6a13      	ldr	r3, [r2, #32]
 8005272:	4936      	ldr	r1, [pc, #216]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005274:	400b      	ands	r3, r1
 8005276:	6861      	ldr	r1, [r4, #4]
 8005278:	430b      	orrs	r3, r1
 800527a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800527c:	2d01      	cmp	r5, #1
 800527e:	d059      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07db      	lsls	r3, r3, #31
 8005284:	d506      	bpl.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005286:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005288:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800528a:	2103      	movs	r1, #3
 800528c:	438b      	bics	r3, r1
 800528e:	68a1      	ldr	r1, [r4, #8]
 8005290:	430b      	orrs	r3, r1
 8005292:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	079b      	lsls	r3, r3, #30
 8005298:	d506      	bpl.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800529c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800529e:	492d      	ldr	r1, [pc, #180]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052a0:	400b      	ands	r3, r1
 80052a2:	68e1      	ldr	r1, [r4, #12]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	d506      	bpl.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ae:	4a25      	ldr	r2, [pc, #148]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80052b2:	2110      	movs	r1, #16
 80052b4:	438b      	bics	r3, r1
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	039b      	lsls	r3, r3, #14
 80052c0:	d506      	bpl.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c2:	4a20      	ldr	r2, [pc, #128]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	438b      	bics	r3, r1
 80052ca:	69a1      	ldr	r1, [r4, #24]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	055b      	lsls	r3, r3, #21
 80052d4:	d533      	bpl.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80052da:	2140      	movs	r1, #64	; 0x40
 80052dc:	438b      	bics	r3, r1
 80052de:	6961      	ldr	r1, [r4, #20]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052e4:	2000      	movs	r0, #0
}
 80052e6:	b002      	add	sp, #8
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2500      	movs	r5, #0
 80052ec:	e7a1      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ee:	4a16      	ldr	r2, [pc, #88]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80052fa:	f7fe f87d 	bl	80033f8 <HAL_GetTick>
 80052fe:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005300:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	05db      	lsls	r3, r3, #23
 8005306:	d498      	bmi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005308:	f7fe f876 	bl	80033f8 <HAL_GetTick>
 800530c:	1b80      	subs	r0, r0, r6
 800530e:	2864      	cmp	r0, #100	; 0x64
 8005310:	d9f6      	bls.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8005312:	2003      	movs	r0, #3
 8005314:	e7e7      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
        tickstart = HAL_GetTick();
 8005316:	f7fe f86f 	bl	80033f8 <HAL_GetTick>
 800531a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	079b      	lsls	r3, r3, #30
 8005322:	d4a4      	bmi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fe f868 	bl	80033f8 <HAL_GetTick>
 8005328:	1b80      	subs	r0, r0, r6
 800532a:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800532c:	4298      	cmp	r0, r3
 800532e:	d9f5      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
 8005330:	2003      	movs	r0, #3
 8005332:	e7d8      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	69d3      	ldr	r3, [r2, #28]
 8005336:	4909      	ldr	r1, [pc, #36]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005338:	400b      	ands	r3, r1
 800533a:	61d3      	str	r3, [r2, #28]
 800533c:	e7a0      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800533e:	2000      	movs	r0, #0
 8005340:	e7d1      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	40021000 	.word	0x40021000
 8005348:	40007000 	.word	0x40007000
 800534c:	fffffcff 	.word	0xfffffcff
 8005350:	fffeffff 	.word	0xfffeffff
 8005354:	fffcffff 	.word	0xfffcffff
 8005358:	00001388 	.word	0x00001388
 800535c:	efffffff 	.word	0xefffffff

08005360 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	0006      	movs	r6, r0
 8005364:	000c      	movs	r4, r1
 8005366:	0017      	movs	r7, r2
 8005368:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536a:	e03e      	b.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800536c:	2d00      	cmp	r5, #0
 800536e:	d005      	beq.n	800537c <SPI_WaitFlagStateUntilTimeout+0x1c>
 8005370:	f7fe f842 	bl	80033f8 <HAL_GetTick>
 8005374:	9b06      	ldr	r3, [sp, #24]
 8005376:	1ac0      	subs	r0, r0, r3
 8005378:	4285      	cmp	r5, r0
 800537a:	d836      	bhi.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	6853      	ldr	r3, [r2, #4]
 8005380:	21e0      	movs	r1, #224	; 0xe0
 8005382:	438b      	bics	r3, r1
 8005384:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	2382      	movs	r3, #130	; 0x82
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	6872      	ldr	r2, [r6, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d00c      	beq.n	80053aa <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	019b      	lsls	r3, r3, #6
 8005394:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005396:	429a      	cmp	r2, r3
 8005398:	d016      	beq.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800539a:	2201      	movs	r2, #1
 800539c:	235d      	movs	r3, #93	; 0x5d
 800539e:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053a0:	2200      	movs	r2, #0
 80053a2:	3b01      	subs	r3, #1
 80053a4:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 80053a6:	2003      	movs	r0, #3
 80053a8:	e027      	b.n	80053fa <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053aa:	68b3      	ldr	r3, [r6, #8]
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	0212      	lsls	r2, r2, #8
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b4:	2280      	movs	r2, #128	; 0x80
 80053b6:	00d2      	lsls	r2, r2, #3
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d1e9      	bne.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 80053bc:	6832      	ldr	r2, [r6, #0]
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	438b      	bics	r3, r1
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e7e3      	b.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 80053c8:	6832      	ldr	r2, [r6, #0]
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	490b      	ldr	r1, [pc, #44]	; (80053fc <SPI_WaitFlagStateUntilTimeout+0x9c>)
 80053ce:	400b      	ands	r3, r1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	6832      	ldr	r2, [r6, #0]
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	430b      	orrs	r3, r1
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e7dc      	b.n	800539a <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e0:	2301      	movs	r3, #1
 80053e2:	42bb      	cmp	r3, r7
 80053e4:	d008      	beq.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	1c6b      	adds	r3, r5, #1
 80053e8:	d1c0      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ea:	6833      	ldr	r3, [r6, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4023      	ands	r3, r4
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d0f5      	beq.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0x80>
 80053f4:	2300      	movs	r3, #0
 80053f6:	e7f4      	b.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 80053f8:	2000      	movs	r0, #0
}
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fc:	ffffdfff 	.word	0xffffdfff

08005400 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b083      	sub	sp, #12
 8005404:	0007      	movs	r7, r0
 8005406:	000c      	movs	r4, r1
 8005408:	0015      	movs	r5, r2
 800540a:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800540c:	e001      	b.n	8005412 <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 800540e:	1c73      	adds	r3, r6, #1
 8005410:	d110      	bne.n	8005434 <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	4023      	ands	r3, r4
 8005418:	42ab      	cmp	r3, r5
 800541a:	d045      	beq.n	80054a8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800541c:	23c0      	movs	r3, #192	; 0xc0
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	429c      	cmp	r4, r3
 8005422:	d1f4      	bne.n	800540e <SPI_WaitFifoStateUntilTimeout+0xe>
 8005424:	2d00      	cmp	r5, #0
 8005426:	d1f2      	bne.n	800540e <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8005428:	7b13      	ldrb	r3, [r2, #12]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	466a      	mov	r2, sp
 800542e:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 8005430:	79d3      	ldrb	r3, [r2, #7]
 8005432:	e7ec      	b.n	800540e <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005434:	2e00      	cmp	r6, #0
 8005436:	d005      	beq.n	8005444 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005438:	f7fd ffde 	bl	80033f8 <HAL_GetTick>
 800543c:	9b08      	ldr	r3, [sp, #32]
 800543e:	1ac0      	subs	r0, r0, r3
 8005440:	4286      	cmp	r6, r0
 8005442:	d8e6      	bhi.n	8005412 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	6853      	ldr	r3, [r2, #4]
 8005448:	21e0      	movs	r1, #224	; 0xe0
 800544a:	438b      	bics	r3, r1
 800544c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	2382      	movs	r3, #130	; 0x82
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d00c      	beq.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	019b      	lsls	r3, r3, #6
 800545c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545e:	429a      	cmp	r2, r3
 8005460:	d016      	beq.n	8005490 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005462:	2201      	movs	r2, #1
 8005464:	235d      	movs	r3, #93	; 0x5d
 8005466:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005468:	2200      	movs	r2, #0
 800546a:	3b01      	subs	r3, #1
 800546c:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 800546e:	2003      	movs	r0, #3
 8005470:	e01b      	b.n	80054aa <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2280      	movs	r2, #128	; 0x80
 8005476:	0212      	lsls	r2, r2, #8
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547c:	2280      	movs	r2, #128	; 0x80
 800547e:	00d2      	lsls	r2, r2, #3
 8005480:	4293      	cmp	r3, r2
 8005482:	d1e9      	bne.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	2140      	movs	r1, #64	; 0x40
 800548a:	438b      	bics	r3, r1
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e7e3      	b.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <SPI_WaitFifoStateUntilTimeout+0xb0>)
 8005496:	400b      	ands	r3, r1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	430b      	orrs	r3, r1
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e7dc      	b.n	8005462 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 80054a8:	2000      	movs	r0, #0
}
 80054aa:	b003      	add	sp, #12
 80054ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	ffffdfff 	.word	0xffffdfff

080054b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	0004      	movs	r4, r0
 80054ba:	000d      	movs	r5, r1
 80054bc:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054be:	9200      	str	r2, [sp, #0]
 80054c0:	000b      	movs	r3, r1
 80054c2:	2200      	movs	r2, #0
 80054c4:	21c0      	movs	r1, #192	; 0xc0
 80054c6:	0149      	lsls	r1, r1, #5
 80054c8:	f7ff ff9a 	bl	8005400 <SPI_WaitFifoStateUntilTimeout>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d006      	beq.n	80054de <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054d2:	2220      	movs	r2, #32
 80054d4:	4313      	orrs	r3, r2
 80054d6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80054d8:	2003      	movs	r0, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80054da:	b002      	add	sp, #8
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054de:	9600      	str	r6, [sp, #0]
 80054e0:	002b      	movs	r3, r5
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	0020      	movs	r0, r4
 80054e8:	f7ff ff3a 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d005      	beq.n	80054fc <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054f2:	2220      	movs	r2, #32
 80054f4:	4313      	orrs	r3, r2
 80054f6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80054f8:	2003      	movs	r0, #3
 80054fa:	e7ee      	b.n	80054da <SPI_EndRxTxTransaction+0x26>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054fc:	9600      	str	r6, [sp, #0]
 80054fe:	002b      	movs	r3, r5
 8005500:	2200      	movs	r2, #0
 8005502:	21c0      	movs	r1, #192	; 0xc0
 8005504:	00c9      	lsls	r1, r1, #3
 8005506:	0020      	movs	r0, r4
 8005508:	f7ff ff7a 	bl	8005400 <SPI_WaitFifoStateUntilTimeout>
 800550c:	2800      	cmp	r0, #0
 800550e:	d0e4      	beq.n	80054da <SPI_EndRxTxTransaction+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005510:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005512:	2220      	movs	r2, #32
 8005514:	4313      	orrs	r3, r2
 8005516:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005518:	2003      	movs	r0, #3
 800551a:	e7de      	b.n	80054da <SPI_EndRxTxTransaction+0x26>

0800551c <SPI_EndRxTransaction>:
{
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	0004      	movs	r4, r0
 8005522:	000d      	movs	r5, r1
 8005524:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005526:	2382      	movs	r3, #130	; 0x82
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	6842      	ldr	r2, [r0, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d00f      	beq.n	8005550 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	9600      	str	r6, [sp, #0]
 8005532:	002b      	movs	r3, r5
 8005534:	2200      	movs	r2, #0
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	0020      	movs	r0, r4
 800553a:	f7ff ff11 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 800553e:	2800      	cmp	r0, #0
 8005540:	d015      	beq.n	800556e <SPI_EndRxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005542:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005544:	2220      	movs	r2, #32
 8005546:	4313      	orrs	r3, r2
 8005548:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800554a:	2003      	movs	r0, #3
}
 800554c:	b002      	add	sp, #8
 800554e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	6883      	ldr	r3, [r0, #8]
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	0212      	lsls	r2, r2, #8
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800555a:	2280      	movs	r2, #128	; 0x80
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	4293      	cmp	r3, r2
 8005560:	d1e6      	bne.n	8005530 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	2140      	movs	r1, #64	; 0x40
 8005568:	438b      	bics	r3, r1
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e7e0      	b.n	8005530 <SPI_EndRxTransaction+0x14>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556e:	2382      	movs	r3, #130	; 0x82
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	6862      	ldr	r2, [r4, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d1e9      	bne.n	800554c <SPI_EndRxTransaction+0x30>
 8005578:	68a3      	ldr	r3, [r4, #8]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	0212      	lsls	r2, r2, #8
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <SPI_EndRxTransaction+0x6e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	00d2      	lsls	r2, r2, #3
 8005586:	4293      	cmp	r3, r2
 8005588:	d1e0      	bne.n	800554c <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800558a:	9600      	str	r6, [sp, #0]
 800558c:	002b      	movs	r3, r5
 800558e:	2200      	movs	r2, #0
 8005590:	21c0      	movs	r1, #192	; 0xc0
 8005592:	00c9      	lsls	r1, r1, #3
 8005594:	0020      	movs	r0, r4
 8005596:	f7ff ff33 	bl	8005400 <SPI_WaitFifoStateUntilTimeout>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0d6      	beq.n	800554c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055a0:	2220      	movs	r2, #32
 80055a2:	4313      	orrs	r3, r2
 80055a4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80055a6:	2003      	movs	r0, #3
 80055a8:	e7d0      	b.n	800554c <SPI_EndRxTransaction+0x30>
	...

080055ac <HAL_SPI_Init>:
{
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80055b0:	d05e      	beq.n	8005670 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b6:	335d      	adds	r3, #93	; 0x5d
 80055b8:	5cc3      	ldrb	r3, [r0, r3]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d04c      	beq.n	8005658 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 80055be:	2202      	movs	r2, #2
 80055c0:	235d      	movs	r3, #93	; 0x5d
 80055c2:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80055c4:	6822      	ldr	r2, [r4, #0]
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	438b      	bics	r3, r1
 80055cc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	22e0      	movs	r2, #224	; 0xe0
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d945      	bls.n	8005664 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055d8:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055da:	22f0      	movs	r2, #240	; 0xf0
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	4293      	cmp	r3, r2
 80055e0:	d005      	beq.n	80055ee <HAL_SPI_Init+0x42>
 80055e2:	22e0      	movs	r2, #224	; 0xe0
 80055e4:	00d2      	lsls	r2, r2, #3
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d001      	beq.n	80055ee <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ea:	2200      	movs	r2, #0
 80055ec:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80055ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d105      	bne.n	8005600 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f4:	22e0      	movs	r2, #224	; 0xe0
 80055f6:	00d2      	lsls	r2, r2, #3
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d936      	bls.n	800566a <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80055fc:	2302      	movs	r3, #2
 80055fe:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	68a0      	ldr	r0, [r4, #8]
 8005606:	4303      	orrs	r3, r0
 8005608:	6920      	ldr	r0, [r4, #16]
 800560a:	4303      	orrs	r3, r0
 800560c:	6960      	ldr	r0, [r4, #20]
 800560e:	4303      	orrs	r3, r0
 8005610:	2080      	movs	r0, #128	; 0x80
 8005612:	0080      	lsls	r0, r0, #2
 8005614:	69a5      	ldr	r5, [r4, #24]
 8005616:	4028      	ands	r0, r5
 8005618:	4303      	orrs	r3, r0
 800561a:	69e0      	ldr	r0, [r4, #28]
 800561c:	4303      	orrs	r3, r0
 800561e:	6a20      	ldr	r0, [r4, #32]
 8005620:	4303      	orrs	r3, r0
 8005622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005624:	4303      	orrs	r3, r0
 8005626:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	8b60      	ldrh	r0, [r4, #26]
 800562c:	2304      	movs	r3, #4
 800562e:	4003      	ands	r3, r0
 8005630:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005632:	4303      	orrs	r3, r0
 8005634:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005636:	4303      	orrs	r3, r0
 8005638:	68e0      	ldr	r0, [r4, #12]
 800563a:	4303      	orrs	r3, r0
 800563c:	430b      	orrs	r3, r1
 800563e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005640:	6822      	ldr	r2, [r4, #0]
 8005642:	69d3      	ldr	r3, [r2, #28]
 8005644:	490b      	ldr	r1, [pc, #44]	; (8005674 <HAL_SPI_Init+0xc8>)
 8005646:	400b      	ands	r3, r1
 8005648:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800564a:	2300      	movs	r3, #0
 800564c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800564e:	2201      	movs	r2, #1
 8005650:	335d      	adds	r3, #93	; 0x5d
 8005652:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8005654:	2000      	movs	r0, #0
}
 8005656:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005658:	2200      	movs	r2, #0
 800565a:	335c      	adds	r3, #92	; 0x5c
 800565c:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 800565e:	f7fd fd47 	bl	80030f0 <HAL_SPI_MspInit>
 8005662:	e7ac      	b.n	80055be <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	0149      	lsls	r1, r1, #5
 8005668:	e7b7      	b.n	80055da <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800566a:	2301      	movs	r3, #1
 800566c:	6323      	str	r3, [r4, #48]	; 0x30
 800566e:	e7c7      	b.n	8005600 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8005670:	2001      	movs	r0, #1
 8005672:	e7f0      	b.n	8005656 <HAL_SPI_Init+0xaa>
 8005674:	fffff7ff 	.word	0xfffff7ff

08005678 <HAL_SPI_TransmitReceive>:
{
 8005678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567a:	46c6      	mov	lr, r8
 800567c:	b500      	push	{lr}
 800567e:	0004      	movs	r4, r0
 8005680:	000e      	movs	r6, r1
 8005682:	0015      	movs	r5, r2
 8005684:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8005686:	235c      	movs	r3, #92	; 0x5c
 8005688:	5cc3      	ldrb	r3, [r0, r3]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d103      	bne.n	8005696 <HAL_SPI_TransmitReceive+0x1e>
 800568e:	2002      	movs	r0, #2
}
 8005690:	bc04      	pop	{r2}
 8005692:	4690      	mov	r8, r2
 8005694:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8005696:	2201      	movs	r2, #1
 8005698:	235c      	movs	r3, #92	; 0x5c
 800569a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800569c:	f7fd feac 	bl	80033f8 <HAL_GetTick>
 80056a0:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80056a2:	235d      	movs	r3, #93	; 0x5d
 80056a4:	5ce3      	ldrb	r3, [r4, r3]
 80056a6:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 80056a8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d013      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x5e>
 80056ae:	2182      	movs	r1, #130	; 0x82
 80056b0:	0049      	lsls	r1, r1, #1
 80056b2:	428a      	cmp	r2, r1
 80056b4:	d007      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x4e>
    errorcode = HAL_BUSY;
 80056b6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80056b8:	2201      	movs	r2, #1
 80056ba:	235d      	movs	r3, #93	; 0x5d
 80056bc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80056be:	2200      	movs	r2, #0
 80056c0:	3b01      	subs	r3, #1
 80056c2:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 80056c4:	e7e4      	b.n	8005690 <HAL_SPI_TransmitReceive+0x18>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80056c6:	68a2      	ldr	r2, [r4, #8]
 80056c8:	2a00      	cmp	r2, #0
 80056ca:	d000      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x56>
 80056cc:	e118      	b.n	8005900 <HAL_SPI_TransmitReceive+0x288>
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d001      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 80056d2:	2002      	movs	r0, #2
 80056d4:	e7f0      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	d100      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x64>
 80056da:	e113      	b.n	8005904 <HAL_SPI_TransmitReceive+0x28c>
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d100      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x6a>
 80056e0:	e112      	b.n	8005908 <HAL_SPI_TransmitReceive+0x290>
 80056e2:	2f00      	cmp	r7, #0
 80056e4:	d100      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x70>
 80056e6:	e111      	b.n	800590c <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056e8:	235d      	movs	r3, #93	; 0x5d
 80056ea:	5ce3      	ldrb	r3, [r4, r3]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f0:	2205      	movs	r2, #5
 80056f2:	235d      	movs	r3, #93	; 0x5d
 80056f4:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056fa:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056fc:	2246      	movs	r2, #70	; 0x46
 80056fe:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferSize  = Size;
 8005700:	3a02      	subs	r2, #2
 8005702:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005704:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005706:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005708:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800570a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800570c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800570e:	23e0      	movs	r3, #224	; 0xe0
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	68e2      	ldr	r2, [r4, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d804      	bhi.n	8005722 <HAL_SPI_TransmitReceive+0xaa>
 8005718:	2346      	movs	r3, #70	; 0x46
 800571a:	5ae3      	ldrh	r3, [r4, r3]
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d922      	bls.n	8005768 <HAL_SPI_TransmitReceive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	6853      	ldr	r3, [r2, #4]
 8005726:	497d      	ldr	r1, [pc, #500]	; (800591c <HAL_SPI_TransmitReceive+0x2a4>)
 8005728:	400b      	ands	r3, r1
 800572a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	0652      	lsls	r2, r2, #25
 8005732:	d403      	bmi.n	800573c <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	430a      	orrs	r2, r1
 800573a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800573c:	23e0      	movs	r3, #224	; 0xe0
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	68e2      	ldr	r2, [r4, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d951      	bls.n	80057ea <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_SPI_TransmitReceive+0xdc>
 800574c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	8832      	ldrh	r2, [r6, #0]
 8005758:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800575a:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 800575c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800575e:	3b01      	subs	r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005764:	2701      	movs	r7, #1
 8005766:	e023      	b.n	80057b0 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6851      	ldr	r1, [r2, #4]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	015b      	lsls	r3, r3, #5
 8005770:	430b      	orrs	r3, r1
 8005772:	6053      	str	r3, [r2, #4]
 8005774:	e7da      	b.n	800572c <HAL_SPI_TransmitReceive+0xb4>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005776:	2346      	movs	r3, #70	; 0x46
 8005778:	5ae3      	ldrh	r3, [r4, r3]
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_SPI_TransmitReceive+0x122>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	07d2      	lsls	r2, r2, #31
 8005786:	d508      	bpl.n	800579a <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	802b      	strh	r3, [r5, #0]
        pRxData += sizeof(uint16_t);
 800578c:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 800578e:	2246      	movs	r2, #70	; 0x46
 8005790:	5aa3      	ldrh	r3, [r4, r2]
 8005792:	3b01      	subs	r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8005798:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800579a:	9b06      	ldr	r3, [sp, #24]
 800579c:	3301      	adds	r3, #1
 800579e:	d007      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x138>
 80057a0:	f7fd fe2a 	bl	80033f8 <HAL_GetTick>
 80057a4:	4643      	mov	r3, r8
 80057a6:	1ac0      	subs	r0, r0, r3
 80057a8:	9b06      	ldr	r3, [sp, #24]
 80057aa:	4283      	cmp	r3, r0
 80057ac:	d800      	bhi.n	80057b0 <HAL_SPI_TransmitReceive+0x138>
 80057ae:	e0af      	b.n	8005910 <HAL_SPI_TransmitReceive+0x298>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x14c>
 80057b8:	3346      	adds	r3, #70	; 0x46
 80057ba:	5ae3      	ldrh	r3, [r4, r3]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d100      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x14c>
 80057c2:	e08f      	b.n	80058e4 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	d0d6      	beq.n	8005776 <HAL_SPI_TransmitReceive+0xfe>
 80057c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0d2      	beq.n	8005776 <HAL_SPI_TransmitReceive+0xfe>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	0792      	lsls	r2, r2, #30
 80057d6:	d5ce      	bpl.n	8005776 <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80057d8:	8832      	ldrh	r2, [r6, #0]
 80057da:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80057dc:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 80057de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80057e6:	2700      	movs	r7, #0
 80057e8:	e7c5      	b.n	8005776 <HAL_SPI_TransmitReceive+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x180>
 80057f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10b      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 80057f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d909      	bls.n	8005814 <HAL_SPI_TransmitReceive+0x19c>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	8832      	ldrh	r2, [r6, #0]
 8005804:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005806:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 8005808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800580a:	3b02      	subs	r3, #2
 800580c:	b29b      	uxth	r3, r3
 800580e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005810:	2701      	movs	r7, #1
 8005812:	e035      	b.n	8005880 <HAL_SPI_TransmitReceive+0x208>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005814:	7833      	ldrb	r3, [r6, #0]
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800581a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800581c:	3b01      	subs	r3, #1
 800581e:	b29b      	uxth	r3, r3
 8005820:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005822:	3601      	adds	r6, #1
 8005824:	e7f4      	b.n	8005810 <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005826:	7832      	ldrb	r2, [r6, #0]
 8005828:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800582a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800582c:	3b01      	subs	r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005832:	3601      	adds	r6, #1
        txallowed = 0U;
 8005834:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005836:	2346      	movs	r3, #70	; 0x46
 8005838:	5ae3      	ldrh	r3, [r4, r3]
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <HAL_SPI_TransmitReceive+0x1f4>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	07d2      	lsls	r2, r2, #31
 8005846:	d511      	bpl.n	800586c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8005848:	2246      	movs	r2, #70	; 0x46
 800584a:	5aa2      	ldrh	r2, [r4, r2]
 800584c:	b292      	uxth	r2, r2
 800584e:	2a01      	cmp	r2, #1
 8005850:	d93e      	bls.n	80058d0 <HAL_SPI_TransmitReceive+0x258>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	802b      	strh	r3, [r5, #0]
          pRxData += sizeof(uint16_t);
 8005856:	3502      	adds	r5, #2
          hspi->RxXferCount -= 2U;
 8005858:	2246      	movs	r2, #70	; 0x46
 800585a:	5aa3      	ldrh	r3, [r4, r2]
 800585c:	3b02      	subs	r3, #2
 800585e:	b29b      	uxth	r3, r3
 8005860:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8005862:	5aa3      	ldrh	r3, [r4, r2]
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d92a      	bls.n	80058c0 <HAL_SPI_TransmitReceive+0x248>
        txallowed = 1U;
 800586a:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800586c:	9b06      	ldr	r3, [sp, #24]
 800586e:	3301      	adds	r3, #1
 8005870:	d006      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x208>
 8005872:	f7fd fdc1 	bl	80033f8 <HAL_GetTick>
 8005876:	4643      	mov	r3, r8
 8005878:	1ac0      	subs	r0, r0, r3
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	4283      	cmp	r3, r0
 800587e:	d949      	bls.n	8005914 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005880:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x21a>
 8005888:	3346      	adds	r3, #70	; 0x46
 800588a:	5ae3      	ldrh	r3, [r4, r3]
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d028      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0cf      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x1be>
 8005896:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0cb      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x1be>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	0792      	lsls	r2, r2, #30
 80058a4:	d5c7      	bpl.n	8005836 <HAL_SPI_TransmitReceive+0x1be>
        if (hspi->TxXferCount > 1U)
 80058a6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80058a8:	b292      	uxth	r2, r2
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	d9bb      	bls.n	8005826 <HAL_SPI_TransmitReceive+0x1ae>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80058ae:	8832      	ldrh	r2, [r6, #0]
 80058b0:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80058b2:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 80058b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058b6:	3b02      	subs	r3, #2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80058bc:	2700      	movs	r7, #0
 80058be:	e7ba      	b.n	8005836 <HAL_SPI_TransmitReceive+0x1be>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058c0:	6822      	ldr	r2, [r4, #0]
 80058c2:	6851      	ldr	r1, [r2, #4]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	015b      	lsls	r3, r3, #5
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80058cc:	2701      	movs	r7, #1
 80058ce:	e7cd      	b.n	800586c <HAL_SPI_TransmitReceive+0x1f4>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058d0:	7b1b      	ldrb	r3, [r3, #12]
 80058d2:	702b      	strb	r3, [r5, #0]
          hspi->RxXferCount--;
 80058d4:	2246      	movs	r2, #70	; 0x46
 80058d6:	5aa3      	ldrh	r3, [r4, r2]
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29b      	uxth	r3, r3
 80058dc:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058de:	3501      	adds	r5, #1
        txallowed = 1U;
 80058e0:	2701      	movs	r7, #1
 80058e2:	e7c3      	b.n	800586c <HAL_SPI_TransmitReceive+0x1f4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e4:	4642      	mov	r2, r8
 80058e6:	9906      	ldr	r1, [sp, #24]
 80058e8:	0020      	movs	r0, r4
 80058ea:	f7ff fde3 	bl	80054b4 <SPI_EndRxTxTransaction>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f2:	2320      	movs	r3, #32
 80058f4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10d      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x2a0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058fc:	2000      	movs	r0, #0
 80058fe:	e6db      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_BUSY;
 8005900:	2002      	movs	r0, #2
 8005902:	e6d9      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 8005904:	2001      	movs	r0, #1
 8005906:	e6d7      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
 8005908:	2001      	movs	r0, #1
 800590a:	e6d5      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
 800590c:	2001      	movs	r0, #1
 800590e:	e6d3      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 8005910:	2003      	movs	r0, #3
 8005912:	e6d1      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 8005914:	2003      	movs	r0, #3
 8005916:	e6cf      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 8005918:	2001      	movs	r0, #1
 800591a:	e6cd      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x40>
 800591c:	ffffefff 	.word	0xffffefff

08005920 <HAL_SPI_Receive>:
{
 8005920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005922:	b085      	sub	sp, #20
 8005924:	0004      	movs	r4, r0
 8005926:	000d      	movs	r5, r1
 8005928:	0016      	movs	r6, r2
 800592a:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800592c:	2382      	movs	r3, #130	; 0x82
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	6842      	ldr	r2, [r0, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d006      	beq.n	8005944 <HAL_SPI_Receive+0x24>
  __HAL_LOCK(hspi);
 8005936:	235c      	movs	r3, #92	; 0x5c
 8005938:	5ce3      	ldrb	r3, [r4, r3]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10e      	bne.n	800595c <HAL_SPI_Receive+0x3c>
 800593e:	2002      	movs	r0, #2
}
 8005940:	b005      	add	sp, #20
 8005942:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005944:	6883      	ldr	r3, [r0, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f5      	bne.n	8005936 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800594a:	2204      	movs	r2, #4
 800594c:	335d      	adds	r3, #93	; 0x5d
 800594e:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005950:	9700      	str	r7, [sp, #0]
 8005952:	0033      	movs	r3, r6
 8005954:	000a      	movs	r2, r1
 8005956:	f7ff fe8f 	bl	8005678 <HAL_SPI_TransmitReceive>
 800595a:	e7f1      	b.n	8005940 <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 800595c:	2201      	movs	r2, #1
 800595e:	235c      	movs	r3, #92	; 0x5c
 8005960:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8005962:	f7fd fd49 	bl	80033f8 <HAL_GetTick>
 8005966:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005968:	235d      	movs	r3, #93	; 0x5d
 800596a:	5ce3      	ldrb	r3, [r4, r3]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d007      	beq.n	8005980 <HAL_SPI_Receive+0x60>
    errorcode = HAL_BUSY;
 8005970:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005972:	2201      	movs	r2, #1
 8005974:	235d      	movs	r3, #93	; 0x5d
 8005976:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8005978:	2200      	movs	r2, #0
 800597a:	3b01      	subs	r3, #1
 800597c:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 800597e:	e7df      	b.n	8005940 <HAL_SPI_Receive+0x20>
  if ((pData == NULL) || (Size == 0U))
 8005980:	2d00      	cmp	r5, #0
 8005982:	d100      	bne.n	8005986 <HAL_SPI_Receive+0x66>
 8005984:	e081      	b.n	8005a8a <HAL_SPI_Receive+0x16a>
 8005986:	2e00      	cmp	r6, #0
 8005988:	d100      	bne.n	800598c <HAL_SPI_Receive+0x6c>
 800598a:	e080      	b.n	8005a8e <HAL_SPI_Receive+0x16e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800598c:	2204      	movs	r2, #4
 800598e:	335c      	adds	r3, #92	; 0x5c
 8005990:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005992:	2300      	movs	r3, #0
 8005994:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005996:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005998:	3240      	adds	r2, #64	; 0x40
 800599a:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800599c:	3202      	adds	r2, #2
 800599e:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059a0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80059a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059a8:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059aa:	23e0      	movs	r3, #224	; 0xe0
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	68e2      	ldr	r2, [r4, #12]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d917      	bls.n	80059e4 <HAL_SPI_Receive+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	6853      	ldr	r3, [r2, #4]
 80059b8:	493b      	ldr	r1, [pc, #236]	; (8005aa8 <HAL_SPI_Receive+0x188>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68a2      	ldr	r2, [r4, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d014      	beq.n	80059f2 <HAL_SPI_Receive+0xd2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	0652      	lsls	r2, r2, #25
 80059ce:	d403      	bmi.n	80059d8 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2140      	movs	r1, #64	; 0x40
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80059d8:	23e0      	movs	r3, #224	; 0xe0
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	68e2      	ldr	r2, [r4, #12]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d917      	bls.n	8005a12 <HAL_SPI_Receive+0xf2>
 80059e2:	e032      	b.n	8005a4a <HAL_SPI_Receive+0x12a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	6851      	ldr	r1, [r2, #4]
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6053      	str	r3, [r2, #4]
 80059f0:	e7e5      	b.n	80059be <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	492d      	ldr	r1, [pc, #180]	; (8005aac <HAL_SPI_Receive+0x18c>)
 80059f8:	400b      	ands	r3, r1
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e7e4      	b.n	80059c8 <HAL_SPI_Receive+0xa8>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80059fe:	2f00      	cmp	r7, #0
 8005a00:	d047      	beq.n	8005a92 <HAL_SPI_Receive+0x172>
 8005a02:	1c7b      	adds	r3, r7, #1
 8005a04:	d005      	beq.n	8005a12 <HAL_SPI_Receive+0xf2>
 8005a06:	f7fd fcf7 	bl	80033f8 <HAL_GetTick>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	1ac0      	subs	r0, r0, r3
 8005a0e:	4287      	cmp	r7, r0
 8005a10:	d941      	bls.n	8005a96 <HAL_SPI_Receive+0x176>
    while (hspi->RxXferCount > 0U)
 8005a12:	2346      	movs	r3, #70	; 0x46
 8005a14:	5ae3      	ldrh	r3, [r4, r3]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d028      	beq.n	8005a6e <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	07d2      	lsls	r2, r2, #31
 8005a22:	d5ec      	bpl.n	80059fe <HAL_SPI_Receive+0xde>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a24:	7b1b      	ldrb	r3, [r3, #12]
 8005a26:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 8005a28:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 8005a2a:	2246      	movs	r2, #70	; 0x46
 8005a2c:	5aa3      	ldrh	r3, [r4, r2]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	52a3      	strh	r3, [r4, r2]
 8005a34:	e7ed      	b.n	8005a12 <HAL_SPI_Receive+0xf2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005a36:	2f00      	cmp	r7, #0
 8005a38:	d02f      	beq.n	8005a9a <HAL_SPI_Receive+0x17a>
 8005a3a:	1c7b      	adds	r3, r7, #1
 8005a3c:	d005      	beq.n	8005a4a <HAL_SPI_Receive+0x12a>
 8005a3e:	f7fd fcdb 	bl	80033f8 <HAL_GetTick>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	1ac0      	subs	r0, r0, r3
 8005a46:	4287      	cmp	r7, r0
 8005a48:	d929      	bls.n	8005a9e <HAL_SPI_Receive+0x17e>
    while (hspi->RxXferCount > 0U)
 8005a4a:	2346      	movs	r3, #70	; 0x46
 8005a4c:	5ae3      	ldrh	r3, [r4, r3]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	07d2      	lsls	r2, r2, #31
 8005a5a:	d5ec      	bpl.n	8005a36 <HAL_SPI_Receive+0x116>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 8005a60:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 8005a62:	2246      	movs	r2, #70	; 0x46
 8005a64:	5aa3      	ldrh	r3, [r4, r2]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	52a3      	strh	r3, [r4, r2]
 8005a6c:	e7ed      	b.n	8005a4a <HAL_SPI_Receive+0x12a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a6e:	9a03      	ldr	r2, [sp, #12]
 8005a70:	0039      	movs	r1, r7
 8005a72:	0020      	movs	r0, r4
 8005a74:	f7ff fd52 	bl	800551c <SPI_EndRxTransaction>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_SPI_Receive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a86:	2000      	movs	r0, #0
 8005a88:	e773      	b.n	8005972 <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	e771      	b.n	8005972 <HAL_SPI_Receive+0x52>
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e76f      	b.n	8005972 <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005a92:	2003      	movs	r0, #3
 8005a94:	e76d      	b.n	8005972 <HAL_SPI_Receive+0x52>
 8005a96:	2003      	movs	r0, #3
 8005a98:	e76b      	b.n	8005972 <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005a9a:	2003      	movs	r0, #3
 8005a9c:	e769      	b.n	8005972 <HAL_SPI_Receive+0x52>
 8005a9e:	2003      	movs	r0, #3
 8005aa0:	e767      	b.n	8005972 <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	e765      	b.n	8005972 <HAL_SPI_Receive+0x52>
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	ffffefff 	.word	0xffffefff
 8005aac:	ffffbfff 	.word	0xffffbfff

08005ab0 <HAL_SPI_Transmit_DMA>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005ab4:	235c      	movs	r3, #92	; 0x5c
 8005ab6:	5cc3      	ldrb	r3, [r0, r3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d100      	bne.n	8005abe <HAL_SPI_Transmit_DMA+0xe>
 8005abc:	e07c      	b.n	8005bb8 <HAL_SPI_Transmit_DMA+0x108>
 8005abe:	2001      	movs	r0, #1
 8005ac0:	235c      	movs	r3, #92	; 0x5c
 8005ac2:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	5ce3      	ldrb	r3, [r4, r3]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d004      	beq.n	8005ad6 <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 8005acc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	235c      	movs	r3, #92	; 0x5c
 8005ad2:	54e2      	strb	r2, [r4, r3]
}
 8005ad4:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d06a      	beq.n	8005bb0 <HAL_SPI_Transmit_DMA+0x100>
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d06a      	beq.n	8005bb4 <HAL_SPI_Transmit_DMA+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ade:	3002      	adds	r0, #2
 8005ae0:	335c      	adds	r3, #92	; 0x5c
 8005ae2:	54e0      	strb	r0, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ae8:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005aea:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aec:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aee:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005af0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005af2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005af4:	2244      	movs	r2, #68	; 0x44
 8005af6:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8005af8:	3202      	adds	r2, #2
 8005afa:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	68a2      	ldr	r2, [r4, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d037      	beq.n	8005b76 <HAL_SPI_Transmit_DMA+0xc6>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b08:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <HAL_SPI_Transmit_DMA+0x10c>)
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <HAL_SPI_Transmit_DMA+0x110>)
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b14:	4a2b      	ldr	r2, [pc, #172]	; (8005bc4 <HAL_SPI_Transmit_DMA+0x114>)
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	6853      	ldr	r3, [r2, #4]
 8005b22:	4929      	ldr	r1, [pc, #164]	; (8005bc8 <HAL_SPI_Transmit_DMA+0x118>)
 8005b24:	400b      	ands	r3, r1
 8005b26:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005b28:	23e0      	movs	r3, #224	; 0xe0
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	68e2      	ldr	r2, [r4, #12]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d805      	bhi.n	8005b3e <HAL_SPI_Transmit_DMA+0x8e>
 8005b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d022      	beq.n	8005b84 <HAL_SPI_Transmit_DMA+0xd4>
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	320c      	adds	r2, #12
 8005b42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b4a:	f7fd fcff 	bl	800354c <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	0652      	lsls	r2, r2, #25
 8005b54:	d403      	bmi.n	8005b5e <HAL_SPI_Transmit_DMA+0xae>
    __HAL_SPI_ENABLE(hspi);
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	6853      	ldr	r3, [r2, #4]
 8005b62:	2120      	movs	r1, #32
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	6853      	ldr	r3, [r2, #4]
 8005b6c:	391e      	subs	r1, #30
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b72:	2000      	movs	r0, #0
 8005b74:	e7ab      	b.n	8005ace <HAL_SPI_Transmit_DMA+0x1e>
    SPI_1LINE_TX(hspi);
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	6811      	ldr	r1, [r2, #0]
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e7c0      	b.n	8005b06 <HAL_SPI_Transmit_DMA+0x56>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b86:	07db      	lsls	r3, r3, #31
 8005b88:	d407      	bmi.n	8005b9a <HAL_SPI_Transmit_DMA+0xea>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	6853      	ldr	r3, [r2, #4]
 8005b8e:	400b      	ands	r3, r1
 8005b90:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005b92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b98:	e7d1      	b.n	8005b3e <HAL_SPI_Transmit_DMA+0x8e>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	6851      	ldr	r1, [r2, #4]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ba6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	3301      	adds	r3, #1
 8005bac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005bae:	e7c6      	b.n	8005b3e <HAL_SPI_Transmit_DMA+0x8e>
    errorcode = HAL_ERROR;
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	e78c      	b.n	8005ace <HAL_SPI_Transmit_DMA+0x1e>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	e78a      	b.n	8005ace <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 8005bb8:	2002      	movs	r0, #2
 8005bba:	e78b      	b.n	8005ad4 <HAL_SPI_Transmit_DMA+0x24>
 8005bbc:	08005f39 	.word	0x08005f39
 8005bc0:	08005f7f 	.word	0x08005f7f
 8005bc4:	08005f5d 	.word	0x08005f5d
 8005bc8:	ffffbfff 	.word	0xffffbfff

08005bcc <HAL_SPI_TransmitReceive_DMA>:
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005bd0:	205c      	movs	r0, #92	; 0x5c
 8005bd2:	5c20      	ldrb	r0, [r4, r0]
 8005bd4:	2801      	cmp	r0, #1
 8005bd6:	d100      	bne.n	8005bda <HAL_SPI_TransmitReceive_DMA+0xe>
 8005bd8:	e0de      	b.n	8005d98 <HAL_SPI_TransmitReceive_DMA+0x1cc>
 8005bda:	2501      	movs	r5, #1
 8005bdc:	205c      	movs	r0, #92	; 0x5c
 8005bde:	5425      	strb	r5, [r4, r0]
  tmp  = hspi->State;
 8005be0:	3001      	adds	r0, #1
 8005be2:	5c20      	ldrb	r0, [r4, r0]
 8005be4:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
 8005be6:	6865      	ldr	r5, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) ||
 8005be8:	2801      	cmp	r0, #1
 8005bea:	d010      	beq.n	8005c0e <HAL_SPI_TransmitReceive_DMA+0x42>
 8005bec:	2682      	movs	r6, #130	; 0x82
 8005bee:	0076      	lsls	r6, r6, #1
 8005bf0:	42b5      	cmp	r5, r6
 8005bf2:	d004      	beq.n	8005bfe <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 8005bf4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	235c      	movs	r3, #92	; 0x5c
 8005bfa:	54e2      	strb	r2, [r4, r3]
}
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005bfe:	68a5      	ldr	r5, [r4, #8]
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	d000      	beq.n	8005c06 <HAL_SPI_TransmitReceive_DMA+0x3a>
 8005c04:	e0c0      	b.n	8005d88 <HAL_SPI_TransmitReceive_DMA+0x1bc>
 8005c06:	2804      	cmp	r0, #4
 8005c08:	d001      	beq.n	8005c0e <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 8005c0a:	2002      	movs	r0, #2
 8005c0c:	e7f3      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d100      	bne.n	8005c14 <HAL_SPI_TransmitReceive_DMA+0x48>
 8005c12:	e0bb      	b.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x1c0>
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	d100      	bne.n	8005c1a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005c18:	e0ba      	b.n	8005d90 <HAL_SPI_TransmitReceive_DMA+0x1c4>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d100      	bne.n	8005c20 <HAL_SPI_TransmitReceive_DMA+0x54>
 8005c1e:	e0b9      	b.n	8005d94 <HAL_SPI_TransmitReceive_DMA+0x1c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c20:	205d      	movs	r0, #93	; 0x5d
 8005c22:	5c20      	ldrb	r0, [r4, r0]
 8005c24:	2804      	cmp	r0, #4
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_TransmitReceive_DMA+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c28:	2505      	movs	r5, #5
 8005c2a:	205d      	movs	r0, #93	; 0x5d
 8005c2c:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c32:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c34:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c36:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c38:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c3a:	2244      	movs	r2, #68	; 0x44
 8005c3c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = Size;
 8005c3e:	3202      	adds	r2, #2
 8005c40:	52a3      	strh	r3, [r4, r2]
  hspi->RxISR       = NULL;
 8005c42:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c44:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	6853      	ldr	r3, [r2, #4]
 8005c4a:	4954      	ldr	r1, [pc, #336]	; (8005d9c <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 8005c4c:	400b      	ands	r3, r1
 8005c4e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c50:	23e0      	movs	r3, #224	; 0xe0
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	68e2      	ldr	r2, [r4, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d947      	bls.n	8005cea <HAL_SPI_TransmitReceive_DMA+0x11e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	6853      	ldr	r3, [r2, #4]
 8005c5e:	4950      	ldr	r1, [pc, #320]	; (8005da0 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c64:	235d      	movs	r3, #93	; 0x5d
 8005c66:	5ce3      	ldrb	r3, [r4, r3]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d100      	bne.n	8005c6e <HAL_SPI_TransmitReceive_DMA+0xa2>
 8005c6c:	e085      	b.n	8005d7a <HAL_SPI_TransmitReceive_DMA+0x1ae>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c70:	4a4c      	ldr	r2, [pc, #304]	; (8005da4 <HAL_SPI_TransmitReceive_DMA+0x1d8>)
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c76:	4a4c      	ldr	r2, [pc, #304]	; (8005da8 <HAL_SPI_TransmitReceive_DMA+0x1dc>)
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c82:	2500      	movs	r5, #0
 8005c84:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	310c      	adds	r1, #12
 8005c8a:	2346      	movs	r3, #70	; 0x46
 8005c8c:	5ae3      	ldrh	r3, [r4, r3]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c94:	f7fd fc5a 	bl	800354c <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	6853      	ldr	r3, [r2, #4]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ca4:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005ca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ca8:	629d      	str	r5, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005caa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cac:	631d      	str	r5, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005cae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cb0:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	320c      	adds	r2, #12
 8005cb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005cbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cbe:	f7fd fc45 	bl	800354c <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	0652      	lsls	r2, r2, #25
 8005cc8:	d403      	bmi.n	8005cd2 <HAL_SPI_TransmitReceive_DMA+0x106>
    __HAL_SPI_ENABLE(hspi);
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	2140      	movs	r1, #64	; 0x40
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	6853      	ldr	r3, [r2, #4]
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	6853      	ldr	r3, [r2, #4]
 8005ce0:	391e      	subs	r1, #30
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e785      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	6851      	ldr	r1, [r2, #4]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	015b      	lsls	r3, r3, #5
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d018      	beq.n	8005d34 <HAL_SPI_TransmitReceive_DMA+0x168>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d1aa      	bne.n	8005c64 <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	6853      	ldr	r3, [r2, #4]
 8005d12:	4923      	ldr	r1, [pc, #140]	; (8005da0 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 8005d14:	400b      	ands	r3, r1
 8005d16:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005d18:	2346      	movs	r3, #70	; 0x46
 8005d1a:	5ae3      	ldrh	r3, [r4, r3]
 8005d1c:	07db      	lsls	r3, r3, #31
 8005d1e:	d420      	bmi.n	8005d62 <HAL_SPI_TransmitReceive_DMA+0x196>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	6853      	ldr	r3, [r2, #4]
 8005d24:	4922      	ldr	r1, [pc, #136]	; (8005db0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005d2a:	2246      	movs	r2, #70	; 0x46
 8005d2c:	5aa3      	ldrh	r3, [r4, r2]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	52a3      	strh	r3, [r4, r2]
 8005d32:	e797      	b.n	8005c64 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005d34:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d408      	bmi.n	8005d4c <HAL_SPI_TransmitReceive_DMA+0x180>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	6853      	ldr	r3, [r2, #4]
 8005d3e:	491d      	ldr	r1, [pc, #116]	; (8005db4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005d40:	400b      	ands	r3, r1
 8005d42:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005d44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005d4a:	e7da      	b.n	8005d02 <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	6851      	ldr	r1, [r2, #4]
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	01db      	lsls	r3, r3, #7
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005d60:	e7cf      	b.n	8005d02 <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	6851      	ldr	r1, [r2, #4]
 8005d66:	2380      	movs	r3, #128	; 0x80
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005d6e:	2246      	movs	r2, #70	; 0x46
 8005d70:	5aa3      	ldrh	r3, [r4, r2]
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3301      	adds	r3, #1
 8005d76:	52a3      	strh	r3, [r4, r2]
 8005d78:	e774      	b.n	8005c64 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005d80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005d84:	629a      	str	r2, [r3, #40]	; 0x28
 8005d86:	e778      	b.n	8005c7a <HAL_SPI_TransmitReceive_DMA+0xae>
    errorcode = HAL_BUSY;
 8005d88:	2002      	movs	r0, #2
 8005d8a:	e734      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
    errorcode = HAL_ERROR;
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e732      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
 8005d90:	2001      	movs	r0, #1
 8005d92:	e730      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
 8005d94:	2001      	movs	r0, #1
 8005d96:	e72e      	b.n	8005bf6 <HAL_SPI_TransmitReceive_DMA+0x2a>
  __HAL_LOCK(hspi);
 8005d98:	2002      	movs	r0, #2
 8005d9a:	e72f      	b.n	8005bfc <HAL_SPI_TransmitReceive_DMA+0x30>
 8005d9c:	ffff9fff 	.word	0xffff9fff
 8005da0:	ffffefff 	.word	0xffffefff
 8005da4:	08005f51 	.word	0x08005f51
 8005da8:	0800604d 	.word	0x0800604d
 8005dac:	08005f5d 	.word	0x08005f5d
 8005db0:	ffffdfff 	.word	0xffffdfff
 8005db4:	ffffbfff 	.word	0xffffbfff
 8005db8:	08005f45 	.word	0x08005f45
 8005dbc:	08005ff3 	.word	0x08005ff3

08005dc0 <HAL_SPI_Receive_DMA>:
{
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005dc4:	6880      	ldr	r0, [r0, #8]
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_SPI_Receive_DMA+0x14>
 8005dca:	2382      	movs	r3, #130	; 0x82
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	429d      	cmp	r5, r3
 8005dd2:	d010      	beq.n	8005df6 <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 8005dd4:	255c      	movs	r5, #92	; 0x5c
 8005dd6:	5d65      	ldrb	r5, [r4, r5]
 8005dd8:	2d01      	cmp	r5, #1
 8005dda:	d100      	bne.n	8005dde <HAL_SPI_Receive_DMA+0x1e>
 8005ddc:	e099      	b.n	8005f12 <HAL_SPI_Receive_DMA+0x152>
 8005dde:	2501      	movs	r5, #1
 8005de0:	235c      	movs	r3, #92	; 0x5c
 8005de2:	54e5      	strb	r5, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005de4:	3301      	adds	r3, #1
 8005de6:	5ce3      	ldrb	r3, [r4, r3]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00d      	beq.n	8005e08 <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 8005dec:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005dee:	2200      	movs	r2, #0
 8005df0:	235c      	movs	r3, #92	; 0x5c
 8005df2:	54e2      	strb	r2, [r4, r3]
}
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005df6:	3004      	adds	r0, #4
 8005df8:	3ba7      	subs	r3, #167	; 0xa7
 8005dfa:	54e0      	strb	r0, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005dfc:	0013      	movs	r3, r2
 8005dfe:	000a      	movs	r2, r1
 8005e00:	0020      	movs	r0, r4
 8005e02:	f7ff fee3 	bl	8005bcc <HAL_SPI_TransmitReceive_DMA>
 8005e06:	e7f5      	b.n	8005df4 <HAL_SPI_Receive_DMA+0x34>
  if ((pData == NULL) || (Size == 0U))
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	d100      	bne.n	8005e0e <HAL_SPI_Receive_DMA+0x4e>
 8005e0c:	e07d      	b.n	8005f0a <HAL_SPI_Receive_DMA+0x14a>
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	d100      	bne.n	8005e14 <HAL_SPI_Receive_DMA+0x54>
 8005e12:	e07c      	b.n	8005f0e <HAL_SPI_Receive_DMA+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e14:	3503      	adds	r5, #3
 8005e16:	335c      	adds	r3, #92	; 0x5c
 8005e18:	54e5      	strb	r5, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e1e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e20:	2144      	movs	r1, #68	; 0x44
 8005e22:	5262      	strh	r2, [r4, r1]
  hspi->RxXferCount = Size;
 8005e24:	3102      	adds	r1, #2
 8005e26:	5262      	strh	r2, [r4, r1]
  hspi->RxISR       = NULL;
 8005e28:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e2a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005e2c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e30:	2380      	movs	r3, #128	; 0x80
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	4298      	cmp	r0, r3
 8005e36:	d037      	beq.n	8005ea8 <HAL_SPI_Receive_DMA+0xe8>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	6853      	ldr	r3, [r2, #4]
 8005e3c:	4936      	ldr	r1, [pc, #216]	; (8005f18 <HAL_SPI_Receive_DMA+0x158>)
 8005e3e:	400b      	ands	r3, r1
 8005e40:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e42:	23e0      	movs	r3, #224	; 0xe0
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	68e2      	ldr	r2, [r4, #12]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d933      	bls.n	8005eb4 <HAL_SPI_Receive_DMA+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	6853      	ldr	r3, [r2, #4]
 8005e50:	4932      	ldr	r1, [pc, #200]	; (8005f1c <HAL_SPI_Receive_DMA+0x15c>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e58:	4a31      	ldr	r2, [pc, #196]	; (8005f20 <HAL_SPI_Receive_DMA+0x160>)
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e5e:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <HAL_SPI_Receive_DMA+0x164>)
 8005e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e64:	4a30      	ldr	r2, [pc, #192]	; (8005f28 <HAL_SPI_Receive_DMA+0x168>)
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	310c      	adds	r1, #12
 8005e72:	2346      	movs	r3, #70	; 0x46
 8005e74:	5ae3      	ldrh	r3, [r4, r3]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e7c:	f7fd fb66 	bl	800354c <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	0652      	lsls	r2, r2, #25
 8005e86:	d403      	bmi.n	8005e90 <HAL_SPI_Receive_DMA+0xd0>
    __HAL_SPI_ENABLE(hspi);
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	2140      	movs	r1, #64	; 0x40
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	6853      	ldr	r3, [r2, #4]
 8005e94:	2120      	movs	r1, #32
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	6853      	ldr	r3, [r2, #4]
 8005e9e:	391f      	subs	r1, #31
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e7a2      	b.n	8005dee <HAL_SPI_Receive_DMA+0x2e>
    SPI_1LINE_RX(hspi);
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	6813      	ldr	r3, [r2, #0]
 8005eac:	491f      	ldr	r1, [pc, #124]	; (8005f2c <HAL_SPI_Receive_DMA+0x16c>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e7c1      	b.n	8005e38 <HAL_SPI_Receive_DMA+0x78>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	6851      	ldr	r1, [r2, #4]
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	015b      	lsls	r3, r3, #5
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d1c4      	bne.n	8005e56 <HAL_SPI_Receive_DMA+0x96>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	6853      	ldr	r3, [r2, #4]
 8005ed0:	4912      	ldr	r1, [pc, #72]	; (8005f1c <HAL_SPI_Receive_DMA+0x15c>)
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005ed6:	2346      	movs	r3, #70	; 0x46
 8005ed8:	5ae3      	ldrh	r3, [r4, r3]
 8005eda:	07db      	lsls	r3, r3, #31
 8005edc:	d409      	bmi.n	8005ef2 <HAL_SPI_Receive_DMA+0x132>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	6853      	ldr	r3, [r2, #4]
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <HAL_SPI_Receive_DMA+0x158>)
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005ee8:	2246      	movs	r2, #70	; 0x46
 8005eea:	5aa3      	ldrh	r3, [r4, r2]
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	52a3      	strh	r3, [r4, r2]
 8005ef0:	e7b1      	b.n	8005e56 <HAL_SPI_Receive_DMA+0x96>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	6851      	ldr	r1, [r2, #4]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005efe:	2246      	movs	r2, #70	; 0x46
 8005f00:	5aa3      	ldrh	r3, [r4, r2]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	3301      	adds	r3, #1
 8005f06:	52a3      	strh	r3, [r4, r2]
 8005f08:	e7a5      	b.n	8005e56 <HAL_SPI_Receive_DMA+0x96>
    errorcode = HAL_ERROR;
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	e76f      	b.n	8005dee <HAL_SPI_Receive_DMA+0x2e>
 8005f0e:	2001      	movs	r0, #1
 8005f10:	e76d      	b.n	8005dee <HAL_SPI_Receive_DMA+0x2e>
  __HAL_LOCK(hspi);
 8005f12:	2002      	movs	r0, #2
 8005f14:	e76e      	b.n	8005df4 <HAL_SPI_Receive_DMA+0x34>
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	ffffdfff 	.word	0xffffdfff
 8005f1c:	ffffefff 	.word	0xffffefff
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005ff3 	.word	0x08005ff3
 8005f28:	08005f5d 	.word	0x08005f5d
 8005f2c:	ffffbfff 	.word	0xffffbfff

08005f30 <HAL_SPI_TxCpltCallback>:
}
 8005f30:	4770      	bx	lr

08005f32 <HAL_SPI_RxCpltCallback>:
}
 8005f32:	4770      	bx	lr

08005f34 <HAL_SPI_TxRxCpltCallback>:
}
 8005f34:	4770      	bx	lr

08005f36 <HAL_SPI_TxHalfCpltCallback>:
}
 8005f36:	4770      	bx	lr

08005f38 <SPI_DMAHalfTransmitCplt>:
{
 8005f38:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f3c:	f7ff fffb 	bl	8005f36 <HAL_SPI_TxHalfCpltCallback>
}
 8005f40:	bd10      	pop	{r4, pc}

08005f42 <HAL_SPI_RxHalfCpltCallback>:
}
 8005f42:	4770      	bx	lr

08005f44 <SPI_DMAHalfReceiveCplt>:
{
 8005f44:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f46:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f48:	f7ff fffb 	bl	8005f42 <HAL_SPI_RxHalfCpltCallback>
}
 8005f4c:	bd10      	pop	{r4, pc}

08005f4e <HAL_SPI_TxRxHalfCpltCallback>:
}
 8005f4e:	4770      	bx	lr

08005f50 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005f50:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f52:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f54:	f7ff fffb 	bl	8005f4e <HAL_SPI_TxRxHalfCpltCallback>
}
 8005f58:	bd10      	pop	{r4, pc}

08005f5a <HAL_SPI_ErrorCallback>:
}
 8005f5a:	4770      	bx	lr

08005f5c <SPI_DMAError>:
{
 8005f5c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f60:	6802      	ldr	r2, [r0, #0]
 8005f62:	6853      	ldr	r3, [r2, #4]
 8005f64:	2103      	movs	r1, #3
 8005f66:	438b      	bics	r3, r1
 8005f68:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f6a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f72:	3a0f      	subs	r2, #15
 8005f74:	235d      	movs	r3, #93	; 0x5d
 8005f76:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 8005f78:	f7ff ffef 	bl	8005f5a <HAL_SPI_ErrorCallback>
}
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <SPI_DMATransmitCplt>:
{
 8005f7e:	b530      	push	{r4, r5, lr}
 8005f80:	b083      	sub	sp, #12
 8005f82:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f84:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8005f86:	f7fd fa37 	bl	80033f8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	069b      	lsls	r3, r3, #26
 8005f90:	d426      	bmi.n	8005fe0 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	6853      	ldr	r3, [r2, #4]
 8005f96:	2120      	movs	r1, #32
 8005f98:	438b      	bics	r3, r1
 8005f9a:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	6853      	ldr	r3, [r2, #4]
 8005fa0:	391e      	subs	r1, #30
 8005fa2:	438b      	bics	r3, r1
 8005fa4:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	3162      	adds	r1, #98	; 0x62
 8005faa:	0020      	movs	r0, r4
 8005fac:	f7ff fa82 	bl	80054b4 <SPI_EndRxTxTransaction>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d003      	beq.n	8005fbc <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fbc:	68a3      	ldr	r3, [r4, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <SPI_DMATransmitCplt+0x52>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	9201      	str	r2, [sp, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	335d      	adds	r3, #93	; 0x5d
 8005fd8:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <SPI_DMATransmitCplt+0x6c>
  HAL_SPI_TxCpltCallback(hspi);
 8005fe0:	0020      	movs	r0, r4
 8005fe2:	f7ff ffa5 	bl	8005f30 <HAL_SPI_TxCpltCallback>
}
 8005fe6:	b003      	add	sp, #12
 8005fe8:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005fea:	0020      	movs	r0, r4
 8005fec:	f7ff ffb5 	bl	8005f5a <HAL_SPI_ErrorCallback>
      return;
 8005ff0:	e7f9      	b.n	8005fe6 <SPI_DMATransmitCplt+0x68>

08005ff2 <SPI_DMAReceiveCplt>:
{
 8005ff2:	b570      	push	{r4, r5, r6, lr}
 8005ff4:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8005ff8:	f7fd f9fe 	bl	80033f8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	069b      	lsls	r3, r3, #26
 8006002:	d41b      	bmi.n	800603c <SPI_DMAReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	6853      	ldr	r3, [r2, #4]
 8006008:	2120      	movs	r1, #32
 800600a:	438b      	bics	r3, r1
 800600c:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6853      	ldr	r3, [r2, #4]
 8006012:	391d      	subs	r1, #29
 8006014:	438b      	bics	r3, r1
 8006016:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006018:	0002      	movs	r2, r0
 800601a:	3161      	adds	r1, #97	; 0x61
 800601c:	0020      	movs	r0, r4
 800601e:	f7ff fa7d 	bl	800551c <SPI_EndRxTransaction>
 8006022:	2800      	cmp	r0, #0
 8006024:	d001      	beq.n	800602a <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006026:	2320      	movs	r3, #32
 8006028:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 800602a:	2200      	movs	r2, #0
 800602c:	2346      	movs	r3, #70	; 0x46
 800602e:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 8006030:	3201      	adds	r2, #1
 8006032:	3317      	adds	r3, #23
 8006034:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006036:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <SPI_DMAReceiveCplt+0x52>
  HAL_SPI_RxCpltCallback(hspi);
 800603c:	0020      	movs	r0, r4
 800603e:	f7ff ff78 	bl	8005f32 <HAL_SPI_RxCpltCallback>
}
 8006042:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 8006044:	0020      	movs	r0, r4
 8006046:	f7ff ff88 	bl	8005f5a <HAL_SPI_ErrorCallback>
      return;
 800604a:	e7fa      	b.n	8006042 <SPI_DMAReceiveCplt+0x50>

0800604c <SPI_DMATransmitReceiveCplt>:
{
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006050:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8006052:	f7fd f9d1 	bl	80033f8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006056:	682b      	ldr	r3, [r5, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	069b      	lsls	r3, r3, #26
 800605c:	d41e      	bmi.n	800609c <SPI_DMATransmitReceiveCplt+0x50>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	6853      	ldr	r3, [r2, #4]
 8006062:	2120      	movs	r1, #32
 8006064:	438b      	bics	r3, r1
 8006066:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006068:	0002      	movs	r2, r0
 800606a:	3144      	adds	r1, #68	; 0x44
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fa21 	bl	80054b4 <SPI_EndRxTxTransaction>
 8006072:	2800      	cmp	r0, #0
 8006074:	d003      	beq.n	800607e <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006076:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006078:	2220      	movs	r2, #32
 800607a:	4313      	orrs	r3, r2
 800607c:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	6853      	ldr	r3, [r2, #4]
 8006082:	2103      	movs	r1, #3
 8006084:	438b      	bics	r3, r1
 8006086:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800608c:	2246      	movs	r2, #70	; 0x46
 800608e:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006090:	3a45      	subs	r2, #69	; 0x45
 8006092:	335d      	adds	r3, #93	; 0x5d
 8006094:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006096:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <SPI_DMATransmitReceiveCplt+0x58>
  HAL_SPI_TxRxCpltCallback(hspi);
 800609c:	0020      	movs	r0, r4
 800609e:	f7ff ff49 	bl	8005f34 <HAL_SPI_TxRxCpltCallback>
}
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 80060a4:	0020      	movs	r0, r4
 80060a6:	f7ff ff58 	bl	8005f5a <HAL_SPI_ErrorCallback>
      return;
 80060aa:	e7fa      	b.n	80060a2 <SPI_DMATransmitReceiveCplt+0x56>

080060ac <HAL_SPI_GetState>:
  return hspi->State;
 80060ac:	235d      	movs	r3, #93	; 0x5d
 80060ae:	5cc0      	ldrb	r0, [r0, r3]
 80060b0:	b2c0      	uxtb	r0, r0
}
 80060b2:	4770      	bx	lr

080060b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	6a03      	ldr	r3, [r0, #32]
 80060b8:	2201      	movs	r2, #1
 80060ba:	4393      	bics	r3, r2
 80060bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c4:	2573      	movs	r5, #115	; 0x73
 80060c6:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	680d      	ldr	r5, [r1, #0]
 80060ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060cc:	2502      	movs	r5, #2
 80060ce:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d0:	688d      	ldr	r5, [r1, #8]
 80060d2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	4d15      	ldr	r5, [pc, #84]	; (800612c <TIM_OC1_SetConfig+0x78>)
 80060d6:	42a8      	cmp	r0, r5
 80060d8:	d020      	beq.n	800611c <TIM_OC1_SetConfig+0x68>
 80060da:	4d15      	ldr	r5, [pc, #84]	; (8006130 <TIM_OC1_SetConfig+0x7c>)
 80060dc:	42a8      	cmp	r0, r5
 80060de:	d01d      	beq.n	800611c <TIM_OC1_SetConfig+0x68>
 80060e0:	4d14      	ldr	r5, [pc, #80]	; (8006134 <TIM_OC1_SetConfig+0x80>)
 80060e2:	42a8      	cmp	r0, r5
 80060e4:	d01a      	beq.n	800611c <TIM_OC1_SetConfig+0x68>
 80060e6:	4d14      	ldr	r5, [pc, #80]	; (8006138 <TIM_OC1_SetConfig+0x84>)
 80060e8:	42a8      	cmp	r0, r5
 80060ea:	d017      	beq.n	800611c <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	4d0f      	ldr	r5, [pc, #60]	; (800612c <TIM_OC1_SetConfig+0x78>)
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	d008      	beq.n	8006104 <TIM_OC1_SetConfig+0x50>
 80060f2:	4d0f      	ldr	r5, [pc, #60]	; (8006130 <TIM_OC1_SetConfig+0x7c>)
 80060f4:	42a8      	cmp	r0, r5
 80060f6:	d005      	beq.n	8006104 <TIM_OC1_SetConfig+0x50>
 80060f8:	4d0e      	ldr	r5, [pc, #56]	; (8006134 <TIM_OC1_SetConfig+0x80>)
 80060fa:	42a8      	cmp	r0, r5
 80060fc:	d002      	beq.n	8006104 <TIM_OC1_SetConfig+0x50>
 80060fe:	4d0e      	ldr	r5, [pc, #56]	; (8006138 <TIM_OC1_SetConfig+0x84>)
 8006100:	42a8      	cmp	r0, r5
 8006102:	d105      	bne.n	8006110 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006104:	4d0d      	ldr	r5, [pc, #52]	; (800613c <TIM_OC1_SetConfig+0x88>)
 8006106:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006108:	694d      	ldr	r5, [r1, #20]
 800610a:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800610c:	698d      	ldr	r5, [r1, #24]
 800610e:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006112:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006114:	684a      	ldr	r2, [r1, #4]
 8006116:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	6203      	str	r3, [r0, #32]
}
 800611a:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	2508      	movs	r5, #8
 800611e:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006120:	68cd      	ldr	r5, [r1, #12]
 8006122:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006124:	2504      	movs	r5, #4
 8006126:	43ab      	bics	r3, r5
 8006128:	e7e0      	b.n	80060ec <TIM_OC1_SetConfig+0x38>
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800
 800613c:	fffffcff 	.word	0xfffffcff

08006140 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006142:	6a03      	ldr	r3, [r0, #32]
 8006144:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <TIM_OC3_SetConfig+0x70>)
 8006146:	4013      	ands	r3, r2
 8006148:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006150:	3275      	adds	r2, #117	; 0x75
 8006152:	32ff      	adds	r2, #255	; 0xff
 8006154:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006156:	680a      	ldr	r2, [r1, #0]
 8006158:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800615a:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <TIM_OC3_SetConfig+0x74>)
 800615c:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	688a      	ldr	r2, [r1, #8]
 8006160:	0212      	lsls	r2, r2, #8
 8006162:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <TIM_OC3_SetConfig+0x78>)
 8006166:	4290      	cmp	r0, r2
 8006168:	d019      	beq.n	800619e <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <TIM_OC3_SetConfig+0x78>)
 800616c:	4290      	cmp	r0, r2
 800616e:	d008      	beq.n	8006182 <TIM_OC3_SetConfig+0x42>
 8006170:	4a12      	ldr	r2, [pc, #72]	; (80061bc <TIM_OC3_SetConfig+0x7c>)
 8006172:	4290      	cmp	r0, r2
 8006174:	d005      	beq.n	8006182 <TIM_OC3_SetConfig+0x42>
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <TIM_OC3_SetConfig+0x80>)
 8006178:	4290      	cmp	r0, r2
 800617a:	d002      	beq.n	8006182 <TIM_OC3_SetConfig+0x42>
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <TIM_OC3_SetConfig+0x84>)
 800617e:	4290      	cmp	r0, r2
 8006180:	d107      	bne.n	8006192 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006182:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <TIM_OC3_SetConfig+0x88>)
 8006184:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006186:	694a      	ldr	r2, [r1, #20]
 8006188:	0112      	lsls	r2, r2, #4
 800618a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800618c:	698a      	ldr	r2, [r1, #24]
 800618e:	0112      	lsls	r2, r2, #4
 8006190:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006194:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006196:	684a      	ldr	r2, [r1, #4]
 8006198:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	6203      	str	r3, [r0, #32]
}
 800619c:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 800619e:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <TIM_OC3_SetConfig+0x8c>)
 80061a0:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061a2:	68ca      	ldr	r2, [r1, #12]
 80061a4:	0212      	lsls	r2, r2, #8
 80061a6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <TIM_OC3_SetConfig+0x90>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	e7dd      	b.n	800616a <TIM_OC3_SetConfig+0x2a>
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	fffffeff 	.word	0xfffffeff
 80061b4:	fffffdff 	.word	0xfffffdff
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800
 80061c8:	ffffcfff 	.word	0xffffcfff
 80061cc:	fffff7ff 	.word	0xfffff7ff
 80061d0:	fffffbff 	.word	0xfffffbff

080061d4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d6:	6a03      	ldr	r3, [r0, #32]
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <TIM_OC4_SetConfig+0x54>)
 80061da:	4013      	ands	r3, r2
 80061dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061e4:	4c11      	ldr	r4, [pc, #68]	; (800622c <TIM_OC4_SetConfig+0x58>)
 80061e6:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e8:	680c      	ldr	r4, [r1, #0]
 80061ea:	0224      	lsls	r4, r4, #8
 80061ec:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ee:	4c10      	ldr	r4, [pc, #64]	; (8006230 <TIM_OC4_SetConfig+0x5c>)
 80061f0:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061f2:	688c      	ldr	r4, [r1, #8]
 80061f4:	0324      	lsls	r4, r4, #12
 80061f6:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80061f8:	4c0e      	ldr	r4, [pc, #56]	; (8006234 <TIM_OC4_SetConfig+0x60>)
 80061fa:	42a0      	cmp	r0, r4
 80061fc:	d008      	beq.n	8006210 <TIM_OC4_SetConfig+0x3c>
 80061fe:	4c0e      	ldr	r4, [pc, #56]	; (8006238 <TIM_OC4_SetConfig+0x64>)
 8006200:	42a0      	cmp	r0, r4
 8006202:	d005      	beq.n	8006210 <TIM_OC4_SetConfig+0x3c>
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <TIM_OC4_SetConfig+0x68>)
 8006206:	42a0      	cmp	r0, r4
 8006208:	d002      	beq.n	8006210 <TIM_OC4_SetConfig+0x3c>
 800620a:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <TIM_OC4_SetConfig+0x6c>)
 800620c:	42a0      	cmp	r0, r4
 800620e:	d104      	bne.n	800621a <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006210:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <TIM_OC4_SetConfig+0x70>)
 8006212:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006214:	694d      	ldr	r5, [r1, #20]
 8006216:	01ad      	lsls	r5, r5, #6
 8006218:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800621e:	684a      	ldr	r2, [r1, #4]
 8006220:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006222:	6203      	str	r3, [r0, #32]
}
 8006224:	bd30      	pop	{r4, r5, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	ffffefff 	.word	0xffffefff
 800622c:	ffff8cff 	.word	0xffff8cff
 8006230:	ffffdfff 	.word	0xffffdfff
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	ffffbfff 	.word	0xffffbfff

08006248 <HAL_TIM_Base_MspInit>:
}
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800624a:	6803      	ldr	r3, [r0, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	2101      	movs	r1, #1
 8006250:	430a      	orrs	r2, r1
 8006252:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8006254:	6802      	ldr	r2, [r0, #0]
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	430b      	orrs	r3, r1
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	2000      	movs	r0, #0
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_IC_CaptureCallback>:
}
 8006262:	4770      	bx	lr

08006264 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_TriggerCallback>:
}
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_IRQHandler>:
{
 8006268:	b510      	push	{r4, lr}
 800626a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800626c:	6803      	ldr	r3, [r0, #0]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	0792      	lsls	r2, r2, #30
 8006272:	d50f      	bpl.n	8006294 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	0792      	lsls	r2, r2, #30
 8006278:	d50c      	bpl.n	8006294 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800627a:	2203      	movs	r2, #3
 800627c:	4252      	negs	r2, r2
 800627e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006280:	2301      	movs	r3, #1
 8006282:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	079b      	lsls	r3, r3, #30
 800628a:	d063      	beq.n	8006354 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 800628c:	f7ff ffe9 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006290:	2300      	movs	r3, #0
 8006292:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	0752      	lsls	r2, r2, #29
 800629a:	d512      	bpl.n	80062c2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	0752      	lsls	r2, r2, #29
 80062a0:	d50f      	bpl.n	80062c2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062a2:	2205      	movs	r2, #5
 80062a4:	4252      	negs	r2, r2
 80062a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a8:	2302      	movs	r3, #2
 80062aa:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	23c0      	movs	r3, #192	; 0xc0
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	421a      	tst	r2, r3
 80062b6:	d053      	beq.n	8006360 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80062b8:	0020      	movs	r0, r4
 80062ba:	f7ff ffd2 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	2300      	movs	r3, #0
 80062c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	0712      	lsls	r2, r2, #28
 80062c8:	d510      	bpl.n	80062ec <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	0712      	lsls	r2, r2, #28
 80062ce:	d50d      	bpl.n	80062ec <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062d0:	2209      	movs	r2, #9
 80062d2:	4252      	negs	r2, r2
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d6:	2304      	movs	r3, #4
 80062d8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	079b      	lsls	r3, r3, #30
 80062e0:	d045      	beq.n	800636e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	0020      	movs	r0, r4
 80062e4:	f7ff ffbd 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e8:	2300      	movs	r3, #0
 80062ea:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	06d2      	lsls	r2, r2, #27
 80062f2:	d512      	bpl.n	800631a <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	06d2      	lsls	r2, r2, #27
 80062f8:	d50f      	bpl.n	800631a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062fa:	2211      	movs	r2, #17
 80062fc:	4252      	negs	r2, r2
 80062fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006300:	2308      	movs	r3, #8
 8006302:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	23c0      	movs	r3, #192	; 0xc0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	421a      	tst	r2, r3
 800630e:	d035      	beq.n	800637c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8006310:	0020      	movs	r0, r4
 8006312:	f7ff ffa6 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	2300      	movs	r3, #0
 8006318:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	07d2      	lsls	r2, r2, #31
 8006320:	d502      	bpl.n	8006328 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	07d2      	lsls	r2, r2, #31
 8006326:	d430      	bmi.n	800638a <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	0612      	lsls	r2, r2, #24
 800632e:	d502      	bpl.n	8006336 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	0612      	lsls	r2, r2, #24
 8006334:	d430      	bmi.n	8006398 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	0652      	lsls	r2, r2, #25
 800633c:	d502      	bpl.n	8006344 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	0652      	lsls	r2, r2, #25
 8006342:	d430      	bmi.n	80063a6 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d502      	bpl.n	8006352 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	0692      	lsls	r2, r2, #26
 8006350:	d430      	bmi.n	80063b4 <HAL_TIM_IRQHandler+0x14c>
}
 8006352:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006354:	f7ff ff84 	bl	8006260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	0020      	movs	r0, r4
 800635a:	f7ff ff83 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
 800635e:	e797      	b.n	8006290 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006360:	0020      	movs	r0, r4
 8006362:	f7ff ff7d 	bl	8006260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006366:	0020      	movs	r0, r4
 8006368:	f7ff ff7c 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
 800636c:	e7a7      	b.n	80062be <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	0020      	movs	r0, r4
 8006370:	f7ff ff76 	bl	8006260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	0020      	movs	r0, r4
 8006376:	f7ff ff75 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
 800637a:	e7b5      	b.n	80062e8 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637c:	0020      	movs	r0, r4
 800637e:	f7ff ff6f 	bl	8006260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006382:	0020      	movs	r0, r4
 8006384:	f7ff ff6e 	bl	8006264 <HAL_TIM_PWM_PulseFinishedCallback>
 8006388:	e7c5      	b.n	8006316 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800638a:	2202      	movs	r2, #2
 800638c:	4252      	negs	r2, r2
 800638e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006390:	0020      	movs	r0, r4
 8006392:	f7fc fe7f 	bl	8003094 <HAL_TIM_PeriodElapsedCallback>
 8006396:	e7c7      	b.n	8006328 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006398:	2281      	movs	r2, #129	; 0x81
 800639a:	4252      	negs	r2, r2
 800639c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800639e:	0020      	movs	r0, r4
 80063a0:	f000 f9b5 	bl	800670e <HAL_TIMEx_BreakCallback>
 80063a4:	e7c7      	b.n	8006336 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a6:	2241      	movs	r2, #65	; 0x41
 80063a8:	4252      	negs	r2, r2
 80063aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80063ac:	0020      	movs	r0, r4
 80063ae:	f7ff ff5a 	bl	8006266 <HAL_TIM_TriggerCallback>
 80063b2:	e7c7      	b.n	8006344 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b4:	2221      	movs	r2, #33	; 0x21
 80063b6:	4252      	negs	r2, r2
 80063b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80063ba:	0020      	movs	r0, r4
 80063bc:	f000 f9a6 	bl	800670c <HAL_TIMEx_CommutationCallback>
}
 80063c0:	e7c7      	b.n	8006352 <HAL_TIM_IRQHandler+0xea>
	...

080063c4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80063c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c6:	4a21      	ldr	r2, [pc, #132]	; (800644c <TIM_Base_SetConfig+0x88>)
 80063c8:	4290      	cmp	r0, r2
 80063ca:	d03a      	beq.n	8006442 <TIM_Base_SetConfig+0x7e>
 80063cc:	2280      	movs	r2, #128	; 0x80
 80063ce:	05d2      	lsls	r2, r2, #23
 80063d0:	4290      	cmp	r0, r2
 80063d2:	d036      	beq.n	8006442 <TIM_Base_SetConfig+0x7e>
 80063d4:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <TIM_Base_SetConfig+0x8c>)
 80063d6:	4290      	cmp	r0, r2
 80063d8:	d033      	beq.n	8006442 <TIM_Base_SetConfig+0x7e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063da:	4a1c      	ldr	r2, [pc, #112]	; (800644c <TIM_Base_SetConfig+0x88>)
 80063dc:	4290      	cmp	r0, r2
 80063de:	d012      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	05d2      	lsls	r2, r2, #23
 80063e4:	4290      	cmp	r0, r2
 80063e6:	d00e      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 80063e8:	4a19      	ldr	r2, [pc, #100]	; (8006450 <TIM_Base_SetConfig+0x8c>)
 80063ea:	4290      	cmp	r0, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 80063ee:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_Base_SetConfig+0x90>)
 80063f0:	4290      	cmp	r0, r2
 80063f2:	d008      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <TIM_Base_SetConfig+0x94>)
 80063f6:	4290      	cmp	r0, r2
 80063f8:	d005      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <TIM_Base_SetConfig+0x98>)
 80063fc:	4290      	cmp	r0, r2
 80063fe:	d002      	beq.n	8006406 <TIM_Base_SetConfig+0x42>
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <TIM_Base_SetConfig+0x9c>)
 8006402:	4290      	cmp	r0, r2
 8006404:	d103      	bne.n	800640e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <TIM_Base_SetConfig+0xa0>)
 8006408:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640a:	68ca      	ldr	r2, [r1, #12]
 800640c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640e:	2280      	movs	r2, #128	; 0x80
 8006410:	4393      	bics	r3, r2
 8006412:	694a      	ldr	r2, [r1, #20]
 8006414:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006416:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006418:	688b      	ldr	r3, [r1, #8]
 800641a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800641c:	680b      	ldr	r3, [r1, #0]
 800641e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <TIM_Base_SetConfig+0x88>)
 8006422:	4298      	cmp	r0, r3
 8006424:	d008      	beq.n	8006438 <TIM_Base_SetConfig+0x74>
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <TIM_Base_SetConfig+0x94>)
 8006428:	4298      	cmp	r0, r3
 800642a:	d005      	beq.n	8006438 <TIM_Base_SetConfig+0x74>
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <TIM_Base_SetConfig+0x98>)
 800642e:	4298      	cmp	r0, r3
 8006430:	d002      	beq.n	8006438 <TIM_Base_SetConfig+0x74>
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <TIM_Base_SetConfig+0x9c>)
 8006434:	4298      	cmp	r0, r3
 8006436:	d101      	bne.n	800643c <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 8006438:	690b      	ldr	r3, [r1, #16]
 800643a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800643c:	2301      	movs	r3, #1
 800643e:	6143      	str	r3, [r0, #20]
}
 8006440:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006442:	2270      	movs	r2, #112	; 0x70
 8006444:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006446:	684a      	ldr	r2, [r1, #4]
 8006448:	4313      	orrs	r3, r2
 800644a:	e7c6      	b.n	80063da <TIM_Base_SetConfig+0x16>
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40002000 	.word	0x40002000
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800
 8006464:	fffffcff 	.word	0xfffffcff

08006468 <HAL_TIM_Base_Init>:
{
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800646c:	d014      	beq.n	8006498 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800646e:	233d      	movs	r3, #61	; 0x3d
 8006470:	5cc3      	ldrb	r3, [r0, r3]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8006476:	253d      	movs	r5, #61	; 0x3d
 8006478:	2302      	movs	r3, #2
 800647a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647c:	1d21      	adds	r1, r4, #4
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	f7ff ffa0 	bl	80063c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8006484:	2301      	movs	r3, #1
 8006486:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006488:	2000      	movs	r0, #0
}
 800648a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800648c:	2200      	movs	r2, #0
 800648e:	333c      	adds	r3, #60	; 0x3c
 8006490:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8006492:	f7ff fed9 	bl	8006248 <HAL_TIM_Base_MspInit>
 8006496:	e7ee      	b.n	8006476 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8006498:	2001      	movs	r0, #1
 800649a:	e7f6      	b.n	800648a <HAL_TIM_Base_Init+0x22>

0800649c <HAL_TIM_PWM_Init>:
{
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80064a0:	d014      	beq.n	80064cc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80064a2:	233d      	movs	r3, #61	; 0x3d
 80064a4:	5cc3      	ldrb	r3, [r0, r3]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80064aa:	253d      	movs	r5, #61	; 0x3d
 80064ac:	2302      	movs	r3, #2
 80064ae:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b0:	1d21      	adds	r1, r4, #4
 80064b2:	6820      	ldr	r0, [r4, #0]
 80064b4:	f7ff ff86 	bl	80063c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80064b8:	2301      	movs	r3, #1
 80064ba:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80064bc:	2000      	movs	r0, #0
}
 80064be:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80064c0:	2200      	movs	r2, #0
 80064c2:	333c      	adds	r3, #60	; 0x3c
 80064c4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80064c6:	f7fc fe89 	bl	80031dc <HAL_TIM_PWM_MspInit>
 80064ca:	e7ee      	b.n	80064aa <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80064cc:	2001      	movs	r0, #1
 80064ce:	e7f6      	b.n	80064be <HAL_TIM_PWM_Init+0x22>

080064d0 <TIM_OC2_SetConfig>:
{
 80064d0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d2:	6a03      	ldr	r3, [r0, #32]
 80064d4:	2210      	movs	r2, #16
 80064d6:	4393      	bics	r3, r2
 80064d8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80064da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80064dc:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80064de:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <TIM_OC2_SetConfig+0x70>)
 80064e2:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	680a      	ldr	r2, [r1, #0]
 80064e6:	0212      	lsls	r2, r2, #8
 80064e8:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80064ea:	2220      	movs	r2, #32
 80064ec:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064ee:	688a      	ldr	r2, [r1, #8]
 80064f0:	0112      	lsls	r2, r2, #4
 80064f2:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f4:	4a13      	ldr	r2, [pc, #76]	; (8006544 <TIM_OC2_SetConfig+0x74>)
 80064f6:	4290      	cmp	r0, r2
 80064f8:	d019      	beq.n	800652e <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	4a12      	ldr	r2, [pc, #72]	; (8006544 <TIM_OC2_SetConfig+0x74>)
 80064fc:	4290      	cmp	r0, r2
 80064fe:	d008      	beq.n	8006512 <TIM_OC2_SetConfig+0x42>
 8006500:	4a11      	ldr	r2, [pc, #68]	; (8006548 <TIM_OC2_SetConfig+0x78>)
 8006502:	4290      	cmp	r0, r2
 8006504:	d005      	beq.n	8006512 <TIM_OC2_SetConfig+0x42>
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <TIM_OC2_SetConfig+0x7c>)
 8006508:	4290      	cmp	r0, r2
 800650a:	d002      	beq.n	8006512 <TIM_OC2_SetConfig+0x42>
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <TIM_OC2_SetConfig+0x80>)
 800650e:	4290      	cmp	r0, r2
 8006510:	d107      	bne.n	8006522 <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <TIM_OC2_SetConfig+0x84>)
 8006514:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006516:	694a      	ldr	r2, [r1, #20]
 8006518:	0092      	lsls	r2, r2, #2
 800651a:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800651c:	698a      	ldr	r2, [r1, #24]
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8006522:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006524:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006526:	684a      	ldr	r2, [r1, #4]
 8006528:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800652a:	6203      	str	r3, [r0, #32]
}
 800652c:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006532:	68ca      	ldr	r2, [r1, #12]
 8006534:	0112      	lsls	r2, r2, #4
 8006536:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8006538:	2240      	movs	r2, #64	; 0x40
 800653a:	4393      	bics	r3, r2
 800653c:	e7dd      	b.n	80064fa <TIM_OC2_SetConfig+0x2a>
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	ffff8cff 	.word	0xffff8cff
 8006544:	40012c00 	.word	0x40012c00
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	fffff3ff 	.word	0xfffff3ff

08006558 <HAL_TIM_PWM_ConfigChannel>:
{
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	0004      	movs	r4, r0
 800655c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800655e:	233c      	movs	r3, #60	; 0x3c
 8006560:	5cc3      	ldrb	r3, [r0, r3]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d069      	beq.n	800663a <HAL_TIM_PWM_ConfigChannel+0xe2>
 8006566:	2101      	movs	r1, #1
 8006568:	233c      	movs	r3, #60	; 0x3c
 800656a:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	3101      	adds	r1, #1
 800656e:	3301      	adds	r3, #1
 8006570:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8006572:	2a04      	cmp	r2, #4
 8006574:	d037      	beq.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006576:	d919      	bls.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x54>
 8006578:	2a08      	cmp	r2, #8
 800657a:	d04a      	beq.n	8006612 <HAL_TIM_PWM_ConfigChannel+0xba>
 800657c:	2a0c      	cmp	r2, #12
 800657e:	d12a      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006580:	0029      	movs	r1, r5
 8006582:	6800      	ldr	r0, [r0, #0]
 8006584:	f7ff fe26 	bl	80061d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	69d1      	ldr	r1, [r2, #28]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	430b      	orrs	r3, r1
 8006592:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	69d3      	ldr	r3, [r2, #28]
 8006598:	4929      	ldr	r1, [pc, #164]	; (8006640 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 800659a:	400b      	ands	r3, r1
 800659c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800659e:	6821      	ldr	r1, [r4, #0]
 80065a0:	69cb      	ldr	r3, [r1, #28]
 80065a2:	692a      	ldr	r2, [r5, #16]
 80065a4:	0212      	lsls	r2, r2, #8
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61cb      	str	r3, [r1, #28]
    break;
 80065aa:	e014      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	d112      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065b0:	0029      	movs	r1, r5
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	f7ff fd7e 	bl	80060b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b8:	6822      	ldr	r2, [r4, #0]
 80065ba:	6993      	ldr	r3, [r2, #24]
 80065bc:	2108      	movs	r1, #8
 80065be:	430b      	orrs	r3, r1
 80065c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	6993      	ldr	r3, [r2, #24]
 80065c6:	3904      	subs	r1, #4
 80065c8:	438b      	bics	r3, r1
 80065ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	6993      	ldr	r3, [r2, #24]
 80065d0:	6929      	ldr	r1, [r5, #16]
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	2201      	movs	r2, #1
 80065d8:	233d      	movs	r3, #61	; 0x3d
 80065da:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80065dc:	2200      	movs	r2, #0
 80065de:	3b01      	subs	r3, #1
 80065e0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80065e2:	2000      	movs	r0, #0
}
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e6:	0029      	movs	r1, r5
 80065e8:	6800      	ldr	r0, [r0, #0]
 80065ea:	f7ff ff71 	bl	80064d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	6991      	ldr	r1, [r2, #24]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	6993      	ldr	r3, [r2, #24]
 80065fe:	4910      	ldr	r1, [pc, #64]	; (8006640 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8006600:	400b      	ands	r3, r1
 8006602:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006604:	6821      	ldr	r1, [r4, #0]
 8006606:	698b      	ldr	r3, [r1, #24]
 8006608:	692a      	ldr	r2, [r5, #16]
 800660a:	0212      	lsls	r2, r2, #8
 800660c:	4313      	orrs	r3, r2
 800660e:	618b      	str	r3, [r1, #24]
    break;
 8006610:	e7e1      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006612:	0029      	movs	r1, r5
 8006614:	6800      	ldr	r0, [r0, #0]
 8006616:	f7ff fd93 	bl	8006140 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	69d3      	ldr	r3, [r2, #28]
 800661e:	2108      	movs	r1, #8
 8006620:	430b      	orrs	r3, r1
 8006622:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	69d3      	ldr	r3, [r2, #28]
 8006628:	3904      	subs	r1, #4
 800662a:	438b      	bics	r3, r1
 800662c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	69d3      	ldr	r3, [r2, #28]
 8006632:	6929      	ldr	r1, [r5, #16]
 8006634:	430b      	orrs	r3, r1
 8006636:	61d3      	str	r3, [r2, #28]
    break;
 8006638:	e7cd      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 800663a:	2002      	movs	r0, #2
 800663c:	e7d2      	b.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	fffffbff 	.word	0xfffffbff

08006644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006644:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006646:	2401      	movs	r4, #1
 8006648:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800664a:	6a03      	ldr	r3, [r0, #32]
 800664c:	43a3      	bics	r3, r4
 800664e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	408a      	lsls	r2, r1
 8006654:	431a      	orrs	r2, r3
 8006656:	6202      	str	r2, [r0, #32]
}
 8006658:	bd10      	pop	{r4, pc}
	...

0800665c <HAL_TIM_PWM_Start>:
{
 800665c:	b510      	push	{r4, lr}
 800665e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006660:	2201      	movs	r2, #1
 8006662:	6800      	ldr	r0, [r0, #0]
 8006664:	f7ff ffee 	bl	8006644 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	4a11      	ldr	r2, [pc, #68]	; (80066b0 <HAL_TIM_PWM_Start+0x54>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d019      	beq.n	80066a4 <HAL_TIM_PWM_Start+0x48>
 8006670:	4a10      	ldr	r2, [pc, #64]	; (80066b4 <HAL_TIM_PWM_Start+0x58>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <HAL_TIM_PWM_Start+0x4c>
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <HAL_TIM_PWM_Start+0x5c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d017      	beq.n	80066ac <HAL_TIM_PWM_Start+0x50>
 800667c:	4a0f      	ldr	r2, [pc, #60]	; (80066bc <HAL_TIM_PWM_Start+0x60>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x44>
 8006682:	2200      	movs	r2, #0
 8006684:	2a00      	cmp	r2, #0
 8006686:	d004      	beq.n	8006692 <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8006688:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800668a:	2280      	movs	r2, #128	; 0x80
 800668c:	0212      	lsls	r2, r2, #8
 800668e:	430a      	orrs	r2, r1
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	6813      	ldr	r3, [r2, #0]
 8006696:	2101      	movs	r1, #1
 8006698:	430b      	orrs	r3, r1
 800669a:	6013      	str	r3, [r2, #0]
}
 800669c:	2000      	movs	r0, #0
 800669e:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a0:	2201      	movs	r2, #1
 80066a2:	e7ef      	b.n	8006684 <HAL_TIM_PWM_Start+0x28>
 80066a4:	2201      	movs	r2, #1
 80066a6:	e7ed      	b.n	8006684 <HAL_TIM_PWM_Start+0x28>
 80066a8:	2201      	movs	r2, #1
 80066aa:	e7eb      	b.n	8006684 <HAL_TIM_PWM_Start+0x28>
 80066ac:	2201      	movs	r2, #1
 80066ae:	e7e9      	b.n	8006684 <HAL_TIM_PWM_Start+0x28>
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80066c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80066c2:	233c      	movs	r3, #60	; 0x3c
 80066c4:	5cc3      	ldrb	r3, [r0, r3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d01e      	beq.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80066ca:	223c      	movs	r2, #60	; 0x3c
 80066cc:	2501      	movs	r5, #1
 80066ce:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80066d0:	243d      	movs	r4, #61	; 0x3d
 80066d2:	2302      	movs	r3, #2
 80066d4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80066d6:	6806      	ldr	r6, [r0, #0]
 80066d8:	6873      	ldr	r3, [r6, #4]
 80066da:	2770      	movs	r7, #112	; 0x70
 80066dc:	43bb      	bics	r3, r7
 80066de:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	6806      	ldr	r6, [r0, #0]
 80066e2:	6873      	ldr	r3, [r6, #4]
 80066e4:	680f      	ldr	r7, [r1, #0]
 80066e6:	433b      	orrs	r3, r7
 80066e8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80066ea:	6806      	ldr	r6, [r0, #0]
 80066ec:	68b3      	ldr	r3, [r6, #8]
 80066ee:	2780      	movs	r7, #128	; 0x80
 80066f0:	43bb      	bics	r3, r7
 80066f2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80066f4:	6806      	ldr	r6, [r0, #0]
 80066f6:	68b3      	ldr	r3, [r6, #8]
 80066f8:	6849      	ldr	r1, [r1, #4]
 80066fa:	430b      	orrs	r3, r1
 80066fc:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80066fe:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8006700:	2300      	movs	r3, #0
 8006702:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8006704:	2000      	movs	r0, #0
}
 8006706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8006708:	2002      	movs	r0, #2
 800670a:	e7fc      	b.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x46>

0800670c <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800670c:	4770      	bx	lr

0800670e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800670e:	4770      	bx	lr

08006710 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8006710:	2329      	movs	r3, #41	; 0x29
 8006712:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8006714:	4800      	ldr	r0, [pc, #0]	; (8006718 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8006716:	4770      	bx	lr
 8006718:	20000040 	.word	0x20000040

0800671c <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800671c:	2386      	movs	r3, #134	; 0x86
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	58c2      	ldr	r2, [r0, r3]
 8006722:	2100      	movs	r1, #0
 8006724:	3bc9      	subs	r3, #201	; 0xc9
 8006726:	3bff      	subs	r3, #255	; 0xff
 8006728:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
}
 800672a:	2000      	movs	r0, #0
 800672c:	4770      	bx	lr

0800672e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800672e:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8006730:	2386      	movs	r3, #134	; 0x86
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	58c4      	ldr	r4, [r0, r3]

  if (hhid->IsReportAvailable == 1)
 8006736:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <USBD_CUSTOM_HID_EP0_RxReady+0x12>
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
  }

  return USBD_OK;
}
 800673c:	2000      	movs	r0, #0
 800673e:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8006740:	2387      	movs	r3, #135	; 0x87
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	58c3      	ldr	r3, [r0, r3]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	7861      	ldrb	r1, [r4, #1]
 800674a:	7820      	ldrb	r0, [r4, #0]
 800674c:	4798      	blx	r3
    hhid->IsReportAvailable = 0;      
 800674e:	2300      	movs	r3, #0
 8006750:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006752:	e7f3      	b.n	800673c <USBD_CUSTOM_HID_EP0_RxReady+0xe>

08006754 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006754:	230a      	movs	r3, #10
 8006756:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8006758:	4800      	ldr	r0, [pc, #0]	; (800675c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 800675a:	4770      	bx	lr
 800675c:	20000078 	.word	0x20000078

08006760 <USBD_CUSTOM_HID_DataOut>:
{
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	0004      	movs	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8006764:	2386      	movs	r3, #134	; 0x86
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	58c5      	ldr	r5, [r0, r3]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 800676a:	3304      	adds	r3, #4
 800676c:	58c3      	ldr	r3, [r0, r3]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	7869      	ldrb	r1, [r5, #1]
 8006772:	7828      	ldrb	r0, [r5, #0]
 8006774:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	002a      	movs	r2, r5
 800677a:	2101      	movs	r1, #1
 800677c:	0020      	movs	r0, r4
 800677e:	f000 ff1d 	bl	80075bc <USBD_LL_PrepareReceive>
}
 8006782:	2000      	movs	r0, #0
 8006784:	bd70      	pop	{r4, r5, r6, pc}
	...

08006788 <USBD_CUSTOM_HID_Setup>:
{
 8006788:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800678a:	2386      	movs	r3, #134	; 0x86
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	58c4      	ldr	r4, [r0, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006790:	780a      	ldrb	r2, [r1, #0]
 8006792:	3bb9      	subs	r3, #185	; 0xb9
 8006794:	3bff      	subs	r3, #255	; 0xff
 8006796:	4013      	ands	r3, r2
 8006798:	d02d      	beq.n	80067f6 <USBD_CUSTOM_HID_Setup+0x6e>
 800679a:	2b20      	cmp	r3, #32
 800679c:	d15e      	bne.n	800685c <USBD_CUSTOM_HID_Setup+0xd4>
    switch (req->bRequest)
 800679e:	784b      	ldrb	r3, [r1, #1]
 80067a0:	2b0b      	cmp	r3, #11
 80067a2:	d824      	bhi.n	80067ee <USBD_CUSTOM_HID_Setup+0x66>
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <USBD_CUSTOM_HID_Setup+0xd8>)
 80067a8:	58d3      	ldr	r3, [r2, r3]
 80067aa:	469f      	mov	pc, r3
      hhid->Protocol = (uint8_t)(req->wValue);
 80067ac:	788b      	ldrb	r3, [r1, #2]
 80067ae:	6423      	str	r3, [r4, #64]	; 0x40
  return USBD_OK;
 80067b0:	2000      	movs	r0, #0
      break;
 80067b2:	e054      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->Protocol,
 80067b4:	0021      	movs	r1, r4
 80067b6:	3140      	adds	r1, #64	; 0x40
      USBD_CtlSendData (pdev, 
 80067b8:	2201      	movs	r2, #1
 80067ba:	f000 fcc1 	bl	8007140 <USBD_CtlSendData>
  return USBD_OK;
 80067be:	2000      	movs	r0, #0
      break;
 80067c0:	e04d      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80067c2:	884b      	ldrh	r3, [r1, #2]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	6463      	str	r3, [r4, #68]	; 0x44
  return USBD_OK;
 80067c8:	2000      	movs	r0, #0
      break;
 80067ca:	e048      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->IdleState,
 80067cc:	0021      	movs	r1, r4
 80067ce:	3144      	adds	r1, #68	; 0x44
      USBD_CtlSendData (pdev, 
 80067d0:	2201      	movs	r2, #1
 80067d2:	f000 fcb5 	bl	8007140 <USBD_CtlSendData>
  return USBD_OK;
 80067d6:	2000      	movs	r0, #0
      break;      
 80067d8:	e041      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IsReportAvailable = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	64e3      	str	r3, [r4, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 80067de:	88cb      	ldrh	r3, [r1, #6]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	401a      	ands	r2, r3
 80067e4:	0021      	movs	r1, r4
 80067e6:	f000 fcc1 	bl	800716c <USBD_CtlPrepareRx>
  return USBD_OK;
 80067ea:	2000      	movs	r0, #0
      break;
 80067ec:	e037      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
      USBD_CtlError (pdev, req);
 80067ee:	f000 fa16 	bl	8006c1e <USBD_CtlError>
      return USBD_FAIL; 
 80067f2:	2002      	movs	r0, #2
 80067f4:	e033      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
    switch (req->bRequest)
 80067f6:	784b      	ldrb	r3, [r1, #1]
 80067f8:	2b0a      	cmp	r3, #10
 80067fa:	d024      	beq.n	8006846 <USBD_CUSTOM_HID_Setup+0xbe>
 80067fc:	2b0b      	cmp	r3, #11
 80067fe:	d029      	beq.n	8006854 <USBD_CUSTOM_HID_Setup+0xcc>
 8006800:	2b06      	cmp	r3, #6
 8006802:	d001      	beq.n	8006808 <USBD_CUSTOM_HID_Setup+0x80>
  return USBD_OK;
 8006804:	2000      	movs	r0, #0
 8006806:	e02a      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006808:	884b      	ldrh	r3, [r1, #2]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	2b22      	cmp	r3, #34	; 0x22
 800680e:	d007      	beq.n	8006820 <USBD_CUSTOM_HID_Setup+0x98>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006810:	2b21      	cmp	r3, #33	; 0x21
 8006812:	d010      	beq.n	8006836 <USBD_CUSTOM_HID_Setup+0xae>
  uint8_t  *pbuf = NULL;
 8006814:	2100      	movs	r1, #0
  uint16_t len = 0;
 8006816:	2200      	movs	r2, #0
      USBD_CtlSendData (pdev, 
 8006818:	f000 fc92 	bl	8007140 <USBD_CtlSendData>
  return USBD_OK;
 800681c:	2000      	movs	r0, #0
      break;
 800681e:	e01e      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8006820:	88cb      	ldrh	r3, [r1, #6]
 8006822:	1c1a      	adds	r2, r3, #0
 8006824:	2b4a      	cmp	r3, #74	; 0x4a
 8006826:	d900      	bls.n	800682a <USBD_CUSTOM_HID_Setup+0xa2>
 8006828:	224a      	movs	r2, #74	; 0x4a
 800682a:	b292      	uxth	r2, r2
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800682c:	2387      	movs	r3, #135	; 0x87
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	58c3      	ldr	r3, [r0, r3]
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	e7f0      	b.n	8006818 <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8006836:	88cb      	ldrh	r3, [r1, #6]
 8006838:	1c1a      	adds	r2, r3, #0
 800683a:	2b09      	cmp	r3, #9
 800683c:	d900      	bls.n	8006840 <USBD_CUSTOM_HID_Setup+0xb8>
 800683e:	2209      	movs	r2, #9
 8006840:	b292      	uxth	r2, r2
        pbuf = USBD_CUSTOM_HID_Desc;   
 8006842:	4908      	ldr	r1, [pc, #32]	; (8006864 <USBD_CUSTOM_HID_Setup+0xdc>)
 8006844:	e7e8      	b.n	8006818 <USBD_CUSTOM_HID_Setup+0x90>
                        (uint8_t *)&hhid->AltSetting,
 8006846:	0021      	movs	r1, r4
 8006848:	3148      	adds	r1, #72	; 0x48
      USBD_CtlSendData (pdev,
 800684a:	2201      	movs	r2, #1
 800684c:	f000 fc78 	bl	8007140 <USBD_CtlSendData>
  return USBD_OK;
 8006850:	2000      	movs	r0, #0
      break;
 8006852:	e004      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8006854:	788b      	ldrb	r3, [r1, #2]
 8006856:	64a3      	str	r3, [r4, #72]	; 0x48
  return USBD_OK;
 8006858:	2000      	movs	r0, #0
      break;
 800685a:	e000      	b.n	800685e <USBD_CUSTOM_HID_Setup+0xd6>
  return USBD_OK;
 800685c:	2000      	movs	r0, #0
}
 800685e:	bd10      	pop	{r4, pc}
 8006860:	08008d60 	.word	0x08008d60
 8006864:	2000006c 	.word	0x2000006c

08006868 <USBD_CUSTOM_HID_DeInit>:
{
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev,
 800686c:	2181      	movs	r1, #129	; 0x81
 800686e:	f000 fe5e 	bl	800752e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8006872:	2101      	movs	r1, #1
 8006874:	0020      	movs	r0, r4
 8006876:	f000 fe5a 	bl	800752e <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800687a:	2386      	movs	r3, #134	; 0x86
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	58e3      	ldr	r3, [r4, r3]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006884:	2387      	movs	r3, #135	; 0x87
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	58e3      	ldr	r3, [r4, r3]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800688e:	2586      	movs	r5, #134	; 0x86
 8006890:	00ad      	lsls	r5, r5, #2
 8006892:	5960      	ldr	r0, [r4, r5]
 8006894:	f000 fea0 	bl	80075d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	5163      	str	r3, [r4, r5]
}
 800689c:	2000      	movs	r0, #0
 800689e:	bd70      	pop	{r4, r5, r6, pc}

080068a0 <USBD_CUSTOM_HID_Init>:
{
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 80068a4:	2302      	movs	r3, #2
 80068a6:	2203      	movs	r2, #3
 80068a8:	2181      	movs	r1, #129	; 0x81
 80068aa:	f000 fe34 	bl	8007516 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80068ae:	2302      	movs	r3, #2
 80068b0:	2203      	movs	r2, #3
 80068b2:	2101      	movs	r1, #1
 80068b4:	0020      	movs	r0, r4
 80068b6:	f000 fe2e 	bl	8007516 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80068ba:	2054      	movs	r0, #84	; 0x54
 80068bc:	f000 fe88 	bl	80075d0 <USBD_static_malloc>
 80068c0:	0005      	movs	r5, r0
 80068c2:	2386      	movs	r3, #134	; 0x86
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	50e0      	str	r0, [r4, r3]
  if(pdev->pClassData == NULL)
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d010      	beq.n	80068ee <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 80068cc:	2200      	movs	r2, #0
 80068ce:	3bc9      	subs	r3, #201	; 0xc9
 80068d0:	3bff      	subs	r3, #255	; 0xff
 80068d2:	54c2      	strb	r2, [r0, r3]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80068d4:	33cd      	adds	r3, #205	; 0xcd
 80068d6:	33ff      	adds	r3, #255	; 0xff
 80068d8:	58e3      	ldr	r3, [r4, r3]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	002a      	movs	r2, r5
 80068e2:	2101      	movs	r1, #1
 80068e4:	0020      	movs	r0, r4
 80068e6:	f000 fe69 	bl	80075bc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80068ea:	2000      	movs	r0, #0
}
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 80068ee:	2001      	movs	r0, #1
 80068f0:	e7fc      	b.n	80068ec <USBD_CUSTOM_HID_Init+0x4c>

080068f2 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d004      	beq.n	8006900 <USBD_CUSTOM_HID_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 80068f6:	2387      	movs	r3, #135	; 0x87
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 80068fc:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80068fe:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006900:	2002      	movs	r0, #2
 8006902:	e7fc      	b.n	80068fe <USBD_CUSTOM_HID_RegisterInterface+0xc>

08006904 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006904:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006906:	2800      	cmp	r0, #0
 8006908:	d016      	beq.n	8006938 <USBD_Init+0x34>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800690a:	2385      	movs	r3, #133	; 0x85
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	58c3      	ldr	r3, [r0, r3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 8006914:	2400      	movs	r4, #0
 8006916:	2385      	movs	r3, #133	; 0x85
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800691c:	2900      	cmp	r1, #0
 800691e:	d002      	beq.n	8006926 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8006920:	2384      	movs	r3, #132	; 0x84
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006926:	2101      	movs	r1, #1
 8006928:	23fe      	movs	r3, #254	; 0xfe
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 800692e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006930:	f000 fdae 	bl	8007490 <USBD_LL_Init>
  
  return USBD_OK; 
 8006934:	2000      	movs	r0, #0
}
 8006936:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8006938:	2002      	movs	r0, #2
 800693a:	e7fc      	b.n	8006936 <USBD_Init+0x32>

0800693c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800693c:	2900      	cmp	r1, #0
 800693e:	d004      	beq.n	800694a <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006940:	2385      	movs	r3, #133	; 0x85
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8006946:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8006948:	4770      	bx	lr
    status = USBD_FAIL; 
 800694a:	2002      	movs	r0, #2
 800694c:	e7fc      	b.n	8006948 <USBD_RegisterClass+0xc>

0800694e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800694e:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006950:	f000 fdd8 	bl	8007504 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8006954:	2000      	movs	r0, #0
 8006956:	bd10      	pop	{r4, pc}

08006958 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006958:	b510      	push	{r4, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800695a:	2385      	movs	r3, #133	; 0x85
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	58c3      	ldr	r3, [r0, r3]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4798      	blx	r3
 8006968:	2800      	cmp	r0, #0
 800696a:	d003      	beq.n	8006974 <USBD_SetClassConfig+0x1c>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800696c:	2002      	movs	r0, #2
 800696e:	e000      	b.n	8006972 <USBD_SetClassConfig+0x1a>
 8006970:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8006972:	bd10      	pop	{r4, pc}
      ret = USBD_OK;
 8006974:	2000      	movs	r0, #0
 8006976:	e7fc      	b.n	8006972 <USBD_SetClassConfig+0x1a>

08006978 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006978:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800697a:	2385      	movs	r3, #133	; 0x85
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	58c3      	ldr	r3, [r0, r3]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4798      	blx	r3
  return USBD_OK;
}
 8006984:	2000      	movs	r0, #0
 8006986:	bd10      	pop	{r4, pc}

08006988 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	0004      	movs	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800698c:	2382      	movs	r3, #130	; 0x82
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	18c5      	adds	r5, r0, r3
 8006992:	0028      	movs	r0, r5
 8006994:	f000 f92f 	bl	8006bf6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8006998:	2201      	movs	r2, #1
 800699a:	23fa      	movs	r3, #250	; 0xfa
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <USBD_LL_SetupStage+0x64>)
 80069a2:	5ae2      	ldrh	r2, [r4, r3]
 80069a4:	3b16      	subs	r3, #22
 80069a6:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 80069a8:	3310      	adds	r3, #16
 80069aa:	5ce1      	ldrb	r1, [r4, r3]
 80069ac:	3bea      	subs	r3, #234	; 0xea
 80069ae:	3bff      	subs	r3, #255	; 0xff
 80069b0:	400b      	ands	r3, r1
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d00f      	beq.n	80069d6 <USBD_LL_SetupStage+0x4e>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <USBD_LL_SetupStage+0x42>
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d010      	beq.n	80069e0 <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80069be:	237f      	movs	r3, #127	; 0x7f
 80069c0:	4399      	bics	r1, r3
 80069c2:	0020      	movs	r0, r4
 80069c4:	f000 fdbc 	bl	8007540 <USBD_LL_StallEP>
    break;
 80069c8:	e003      	b.n	80069d2 <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 80069ca:	0029      	movs	r1, r5
 80069cc:	0020      	movs	r0, r4
 80069ce:	f000 fabb 	bl	8006f48 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80069d2:	2000      	movs	r0, #0
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80069d6:	0029      	movs	r1, r5
 80069d8:	0020      	movs	r0, r4
 80069da:	f000 fad9 	bl	8006f90 <USBD_StdItfReq>
    break;
 80069de:	e7f8      	b.n	80069d2 <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 80069e0:	0029      	movs	r1, r5
 80069e2:	0020      	movs	r0, r4
 80069e4:	f000 faf2 	bl	8006fcc <USBD_StdEPReq>
    break;
 80069e8:	e7f3      	b.n	80069d2 <USBD_LL_SetupStage+0x4a>
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	0000020e 	.word	0x0000020e

080069f0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80069f0:	b510      	push	{r4, lr}
 80069f2:	0004      	movs	r4, r0
 80069f4:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80069f6:	2900      	cmp	r1, #0
 80069f8:	d128      	bne.n	8006a4c <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069fa:	22fa      	movs	r2, #250	; 0xfa
 80069fc:	0052      	lsls	r2, r2, #1
 80069fe:	5882      	ldr	r2, [r0, r2]
 8006a00:	2a03      	cmp	r2, #3
 8006a02:	d12e      	bne.n	8006a62 <USBD_LL_DataOutStage+0x72>
    {
      if(pep->rem_length > pep->maxpacket)
 8006a04:	1d42      	adds	r2, r0, #5
 8006a06:	32ff      	adds	r2, #255	; 0xff
 8006a08:	6891      	ldr	r1, [r2, #8]
 8006a0a:	68d2      	ldr	r2, [r2, #12]
 8006a0c:	4291      	cmp	r1, r2
 8006a0e:	d80e      	bhi.n	8006a2e <USBD_LL_DataOutStage+0x3e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006a10:	2385      	movs	r3, #133	; 0x85
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	58c3      	ldr	r3, [r0, r3]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <USBD_LL_DataOutStage+0x36>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a1c:	22fe      	movs	r2, #254	; 0xfe
 8006a1e:	0052      	lsls	r2, r2, #1
 8006a20:	5c82      	ldrb	r2, [r0, r2]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006a22:	2a03      	cmp	r2, #3
 8006a24:	d010      	beq.n	8006a48 <USBD_LL_DataOutStage+0x58>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8006a26:	0020      	movs	r0, r4
 8006a28:	f000 fbb8 	bl	800719c <USBD_CtlSendStatus>
 8006a2c:	e019      	b.n	8006a62 <USBD_LL_DataOutStage+0x72>
        pep->rem_length -=  pep->maxpacket;
 8006a2e:	1a89      	subs	r1, r1, r2
 8006a30:	3005      	adds	r0, #5
 8006a32:	30ff      	adds	r0, #255	; 0xff
 8006a34:	6081      	str	r1, [r0, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8006a36:	428a      	cmp	r2, r1
 8006a38:	d900      	bls.n	8006a3c <USBD_LL_DataOutStage+0x4c>
 8006a3a:	000a      	movs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8006a3c:	b292      	uxth	r2, r2
 8006a3e:	0019      	movs	r1, r3
 8006a40:	0020      	movs	r0, r4
 8006a42:	f000 fba3 	bl	800718c <USBD_CtlContinueRx>
 8006a46:	e00c      	b.n	8006a62 <USBD_LL_DataOutStage+0x72>
          pdev->pClass->EP0_RxReady(pdev); 
 8006a48:	4798      	blx	r3
 8006a4a:	e7ec      	b.n	8006a26 <USBD_LL_DataOutStage+0x36>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006a4c:	2385      	movs	r3, #133	; 0x85
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	58c3      	ldr	r3, [r0, r3]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <USBD_LL_DataOutStage+0x72>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a58:	22fe      	movs	r2, #254	; 0xfe
 8006a5a:	0052      	lsls	r2, r2, #1
 8006a5c:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataOut != NULL)&&
 8006a5e:	2a03      	cmp	r2, #3
 8006a60:	d001      	beq.n	8006a66 <USBD_LL_DataOutStage+0x76>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006a62:	2000      	movs	r0, #0
 8006a64:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8006a66:	4798      	blx	r3
 8006a68:	e7fb      	b.n	8006a62 <USBD_LL_DataOutStage+0x72>

08006a6a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8006a6a:	b570      	push	{r4, r5, r6, lr}
 8006a6c:	0004      	movs	r4, r0
 8006a6e:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d14f      	bne.n	8006b14 <USBD_LL_DataInStage+0xaa>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a74:	22fa      	movs	r2, #250	; 0xfa
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	5882      	ldr	r2, [r0, r2]
 8006a7a:	2a02      	cmp	r2, #2
 8006a7c:	d006      	beq.n	8006a8c <USBD_LL_DataInStage+0x22>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	5ce3      	ldrb	r3, [r4, r3]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d040      	beq.n	8006b0a <USBD_LL_DataInStage+0xa0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006a88:	2000      	movs	r0, #0
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8006a8c:	69c2      	ldr	r2, [r0, #28]
 8006a8e:	6a05      	ldr	r5, [r0, #32]
 8006a90:	42aa      	cmp	r2, r5
 8006a92:	d81c      	bhi.n	8006ace <USBD_LL_DataInStage+0x64>
        if((pep->total_length % pep->maxpacket == 0) &&
 8006a94:	6986      	ldr	r6, [r0, #24]
 8006a96:	0029      	movs	r1, r5
 8006a98:	0030      	movs	r0, r6
 8006a9a:	f7f9 fbc5 	bl	8000228 <__aeabi_uidivmod>
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	d106      	bne.n	8006ab0 <USBD_LL_DataInStage+0x46>
 8006aa2:	42b5      	cmp	r5, r6
 8006aa4:	d804      	bhi.n	8006ab0 <USBD_LL_DataInStage+0x46>
             (pep->total_length < pdev->ep0_data_len ))
 8006aa6:	23fc      	movs	r3, #252	; 0xfc
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	58e3      	ldr	r3, [r4, r3]
           (pep->total_length >= pep->maxpacket) &&
 8006aac:	429e      	cmp	r6, r3
 8006aae:	d31b      	bcc.n	8006ae8 <USBD_LL_DataInStage+0x7e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006ab0:	2385      	movs	r3, #133	; 0x85
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	58e3      	ldr	r3, [r4, r3]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006abc:	22fe      	movs	r2, #254	; 0xfe
 8006abe:	0052      	lsls	r2, r2, #1
 8006ac0:	5ca2      	ldrb	r2, [r4, r2]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006ac2:	2a03      	cmp	r2, #3
 8006ac4:	d01e      	beq.n	8006b04 <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 8006ac6:	0020      	movs	r0, r4
 8006ac8:	f000 fb74 	bl	80071b4 <USBD_CtlReceiveStatus>
 8006acc:	e7d7      	b.n	8006a7e <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 8006ace:	1b52      	subs	r2, r2, r5
 8006ad0:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	f000 fb41 	bl	800715c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f000 fd6b 	bl	80075bc <USBD_LL_PrepareReceive>
 8006ae6:	e7ca      	b.n	8006a7e <USBD_LL_DataInStage+0x14>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	0020      	movs	r0, r4
 8006aec:	f000 fb36 	bl	800715c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006af0:	2200      	movs	r2, #0
 8006af2:	23fc      	movs	r3, #252	; 0xfc
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	50e2      	str	r2, [r4, r3]
        USBD_LL_PrepareReceive (pdev,
 8006af8:	2300      	movs	r3, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	0020      	movs	r0, r4
 8006afe:	f000 fd5d 	bl	80075bc <USBD_LL_PrepareReceive>
 8006b02:	e7bc      	b.n	8006a7e <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev); 
 8006b04:	0020      	movs	r0, r4
 8006b06:	4798      	blx	r3
 8006b08:	e7dd      	b.n	8006ac6 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0;
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	54e2      	strb	r2, [r4, r3]
 8006b12:	e7b9      	b.n	8006a88 <USBD_LL_DataInStage+0x1e>
  else if((pdev->pClass->DataIn != NULL)&& 
 8006b14:	2385      	movs	r3, #133	; 0x85
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	58c3      	ldr	r3, [r0, r3]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0b3      	beq.n	8006a88 <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b20:	22fe      	movs	r2, #254	; 0xfe
 8006b22:	0052      	lsls	r2, r2, #1
 8006b24:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataIn != NULL)&& 
 8006b26:	2a03      	cmp	r2, #3
 8006b28:	d1ae      	bne.n	8006a88 <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 8006b2a:	4798      	blx	r3
 8006b2c:	e7ac      	b.n	8006a88 <USBD_LL_DataInStage+0x1e>

08006b2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006b2e:	b570      	push	{r4, r5, r6, lr}
 8006b30:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	f000 fced 	bl	8007516 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b3c:	2540      	movs	r5, #64	; 0x40
 8006b3e:	2388      	movs	r3, #136	; 0x88
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006b44:	3bd0      	subs	r3, #208	; 0xd0
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	f000 fce3 	bl	8007516 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b50:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b52:	2201      	movs	r2, #1
 8006b54:	23fe      	movs	r3, #254	; 0xfe
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 8006b5a:	331c      	adds	r3, #28
 8006b5c:	58e3      	ldr	r3, [r4, r3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006b62:	2385      	movs	r3, #133	; 0x85
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	58e3      	ldr	r3, [r4, r3]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	7921      	ldrb	r1, [r4, #4]
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8006b70:	2000      	movs	r0, #0
 8006b72:	bd70      	pop	{r4, r5, r6, pc}

08006b74 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006b74:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8006b76:	2000      	movs	r0, #0
 8006b78:	4770      	bx	lr

08006b7a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006b7a:	23fe      	movs	r3, #254	; 0xfe
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	5cc1      	ldrb	r1, [r0, r3]
 8006b80:	22fe      	movs	r2, #254	; 0xfe
 8006b82:	32ff      	adds	r2, #255	; 0xff
 8006b84:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b86:	3afa      	subs	r2, #250	; 0xfa
 8006b88:	3aff      	subs	r2, #255	; 0xff
 8006b8a:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4770      	bx	lr

08006b90 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8006b90:	23fe      	movs	r3, #254	; 0xfe
 8006b92:	33ff      	adds	r3, #255	; 0xff
 8006b94:	5cc2      	ldrb	r2, [r0, r3]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	4770      	bx	lr

08006b9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006b9e:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	23fe      	movs	r3, #254	; 0xfe
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	5cc3      	ldrb	r3, [r0, r3]
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d001      	beq.n	8006bae <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8006baa:	2000      	movs	r0, #0
 8006bac:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 8006bae:	2385      	movs	r3, #133	; 0x85
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	58c3      	ldr	r3, [r0, r3]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f7      	beq.n	8006baa <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8006bba:	4798      	blx	r3
 8006bbc:	e7f5      	b.n	8006baa <USBD_LL_SOF+0xc>

08006bbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bbe:	0003      	movs	r3, r0
    uint8_t  len = 0;
 8006bc0:	2000      	movs	r0, #0

    while (*buf != '\0') 
 8006bc2:	e002      	b.n	8006bca <USBD_GetLen+0xc>
    {
        len++;
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	b2c0      	uxtb	r0, r0
        buf++;
 8006bc8:	3301      	adds	r3, #1
    while (*buf != '\0') 
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	d1f9      	bne.n	8006bc4 <USBD_GetLen+0x6>
    }

    return len;
}
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_SetFeature>:
{
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	0004      	movs	r4, r0
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bd6:	884b      	ldrh	r3, [r1, #2]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d000      	beq.n	8006bde <USBD_SetFeature+0xc>
}
 8006bdc:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1;  
 8006bde:	2201      	movs	r2, #1
 8006be0:	2381      	movs	r3, #129	; 0x81
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	50c2      	str	r2, [r0, r3]
    pdev->pClass->Setup (pdev, req);   
 8006be6:	3310      	adds	r3, #16
 8006be8:	58c3      	ldr	r3, [r0, r3]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f000 fad4 	bl	800719c <USBD_CtlSendStatus>
}
 8006bf4:	e7f2      	b.n	8006bdc <USBD_SetFeature+0xa>

08006bf6 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006bf6:	780b      	ldrb	r3, [r1, #0]
 8006bf8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006bfa:	784b      	ldrb	r3, [r1, #1]
 8006bfc:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006bfe:	788b      	ldrb	r3, [r1, #2]
 8006c00:	78ca      	ldrb	r2, [r1, #3]
 8006c02:	0212      	lsls	r2, r2, #8
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006c08:	790b      	ldrb	r3, [r1, #4]
 8006c0a:	794a      	ldrb	r2, [r1, #5]
 8006c0c:	0212      	lsls	r2, r2, #8
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006c12:	798b      	ldrb	r3, [r1, #6]
 8006c14:	79ca      	ldrb	r2, [r1, #7]
 8006c16:	0212      	lsls	r2, r2, #8
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	80c3      	strh	r3, [r0, #6]
}
 8006c1c:	4770      	bx	lr

08006c1e <USBD_CtlError>:
{
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	f000 fc8c 	bl	8007540 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006c28:	2100      	movs	r1, #0
 8006c2a:	0020      	movs	r0, r4
 8006c2c:	f000 fc88 	bl	8007540 <USBD_LL_StallEP>
}
 8006c30:	bd10      	pop	{r4, pc}
	...

08006c34 <USBD_GetDescriptor>:
{
 8006c34:	b530      	push	{r4, r5, lr}
 8006c36:	b083      	sub	sp, #12
 8006c38:	0004      	movs	r4, r0
 8006c3a:	000d      	movs	r5, r1
  switch (req->wValue >> 8)
 8006c3c:	8849      	ldrh	r1, [r1, #2]
 8006c3e:	0a0b      	lsrs	r3, r1, #8
 8006c40:	2b07      	cmp	r3, #7
 8006c42:	d900      	bls.n	8006c46 <USBD_GetDescriptor+0x12>
 8006c44:	e092      	b.n	8006d6c <USBD_GetDescriptor+0x138>
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a51      	ldr	r2, [pc, #324]	; (8006d90 <USBD_GetDescriptor+0x15c>)
 8006c4a:	58d3      	ldr	r3, [r2, r3]
 8006c4c:	469f      	mov	pc, r3
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c4e:	2384      	movs	r3, #132	; 0x84
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	58c3      	ldr	r3, [r0, r3]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	7c00      	ldrb	r0, [r0, #16]
 8006c58:	466a      	mov	r2, sp
 8006c5a:	1d91      	adds	r1, r2, #6
 8006c5c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8006c5e:	466b      	mov	r3, sp
 8006c60:	3306      	adds	r3, #6
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <USBD_GetDescriptor+0x3c>
 8006c68:	88ea      	ldrh	r2, [r5, #6]
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d000      	beq.n	8006c70 <USBD_GetDescriptor+0x3c>
 8006c6e:	e082      	b.n	8006d76 <USBD_GetDescriptor+0x142>
}
 8006c70:	b003      	add	sp, #12
 8006c72:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006c74:	7c03      	ldrb	r3, [r0, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006c7a:	2385      	movs	r3, #133	; 0x85
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	58c3      	ldr	r3, [r0, r3]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	466a      	mov	r2, sp
 8006c84:	1d90      	adds	r0, r2, #6
 8006c86:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	7043      	strb	r3, [r0, #1]
 8006c8c:	e7e7      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c8e:	2385      	movs	r3, #133	; 0x85
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	58c3      	ldr	r3, [r0, r3]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	466a      	mov	r2, sp
 8006c98:	1d90      	adds	r0, r2, #6
 8006c9a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	7043      	strb	r3, [r0, #1]
 8006ca0:	e7dd      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
    switch ((uint8_t)(req->wValue))
 8006ca2:	b2c9      	uxtb	r1, r1
 8006ca4:	2905      	cmp	r1, #5
 8006ca6:	d839      	bhi.n	8006d1c <USBD_GetDescriptor+0xe8>
 8006ca8:	0089      	lsls	r1, r1, #2
 8006caa:	4b3a      	ldr	r3, [pc, #232]	; (8006d94 <USBD_GetDescriptor+0x160>)
 8006cac:	585b      	ldr	r3, [r3, r1]
 8006cae:	469f      	mov	pc, r3
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006cb0:	2384      	movs	r3, #132	; 0x84
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	58c3      	ldr	r3, [r0, r3]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	7c00      	ldrb	r0, [r0, #16]
 8006cba:	466a      	mov	r2, sp
 8006cbc:	1d91      	adds	r1, r2, #6
 8006cbe:	4798      	blx	r3
      break;
 8006cc0:	e7cd      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cc2:	2384      	movs	r3, #132	; 0x84
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	58c3      	ldr	r3, [r0, r3]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	7c00      	ldrb	r0, [r0, #16]
 8006ccc:	466a      	mov	r2, sp
 8006cce:	1d91      	adds	r1, r2, #6
 8006cd0:	4798      	blx	r3
      break;
 8006cd2:	e7c4      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd4:	2384      	movs	r3, #132	; 0x84
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	58c3      	ldr	r3, [r0, r3]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	7c00      	ldrb	r0, [r0, #16]
 8006cde:	466a      	mov	r2, sp
 8006ce0:	1d91      	adds	r1, r2, #6
 8006ce2:	4798      	blx	r3
      break;
 8006ce4:	e7bb      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ce6:	2384      	movs	r3, #132	; 0x84
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	58c3      	ldr	r3, [r0, r3]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	7c00      	ldrb	r0, [r0, #16]
 8006cf0:	466a      	mov	r2, sp
 8006cf2:	1d91      	adds	r1, r2, #6
 8006cf4:	4798      	blx	r3
      break;
 8006cf6:	e7b2      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	2384      	movs	r3, #132	; 0x84
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	58c3      	ldr	r3, [r0, r3]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	7c00      	ldrb	r0, [r0, #16]
 8006d02:	466a      	mov	r2, sp
 8006d04:	1d91      	adds	r1, r2, #6
 8006d06:	4798      	blx	r3
      break;
 8006d08:	e7a9      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d0a:	2384      	movs	r3, #132	; 0x84
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	58c3      	ldr	r3, [r0, r3]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	7c00      	ldrb	r0, [r0, #16]
 8006d14:	466a      	mov	r2, sp
 8006d16:	1d91      	adds	r1, r2, #6
 8006d18:	4798      	blx	r3
      break;
 8006d1a:	e7a0      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8006d1c:	2385      	movs	r3, #133	; 0x85
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	58c3      	ldr	r3, [r0, r3]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	466a      	mov	r2, sp
 8006d26:	3206      	adds	r2, #6
 8006d28:	4798      	blx	r3
      break;
 8006d2a:	e798      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006d2c:	7c03      	ldrb	r3, [r0, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d32:	2385      	movs	r3, #133	; 0x85
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	58c3      	ldr	r3, [r0, r3]
 8006d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3a:	466a      	mov	r2, sp
 8006d3c:	1d90      	adds	r0, r2, #6
 8006d3e:	4798      	blx	r3
      break;
 8006d40:	e78d      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8006d42:	0029      	movs	r1, r5
 8006d44:	f7ff ff6b 	bl	8006c1e <USBD_CtlError>
      return;
 8006d48:	e792      	b.n	8006c70 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006d4a:	7c03      	ldrb	r3, [r0, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <USBD_GetDescriptor+0x130>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d50:	2385      	movs	r3, #133	; 0x85
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	58c3      	ldr	r3, [r0, r3]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	466a      	mov	r2, sp
 8006d5a:	1d90      	adds	r0, r2, #6
 8006d5c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d5e:	2307      	movs	r3, #7
 8006d60:	7043      	strb	r3, [r0, #1]
      break; 
 8006d62:	e77c      	b.n	8006c5e <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8006d64:	0029      	movs	r1, r5
 8006d66:	f7ff ff5a 	bl	8006c1e <USBD_CtlError>
      return;
 8006d6a:	e781      	b.n	8006c70 <USBD_GetDescriptor+0x3c>
     USBD_CtlError(pdev , req);
 8006d6c:	0029      	movs	r1, r5
 8006d6e:	0020      	movs	r0, r4
 8006d70:	f7ff ff55 	bl	8006c1e <USBD_CtlError>
    return;
 8006d74:	e77c      	b.n	8006c70 <USBD_GetDescriptor+0x3c>
    len = MIN(len , req->wLength);
 8006d76:	1c19      	adds	r1, r3, #0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d900      	bls.n	8006d7e <USBD_GetDescriptor+0x14a>
 8006d7c:	1c11      	adds	r1, r2, #0
 8006d7e:	b28a      	uxth	r2, r1
 8006d80:	466b      	mov	r3, sp
 8006d82:	80d9      	strh	r1, [r3, #6]
    USBD_CtlSendData (pdev, 
 8006d84:	0001      	movs	r1, r0
 8006d86:	0020      	movs	r0, r4
 8006d88:	f000 f9da 	bl	8007140 <USBD_CtlSendData>
 8006d8c:	e770      	b.n	8006c70 <USBD_GetDescriptor+0x3c>
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	08008d90 	.word	0x08008d90
 8006d94:	08008db0 	.word	0x08008db0

08006d98 <USBD_SetAddress>:
{
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	0004      	movs	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006d9c:	888b      	ldrh	r3, [r1, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d122      	bne.n	8006de8 <USBD_SetAddress+0x50>
 8006da2:	88cb      	ldrh	r3, [r1, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11f      	bne.n	8006de8 <USBD_SetAddress+0x50>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006da8:	788b      	ldrb	r3, [r1, #2]
 8006daa:	257f      	movs	r5, #127	; 0x7f
 8006dac:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006dae:	23fe      	movs	r3, #254	; 0xfe
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	5cc3      	ldrb	r3, [r0, r3]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d00f      	beq.n	8006dd8 <USBD_SetAddress+0x40>
      pdev->dev_address = dev_addr;
 8006db8:	23ff      	movs	r3, #255	; 0xff
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006dbe:	0029      	movs	r1, r5
 8006dc0:	f000 fbea 	bl	8007598 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006dc4:	0020      	movs	r0, r4
 8006dc6:	f000 f9e9 	bl	800719c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	d007      	beq.n	8006dde <USBD_SetAddress+0x46>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006dce:	2202      	movs	r2, #2
 8006dd0:	23fe      	movs	r3, #254	; 0xfe
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	54e2      	strb	r2, [r4, r3]
 8006dd6:	e00a      	b.n	8006dee <USBD_SetAddress+0x56>
      USBD_CtlError(pdev , req);
 8006dd8:	f7ff ff21 	bl	8006c1e <USBD_CtlError>
 8006ddc:	e007      	b.n	8006dee <USBD_SetAddress+0x56>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006dde:	2201      	movs	r2, #1
 8006de0:	23fe      	movs	r3, #254	; 0xfe
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	54e2      	strb	r2, [r4, r3]
 8006de6:	e002      	b.n	8006dee <USBD_SetAddress+0x56>
     USBD_CtlError(pdev , req);                        
 8006de8:	0020      	movs	r0, r4
 8006dea:	f7ff ff18 	bl	8006c1e <USBD_CtlError>
}
 8006dee:	bd70      	pop	{r4, r5, r6, pc}

08006df0 <USBD_SetConfig>:
{
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	0004      	movs	r4, r0
 8006df4:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8006df6:	7889      	ldrb	r1, [r1, #2]
 8006df8:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <USBD_SetConfig+0xac>)
 8006dfa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006dfc:	2901      	cmp	r1, #1
 8006dfe:	d80a      	bhi.n	8006e16 <USBD_SetConfig+0x26>
    switch (pdev->dev_state) 
 8006e00:	23fe      	movs	r3, #254	; 0xfe
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	5cc3      	ldrb	r3, [r0, r3]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d009      	beq.n	8006e1e <USBD_SetConfig+0x2e>
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d01e      	beq.n	8006e4c <USBD_SetConfig+0x5c>
       USBD_CtlError(pdev , req);                     
 8006e0e:	0029      	movs	r1, r5
 8006e10:	f7ff ff05 	bl	8006c1e <USBD_CtlError>
      break;
 8006e14:	e002      	b.n	8006e1c <USBD_SetConfig+0x2c>
     USBD_CtlError(pdev , req);                              
 8006e16:	0029      	movs	r1, r5
 8006e18:	f7ff ff01 	bl	8006c1e <USBD_CtlError>
}
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
      if (cfgidx) 
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d011      	beq.n	8006e46 <USBD_SetConfig+0x56>
        pdev->dev_config = cfgidx;
 8006e22:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e24:	2203      	movs	r2, #3
 8006e26:	23fe      	movs	r3, #254	; 0xfe
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	54c2      	strb	r2, [r0, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006e2c:	f7ff fd94 	bl	8006958 <USBD_SetClassConfig>
 8006e30:	2802      	cmp	r0, #2
 8006e32:	d003      	beq.n	8006e3c <USBD_SetConfig+0x4c>
        USBD_CtlSendStatus(pdev);
 8006e34:	0020      	movs	r0, r4
 8006e36:	f000 f9b1 	bl	800719c <USBD_CtlSendStatus>
 8006e3a:	e7ef      	b.n	8006e1c <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8006e3c:	0029      	movs	r1, r5
 8006e3e:	0020      	movs	r0, r4
 8006e40:	f7ff feed 	bl	8006c1e <USBD_CtlError>
          return;
 8006e44:	e7ea      	b.n	8006e1c <USBD_SetConfig+0x2c>
         USBD_CtlSendStatus(pdev);
 8006e46:	f000 f9a9 	bl	800719c <USBD_CtlSendStatus>
 8006e4a:	e7e7      	b.n	8006e1c <USBD_SetConfig+0x2c>
      if (cfgidx == 0) 
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d011      	beq.n	8006e74 <USBD_SetConfig+0x84>
      else  if (cfgidx != pdev->dev_config) 
 8006e50:	6843      	ldr	r3, [r0, #4]
 8006e52:	4299      	cmp	r1, r3
 8006e54:	d01e      	beq.n	8006e94 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006e56:	b2d9      	uxtb	r1, r3
 8006e58:	f7ff fd8e 	bl	8006978 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <USBD_SetConfig+0xac>)
 8006e5e:	7819      	ldrb	r1, [r3, #0]
 8006e60:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006e62:	0020      	movs	r0, r4
 8006e64:	f7ff fd78 	bl	8006958 <USBD_SetClassConfig>
 8006e68:	2802      	cmp	r0, #2
 8006e6a:	d00e      	beq.n	8006e8a <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 8006e6c:	0020      	movs	r0, r4
 8006e6e:	f000 f995 	bl	800719c <USBD_CtlSendStatus>
 8006e72:	e7d3      	b.n	8006e1c <USBD_SetConfig+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e74:	2202      	movs	r2, #2
 8006e76:	23fe      	movs	r3, #254	; 0xfe
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	54c2      	strb	r2, [r0, r3]
        pdev->dev_config = cfgidx;          
 8006e7c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8006e7e:	f7ff fd7b 	bl	8006978 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006e82:	0020      	movs	r0, r4
 8006e84:	f000 f98a 	bl	800719c <USBD_CtlSendStatus>
 8006e88:	e7c8      	b.n	8006e1c <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8006e8a:	0029      	movs	r1, r5
 8006e8c:	0020      	movs	r0, r4
 8006e8e:	f7ff fec6 	bl	8006c1e <USBD_CtlError>
          return;
 8006e92:	e7c3      	b.n	8006e1c <USBD_SetConfig+0x2c>
        USBD_CtlSendStatus(pdev);
 8006e94:	f000 f982 	bl	800719c <USBD_CtlSendStatus>
 8006e98:	e7c0      	b.n	8006e1c <USBD_SetConfig+0x2c>
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	200001b4 	.word	0x200001b4

08006ea0 <USBD_GetConfig>:
{
 8006ea0:	b510      	push	{r4, lr}
  if (req->wLength != 1) 
 8006ea2:	88cb      	ldrh	r3, [r1, #6]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d109      	bne.n	8006ebc <USBD_GetConfig+0x1c>
    switch (pdev->dev_state )  
 8006ea8:	23fe      	movs	r3, #254	; 0xfe
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	5cc3      	ldrb	r3, [r0, r3]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d007      	beq.n	8006ec2 <USBD_GetConfig+0x22>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d00d      	beq.n	8006ed2 <USBD_GetConfig+0x32>
       USBD_CtlError(pdev , req);
 8006eb6:	f7ff feb2 	bl	8006c1e <USBD_CtlError>
}
 8006eba:	e001      	b.n	8006ec0 <USBD_GetConfig+0x20>
     USBD_CtlError(pdev , req);
 8006ebc:	f7ff feaf 	bl	8006c1e <USBD_CtlError>
}
 8006ec0:	bd10      	pop	{r4, pc}
      pdev->dev_default_config = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006ec6:	0001      	movs	r1, r0
 8006ec8:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f000 f938 	bl	8007140 <USBD_CtlSendData>
      break;
 8006ed0:	e7f6      	b.n	8006ec0 <USBD_GetConfig+0x20>
                        (uint8_t *)&pdev->dev_config,
 8006ed2:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f000 f933 	bl	8007140 <USBD_CtlSendData>
      break;
 8006eda:	e7f1      	b.n	8006ec0 <USBD_GetConfig+0x20>

08006edc <USBD_GetStatus>:
{
 8006edc:	b510      	push	{r4, lr}
  switch (pdev->dev_state) 
 8006ede:	23fe      	movs	r3, #254	; 0xfe
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	5cc3      	ldrb	r3, [r0, r3]
 8006ee4:	3b02      	subs	r3, #2
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d80e      	bhi.n	8006f0a <USBD_GetStatus+0x2e>
    pdev->dev_config_status = 0;                                   
 8006eec:	2300      	movs	r3, #0
 8006eee:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8006ef0:	2381      	movs	r3, #129	; 0x81
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	58c3      	ldr	r3, [r0, r3]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <USBD_GetStatus+0x22>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006efa:	2302      	movs	r3, #2
 8006efc:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 8006efe:	0001      	movs	r1, r0
 8006f00:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 8006f02:	2202      	movs	r2, #2
 8006f04:	f000 f91c 	bl	8007140 <USBD_CtlSendData>
}
 8006f08:	bd10      	pop	{r4, pc}
    USBD_CtlError(pdev , req);                        
 8006f0a:	f7ff fe88 	bl	8006c1e <USBD_CtlError>
}
 8006f0e:	e7fb      	b.n	8006f08 <USBD_GetStatus+0x2c>

08006f10 <USBD_ClrFeature>:
{
 8006f10:	b510      	push	{r4, lr}
 8006f12:	0004      	movs	r4, r0
  switch (pdev->dev_state)
 8006f14:	23fe      	movs	r3, #254	; 0xfe
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	5cc3      	ldrb	r3, [r0, r3]
 8006f1a:	3b02      	subs	r3, #2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d80f      	bhi.n	8006f42 <USBD_ClrFeature+0x32>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006f22:	884b      	ldrh	r3, [r1, #2]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d000      	beq.n	8006f2a <USBD_ClrFeature+0x1a>
}
 8006f28:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2381      	movs	r3, #129	; 0x81
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 8006f32:	3310      	adds	r3, #16
 8006f34:	58c3      	ldr	r3, [r0, r3]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006f3a:	0020      	movs	r0, r4
 8006f3c:	f000 f92e 	bl	800719c <USBD_CtlSendStatus>
 8006f40:	e7f2      	b.n	8006f28 <USBD_ClrFeature+0x18>
     USBD_CtlError(pdev , req);
 8006f42:	f7ff fe6c 	bl	8006c1e <USBD_CtlError>
}
 8006f46:	e7ef      	b.n	8006f28 <USBD_ClrFeature+0x18>

08006f48 <USBD_StdDevReq>:
{
 8006f48:	b510      	push	{r4, lr}
  switch (req->bRequest) 
 8006f4a:	784b      	ldrb	r3, [r1, #1]
 8006f4c:	2b09      	cmp	r3, #9
 8006f4e:	d819      	bhi.n	8006f84 <USBD_StdDevReq+0x3c>
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <USBD_StdDevReq+0x44>)
 8006f54:	58d3      	ldr	r3, [r2, r3]
 8006f56:	469f      	mov	pc, r3
    USBD_GetDescriptor (pdev, req) ;
 8006f58:	f7ff fe6c 	bl	8006c34 <USBD_GetDescriptor>
}
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	bd10      	pop	{r4, pc}
    USBD_SetAddress(pdev, req);
 8006f60:	f7ff ff1a 	bl	8006d98 <USBD_SetAddress>
    break;
 8006f64:	e7fa      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_SetConfig (pdev , req);
 8006f66:	f7ff ff43 	bl	8006df0 <USBD_SetConfig>
    break;
 8006f6a:	e7f7      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_GetConfig (pdev , req);
 8006f6c:	f7ff ff98 	bl	8006ea0 <USBD_GetConfig>
    break;
 8006f70:	e7f4      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_GetStatus (pdev , req);
 8006f72:	f7ff ffb3 	bl	8006edc <USBD_GetStatus>
    break;
 8006f76:	e7f1      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_SetFeature (pdev , req);    
 8006f78:	f7ff fe2b 	bl	8006bd2 <USBD_SetFeature>
    break;
 8006f7c:	e7ee      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_ClrFeature (pdev , req);
 8006f7e:	f7ff ffc7 	bl	8006f10 <USBD_ClrFeature>
    break;
 8006f82:	e7eb      	b.n	8006f5c <USBD_StdDevReq+0x14>
    USBD_CtlError(pdev , req);
 8006f84:	f7ff fe4b 	bl	8006c1e <USBD_CtlError>
    break;
 8006f88:	e7e8      	b.n	8006f5c <USBD_StdDevReq+0x14>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	08008dc8 	.word	0x08008dc8

08006f90 <USBD_StdItfReq>:
{
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	0004      	movs	r4, r0
 8006f94:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8006f96:	23fe      	movs	r3, #254	; 0xfe
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	5cc3      	ldrb	r3, [r0, r3]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d112      	bne.n	8006fc6 <USBD_StdItfReq+0x36>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006fa0:	790b      	ldrb	r3, [r1, #4]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d903      	bls.n	8006fae <USBD_StdItfReq+0x1e>
       USBD_CtlError(pdev , req);
 8006fa6:	f7ff fe3a 	bl	8006c1e <USBD_CtlError>
}
 8006faa:	2000      	movs	r0, #0
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup (pdev, req); 
 8006fae:	2385      	movs	r3, #133	; 0x85
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	58c3      	ldr	r3, [r0, r3]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006fb8:	88eb      	ldrh	r3, [r5, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f5      	bne.n	8006faa <USBD_StdItfReq+0x1a>
         USBD_CtlSendStatus(pdev);
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	f000 f8ec 	bl	800719c <USBD_CtlSendStatus>
 8006fc4:	e7f1      	b.n	8006faa <USBD_StdItfReq+0x1a>
     USBD_CtlError(pdev , req);
 8006fc6:	f7ff fe2a 	bl	8006c1e <USBD_CtlError>
    break;
 8006fca:	e7ee      	b.n	8006faa <USBD_StdItfReq+0x1a>

08006fcc <USBD_StdEPReq>:
{
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	0005      	movs	r5, r0
 8006fd0:	000c      	movs	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8006fd2:	888a      	ldrh	r2, [r1, #4]
 8006fd4:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 8006fd6:	7820      	ldrb	r0, [r4, #0]
 8006fd8:	2360      	movs	r3, #96	; 0x60
 8006fda:	4003      	ands	r3, r0
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d012      	beq.n	8007006 <USBD_StdEPReq+0x3a>
  switch (req->bRequest) 
 8006fe0:	7863      	ldrb	r3, [r4, #1]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d035      	beq.n	8007052 <USBD_StdEPReq+0x86>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d05b      	beq.n	80070a2 <USBD_StdEPReq+0xd6>
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d112      	bne.n	8007014 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 8006fee:	33fa      	adds	r3, #250	; 0xfa
 8006ff0:	33ff      	adds	r3, #255	; 0xff
 8006ff2:	5ceb      	ldrb	r3, [r5, r3]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d00f      	beq.n	8007018 <USBD_StdEPReq+0x4c>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d015      	beq.n	8007028 <USBD_StdEPReq+0x5c>
      USBD_CtlError(pdev , req);
 8006ffc:	0021      	movs	r1, r4
 8006ffe:	0028      	movs	r0, r5
 8007000:	f7ff fe0d 	bl	8006c1e <USBD_CtlError>
      break;    
 8007004:	e006      	b.n	8007014 <USBD_StdEPReq+0x48>
    pdev->pClass->Setup (pdev, req);
 8007006:	33f5      	adds	r3, #245	; 0xf5
 8007008:	33ff      	adds	r3, #255	; 0xff
 800700a:	58eb      	ldr	r3, [r5, r3]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0021      	movs	r1, r4
 8007010:	0028      	movs	r0, r5
 8007012:	4798      	blx	r3
}
 8007014:	2000      	movs	r0, #0
 8007016:	bd70      	pop	{r4, r5, r6, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007018:	2900      	cmp	r1, #0
 800701a:	d0fb      	beq.n	8007014 <USBD_StdEPReq+0x48>
 800701c:	2980      	cmp	r1, #128	; 0x80
 800701e:	d0f9      	beq.n	8007014 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8007020:	0028      	movs	r0, r5
 8007022:	f000 fa8d 	bl	8007540 <USBD_LL_StallEP>
 8007026:	e7f5      	b.n	8007014 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007028:	8863      	ldrh	r3, [r4, #2]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <USBD_StdEPReq+0x70>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800702e:	2900      	cmp	r1, #0
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x70>
 8007032:	2980      	cmp	r1, #128	; 0x80
 8007034:	d002      	beq.n	800703c <USBD_StdEPReq+0x70>
          USBD_LL_StallEP(pdev , ep_addr);
 8007036:	0028      	movs	r0, r5
 8007038:	f000 fa82 	bl	8007540 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800703c:	2385      	movs	r3, #133	; 0x85
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	58eb      	ldr	r3, [r5, r3]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	0021      	movs	r1, r4
 8007046:	0028      	movs	r0, r5
 8007048:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800704a:	0028      	movs	r0, r5
 800704c:	f000 f8a6 	bl	800719c <USBD_CtlSendStatus>
      break;
 8007050:	e7e0      	b.n	8007014 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 8007052:	23fe      	movs	r3, #254	; 0xfe
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	5ceb      	ldrb	r3, [r5, r3]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d006      	beq.n	800706a <USBD_StdEPReq+0x9e>
 800705c:	2b03      	cmp	r3, #3
 800705e:	d00c      	beq.n	800707a <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 8007060:	0021      	movs	r1, r4
 8007062:	0028      	movs	r0, r5
 8007064:	f7ff fddb 	bl	8006c1e <USBD_CtlError>
      break;    
 8007068:	e7d4      	b.n	8007014 <USBD_StdEPReq+0x48>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800706a:	2900      	cmp	r1, #0
 800706c:	d0d2      	beq.n	8007014 <USBD_StdEPReq+0x48>
 800706e:	2980      	cmp	r1, #128	; 0x80
 8007070:	d0d0      	beq.n	8007014 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 8007072:	0028      	movs	r0, r5
 8007074:	f000 fa64 	bl	8007540 <USBD_LL_StallEP>
 8007078:	e7cc      	b.n	8007014 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800707a:	8863      	ldrh	r3, [r4, #2]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1c9      	bne.n	8007014 <USBD_StdEPReq+0x48>
        if ((ep_addr & 0x7F) != 0x00) 
 8007080:	064b      	lsls	r3, r1, #25
 8007082:	d103      	bne.n	800708c <USBD_StdEPReq+0xc0>
        USBD_CtlSendStatus(pdev);
 8007084:	0028      	movs	r0, r5
 8007086:	f000 f889 	bl	800719c <USBD_CtlSendStatus>
 800708a:	e7c3      	b.n	8007014 <USBD_StdEPReq+0x48>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800708c:	0028      	movs	r0, r5
 800708e:	f000 fa60 	bl	8007552 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007092:	2385      	movs	r3, #133	; 0x85
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	58eb      	ldr	r3, [r5, r3]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	0021      	movs	r1, r4
 800709c:	0028      	movs	r0, r5
 800709e:	4798      	blx	r3
 80070a0:	e7f0      	b.n	8007084 <USBD_StdEPReq+0xb8>
    switch (pdev->dev_state) 
 80070a2:	23fe      	movs	r3, #254	; 0xfe
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	5ceb      	ldrb	r3, [r5, r3]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d006      	beq.n	80070ba <USBD_StdEPReq+0xee>
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d00a      	beq.n	80070c6 <USBD_StdEPReq+0xfa>
      USBD_CtlError(pdev , req);
 80070b0:	0021      	movs	r1, r4
 80070b2:	0028      	movs	r0, r5
 80070b4:	f7ff fdb3 	bl	8006c1e <USBD_CtlError>
      break;
 80070b8:	e7ac      	b.n	8007014 <USBD_StdEPReq+0x48>
      if ((ep_addr & 0x7F) != 0x00) 
 80070ba:	064b      	lsls	r3, r1, #25
 80070bc:	d0aa      	beq.n	8007014 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 80070be:	0028      	movs	r0, r5
 80070c0:	f000 fa3e 	bl	8007540 <USBD_LL_StallEP>
 80070c4:	e7a6      	b.n	8007014 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80070c6:	0613      	lsls	r3, r2, #24
 80070c8:	d412      	bmi.n	80070f0 <USBD_StdEPReq+0x124>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80070ca:	247f      	movs	r4, #127	; 0x7f
 80070cc:	400c      	ands	r4, r1
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80070ce:	3410      	adds	r4, #16
 80070d0:	0124      	lsls	r4, r4, #4
 80070d2:	192c      	adds	r4, r5, r4
 80070d4:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80070d6:	0028      	movs	r0, r5
 80070d8:	f000 fa44 	bl	8007564 <USBD_LL_IsStallEP>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d00e      	beq.n	80070fe <USBD_StdEPReq+0x132>
        pep->status = 0x0001;     
 80070e0:	2301      	movs	r3, #1
 80070e2:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80070e4:	2202      	movs	r2, #2
 80070e6:	0021      	movs	r1, r4
 80070e8:	0028      	movs	r0, r5
 80070ea:	f000 f829 	bl	8007140 <USBD_CtlSendData>
      break;
 80070ee:	e791      	b.n	8007014 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80070f0:	247f      	movs	r4, #127	; 0x7f
 80070f2:	400c      	ands	r4, r1
 80070f4:	3401      	adds	r4, #1
 80070f6:	0124      	lsls	r4, r4, #4
 80070f8:	192c      	adds	r4, r5, r4
 80070fa:	3404      	adds	r4, #4
 80070fc:	e7eb      	b.n	80070d6 <USBD_StdEPReq+0x10a>
        pep->status = 0x0000;  
 80070fe:	2300      	movs	r3, #0
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	e7ef      	b.n	80070e4 <USBD_StdEPReq+0x118>

08007104 <USBD_GetString>:
{
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	0004      	movs	r4, r0
 8007108:	000d      	movs	r5, r1
 800710a:	0016      	movs	r6, r2
  if (desc != NULL) 
 800710c:	2800      	cmp	r0, #0
 800710e:	d016      	beq.n	800713e <USBD_GetString+0x3a>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007110:	f7ff fd55 	bl	8006bbe <USBD_GetLen>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	b29b      	uxth	r3, r3
 800711a:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *len;
 800711c:	702b      	strb	r3, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800711e:	2303      	movs	r3, #3
 8007120:	706b      	strb	r3, [r5, #1]
 8007122:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 8007124:	e008      	b.n	8007138 <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	3401      	adds	r4, #1
 800712c:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 800712e:	3302      	adds	r3, #2
 8007130:	b2db      	uxtb	r3, r3
 8007132:	18aa      	adds	r2, r5, r2
 8007134:	2100      	movs	r1, #0
 8007136:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0') 
 8007138:	7821      	ldrb	r1, [r4, #0]
 800713a:	2900      	cmp	r1, #0
 800713c:	d1f3      	bne.n	8007126 <USBD_GetString+0x22>
}
 800713e:	bd70      	pop	{r4, r5, r6, pc}

08007140 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007140:	b510      	push	{r4, lr}
 8007142:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007144:	2402      	movs	r4, #2
 8007146:	22fa      	movs	r2, #250	; 0xfa
 8007148:	0052      	lsls	r2, r2, #1
 800714a:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 800714c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800714e:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007150:	000a      	movs	r2, r1
 8007152:	2100      	movs	r1, #0
 8007154:	f000 fa29 	bl	80075aa <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007158:	2000      	movs	r0, #0
 800715a:	bd10      	pop	{r4, pc}

0800715c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800715c:	b510      	push	{r4, lr}
 800715e:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007160:	000a      	movs	r2, r1
 8007162:	2100      	movs	r1, #0
 8007164:	f000 fa21 	bl	80075aa <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007168:	2000      	movs	r0, #0
 800716a:	bd10      	pop	{r4, pc}

0800716c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800716c:	b510      	push	{r4, lr}
 800716e:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007170:	2403      	movs	r4, #3
 8007172:	22fa      	movs	r2, #250	; 0xfa
 8007174:	0052      	lsls	r2, r2, #1
 8007176:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8007178:	3aec      	subs	r2, #236	; 0xec
 800717a:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 800717c:	3204      	adds	r2, #4
 800717e:	5083      	str	r3, [r0, r2]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007180:	000a      	movs	r2, r1
 8007182:	2100      	movs	r1, #0
 8007184:	f000 fa1a 	bl	80075bc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8007188:	2000      	movs	r0, #0
 800718a:	bd10      	pop	{r4, pc}

0800718c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800718c:	b510      	push	{r4, lr}
 800718e:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8007190:	000a      	movs	r2, r1
 8007192:	2100      	movs	r1, #0
 8007194:	f000 fa12 	bl	80075bc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007198:	2000      	movs	r0, #0
 800719a:	bd10      	pop	{r4, pc}

0800719c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800719c:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800719e:	2204      	movs	r2, #4
 80071a0:	23fa      	movs	r3, #250	; 0xfa
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80071a6:	2300      	movs	r3, #0
 80071a8:	2200      	movs	r2, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	f000 f9fd 	bl	80075aa <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	bd10      	pop	{r4, pc}

080071b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80071b4:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80071b6:	2205      	movs	r2, #5
 80071b8:	23fa      	movs	r3, #250	; 0xfa
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80071be:	2300      	movs	r3, #0
 80071c0:	2200      	movs	r2, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	f000 f9fa 	bl	80075bc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80071c8:	2000      	movs	r0, #0
 80071ca:	bd10      	pop	{r4, pc}

080071cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071ce:	2200      	movs	r2, #0
 80071d0:	4911      	ldr	r1, [pc, #68]	; (8007218 <MX_USB_DEVICE_Init+0x4c>)
 80071d2:	4812      	ldr	r0, [pc, #72]	; (800721c <MX_USB_DEVICE_Init+0x50>)
 80071d4:	f7ff fb96 	bl	8006904 <USBD_Init>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d111      	bne.n	8007200 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80071dc:	4910      	ldr	r1, [pc, #64]	; (8007220 <MX_USB_DEVICE_Init+0x54>)
 80071de:	480f      	ldr	r0, [pc, #60]	; (800721c <MX_USB_DEVICE_Init+0x50>)
 80071e0:	f7ff fbac 	bl	800693c <USBD_RegisterClass>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d10e      	bne.n	8007206 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80071e8:	490e      	ldr	r1, [pc, #56]	; (8007224 <MX_USB_DEVICE_Init+0x58>)
 80071ea:	480c      	ldr	r0, [pc, #48]	; (800721c <MX_USB_DEVICE_Init+0x50>)
 80071ec:	f7ff fb81 	bl	80068f2 <USBD_CUSTOM_HID_RegisterInterface>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d10b      	bne.n	800720c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071f4:	4809      	ldr	r0, [pc, #36]	; (800721c <MX_USB_DEVICE_Init+0x50>)
 80071f6:	f7ff fbaa 	bl	800694e <USBD_Start>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d109      	bne.n	8007212 <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007200:	f7fb ff54 	bl	80030ac <Error_Handler>
 8007204:	e7ea      	b.n	80071dc <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 8007206:	f7fb ff51 	bl	80030ac <Error_Handler>
 800720a:	e7ed      	b.n	80071e8 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 800720c:	f7fb ff4e 	bl	80030ac <Error_Handler>
 8007210:	e7f0      	b.n	80071f4 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 8007212:	f7fb ff4b 	bl	80030ac <Error_Handler>
}
 8007216:	e7f2      	b.n	80071fe <MX_USB_DEVICE_Init+0x32>
 8007218:	200000e0 	.word	0x200000e0
 800721c:	200003e8 	.word	0x200003e8
 8007220:	20000004 	.word	0x20000004
 8007224:	200000d0 	.word	0x200000d0

08007228 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007228:	2000      	movs	r0, #0
 800722a:	4770      	bx	lr

0800722c <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800722c:	2000      	movs	r0, #0
 800722e:	4770      	bx	lr

08007230 <CUSTOM_HID_OutEvent_FS>:
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8007230:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
	__NOP();
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007232:	2000      	movs	r0, #0
 8007234:	4770      	bx	lr
	...

08007238 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8007238:	2312      	movs	r3, #18
 800723a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800723c:	4800      	ldr	r0, [pc, #0]	; (8007240 <USBD_FS_DeviceDescriptor+0x8>)
 800723e:	4770      	bx	lr
 8007240:	200000fc 	.word	0x200000fc

08007244 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8007244:	2304      	movs	r3, #4
 8007246:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007248:	4800      	ldr	r0, [pc, #0]	; (800724c <USBD_FS_LangIDStrDescriptor+0x8>)
 800724a:	4770      	bx	lr
 800724c:	20000110 	.word	0x20000110

08007250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007250:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007252:	2300      	movs	r3, #0
 8007254:	e00a      	b.n	800726c <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007256:	005d      	lsls	r5, r3, #1
 8007258:	3437      	adds	r4, #55	; 0x37
 800725a:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 800725c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800725e:	005c      	lsls	r4, r3, #1
 8007260:	3401      	adds	r4, #1
 8007262:	190c      	adds	r4, r1, r4
 8007264:	2500      	movs	r5, #0
 8007266:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 8007268:	3301      	adds	r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4293      	cmp	r3, r2
 800726e:	d206      	bcs.n	800727e <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 8007270:	0f04      	lsrs	r4, r0, #28
 8007272:	2c09      	cmp	r4, #9
 8007274:	d8ef      	bhi.n	8007256 <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007276:	005d      	lsls	r5, r3, #1
 8007278:	3430      	adds	r4, #48	; 0x30
 800727a:	554c      	strb	r4, [r1, r5]
 800727c:	e7ee      	b.n	800725c <IntToUnicode+0xc>
  }
}
 800727e:	bd30      	pop	{r4, r5, pc}

08007280 <Get_SerialNum>:
{
 8007280:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <Get_SerialNum+0x30>)
 8007284:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <Get_SerialNum+0x34>)
 8007288:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <Get_SerialNum+0x38>)
 800728c:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 800728e:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8007290:	2800      	cmp	r0, #0
 8007292:	d100      	bne.n	8007296 <Get_SerialNum+0x16>
}
 8007294:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007296:	4c09      	ldr	r4, [pc, #36]	; (80072bc <Get_SerialNum+0x3c>)
 8007298:	1ca1      	adds	r1, r4, #2
 800729a:	2208      	movs	r2, #8
 800729c:	f7ff ffd8 	bl	8007250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072a0:	0021      	movs	r1, r4
 80072a2:	3112      	adds	r1, #18
 80072a4:	2204      	movs	r2, #4
 80072a6:	0028      	movs	r0, r5
 80072a8:	f7ff ffd2 	bl	8007250 <IntToUnicode>
}
 80072ac:	e7f2      	b.n	8007294 <Get_SerialNum+0x14>
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	1ffff7ac 	.word	0x1ffff7ac
 80072b4:	1ffff7b0 	.word	0x1ffff7b0
 80072b8:	1ffff7b4 	.word	0x1ffff7b4
 80072bc:	20000114 	.word	0x20000114

080072c0 <USBD_FS_SerialStrDescriptor>:
{
 80072c0:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80072c2:	231a      	movs	r3, #26
 80072c4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80072c6:	f7ff ffdb 	bl	8007280 <Get_SerialNum>
}
 80072ca:	4801      	ldr	r0, [pc, #4]	; (80072d0 <USBD_FS_SerialStrDescriptor+0x10>)
 80072cc:	bd10      	pop	{r4, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	20000114 	.word	0x20000114

080072d4 <USBD_FS_ProductStrDescriptor>:
{
 80072d4:	b510      	push	{r4, lr}
 80072d6:	000a      	movs	r2, r1
  if(speed == 0)
 80072d8:	2800      	cmp	r0, #0
 80072da:	d005      	beq.n	80072e8 <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072dc:	4905      	ldr	r1, [pc, #20]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80072de:	4806      	ldr	r0, [pc, #24]	; (80072f8 <USBD_FS_ProductStrDescriptor+0x24>)
 80072e0:	f7ff ff10 	bl	8007104 <USBD_GetString>
}
 80072e4:	4803      	ldr	r0, [pc, #12]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80072e6:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072e8:	4902      	ldr	r1, [pc, #8]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x20>)
 80072ea:	4803      	ldr	r0, [pc, #12]	; (80072f8 <USBD_FS_ProductStrDescriptor+0x24>)
 80072ec:	f7ff ff0a 	bl	8007104 <USBD_GetString>
 80072f0:	e7f8      	b.n	80072e4 <USBD_FS_ProductStrDescriptor+0x10>
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	2000060c 	.word	0x2000060c
 80072f8:	08008e30 	.word	0x08008e30

080072fc <USBD_FS_ManufacturerStrDescriptor>:
{
 80072fc:	b510      	push	{r4, lr}
 80072fe:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007300:	4c03      	ldr	r4, [pc, #12]	; (8007310 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007302:	0021      	movs	r1, r4
 8007304:	4803      	ldr	r0, [pc, #12]	; (8007314 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007306:	f7ff fefd 	bl	8007104 <USBD_GetString>
}
 800730a:	0020      	movs	r0, r4
 800730c:	bd10      	pop	{r4, pc}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	2000060c 	.word	0x2000060c
 8007314:	08008e1c 	.word	0x08008e1c

08007318 <USBD_FS_ConfigStrDescriptor>:
{
 8007318:	b510      	push	{r4, lr}
 800731a:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800731c:	2800      	cmp	r0, #0
 800731e:	d005      	beq.n	800732c <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007320:	4905      	ldr	r1, [pc, #20]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007322:	4806      	ldr	r0, [pc, #24]	; (800733c <USBD_FS_ConfigStrDescriptor+0x24>)
 8007324:	f7ff feee 	bl	8007104 <USBD_GetString>
}
 8007328:	4803      	ldr	r0, [pc, #12]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x20>)
 800732a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800732c:	4902      	ldr	r1, [pc, #8]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x20>)
 800732e:	4803      	ldr	r0, [pc, #12]	; (800733c <USBD_FS_ConfigStrDescriptor+0x24>)
 8007330:	f7ff fee8 	bl	8007104 <USBD_GetString>
 8007334:	e7f8      	b.n	8007328 <USBD_FS_ConfigStrDescriptor+0x10>
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	2000060c 	.word	0x2000060c
 800733c:	08008df0 	.word	0x08008df0

08007340 <USBD_FS_InterfaceStrDescriptor>:
{
 8007340:	b510      	push	{r4, lr}
 8007342:	000a      	movs	r2, r1
  if(speed == 0)
 8007344:	2800      	cmp	r0, #0
 8007346:	d005      	beq.n	8007354 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007348:	4905      	ldr	r1, [pc, #20]	; (8007360 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800734a:	4806      	ldr	r0, [pc, #24]	; (8007364 <USBD_FS_InterfaceStrDescriptor+0x24>)
 800734c:	f7ff feda 	bl	8007104 <USBD_GetString>
}
 8007350:	4803      	ldr	r0, [pc, #12]	; (8007360 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007352:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007354:	4902      	ldr	r1, [pc, #8]	; (8007360 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007356:	4803      	ldr	r0, [pc, #12]	; (8007364 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8007358:	f7ff fed4 	bl	8007104 <USBD_GetString>
 800735c:	e7f8      	b.n	8007350 <USBD_FS_InterfaceStrDescriptor+0x10>
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	2000060c 	.word	0x2000060c
 8007364:	08008e04 	.word	0x08008e04

08007368 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007368:	2800      	cmp	r0, #0
 800736a:	d003      	beq.n	8007374 <USBD_Get_USB_Status+0xc>
 800736c:	2802      	cmp	r0, #2
 800736e:	d003      	beq.n	8007378 <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007370:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007372:	4770      	bx	lr
      usb_status = USBD_OK;
 8007374:	2000      	movs	r0, #0
 8007376:	e7fc      	b.n	8007372 <USBD_Get_USB_Status+0xa>
      usb_status = USBD_BUSY;
 8007378:	2001      	movs	r0, #1
    break;
 800737a:	e7fa      	b.n	8007372 <USBD_Get_USB_Status+0xa>

0800737c <SystemClockConfig_Resume>:
{
 800737c:	b510      	push	{r4, lr}
  SystemClock_Config();
 800737e:	f7fb fe25 	bl	8002fcc <SystemClock_Config>
}
 8007382:	bd10      	pop	{r4, pc}

08007384 <HAL_PCD_MspInit>:
{
 8007384:	b500      	push	{lr}
 8007386:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8007388:	6802      	ldr	r2, [r0, #0]
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <HAL_PCD_MspInit+0x38>)
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_PCD_MspInit+0x10>
}
 8007390:	b003      	add	sp, #12
 8007392:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8007394:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <HAL_PCD_MspInit+0x3c>)
 8007396:	69d1      	ldr	r1, [r2, #28]
 8007398:	2080      	movs	r0, #128	; 0x80
 800739a:	0400      	lsls	r0, r0, #16
 800739c:	4301      	orrs	r1, r0
 800739e:	61d1      	str	r1, [r2, #28]
 80073a0:	69d3      	ldr	r3, [r2, #28]
 80073a2:	4003      	ands	r3, r0
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	201f      	movs	r0, #31
 80073ae:	f7fc f83b 	bl	8003428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80073b2:	201f      	movs	r0, #31
 80073b4:	f7fc f86a 	bl	800348c <HAL_NVIC_EnableIRQ>
}
 80073b8:	e7ea      	b.n	8007390 <HAL_PCD_MspInit+0xc>
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	40005c00 	.word	0x40005c00
 80073c0:	40021000 	.word	0x40021000

080073c4 <HAL_PCD_SetupStageCallback>:
{
 80073c4:	b510      	push	{r4, lr}
 80073c6:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073c8:	2387      	movs	r3, #135	; 0x87
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	58c0      	ldr	r0, [r0, r3]
 80073ce:	31ed      	adds	r1, #237	; 0xed
 80073d0:	31ff      	adds	r1, #255	; 0xff
 80073d2:	f7ff fad9 	bl	8006988 <USBD_LL_SetupStage>
}
 80073d6:	bd10      	pop	{r4, pc}

080073d8 <HAL_PCD_DataOutStageCallback>:
{
 80073d8:	b510      	push	{r4, lr}
 80073da:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073dc:	2287      	movs	r2, #135	; 0x87
 80073de:	0092      	lsls	r2, r2, #2
 80073e0:	5880      	ldr	r0, [r0, r2]
 80073e2:	00ca      	lsls	r2, r1, #3
 80073e4:	1a52      	subs	r2, r2, r1
 80073e6:	0094      	lsls	r4, r2, #2
 80073e8:	191b      	adds	r3, r3, r4
 80073ea:	3319      	adds	r3, #25
 80073ec:	33ff      	adds	r3, #255	; 0xff
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	f7ff fafe 	bl	80069f0 <USBD_LL_DataOutStage>
}
 80073f4:	bd10      	pop	{r4, pc}

080073f6 <HAL_PCD_DataInStageCallback>:
{
 80073f6:	b510      	push	{r4, lr}
 80073f8:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073fa:	2287      	movs	r2, #135	; 0x87
 80073fc:	0092      	lsls	r2, r2, #2
 80073fe:	5880      	ldr	r0, [r0, r2]
 8007400:	00ca      	lsls	r2, r1, #3
 8007402:	1a52      	subs	r2, r2, r1
 8007404:	0094      	lsls	r4, r2, #2
 8007406:	191b      	adds	r3, r3, r4
 8007408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740a:	f7ff fb2e 	bl	8006a6a <USBD_LL_DataInStage>
}
 800740e:	bd10      	pop	{r4, pc}

08007410 <HAL_PCD_SOFCallback>:
{
 8007410:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007412:	2387      	movs	r3, #135	; 0x87
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	58c0      	ldr	r0, [r0, r3]
 8007418:	f7ff fbc1 	bl	8006b9e <USBD_LL_SOF>
}
 800741c:	bd10      	pop	{r4, pc}

0800741e <HAL_PCD_ResetCallback>:
{ 
 800741e:	b570      	push	{r4, r5, r6, lr}
 8007420:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007422:	6883      	ldr	r3, [r0, #8]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d001      	beq.n	800742c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007428:	f7fb fe40 	bl	80030ac <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800742c:	2587      	movs	r5, #135	; 0x87
 800742e:	00ad      	lsls	r5, r5, #2
 8007430:	2101      	movs	r1, #1
 8007432:	5960      	ldr	r0, [r4, r5]
 8007434:	f7ff fb9e 	bl	8006b74 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007438:	5960      	ldr	r0, [r4, r5]
 800743a:	f7ff fb78 	bl	8006b2e <USBD_LL_Reset>
}
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <HAL_PCD_SuspendCallback>:
{
 8007440:	b510      	push	{r4, lr}
 8007442:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007444:	2387      	movs	r3, #135	; 0x87
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	58c0      	ldr	r0, [r0, r3]
 800744a:	f7ff fb96 	bl	8006b7a <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800744e:	69a3      	ldr	r3, [r4, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007454:	4a02      	ldr	r2, [pc, #8]	; (8007460 <HAL_PCD_SuspendCallback+0x20>)
 8007456:	6913      	ldr	r3, [r2, #16]
 8007458:	2106      	movs	r1, #6
 800745a:	430b      	orrs	r3, r1
 800745c:	6113      	str	r3, [r2, #16]
}
 800745e:	bd10      	pop	{r4, pc}
 8007460:	e000ed00 	.word	0xe000ed00

08007464 <HAL_PCD_ResumeCallback>:
{
 8007464:	b510      	push	{r4, lr}
 8007466:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8007468:	6983      	ldr	r3, [r0, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800746e:	2387      	movs	r3, #135	; 0x87
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	58e0      	ldr	r0, [r4, r3]
 8007474:	f7ff fb8c 	bl	8006b90 <USBD_LL_Resume>
}
 8007478:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800747a:	4a04      	ldr	r2, [pc, #16]	; (800748c <HAL_PCD_ResumeCallback+0x28>)
 800747c:	6913      	ldr	r3, [r2, #16]
 800747e:	2106      	movs	r1, #6
 8007480:	438b      	bics	r3, r1
 8007482:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007484:	f7ff ff7a 	bl	800737c <SystemClockConfig_Resume>
 8007488:	e7f1      	b.n	800746e <HAL_PCD_ResumeCallback+0xa>
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	e000ed00 	.word	0xe000ed00

08007490 <USBD_LL_Init>:
{
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007494:	4819      	ldr	r0, [pc, #100]	; (80074fc <USBD_LL_Init+0x6c>)
 8007496:	2387      	movs	r3, #135	; 0x87
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 800749c:	3304      	adds	r3, #4
 800749e:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 80074a0:	4b17      	ldr	r3, [pc, #92]	; (8007500 <USBD_LL_Init+0x70>)
 80074a2:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80074a4:	2308      	movs	r3, #8
 80074a6:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80074a8:	3b06      	subs	r3, #6
 80074aa:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074ac:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80074b2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80074b4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80074b6:	f7fc f9bd 	bl	8003834 <HAL_PCD_Init>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d11b      	bne.n	80074f6 <USBD_LL_Init+0x66>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80074be:	2588      	movs	r5, #136	; 0x88
 80074c0:	00ad      	lsls	r5, r5, #2
 80074c2:	2318      	movs	r3, #24
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	5960      	ldr	r0, [r4, r5]
 80074ca:	f7fd fac5 	bl	8004a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80074ce:	2358      	movs	r3, #88	; 0x58
 80074d0:	2200      	movs	r2, #0
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	5960      	ldr	r0, [r4, r5]
 80074d6:	f7fd fabf 	bl	8004a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80074da:	2398      	movs	r3, #152	; 0x98
 80074dc:	2200      	movs	r2, #0
 80074de:	2181      	movs	r1, #129	; 0x81
 80074e0:	5960      	ldr	r0, [r4, r5]
 80074e2:	f7fd fab9 	bl	8004a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80074e6:	5960      	ldr	r0, [r4, r5]
 80074e8:	23d8      	movs	r3, #216	; 0xd8
 80074ea:	2200      	movs	r2, #0
 80074ec:	2101      	movs	r1, #1
 80074ee:	f7fd fab3 	bl	8004a58 <HAL_PCDEx_PMAConfig>
}
 80074f2:	2000      	movs	r0, #0
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80074f6:	f7fb fdd9 	bl	80030ac <Error_Handler>
 80074fa:	e7e0      	b.n	80074be <USBD_LL_Init+0x2e>
 80074fc:	2000080c 	.word	0x2000080c
 8007500:	40005c00 	.word	0x40005c00

08007504 <USBD_LL_Start>:
{
 8007504:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007506:	2388      	movs	r3, #136	; 0x88
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	58c0      	ldr	r0, [r0, r3]
 800750c:	f7fc f9f2 	bl	80038f4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007510:	f7ff ff2a 	bl	8007368 <USBD_Get_USB_Status>
}
 8007514:	bd10      	pop	{r4, pc}

08007516 <USBD_LL_OpenEP>:
{
 8007516:	b510      	push	{r4, lr}
 8007518:	0014      	movs	r4, r2
 800751a:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800751c:	2388      	movs	r3, #136	; 0x88
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	58c0      	ldr	r0, [r0, r3]
 8007522:	0023      	movs	r3, r4
 8007524:	f7fc fa0e 	bl	8003944 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007528:	f7ff ff1e 	bl	8007368 <USBD_Get_USB_Status>
}
 800752c:	bd10      	pop	{r4, pc}

0800752e <USBD_LL_CloseEP>:
{
 800752e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007530:	2388      	movs	r3, #136	; 0x88
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	58c0      	ldr	r0, [r0, r3]
 8007536:	f7fc fbaf 	bl	8003c98 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800753a:	f7ff ff15 	bl	8007368 <USBD_Get_USB_Status>
}
 800753e:	bd10      	pop	{r4, pc}

08007540 <USBD_LL_StallEP>:
{
 8007540:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007542:	2388      	movs	r3, #136	; 0x88
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	58c0      	ldr	r0, [r0, r3]
 8007548:	f7fc fd8e 	bl	8004068 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800754c:	f7ff ff0c 	bl	8007368 <USBD_Get_USB_Status>
}
 8007550:	bd10      	pop	{r4, pc}

08007552 <USBD_LL_ClearStallEP>:
{
 8007552:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007554:	2388      	movs	r3, #136	; 0x88
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	58c0      	ldr	r0, [r0, r3]
 800755a:	f7fc fde7 	bl	800412c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800755e:	f7ff ff03 	bl	8007368 <USBD_Get_USB_Status>
}
 8007562:	bd10      	pop	{r4, pc}

08007564 <USBD_LL_IsStallEP>:
{
 8007564:	000a      	movs	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007566:	2388      	movs	r3, #136	; 0x88
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800756c:	b249      	sxtb	r1, r1
 800756e:	2900      	cmp	r1, #0
 8007570:	db09      	blt.n	8007586 <USBD_LL_IsStallEP+0x22>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007572:	217f      	movs	r1, #127	; 0x7f
 8007574:	4011      	ands	r1, r2
 8007576:	00ca      	lsls	r2, r1, #3
 8007578:	1a51      	subs	r1, r2, r1
 800757a:	008a      	lsls	r2, r1, #2
 800757c:	189b      	adds	r3, r3, r2
 800757e:	330b      	adds	r3, #11
 8007580:	33ff      	adds	r3, #255	; 0xff
 8007582:	7818      	ldrb	r0, [r3, #0]
}
 8007584:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007586:	217f      	movs	r1, #127	; 0x7f
 8007588:	4011      	ands	r1, r2
 800758a:	00c8      	lsls	r0, r1, #3
 800758c:	1a41      	subs	r1, r0, r1
 800758e:	008a      	lsls	r2, r1, #2
 8007590:	189b      	adds	r3, r3, r2
 8007592:	332a      	adds	r3, #42	; 0x2a
 8007594:	7818      	ldrb	r0, [r3, #0]
 8007596:	e7f5      	b.n	8007584 <USBD_LL_IsStallEP+0x20>

08007598 <USBD_LL_SetUSBAddress>:
{
 8007598:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800759a:	2388      	movs	r3, #136	; 0x88
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	58c0      	ldr	r0, [r0, r3]
 80075a0:	f7fc f9b4 	bl	800390c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a4:	f7ff fee0 	bl	8007368 <USBD_Get_USB_Status>
}
 80075a8:	bd10      	pop	{r4, pc}

080075aa <USBD_LL_Transmit>:
{
 80075aa:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075ac:	2488      	movs	r4, #136	; 0x88
 80075ae:	00a4      	lsls	r4, r4, #2
 80075b0:	5900      	ldr	r0, [r0, r4]
 80075b2:	f7fc fe3f 	bl	8004234 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	f7ff fed7 	bl	8007368 <USBD_Get_USB_Status>
}
 80075ba:	bd10      	pop	{r4, pc}

080075bc <USBD_LL_PrepareReceive>:
{
 80075bc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075be:	2488      	movs	r4, #136	; 0x88
 80075c0:	00a4      	lsls	r4, r4, #2
 80075c2:	5900      	ldr	r0, [r0, r4]
 80075c4:	f7fc fc50 	bl	8003e68 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c8:	f7ff fece 	bl	8007368 <USBD_Get_USB_Status>
}
 80075cc:	bd10      	pop	{r4, pc}
	...

080075d0 <USBD_static_malloc>:
}
 80075d0:	4800      	ldr	r0, [pc, #0]	; (80075d4 <USBD_static_malloc+0x4>)
 80075d2:	4770      	bx	lr
 80075d4:	200001b8 	.word	0x200001b8

080075d8 <USBD_static_free>:
}
 80075d8:	4770      	bx	lr
	...

080075dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80075dc:	480d      	ldr	r0, [pc, #52]	; (8007614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80075de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075e0:	480d      	ldr	r0, [pc, #52]	; (8007618 <LoopForever+0x6>)
  ldr r1, =_edata
 80075e2:	490e      	ldr	r1, [pc, #56]	; (800761c <LoopForever+0xa>)
  ldr r2, =_sidata
 80075e4:	4a0e      	ldr	r2, [pc, #56]	; (8007620 <LoopForever+0xe>)
  movs r3, #0
 80075e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075e8:	e002      	b.n	80075f0 <LoopCopyDataInit>

080075ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075ee:	3304      	adds	r3, #4

080075f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075f4:	d3f9      	bcc.n	80075ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075f6:	4a0b      	ldr	r2, [pc, #44]	; (8007624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80075f8:	4c0b      	ldr	r4, [pc, #44]	; (8007628 <LoopForever+0x16>)
  movs r3, #0
 80075fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075fc:	e001      	b.n	8007602 <LoopFillZerobss>

080075fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007600:	3204      	adds	r2, #4

08007602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007604:	d3fb      	bcc.n	80075fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007606:	f7fb feaf 	bl	8003368 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800760a:	f000 f817 	bl	800763c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800760e:	f7fb fd09 	bl	8003024 <main>

08007612 <LoopForever>:

LoopForever:
    b LoopForever
 8007612:	e7fe      	b.n	8007612 <LoopForever>
  ldr   r0, =_estack
 8007614:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8007618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800761c:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8007620:	08009060 	.word	0x08009060
  ldr r2, =_sbss
 8007624:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8007628:	20000a30 	.word	0x20000a30

0800762c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800762c:	e7fe      	b.n	800762c <ADC1_COMP_IRQHandler>
	...

08007630 <__errno>:
 8007630:	4b01      	ldr	r3, [pc, #4]	; (8007638 <__errno+0x8>)
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	4770      	bx	lr
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	20000130 	.word	0x20000130

0800763c <__libc_init_array>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	2600      	movs	r6, #0
 8007640:	4d0c      	ldr	r5, [pc, #48]	; (8007674 <__libc_init_array+0x38>)
 8007642:	4c0d      	ldr	r4, [pc, #52]	; (8007678 <__libc_init_array+0x3c>)
 8007644:	1b64      	subs	r4, r4, r5
 8007646:	10a4      	asrs	r4, r4, #2
 8007648:	42a6      	cmp	r6, r4
 800764a:	d109      	bne.n	8007660 <__libc_init_array+0x24>
 800764c:	2600      	movs	r6, #0
 800764e:	f001 fadf 	bl	8008c10 <_init>
 8007652:	4d0a      	ldr	r5, [pc, #40]	; (800767c <__libc_init_array+0x40>)
 8007654:	4c0a      	ldr	r4, [pc, #40]	; (8007680 <__libc_init_array+0x44>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	42a6      	cmp	r6, r4
 800765c:	d105      	bne.n	800766a <__libc_init_array+0x2e>
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	00b3      	lsls	r3, r6, #2
 8007662:	58eb      	ldr	r3, [r5, r3]
 8007664:	4798      	blx	r3
 8007666:	3601      	adds	r6, #1
 8007668:	e7ee      	b.n	8007648 <__libc_init_array+0xc>
 800766a:	00b3      	lsls	r3, r6, #2
 800766c:	58eb      	ldr	r3, [r5, r3]
 800766e:	4798      	blx	r3
 8007670:	3601      	adds	r6, #1
 8007672:	e7f2      	b.n	800765a <__libc_init_array+0x1e>
 8007674:	08009058 	.word	0x08009058
 8007678:	08009058 	.word	0x08009058
 800767c:	08009058 	.word	0x08009058
 8007680:	0800905c 	.word	0x0800905c

08007684 <malloc>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <malloc+0x10>)
 8007688:	0001      	movs	r1, r0
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	f000 f86a 	bl	8007764 <_malloc_r>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20000130 	.word	0x20000130

08007698 <free>:
 8007698:	b510      	push	{r4, lr}
 800769a:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <free+0x10>)
 800769c:	0001      	movs	r1, r0
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	f000 f816 	bl	80076d0 <_free_r>
 80076a4:	bd10      	pop	{r4, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	20000130 	.word	0x20000130

080076ac <memcpy>:
 80076ac:	2300      	movs	r3, #0
 80076ae:	b510      	push	{r4, lr}
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d100      	bne.n	80076b6 <memcpy+0xa>
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	5ccc      	ldrb	r4, [r1, r3]
 80076b8:	54c4      	strb	r4, [r0, r3]
 80076ba:	3301      	adds	r3, #1
 80076bc:	e7f8      	b.n	80076b0 <memcpy+0x4>

080076be <memset>:
 80076be:	0003      	movs	r3, r0
 80076c0:	1882      	adds	r2, r0, r2
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d100      	bne.n	80076c8 <memset+0xa>
 80076c6:	4770      	bx	lr
 80076c8:	7019      	strb	r1, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7f9      	b.n	80076c2 <memset+0x4>
	...

080076d0 <_free_r>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	0005      	movs	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d010      	beq.n	80076fa <_free_r+0x2a>
 80076d8:	1f0c      	subs	r4, r1, #4
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da00      	bge.n	80076e2 <_free_r+0x12>
 80076e0:	18e4      	adds	r4, r4, r3
 80076e2:	0028      	movs	r0, r5
 80076e4:	f000 f8ae 	bl	8007844 <__malloc_lock>
 80076e8:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <_free_r+0x90>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d105      	bne.n	80076fc <_free_r+0x2c>
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	6014      	str	r4, [r2, #0]
 80076f4:	0028      	movs	r0, r5
 80076f6:	f000 f8a6 	bl	8007846 <__malloc_unlock>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d909      	bls.n	8007714 <_free_r+0x44>
 8007700:	6821      	ldr	r1, [r4, #0]
 8007702:	1860      	adds	r0, r4, r1
 8007704:	4283      	cmp	r3, r0
 8007706:	d1f3      	bne.n	80076f0 <_free_r+0x20>
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	1841      	adds	r1, r0, r1
 800770e:	6021      	str	r1, [r4, #0]
 8007710:	e7ee      	b.n	80076f0 <_free_r+0x20>
 8007712:	0013      	movs	r3, r2
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	2a00      	cmp	r2, #0
 8007718:	d001      	beq.n	800771e <_free_r+0x4e>
 800771a:	42a2      	cmp	r2, r4
 800771c:	d9f9      	bls.n	8007712 <_free_r+0x42>
 800771e:	6819      	ldr	r1, [r3, #0]
 8007720:	1858      	adds	r0, r3, r1
 8007722:	42a0      	cmp	r0, r4
 8007724:	d10b      	bne.n	800773e <_free_r+0x6e>
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1809      	adds	r1, r1, r0
 800772a:	1858      	adds	r0, r3, r1
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	4282      	cmp	r2, r0
 8007730:	d1e0      	bne.n	80076f4 <_free_r+0x24>
 8007732:	6810      	ldr	r0, [r2, #0]
 8007734:	6852      	ldr	r2, [r2, #4]
 8007736:	1841      	adds	r1, r0, r1
 8007738:	6019      	str	r1, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
 800773c:	e7da      	b.n	80076f4 <_free_r+0x24>
 800773e:	42a0      	cmp	r0, r4
 8007740:	d902      	bls.n	8007748 <_free_r+0x78>
 8007742:	230c      	movs	r3, #12
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	e7d5      	b.n	80076f4 <_free_r+0x24>
 8007748:	6821      	ldr	r1, [r4, #0]
 800774a:	1860      	adds	r0, r4, r1
 800774c:	4282      	cmp	r2, r0
 800774e:	d103      	bne.n	8007758 <_free_r+0x88>
 8007750:	6810      	ldr	r0, [r2, #0]
 8007752:	6852      	ldr	r2, [r2, #4]
 8007754:	1841      	adds	r1, r0, r1
 8007756:	6021      	str	r1, [r4, #0]
 8007758:	6062      	str	r2, [r4, #4]
 800775a:	605c      	str	r4, [r3, #4]
 800775c:	e7ca      	b.n	80076f4 <_free_r+0x24>
 800775e:	46c0      	nop			; (mov r8, r8)
 8007760:	20000210 	.word	0x20000210

08007764 <_malloc_r>:
 8007764:	2303      	movs	r3, #3
 8007766:	b570      	push	{r4, r5, r6, lr}
 8007768:	1ccd      	adds	r5, r1, #3
 800776a:	439d      	bics	r5, r3
 800776c:	3508      	adds	r5, #8
 800776e:	0006      	movs	r6, r0
 8007770:	2d0c      	cmp	r5, #12
 8007772:	d21e      	bcs.n	80077b2 <_malloc_r+0x4e>
 8007774:	250c      	movs	r5, #12
 8007776:	42a9      	cmp	r1, r5
 8007778:	d81d      	bhi.n	80077b6 <_malloc_r+0x52>
 800777a:	0030      	movs	r0, r6
 800777c:	f000 f862 	bl	8007844 <__malloc_lock>
 8007780:	4a25      	ldr	r2, [pc, #148]	; (8007818 <_malloc_r+0xb4>)
 8007782:	6814      	ldr	r4, [r2, #0]
 8007784:	0021      	movs	r1, r4
 8007786:	2900      	cmp	r1, #0
 8007788:	d119      	bne.n	80077be <_malloc_r+0x5a>
 800778a:	4c24      	ldr	r4, [pc, #144]	; (800781c <_malloc_r+0xb8>)
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <_malloc_r+0x36>
 8007792:	0030      	movs	r0, r6
 8007794:	f000 f844 	bl	8007820 <_sbrk_r>
 8007798:	6020      	str	r0, [r4, #0]
 800779a:	0029      	movs	r1, r5
 800779c:	0030      	movs	r0, r6
 800779e:	f000 f83f 	bl	8007820 <_sbrk_r>
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	d12c      	bne.n	8007800 <_malloc_r+0x9c>
 80077a6:	230c      	movs	r3, #12
 80077a8:	0030      	movs	r0, r6
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	f000 f84b 	bl	8007846 <__malloc_unlock>
 80077b0:	e003      	b.n	80077ba <_malloc_r+0x56>
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	dadf      	bge.n	8007776 <_malloc_r+0x12>
 80077b6:	230c      	movs	r3, #12
 80077b8:	6033      	str	r3, [r6, #0]
 80077ba:	2000      	movs	r0, #0
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	1b5b      	subs	r3, r3, r5
 80077c2:	d41a      	bmi.n	80077fa <_malloc_r+0x96>
 80077c4:	2b0b      	cmp	r3, #11
 80077c6:	d903      	bls.n	80077d0 <_malloc_r+0x6c>
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	18cc      	adds	r4, r1, r3
 80077cc:	6025      	str	r5, [r4, #0]
 80077ce:	e003      	b.n	80077d8 <_malloc_r+0x74>
 80077d0:	428c      	cmp	r4, r1
 80077d2:	d10e      	bne.n	80077f2 <_malloc_r+0x8e>
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	0030      	movs	r0, r6
 80077da:	f000 f834 	bl	8007846 <__malloc_unlock>
 80077de:	0020      	movs	r0, r4
 80077e0:	2207      	movs	r2, #7
 80077e2:	300b      	adds	r0, #11
 80077e4:	1d23      	adds	r3, r4, #4
 80077e6:	4390      	bics	r0, r2
 80077e8:	1ac3      	subs	r3, r0, r3
 80077ea:	d0e7      	beq.n	80077bc <_malloc_r+0x58>
 80077ec:	425a      	negs	r2, r3
 80077ee:	50e2      	str	r2, [r4, r3]
 80077f0:	e7e4      	b.n	80077bc <_malloc_r+0x58>
 80077f2:	684b      	ldr	r3, [r1, #4]
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	000c      	movs	r4, r1
 80077f8:	e7ee      	b.n	80077d8 <_malloc_r+0x74>
 80077fa:	000c      	movs	r4, r1
 80077fc:	6849      	ldr	r1, [r1, #4]
 80077fe:	e7c2      	b.n	8007786 <_malloc_r+0x22>
 8007800:	2303      	movs	r3, #3
 8007802:	1cc4      	adds	r4, r0, #3
 8007804:	439c      	bics	r4, r3
 8007806:	42a0      	cmp	r0, r4
 8007808:	d0e0      	beq.n	80077cc <_malloc_r+0x68>
 800780a:	1a21      	subs	r1, r4, r0
 800780c:	0030      	movs	r0, r6
 800780e:	f000 f807 	bl	8007820 <_sbrk_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d1da      	bne.n	80077cc <_malloc_r+0x68>
 8007816:	e7c6      	b.n	80077a6 <_malloc_r+0x42>
 8007818:	20000210 	.word	0x20000210
 800781c:	20000214 	.word	0x20000214

08007820 <_sbrk_r>:
 8007820:	2300      	movs	r3, #0
 8007822:	b570      	push	{r4, r5, r6, lr}
 8007824:	4c06      	ldr	r4, [pc, #24]	; (8007840 <_sbrk_r+0x20>)
 8007826:	0005      	movs	r5, r0
 8007828:	0008      	movs	r0, r1
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	f7fb fd7e 	bl	800332c <_sbrk>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d103      	bne.n	800783c <_sbrk_r+0x1c>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d000      	beq.n	800783c <_sbrk_r+0x1c>
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	20000a2c 	.word	0x20000a2c

08007844 <__malloc_lock>:
 8007844:	4770      	bx	lr

08007846 <__malloc_unlock>:
 8007846:	4770      	bx	lr

08007848 <atan>:
 8007848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784a:	4b9c      	ldr	r3, [pc, #624]	; (8007abc <atan+0x274>)
 800784c:	b085      	sub	sp, #20
 800784e:	004e      	lsls	r6, r1, #1
 8007850:	0004      	movs	r4, r0
 8007852:	000d      	movs	r5, r1
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	0876      	lsrs	r6, r6, #1
 8007858:	429e      	cmp	r6, r3
 800785a:	dd18      	ble.n	800788e <atan+0x46>
 800785c:	4b98      	ldr	r3, [pc, #608]	; (8007ac0 <atan+0x278>)
 800785e:	429e      	cmp	r6, r3
 8007860:	dc02      	bgt.n	8007868 <atan+0x20>
 8007862:	d10a      	bne.n	800787a <atan+0x32>
 8007864:	2800      	cmp	r0, #0
 8007866:	d008      	beq.n	800787a <atan+0x32>
 8007868:	0022      	movs	r2, r4
 800786a:	002b      	movs	r3, r5
 800786c:	0020      	movs	r0, r4
 800786e:	0029      	movs	r1, r5
 8007870:	f7f9 f93c 	bl	8000aec <__aeabi_dadd>
 8007874:	0004      	movs	r4, r0
 8007876:	000d      	movs	r5, r1
 8007878:	e005      	b.n	8007886 <atan+0x3e>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	4c91      	ldr	r4, [pc, #580]	; (8007ac4 <atan+0x27c>)
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd00      	ble.n	8007884 <atan+0x3c>
 8007882:	e118      	b.n	8007ab6 <atan+0x26e>
 8007884:	4d90      	ldr	r5, [pc, #576]	; (8007ac8 <atan+0x280>)
 8007886:	0020      	movs	r0, r4
 8007888:	0029      	movs	r1, r5
 800788a:	b005      	add	sp, #20
 800788c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788e:	4b8f      	ldr	r3, [pc, #572]	; (8007acc <atan+0x284>)
 8007890:	429e      	cmp	r6, r3
 8007892:	dc0f      	bgt.n	80078b4 <atan+0x6c>
 8007894:	4b8e      	ldr	r3, [pc, #568]	; (8007ad0 <atan+0x288>)
 8007896:	429e      	cmp	r6, r3
 8007898:	dc09      	bgt.n	80078ae <atan+0x66>
 800789a:	4a8e      	ldr	r2, [pc, #568]	; (8007ad4 <atan+0x28c>)
 800789c:	4b8e      	ldr	r3, [pc, #568]	; (8007ad8 <atan+0x290>)
 800789e:	f7f9 f925 	bl	8000aec <__aeabi_dadd>
 80078a2:	2200      	movs	r2, #0
 80078a4:	4b8d      	ldr	r3, [pc, #564]	; (8007adc <atan+0x294>)
 80078a6:	f7f8 fdd9 	bl	800045c <__aeabi_dcmpgt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d1eb      	bne.n	8007886 <atan+0x3e>
 80078ae:	2301      	movs	r3, #1
 80078b0:	425b      	negs	r3, r3
 80078b2:	e025      	b.n	8007900 <atan+0xb8>
 80078b4:	f000 f992 	bl	8007bdc <fabs>
 80078b8:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <atan+0x298>)
 80078ba:	0004      	movs	r4, r0
 80078bc:	000d      	movs	r5, r1
 80078be:	429e      	cmp	r6, r3
 80078c0:	dd00      	ble.n	80078c4 <atan+0x7c>
 80078c2:	e0aa      	b.n	8007a1a <atan+0x1d2>
 80078c4:	4b87      	ldr	r3, [pc, #540]	; (8007ae4 <atan+0x29c>)
 80078c6:	429e      	cmp	r6, r3
 80078c8:	dd00      	ble.n	80078cc <atan+0x84>
 80078ca:	e090      	b.n	80079ee <atan+0x1a6>
 80078cc:	0002      	movs	r2, r0
 80078ce:	000b      	movs	r3, r1
 80078d0:	f7f9 f90c 	bl	8000aec <__aeabi_dadd>
 80078d4:	2200      	movs	r2, #0
 80078d6:	4b81      	ldr	r3, [pc, #516]	; (8007adc <atan+0x294>)
 80078d8:	f7fa facc 	bl	8001e74 <__aeabi_dsub>
 80078dc:	2380      	movs	r3, #128	; 0x80
 80078de:	0006      	movs	r6, r0
 80078e0:	000f      	movs	r7, r1
 80078e2:	2200      	movs	r2, #0
 80078e4:	05db      	lsls	r3, r3, #23
 80078e6:	0020      	movs	r0, r4
 80078e8:	0029      	movs	r1, r5
 80078ea:	f7f9 f8ff 	bl	8000aec <__aeabi_dadd>
 80078ee:	000b      	movs	r3, r1
 80078f0:	0002      	movs	r2, r0
 80078f2:	0039      	movs	r1, r7
 80078f4:	0030      	movs	r0, r6
 80078f6:	f7f9 fc09 	bl	800110c <__aeabi_ddiv>
 80078fa:	2300      	movs	r3, #0
 80078fc:	0004      	movs	r4, r0
 80078fe:	000d      	movs	r5, r1
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	0022      	movs	r2, r4
 8007904:	002b      	movs	r3, r5
 8007906:	0020      	movs	r0, r4
 8007908:	0029      	movs	r1, r5
 800790a:	f7fa f833 	bl	8001974 <__aeabi_dmul>
 800790e:	0002      	movs	r2, r0
 8007910:	000b      	movs	r3, r1
 8007912:	9000      	str	r0, [sp, #0]
 8007914:	9101      	str	r1, [sp, #4]
 8007916:	f7fa f82d 	bl	8001974 <__aeabi_dmul>
 800791a:	0006      	movs	r6, r0
 800791c:	000f      	movs	r7, r1
 800791e:	4a72      	ldr	r2, [pc, #456]	; (8007ae8 <atan+0x2a0>)
 8007920:	4b72      	ldr	r3, [pc, #456]	; (8007aec <atan+0x2a4>)
 8007922:	f7fa f827 	bl	8001974 <__aeabi_dmul>
 8007926:	4a72      	ldr	r2, [pc, #456]	; (8007af0 <atan+0x2a8>)
 8007928:	4b72      	ldr	r3, [pc, #456]	; (8007af4 <atan+0x2ac>)
 800792a:	f7f9 f8df 	bl	8000aec <__aeabi_dadd>
 800792e:	0032      	movs	r2, r6
 8007930:	003b      	movs	r3, r7
 8007932:	f7fa f81f 	bl	8001974 <__aeabi_dmul>
 8007936:	4a70      	ldr	r2, [pc, #448]	; (8007af8 <atan+0x2b0>)
 8007938:	4b70      	ldr	r3, [pc, #448]	; (8007afc <atan+0x2b4>)
 800793a:	f7f9 f8d7 	bl	8000aec <__aeabi_dadd>
 800793e:	0032      	movs	r2, r6
 8007940:	003b      	movs	r3, r7
 8007942:	f7fa f817 	bl	8001974 <__aeabi_dmul>
 8007946:	4a6e      	ldr	r2, [pc, #440]	; (8007b00 <atan+0x2b8>)
 8007948:	4b6e      	ldr	r3, [pc, #440]	; (8007b04 <atan+0x2bc>)
 800794a:	f7f9 f8cf 	bl	8000aec <__aeabi_dadd>
 800794e:	0032      	movs	r2, r6
 8007950:	003b      	movs	r3, r7
 8007952:	f7fa f80f 	bl	8001974 <__aeabi_dmul>
 8007956:	4a6c      	ldr	r2, [pc, #432]	; (8007b08 <atan+0x2c0>)
 8007958:	4b6c      	ldr	r3, [pc, #432]	; (8007b0c <atan+0x2c4>)
 800795a:	f7f9 f8c7 	bl	8000aec <__aeabi_dadd>
 800795e:	0032      	movs	r2, r6
 8007960:	003b      	movs	r3, r7
 8007962:	f7fa f807 	bl	8001974 <__aeabi_dmul>
 8007966:	4a6a      	ldr	r2, [pc, #424]	; (8007b10 <atan+0x2c8>)
 8007968:	4b6a      	ldr	r3, [pc, #424]	; (8007b14 <atan+0x2cc>)
 800796a:	f7f9 f8bf 	bl	8000aec <__aeabi_dadd>
 800796e:	9a00      	ldr	r2, [sp, #0]
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	f7f9 ffff 	bl	8001974 <__aeabi_dmul>
 8007976:	4a68      	ldr	r2, [pc, #416]	; (8007b18 <atan+0x2d0>)
 8007978:	9000      	str	r0, [sp, #0]
 800797a:	9101      	str	r1, [sp, #4]
 800797c:	4b67      	ldr	r3, [pc, #412]	; (8007b1c <atan+0x2d4>)
 800797e:	0030      	movs	r0, r6
 8007980:	0039      	movs	r1, r7
 8007982:	f7f9 fff7 	bl	8001974 <__aeabi_dmul>
 8007986:	4a66      	ldr	r2, [pc, #408]	; (8007b20 <atan+0x2d8>)
 8007988:	4b66      	ldr	r3, [pc, #408]	; (8007b24 <atan+0x2dc>)
 800798a:	f7fa fa73 	bl	8001e74 <__aeabi_dsub>
 800798e:	0032      	movs	r2, r6
 8007990:	003b      	movs	r3, r7
 8007992:	f7f9 ffef 	bl	8001974 <__aeabi_dmul>
 8007996:	4a64      	ldr	r2, [pc, #400]	; (8007b28 <atan+0x2e0>)
 8007998:	4b64      	ldr	r3, [pc, #400]	; (8007b2c <atan+0x2e4>)
 800799a:	f7fa fa6b 	bl	8001e74 <__aeabi_dsub>
 800799e:	0032      	movs	r2, r6
 80079a0:	003b      	movs	r3, r7
 80079a2:	f7f9 ffe7 	bl	8001974 <__aeabi_dmul>
 80079a6:	4a62      	ldr	r2, [pc, #392]	; (8007b30 <atan+0x2e8>)
 80079a8:	4b62      	ldr	r3, [pc, #392]	; (8007b34 <atan+0x2ec>)
 80079aa:	f7fa fa63 	bl	8001e74 <__aeabi_dsub>
 80079ae:	0032      	movs	r2, r6
 80079b0:	003b      	movs	r3, r7
 80079b2:	f7f9 ffdf 	bl	8001974 <__aeabi_dmul>
 80079b6:	4a60      	ldr	r2, [pc, #384]	; (8007b38 <atan+0x2f0>)
 80079b8:	4b60      	ldr	r3, [pc, #384]	; (8007b3c <atan+0x2f4>)
 80079ba:	f7fa fa5b 	bl	8001e74 <__aeabi_dsub>
 80079be:	0032      	movs	r2, r6
 80079c0:	003b      	movs	r3, r7
 80079c2:	f7f9 ffd7 	bl	8001974 <__aeabi_dmul>
 80079c6:	000b      	movs	r3, r1
 80079c8:	9902      	ldr	r1, [sp, #8]
 80079ca:	0002      	movs	r2, r0
 80079cc:	3101      	adds	r1, #1
 80079ce:	d14b      	bne.n	8007a68 <atan+0x220>
 80079d0:	9800      	ldr	r0, [sp, #0]
 80079d2:	9901      	ldr	r1, [sp, #4]
 80079d4:	f7f9 f88a 	bl	8000aec <__aeabi_dadd>
 80079d8:	0022      	movs	r2, r4
 80079da:	002b      	movs	r3, r5
 80079dc:	f7f9 ffca 	bl	8001974 <__aeabi_dmul>
 80079e0:	0002      	movs	r2, r0
 80079e2:	000b      	movs	r3, r1
 80079e4:	0020      	movs	r0, r4
 80079e6:	0029      	movs	r1, r5
 80079e8:	f7fa fa44 	bl	8001e74 <__aeabi_dsub>
 80079ec:	e742      	b.n	8007874 <atan+0x2c>
 80079ee:	2200      	movs	r2, #0
 80079f0:	4b3a      	ldr	r3, [pc, #232]	; (8007adc <atan+0x294>)
 80079f2:	f7fa fa3f 	bl	8001e74 <__aeabi_dsub>
 80079f6:	2200      	movs	r2, #0
 80079f8:	0006      	movs	r6, r0
 80079fa:	000f      	movs	r7, r1
 80079fc:	4b37      	ldr	r3, [pc, #220]	; (8007adc <atan+0x294>)
 80079fe:	0020      	movs	r0, r4
 8007a00:	0029      	movs	r1, r5
 8007a02:	f7f9 f873 	bl	8000aec <__aeabi_dadd>
 8007a06:	000b      	movs	r3, r1
 8007a08:	0002      	movs	r2, r0
 8007a0a:	0039      	movs	r1, r7
 8007a0c:	0030      	movs	r0, r6
 8007a0e:	f7f9 fb7d 	bl	800110c <__aeabi_ddiv>
 8007a12:	2301      	movs	r3, #1
 8007a14:	0004      	movs	r4, r0
 8007a16:	000d      	movs	r5, r1
 8007a18:	e772      	b.n	8007900 <atan+0xb8>
 8007a1a:	4b49      	ldr	r3, [pc, #292]	; (8007b40 <atan+0x2f8>)
 8007a1c:	429e      	cmp	r6, r3
 8007a1e:	dc19      	bgt.n	8007a54 <atan+0x20c>
 8007a20:	2200      	movs	r2, #0
 8007a22:	4b48      	ldr	r3, [pc, #288]	; (8007b44 <atan+0x2fc>)
 8007a24:	f7fa fa26 	bl	8001e74 <__aeabi_dsub>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	0006      	movs	r6, r0
 8007a2c:	000f      	movs	r7, r1
 8007a2e:	4b45      	ldr	r3, [pc, #276]	; (8007b44 <atan+0x2fc>)
 8007a30:	0020      	movs	r0, r4
 8007a32:	0029      	movs	r1, r5
 8007a34:	f7f9 ff9e 	bl	8001974 <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b28      	ldr	r3, [pc, #160]	; (8007adc <atan+0x294>)
 8007a3c:	f7f9 f856 	bl	8000aec <__aeabi_dadd>
 8007a40:	000b      	movs	r3, r1
 8007a42:	0002      	movs	r2, r0
 8007a44:	0039      	movs	r1, r7
 8007a46:	0030      	movs	r0, r6
 8007a48:	f7f9 fb60 	bl	800110c <__aeabi_ddiv>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	0004      	movs	r4, r0
 8007a50:	000d      	movs	r5, r1
 8007a52:	e755      	b.n	8007900 <atan+0xb8>
 8007a54:	000b      	movs	r3, r1
 8007a56:	0002      	movs	r2, r0
 8007a58:	493b      	ldr	r1, [pc, #236]	; (8007b48 <atan+0x300>)
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f7f9 fb56 	bl	800110c <__aeabi_ddiv>
 8007a60:	2303      	movs	r3, #3
 8007a62:	0004      	movs	r4, r0
 8007a64:	000d      	movs	r5, r1
 8007a66:	e74b      	b.n	8007900 <atan+0xb8>
 8007a68:	9902      	ldr	r1, [sp, #8]
 8007a6a:	4f38      	ldr	r7, [pc, #224]	; (8007b4c <atan+0x304>)
 8007a6c:	00ce      	lsls	r6, r1, #3
 8007a6e:	9800      	ldr	r0, [sp, #0]
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	f7f9 f83b 	bl	8000aec <__aeabi_dadd>
 8007a76:	0022      	movs	r2, r4
 8007a78:	002b      	movs	r3, r5
 8007a7a:	f7f9 ff7b 	bl	8001974 <__aeabi_dmul>
 8007a7e:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <atan+0x308>)
 8007a80:	19bf      	adds	r7, r7, r6
 8007a82:	199e      	adds	r6, r3, r6
 8007a84:	6832      	ldr	r2, [r6, #0]
 8007a86:	6873      	ldr	r3, [r6, #4]
 8007a88:	f7fa f9f4 	bl	8001e74 <__aeabi_dsub>
 8007a8c:	0022      	movs	r2, r4
 8007a8e:	002b      	movs	r3, r5
 8007a90:	f7fa f9f0 	bl	8001e74 <__aeabi_dsub>
 8007a94:	000b      	movs	r3, r1
 8007a96:	0002      	movs	r2, r0
 8007a98:	6838      	ldr	r0, [r7, #0]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	f7fa f9ea 	bl	8001e74 <__aeabi_dsub>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	0004      	movs	r4, r0
 8007aa4:	000d      	movs	r5, r1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	db00      	blt.n	8007aac <atan+0x264>
 8007aaa:	e6ec      	b.n	8007886 <atan+0x3e>
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	0609      	lsls	r1, r1, #24
 8007ab0:	186b      	adds	r3, r5, r1
 8007ab2:	001d      	movs	r5, r3
 8007ab4:	e6e7      	b.n	8007886 <atan+0x3e>
 8007ab6:	4d27      	ldr	r5, [pc, #156]	; (8007b54 <atan+0x30c>)
 8007ab8:	e6e5      	b.n	8007886 <atan+0x3e>
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	440fffff 	.word	0x440fffff
 8007ac0:	7ff00000 	.word	0x7ff00000
 8007ac4:	54442d18 	.word	0x54442d18
 8007ac8:	bff921fb 	.word	0xbff921fb
 8007acc:	3fdbffff 	.word	0x3fdbffff
 8007ad0:	3e1fffff 	.word	0x3e1fffff
 8007ad4:	8800759c 	.word	0x8800759c
 8007ad8:	7e37e43c 	.word	0x7e37e43c
 8007adc:	3ff00000 	.word	0x3ff00000
 8007ae0:	3ff2ffff 	.word	0x3ff2ffff
 8007ae4:	3fe5ffff 	.word	0x3fe5ffff
 8007ae8:	e322da11 	.word	0xe322da11
 8007aec:	3f90ad3a 	.word	0x3f90ad3a
 8007af0:	24760deb 	.word	0x24760deb
 8007af4:	3fa97b4b 	.word	0x3fa97b4b
 8007af8:	a0d03d51 	.word	0xa0d03d51
 8007afc:	3fb10d66 	.word	0x3fb10d66
 8007b00:	c54c206e 	.word	0xc54c206e
 8007b04:	3fb745cd 	.word	0x3fb745cd
 8007b08:	920083ff 	.word	0x920083ff
 8007b0c:	3fc24924 	.word	0x3fc24924
 8007b10:	5555550d 	.word	0x5555550d
 8007b14:	3fd55555 	.word	0x3fd55555
 8007b18:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b1c:	bfa2b444 	.word	0xbfa2b444
 8007b20:	52defd9a 	.word	0x52defd9a
 8007b24:	3fadde2d 	.word	0x3fadde2d
 8007b28:	af749a6d 	.word	0xaf749a6d
 8007b2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007b30:	fe231671 	.word	0xfe231671
 8007b34:	3fbc71c6 	.word	0x3fbc71c6
 8007b38:	9998ebc4 	.word	0x9998ebc4
 8007b3c:	3fc99999 	.word	0x3fc99999
 8007b40:	40037fff 	.word	0x40037fff
 8007b44:	3ff80000 	.word	0x3ff80000
 8007b48:	bff00000 	.word	0xbff00000
 8007b4c:	08008e40 	.word	0x08008e40
 8007b50:	08008e60 	.word	0x08008e60
 8007b54:	3ff921fb 	.word	0x3ff921fb

08007b58 <cos>:
 8007b58:	b530      	push	{r4, r5, lr}
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <cos+0x7c>)
 8007b5c:	004b      	lsls	r3, r1, #1
 8007b5e:	b087      	sub	sp, #28
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	4293      	cmp	r3, r2
 8007b64:	dc04      	bgt.n	8007b70 <cos+0x18>
 8007b66:	2200      	movs	r2, #0
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f000 fa65 	bl	8008038 <__kernel_cos>
 8007b6e:	e006      	b.n	8007b7e <cos+0x26>
 8007b70:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <cos+0x80>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	dd05      	ble.n	8007b82 <cos+0x2a>
 8007b76:	0002      	movs	r2, r0
 8007b78:	000b      	movs	r3, r1
 8007b7a:	f7fa f97b 	bl	8001e74 <__aeabi_dsub>
 8007b7e:	b007      	add	sp, #28
 8007b80:	bd30      	pop	{r4, r5, pc}
 8007b82:	aa02      	add	r2, sp, #8
 8007b84:	f000 f874 	bl	8007c70 <__ieee754_rem_pio2>
 8007b88:	9c04      	ldr	r4, [sp, #16]
 8007b8a:	9d05      	ldr	r5, [sp, #20]
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	4003      	ands	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d008      	beq.n	8007ba6 <cos+0x4e>
 8007b94:	9802      	ldr	r0, [sp, #8]
 8007b96:	9903      	ldr	r1, [sp, #12]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d00f      	beq.n	8007bbc <cos+0x64>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d112      	bne.n	8007bc6 <cos+0x6e>
 8007ba0:	0022      	movs	r2, r4
 8007ba2:	002b      	movs	r3, r5
 8007ba4:	e7e1      	b.n	8007b6a <cos+0x12>
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	0022      	movs	r2, r4
 8007baa:	9802      	ldr	r0, [sp, #8]
 8007bac:	9903      	ldr	r1, [sp, #12]
 8007bae:	002b      	movs	r3, r5
 8007bb0:	f000 fe92 	bl	80088d8 <__kernel_sin>
 8007bb4:	2380      	movs	r3, #128	; 0x80
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	18c9      	adds	r1, r1, r3
 8007bba:	e7e0      	b.n	8007b7e <cos+0x26>
 8007bbc:	0022      	movs	r2, r4
 8007bbe:	002b      	movs	r3, r5
 8007bc0:	f000 fa3a 	bl	8008038 <__kernel_cos>
 8007bc4:	e7f6      	b.n	8007bb4 <cos+0x5c>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	0022      	movs	r2, r4
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	002b      	movs	r3, r5
 8007bce:	f000 fe83 	bl	80088d8 <__kernel_sin>
 8007bd2:	e7d4      	b.n	8007b7e <cos+0x26>
 8007bd4:	3fe921fb 	.word	0x3fe921fb
 8007bd8:	7fefffff 	.word	0x7fefffff

08007bdc <fabs>:
 8007bdc:	0049      	lsls	r1, r1, #1
 8007bde:	084b      	lsrs	r3, r1, #1
 8007be0:	0019      	movs	r1, r3
 8007be2:	4770      	bx	lr

08007be4 <sin>:
 8007be4:	b530      	push	{r4, r5, lr}
 8007be6:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <sin+0x84>)
 8007be8:	004b      	lsls	r3, r1, #1
 8007bea:	b087      	sub	sp, #28
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	dc06      	bgt.n	8007c00 <sin+0x1c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f000 fe6d 	bl	80088d8 <__kernel_sin>
 8007bfe:	e006      	b.n	8007c0e <sin+0x2a>
 8007c00:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <sin+0x88>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	dd05      	ble.n	8007c12 <sin+0x2e>
 8007c06:	0002      	movs	r2, r0
 8007c08:	000b      	movs	r3, r1
 8007c0a:	f7fa f933 	bl	8001e74 <__aeabi_dsub>
 8007c0e:	b007      	add	sp, #28
 8007c10:	bd30      	pop	{r4, r5, pc}
 8007c12:	aa02      	add	r2, sp, #8
 8007c14:	f000 f82c 	bl	8007c70 <__ieee754_rem_pio2>
 8007c18:	9c04      	ldr	r4, [sp, #16]
 8007c1a:	9d05      	ldr	r5, [sp, #20]
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	4003      	ands	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d00a      	beq.n	8007c3a <sin+0x56>
 8007c24:	9802      	ldr	r0, [sp, #8]
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d00d      	beq.n	8007c48 <sin+0x64>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d115      	bne.n	8007c5c <sin+0x78>
 8007c30:	3301      	adds	r3, #1
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	0022      	movs	r2, r4
 8007c36:	002b      	movs	r3, r5
 8007c38:	e7df      	b.n	8007bfa <sin+0x16>
 8007c3a:	0022      	movs	r2, r4
 8007c3c:	9802      	ldr	r0, [sp, #8]
 8007c3e:	9903      	ldr	r1, [sp, #12]
 8007c40:	002b      	movs	r3, r5
 8007c42:	f000 f9f9 	bl	8008038 <__kernel_cos>
 8007c46:	e7e2      	b.n	8007c0e <sin+0x2a>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	0022      	movs	r2, r4
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	002b      	movs	r3, r5
 8007c50:	f000 fe42 	bl	80088d8 <__kernel_sin>
 8007c54:	2380      	movs	r3, #128	; 0x80
 8007c56:	061b      	lsls	r3, r3, #24
 8007c58:	18c9      	adds	r1, r1, r3
 8007c5a:	e7d8      	b.n	8007c0e <sin+0x2a>
 8007c5c:	0022      	movs	r2, r4
 8007c5e:	002b      	movs	r3, r5
 8007c60:	f000 f9ea 	bl	8008038 <__kernel_cos>
 8007c64:	e7f6      	b.n	8007c54 <sin+0x70>
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	3fe921fb 	.word	0x3fe921fb
 8007c6c:	7fefffff 	.word	0x7fefffff

08007c70 <__ieee754_rem_pio2>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	004b      	lsls	r3, r1, #1
 8007c74:	b091      	sub	sp, #68	; 0x44
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	0017      	movs	r7, r2
 8007c7c:	4bda      	ldr	r3, [pc, #872]	; (8007fe8 <__ieee754_rem_pio2+0x378>)
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	9108      	str	r1, [sp, #32]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	dc09      	bgt.n	8007c9a <__ieee754_rem_pio2+0x2a>
 8007c86:	0002      	movs	r2, r0
 8007c88:	000b      	movs	r3, r1
 8007c8a:	603a      	str	r2, [r7, #0]
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	60ba      	str	r2, [r7, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	2600      	movs	r6, #0
 8007c98:	e022      	b.n	8007ce0 <__ieee754_rem_pio2+0x70>
 8007c9a:	4bd4      	ldr	r3, [pc, #848]	; (8007fec <__ieee754_rem_pio2+0x37c>)
 8007c9c:	9a04      	ldr	r2, [sp, #16]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	dc6a      	bgt.n	8007d78 <__ieee754_rem_pio2+0x108>
 8007ca2:	4ed3      	ldr	r6, [pc, #844]	; (8007ff0 <__ieee754_rem_pio2+0x380>)
 8007ca4:	4ad3      	ldr	r2, [pc, #844]	; (8007ff4 <__ieee754_rem_pio2+0x384>)
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	dd33      	ble.n	8007d12 <__ieee754_rem_pio2+0xa2>
 8007caa:	4bd1      	ldr	r3, [pc, #836]	; (8007ff0 <__ieee754_rem_pio2+0x380>)
 8007cac:	f7fa f8e2 	bl	8001e74 <__aeabi_dsub>
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	0004      	movs	r4, r0
 8007cb4:	000d      	movs	r5, r1
 8007cb6:	42b3      	cmp	r3, r6
 8007cb8:	d015      	beq.n	8007ce6 <__ieee754_rem_pio2+0x76>
 8007cba:	4acf      	ldr	r2, [pc, #828]	; (8007ff8 <__ieee754_rem_pio2+0x388>)
 8007cbc:	4bcf      	ldr	r3, [pc, #828]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007cbe:	f7fa f8d9 	bl	8001e74 <__aeabi_dsub>
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	000b      	movs	r3, r1
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	603a      	str	r2, [r7, #0]
 8007cca:	607b      	str	r3, [r7, #4]
 8007ccc:	0029      	movs	r1, r5
 8007cce:	f7fa f8d1 	bl	8001e74 <__aeabi_dsub>
 8007cd2:	4ac9      	ldr	r2, [pc, #804]	; (8007ff8 <__ieee754_rem_pio2+0x388>)
 8007cd4:	4bc9      	ldr	r3, [pc, #804]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007cd6:	f7fa f8cd 	bl	8001e74 <__aeabi_dsub>
 8007cda:	2601      	movs	r6, #1
 8007cdc:	60b8      	str	r0, [r7, #8]
 8007cde:	60f9      	str	r1, [r7, #12]
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	b011      	add	sp, #68	; 0x44
 8007ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce6:	22d3      	movs	r2, #211	; 0xd3
 8007ce8:	4bc4      	ldr	r3, [pc, #784]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007cea:	0552      	lsls	r2, r2, #21
 8007cec:	f7fa f8c2 	bl	8001e74 <__aeabi_dsub>
 8007cf0:	4ac3      	ldr	r2, [pc, #780]	; (8008000 <__ieee754_rem_pio2+0x390>)
 8007cf2:	4bc4      	ldr	r3, [pc, #784]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007cf4:	0004      	movs	r4, r0
 8007cf6:	000d      	movs	r5, r1
 8007cf8:	f7fa f8bc 	bl	8001e74 <__aeabi_dsub>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	000b      	movs	r3, r1
 8007d00:	0020      	movs	r0, r4
 8007d02:	603a      	str	r2, [r7, #0]
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	0029      	movs	r1, r5
 8007d08:	f7fa f8b4 	bl	8001e74 <__aeabi_dsub>
 8007d0c:	4abc      	ldr	r2, [pc, #752]	; (8008000 <__ieee754_rem_pio2+0x390>)
 8007d0e:	4bbd      	ldr	r3, [pc, #756]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007d10:	e7e1      	b.n	8007cd6 <__ieee754_rem_pio2+0x66>
 8007d12:	4bb7      	ldr	r3, [pc, #732]	; (8007ff0 <__ieee754_rem_pio2+0x380>)
 8007d14:	f7f8 feea 	bl	8000aec <__aeabi_dadd>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	0004      	movs	r4, r0
 8007d1c:	000d      	movs	r5, r1
 8007d1e:	42b3      	cmp	r3, r6
 8007d20:	d014      	beq.n	8007d4c <__ieee754_rem_pio2+0xdc>
 8007d22:	4ab5      	ldr	r2, [pc, #724]	; (8007ff8 <__ieee754_rem_pio2+0x388>)
 8007d24:	4bb5      	ldr	r3, [pc, #724]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007d26:	f7f8 fee1 	bl	8000aec <__aeabi_dadd>
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	000b      	movs	r3, r1
 8007d2e:	0020      	movs	r0, r4
 8007d30:	603a      	str	r2, [r7, #0]
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	0029      	movs	r1, r5
 8007d36:	f7fa f89d 	bl	8001e74 <__aeabi_dsub>
 8007d3a:	4aaf      	ldr	r2, [pc, #700]	; (8007ff8 <__ieee754_rem_pio2+0x388>)
 8007d3c:	4baf      	ldr	r3, [pc, #700]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007d3e:	f7f8 fed5 	bl	8000aec <__aeabi_dadd>
 8007d42:	2601      	movs	r6, #1
 8007d44:	60b8      	str	r0, [r7, #8]
 8007d46:	60f9      	str	r1, [r7, #12]
 8007d48:	4276      	negs	r6, r6
 8007d4a:	e7c9      	b.n	8007ce0 <__ieee754_rem_pio2+0x70>
 8007d4c:	22d3      	movs	r2, #211	; 0xd3
 8007d4e:	4bab      	ldr	r3, [pc, #684]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007d50:	0552      	lsls	r2, r2, #21
 8007d52:	f7f8 fecb 	bl	8000aec <__aeabi_dadd>
 8007d56:	4aaa      	ldr	r2, [pc, #680]	; (8008000 <__ieee754_rem_pio2+0x390>)
 8007d58:	4baa      	ldr	r3, [pc, #680]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007d5a:	0004      	movs	r4, r0
 8007d5c:	000d      	movs	r5, r1
 8007d5e:	f7f8 fec5 	bl	8000aec <__aeabi_dadd>
 8007d62:	0002      	movs	r2, r0
 8007d64:	000b      	movs	r3, r1
 8007d66:	0020      	movs	r0, r4
 8007d68:	603a      	str	r2, [r7, #0]
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	0029      	movs	r1, r5
 8007d6e:	f7fa f881 	bl	8001e74 <__aeabi_dsub>
 8007d72:	4aa3      	ldr	r2, [pc, #652]	; (8008000 <__ieee754_rem_pio2+0x390>)
 8007d74:	4ba3      	ldr	r3, [pc, #652]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007d76:	e7e2      	b.n	8007d3e <__ieee754_rem_pio2+0xce>
 8007d78:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <__ieee754_rem_pio2+0x398>)
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	dd00      	ble.n	8007d82 <__ieee754_rem_pio2+0x112>
 8007d80:	e0d2      	b.n	8007f28 <__ieee754_rem_pio2+0x2b8>
 8007d82:	f7ff ff2b 	bl	8007bdc <fabs>
 8007d86:	4aa1      	ldr	r2, [pc, #644]	; (800800c <__ieee754_rem_pio2+0x39c>)
 8007d88:	4ba1      	ldr	r3, [pc, #644]	; (8008010 <__ieee754_rem_pio2+0x3a0>)
 8007d8a:	0004      	movs	r4, r0
 8007d8c:	000d      	movs	r5, r1
 8007d8e:	f7f9 fdf1 	bl	8001974 <__aeabi_dmul>
 8007d92:	2200      	movs	r2, #0
 8007d94:	4b9f      	ldr	r3, [pc, #636]	; (8008014 <__ieee754_rem_pio2+0x3a4>)
 8007d96:	f7f8 fea9 	bl	8000aec <__aeabi_dadd>
 8007d9a:	f7fa fb81 	bl	80024a0 <__aeabi_d2iz>
 8007d9e:	0006      	movs	r6, r0
 8007da0:	f7fa fbb2 	bl	8002508 <__aeabi_i2d>
 8007da4:	4a93      	ldr	r2, [pc, #588]	; (8007ff4 <__ieee754_rem_pio2+0x384>)
 8007da6:	4b92      	ldr	r3, [pc, #584]	; (8007ff0 <__ieee754_rem_pio2+0x380>)
 8007da8:	9006      	str	r0, [sp, #24]
 8007daa:	9107      	str	r1, [sp, #28]
 8007dac:	f7f9 fde2 	bl	8001974 <__aeabi_dmul>
 8007db0:	0002      	movs	r2, r0
 8007db2:	000b      	movs	r3, r1
 8007db4:	0020      	movs	r0, r4
 8007db6:	0029      	movs	r1, r5
 8007db8:	f7fa f85c 	bl	8001e74 <__aeabi_dsub>
 8007dbc:	4a8e      	ldr	r2, [pc, #568]	; (8007ff8 <__ieee754_rem_pio2+0x388>)
 8007dbe:	9002      	str	r0, [sp, #8]
 8007dc0:	9103      	str	r1, [sp, #12]
 8007dc2:	9806      	ldr	r0, [sp, #24]
 8007dc4:	9907      	ldr	r1, [sp, #28]
 8007dc6:	4b8d      	ldr	r3, [pc, #564]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007dc8:	f7f9 fdd4 	bl	8001974 <__aeabi_dmul>
 8007dcc:	0004      	movs	r4, r0
 8007dce:	000d      	movs	r5, r1
 8007dd0:	2e1f      	cmp	r6, #31
 8007dd2:	dc30      	bgt.n	8007e36 <__ieee754_rem_pio2+0x1c6>
 8007dd4:	4a90      	ldr	r2, [pc, #576]	; (8008018 <__ieee754_rem_pio2+0x3a8>)
 8007dd6:	1e73      	subs	r3, r6, #1
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	589b      	ldr	r3, [r3, r2]
 8007ddc:	9a04      	ldr	r2, [sp, #16]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d029      	beq.n	8007e36 <__ieee754_rem_pio2+0x1c6>
 8007de2:	9802      	ldr	r0, [sp, #8]
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	0022      	movs	r2, r4
 8007de8:	002b      	movs	r3, r5
 8007dea:	f7fa f843 	bl	8001e74 <__aeabi_dsub>
 8007dee:	6038      	str	r0, [r7, #0]
 8007df0:	6079      	str	r1, [r7, #4]
 8007df2:	9802      	ldr	r0, [sp, #8]
 8007df4:	9903      	ldr	r1, [sp, #12]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	9a04      	ldr	r2, [sp, #16]
 8007dfe:	9306      	str	r3, [sp, #24]
 8007e00:	9b06      	ldr	r3, [sp, #24]
 8007e02:	f7fa f837 	bl	8001e74 <__aeabi_dsub>
 8007e06:	0022      	movs	r2, r4
 8007e08:	002b      	movs	r3, r5
 8007e0a:	f7fa f833 	bl	8001e74 <__aeabi_dsub>
 8007e0e:	000b      	movs	r3, r1
 8007e10:	0002      	movs	r2, r0
 8007e12:	60ba      	str	r2, [r7, #8]
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db00      	blt.n	8007e1e <__ieee754_rem_pio2+0x1ae>
 8007e1c:	e760      	b.n	8007ce0 <__ieee754_rem_pio2+0x70>
 8007e1e:	2280      	movs	r2, #128	; 0x80
 8007e20:	0612      	lsls	r2, r2, #24
 8007e22:	4694      	mov	ip, r2
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	1889      	adds	r1, r1, r2
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	60b8      	str	r0, [r7, #8]
 8007e2e:	4463      	add	r3, ip
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	60f9      	str	r1, [r7, #12]
 8007e34:	e788      	b.n	8007d48 <__ieee754_rem_pio2+0xd8>
 8007e36:	0022      	movs	r2, r4
 8007e38:	9802      	ldr	r0, [sp, #8]
 8007e3a:	9903      	ldr	r1, [sp, #12]
 8007e3c:	002b      	movs	r3, r5
 8007e3e:	f7fa f819 	bl	8001e74 <__aeabi_dsub>
 8007e42:	000b      	movs	r3, r1
 8007e44:	0002      	movs	r2, r0
 8007e46:	603a      	str	r2, [r7, #0]
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	9b04      	ldr	r3, [sp, #16]
 8007e4c:	0049      	lsls	r1, r1, #1
 8007e4e:	151b      	asrs	r3, r3, #20
 8007e50:	0d49      	lsrs	r1, r1, #21
 8007e52:	9309      	str	r3, [sp, #36]	; 0x24
 8007e54:	1a59      	subs	r1, r3, r1
 8007e56:	2910      	cmp	r1, #16
 8007e58:	ddcb      	ble.n	8007df2 <__ieee754_rem_pio2+0x182>
 8007e5a:	9806      	ldr	r0, [sp, #24]
 8007e5c:	9907      	ldr	r1, [sp, #28]
 8007e5e:	22d3      	movs	r2, #211	; 0xd3
 8007e60:	4b66      	ldr	r3, [pc, #408]	; (8007ffc <__ieee754_rem_pio2+0x38c>)
 8007e62:	0552      	lsls	r2, r2, #21
 8007e64:	f7f9 fd86 	bl	8001974 <__aeabi_dmul>
 8007e68:	0004      	movs	r4, r0
 8007e6a:	000d      	movs	r5, r1
 8007e6c:	0002      	movs	r2, r0
 8007e6e:	000b      	movs	r3, r1
 8007e70:	9802      	ldr	r0, [sp, #8]
 8007e72:	9903      	ldr	r1, [sp, #12]
 8007e74:	f7f9 fffe 	bl	8001e74 <__aeabi_dsub>
 8007e78:	0002      	movs	r2, r0
 8007e7a:	000b      	movs	r3, r1
 8007e7c:	9004      	str	r0, [sp, #16]
 8007e7e:	9105      	str	r1, [sp, #20]
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	9903      	ldr	r1, [sp, #12]
 8007e84:	f7f9 fff6 	bl	8001e74 <__aeabi_dsub>
 8007e88:	0022      	movs	r2, r4
 8007e8a:	002b      	movs	r3, r5
 8007e8c:	f7f9 fff2 	bl	8001e74 <__aeabi_dsub>
 8007e90:	0004      	movs	r4, r0
 8007e92:	000d      	movs	r5, r1
 8007e94:	9806      	ldr	r0, [sp, #24]
 8007e96:	9907      	ldr	r1, [sp, #28]
 8007e98:	4a59      	ldr	r2, [pc, #356]	; (8008000 <__ieee754_rem_pio2+0x390>)
 8007e9a:	4b5a      	ldr	r3, [pc, #360]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007e9c:	f7f9 fd6a 	bl	8001974 <__aeabi_dmul>
 8007ea0:	0022      	movs	r2, r4
 8007ea2:	002b      	movs	r3, r5
 8007ea4:	f7f9 ffe6 	bl	8001e74 <__aeabi_dsub>
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	000b      	movs	r3, r1
 8007eac:	0004      	movs	r4, r0
 8007eae:	000d      	movs	r5, r1
 8007eb0:	9804      	ldr	r0, [sp, #16]
 8007eb2:	9905      	ldr	r1, [sp, #20]
 8007eb4:	f7f9 ffde 	bl	8001e74 <__aeabi_dsub>
 8007eb8:	000b      	movs	r3, r1
 8007eba:	0002      	movs	r2, r0
 8007ebc:	0049      	lsls	r1, r1, #1
 8007ebe:	603a      	str	r2, [r7, #0]
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec4:	0d49      	lsrs	r1, r1, #21
 8007ec6:	1a59      	subs	r1, r3, r1
 8007ec8:	9a04      	ldr	r2, [sp, #16]
 8007eca:	9b05      	ldr	r3, [sp, #20]
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	2931      	cmp	r1, #49	; 0x31
 8007ed2:	dd8e      	ble.n	8007df2 <__ieee754_rem_pio2+0x182>
 8007ed4:	9806      	ldr	r0, [sp, #24]
 8007ed6:	9907      	ldr	r1, [sp, #28]
 8007ed8:	22b8      	movs	r2, #184	; 0xb8
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <__ieee754_rem_pio2+0x394>)
 8007edc:	0592      	lsls	r2, r2, #22
 8007ede:	f7f9 fd49 	bl	8001974 <__aeabi_dmul>
 8007ee2:	0004      	movs	r4, r0
 8007ee4:	000d      	movs	r5, r1
 8007ee6:	0002      	movs	r2, r0
 8007ee8:	000b      	movs	r3, r1
 8007eea:	9802      	ldr	r0, [sp, #8]
 8007eec:	9903      	ldr	r1, [sp, #12]
 8007eee:	f7f9 ffc1 	bl	8001e74 <__aeabi_dsub>
 8007ef2:	0002      	movs	r2, r0
 8007ef4:	000b      	movs	r3, r1
 8007ef6:	9002      	str	r0, [sp, #8]
 8007ef8:	9103      	str	r1, [sp, #12]
 8007efa:	9804      	ldr	r0, [sp, #16]
 8007efc:	9905      	ldr	r1, [sp, #20]
 8007efe:	f7f9 ffb9 	bl	8001e74 <__aeabi_dsub>
 8007f02:	0022      	movs	r2, r4
 8007f04:	002b      	movs	r3, r5
 8007f06:	f7f9 ffb5 	bl	8001e74 <__aeabi_dsub>
 8007f0a:	0004      	movs	r4, r0
 8007f0c:	000d      	movs	r5, r1
 8007f0e:	9806      	ldr	r0, [sp, #24]
 8007f10:	9907      	ldr	r1, [sp, #28]
 8007f12:	4a42      	ldr	r2, [pc, #264]	; (800801c <__ieee754_rem_pio2+0x3ac>)
 8007f14:	4b42      	ldr	r3, [pc, #264]	; (8008020 <__ieee754_rem_pio2+0x3b0>)
 8007f16:	f7f9 fd2d 	bl	8001974 <__aeabi_dmul>
 8007f1a:	0022      	movs	r2, r4
 8007f1c:	002b      	movs	r3, r5
 8007f1e:	f7f9 ffa9 	bl	8001e74 <__aeabi_dsub>
 8007f22:	0004      	movs	r4, r0
 8007f24:	000d      	movs	r5, r1
 8007f26:	e75c      	b.n	8007de2 <__ieee754_rem_pio2+0x172>
 8007f28:	4b3e      	ldr	r3, [pc, #248]	; (8008024 <__ieee754_rem_pio2+0x3b4>)
 8007f2a:	9a04      	ldr	r2, [sp, #16]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	dd08      	ble.n	8007f42 <__ieee754_rem_pio2+0x2d2>
 8007f30:	0002      	movs	r2, r0
 8007f32:	000b      	movs	r3, r1
 8007f34:	f7f9 ff9e 	bl	8001e74 <__aeabi_dsub>
 8007f38:	60b8      	str	r0, [r7, #8]
 8007f3a:	60f9      	str	r1, [r7, #12]
 8007f3c:	6038      	str	r0, [r7, #0]
 8007f3e:	6079      	str	r1, [r7, #4]
 8007f40:	e6a9      	b.n	8007c96 <__ieee754_rem_pio2+0x26>
 8007f42:	9a04      	ldr	r2, [sp, #16]
 8007f44:	4938      	ldr	r1, [pc, #224]	; (8008028 <__ieee754_rem_pio2+0x3b8>)
 8007f46:	1512      	asrs	r2, r2, #20
 8007f48:	1852      	adds	r2, r2, r1
 8007f4a:	0513      	lsls	r3, r2, #20
 8007f4c:	9202      	str	r2, [sp, #8]
 8007f4e:	9a04      	ldr	r2, [sp, #16]
 8007f50:	0004      	movs	r4, r0
 8007f52:	1ad5      	subs	r5, r2, r3
 8007f54:	0029      	movs	r1, r5
 8007f56:	f7fa faa3 	bl	80024a0 <__aeabi_d2iz>
 8007f5a:	f7fa fad5 	bl	8002508 <__aeabi_i2d>
 8007f5e:	0002      	movs	r2, r0
 8007f60:	000b      	movs	r3, r1
 8007f62:	0020      	movs	r0, r4
 8007f64:	0029      	movs	r1, r5
 8007f66:	920a      	str	r2, [sp, #40]	; 0x28
 8007f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6a:	f7f9 ff83 	bl	8001e74 <__aeabi_dsub>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b2e      	ldr	r3, [pc, #184]	; (800802c <__ieee754_rem_pio2+0x3bc>)
 8007f72:	f7f9 fcff 	bl	8001974 <__aeabi_dmul>
 8007f76:	0004      	movs	r4, r0
 8007f78:	000d      	movs	r5, r1
 8007f7a:	f7fa fa91 	bl	80024a0 <__aeabi_d2iz>
 8007f7e:	f7fa fac3 	bl	8002508 <__aeabi_i2d>
 8007f82:	0002      	movs	r2, r0
 8007f84:	000b      	movs	r3, r1
 8007f86:	ae0a      	add	r6, sp, #40	; 0x28
 8007f88:	60b2      	str	r2, [r6, #8]
 8007f8a:	60f3      	str	r3, [r6, #12]
 8007f8c:	0020      	movs	r0, r4
 8007f8e:	0029      	movs	r1, r5
 8007f90:	f7f9 ff70 	bl	8001e74 <__aeabi_dsub>
 8007f94:	2200      	movs	r2, #0
 8007f96:	4b25      	ldr	r3, [pc, #148]	; (800802c <__ieee754_rem_pio2+0x3bc>)
 8007f98:	f7f9 fcec 	bl	8001974 <__aeabi_dmul>
 8007f9c:	2403      	movs	r4, #3
 8007f9e:	6130      	str	r0, [r6, #16]
 8007fa0:	6171      	str	r1, [r6, #20]
 8007fa2:	1e65      	subs	r5, r4, #1
 8007fa4:	00eb      	lsls	r3, r5, #3
 8007fa6:	18f3      	adds	r3, r6, r3
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	6859      	ldr	r1, [r3, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f7f8 fa3a 	bl	8000428 <__aeabi_dcmpeq>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d13d      	bne.n	8008034 <__ieee754_rem_pio2+0x3c4>
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <__ieee754_rem_pio2+0x3c0>)
 8007fba:	0030      	movs	r0, r6
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	9a02      	ldr	r2, [sp, #8]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	0039      	movs	r1, r7
 8007fc6:	0023      	movs	r3, r4
 8007fc8:	f000 f912 	bl	80081f0 <__kernel_rem_pio2>
 8007fcc:	9b08      	ldr	r3, [sp, #32]
 8007fce:	0006      	movs	r6, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db00      	blt.n	8007fd6 <__ieee754_rem_pio2+0x366>
 8007fd4:	e684      	b.n	8007ce0 <__ieee754_rem_pio2+0x70>
 8007fd6:	2280      	movs	r2, #128	; 0x80
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	0612      	lsls	r2, r2, #24
 8007fdc:	189b      	adds	r3, r3, r2
 8007fde:	607b      	str	r3, [r7, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e6af      	b.n	8007d48 <__ieee754_rem_pio2+0xd8>
 8007fe8:	3fe921fb 	.word	0x3fe921fb
 8007fec:	4002d97b 	.word	0x4002d97b
 8007ff0:	3ff921fb 	.word	0x3ff921fb
 8007ff4:	54400000 	.word	0x54400000
 8007ff8:	1a626331 	.word	0x1a626331
 8007ffc:	3dd0b461 	.word	0x3dd0b461
 8008000:	2e037073 	.word	0x2e037073
 8008004:	3ba3198a 	.word	0x3ba3198a
 8008008:	413921fb 	.word	0x413921fb
 800800c:	6dc9c883 	.word	0x6dc9c883
 8008010:	3fe45f30 	.word	0x3fe45f30
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	08008e80 	.word	0x08008e80
 800801c:	252049c1 	.word	0x252049c1
 8008020:	397b839a 	.word	0x397b839a
 8008024:	7fefffff 	.word	0x7fefffff
 8008028:	fffffbea 	.word	0xfffffbea
 800802c:	41700000 	.word	0x41700000
 8008030:	08008f00 	.word	0x08008f00
 8008034:	002c      	movs	r4, r5
 8008036:	e7b4      	b.n	8007fa2 <__ieee754_rem_pio2+0x332>

08008038 <__kernel_cos>:
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b08b      	sub	sp, #44	; 0x2c
 800803c:	9204      	str	r2, [sp, #16]
 800803e:	9305      	str	r3, [sp, #20]
 8008040:	4b58      	ldr	r3, [pc, #352]	; (80081a4 <__kernel_cos+0x16c>)
 8008042:	004d      	lsls	r5, r1, #1
 8008044:	9001      	str	r0, [sp, #4]
 8008046:	9100      	str	r1, [sp, #0]
 8008048:	086d      	lsrs	r5, r5, #1
 800804a:	429d      	cmp	r5, r3
 800804c:	dc06      	bgt.n	800805c <__kernel_cos+0x24>
 800804e:	9801      	ldr	r0, [sp, #4]
 8008050:	9900      	ldr	r1, [sp, #0]
 8008052:	f7fa fa25 	bl	80024a0 <__aeabi_d2iz>
 8008056:	2800      	cmp	r0, #0
 8008058:	d100      	bne.n	800805c <__kernel_cos+0x24>
 800805a:	e0a0      	b.n	800819e <__kernel_cos+0x166>
 800805c:	9a01      	ldr	r2, [sp, #4]
 800805e:	9b00      	ldr	r3, [sp, #0]
 8008060:	9801      	ldr	r0, [sp, #4]
 8008062:	9900      	ldr	r1, [sp, #0]
 8008064:	f7f9 fc86 	bl	8001974 <__aeabi_dmul>
 8008068:	0006      	movs	r6, r0
 800806a:	000f      	movs	r7, r1
 800806c:	4a4e      	ldr	r2, [pc, #312]	; (80081a8 <__kernel_cos+0x170>)
 800806e:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <__kernel_cos+0x174>)
 8008070:	f7f9 fc80 	bl	8001974 <__aeabi_dmul>
 8008074:	4a4e      	ldr	r2, [pc, #312]	; (80081b0 <__kernel_cos+0x178>)
 8008076:	4b4f      	ldr	r3, [pc, #316]	; (80081b4 <__kernel_cos+0x17c>)
 8008078:	f7f8 fd38 	bl	8000aec <__aeabi_dadd>
 800807c:	0032      	movs	r2, r6
 800807e:	003b      	movs	r3, r7
 8008080:	f7f9 fc78 	bl	8001974 <__aeabi_dmul>
 8008084:	4a4c      	ldr	r2, [pc, #304]	; (80081b8 <__kernel_cos+0x180>)
 8008086:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <__kernel_cos+0x184>)
 8008088:	f7f9 fef4 	bl	8001e74 <__aeabi_dsub>
 800808c:	0032      	movs	r2, r6
 800808e:	003b      	movs	r3, r7
 8008090:	f7f9 fc70 	bl	8001974 <__aeabi_dmul>
 8008094:	4a4a      	ldr	r2, [pc, #296]	; (80081c0 <__kernel_cos+0x188>)
 8008096:	4b4b      	ldr	r3, [pc, #300]	; (80081c4 <__kernel_cos+0x18c>)
 8008098:	f7f8 fd28 	bl	8000aec <__aeabi_dadd>
 800809c:	0032      	movs	r2, r6
 800809e:	003b      	movs	r3, r7
 80080a0:	f7f9 fc68 	bl	8001974 <__aeabi_dmul>
 80080a4:	4a48      	ldr	r2, [pc, #288]	; (80081c8 <__kernel_cos+0x190>)
 80080a6:	4b49      	ldr	r3, [pc, #292]	; (80081cc <__kernel_cos+0x194>)
 80080a8:	f7f9 fee4 	bl	8001e74 <__aeabi_dsub>
 80080ac:	0032      	movs	r2, r6
 80080ae:	003b      	movs	r3, r7
 80080b0:	f7f9 fc60 	bl	8001974 <__aeabi_dmul>
 80080b4:	4a46      	ldr	r2, [pc, #280]	; (80081d0 <__kernel_cos+0x198>)
 80080b6:	4b47      	ldr	r3, [pc, #284]	; (80081d4 <__kernel_cos+0x19c>)
 80080b8:	f7f8 fd18 	bl	8000aec <__aeabi_dadd>
 80080bc:	003b      	movs	r3, r7
 80080be:	0032      	movs	r2, r6
 80080c0:	f7f9 fc58 	bl	8001974 <__aeabi_dmul>
 80080c4:	4b44      	ldr	r3, [pc, #272]	; (80081d8 <__kernel_cos+0x1a0>)
 80080c6:	9002      	str	r0, [sp, #8]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	429d      	cmp	r5, r3
 80080cc:	dc29      	bgt.n	8008122 <__kernel_cos+0xea>
 80080ce:	2200      	movs	r2, #0
 80080d0:	4b42      	ldr	r3, [pc, #264]	; (80081dc <__kernel_cos+0x1a4>)
 80080d2:	0030      	movs	r0, r6
 80080d4:	0039      	movs	r1, r7
 80080d6:	f7f9 fc4d 	bl	8001974 <__aeabi_dmul>
 80080da:	9a02      	ldr	r2, [sp, #8]
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	9006      	str	r0, [sp, #24]
 80080e0:	9107      	str	r1, [sp, #28]
 80080e2:	0030      	movs	r0, r6
 80080e4:	0039      	movs	r1, r7
 80080e6:	f7f9 fc45 	bl	8001974 <__aeabi_dmul>
 80080ea:	9a04      	ldr	r2, [sp, #16]
 80080ec:	9b05      	ldr	r3, [sp, #20]
 80080ee:	0004      	movs	r4, r0
 80080f0:	000d      	movs	r5, r1
 80080f2:	9801      	ldr	r0, [sp, #4]
 80080f4:	9900      	ldr	r1, [sp, #0]
 80080f6:	f7f9 fc3d 	bl	8001974 <__aeabi_dmul>
 80080fa:	0002      	movs	r2, r0
 80080fc:	000b      	movs	r3, r1
 80080fe:	0020      	movs	r0, r4
 8008100:	0029      	movs	r1, r5
 8008102:	f7f9 feb7 	bl	8001e74 <__aeabi_dsub>
 8008106:	0002      	movs	r2, r0
 8008108:	000b      	movs	r3, r1
 800810a:	9806      	ldr	r0, [sp, #24]
 800810c:	9907      	ldr	r1, [sp, #28]
 800810e:	f7f9 feb1 	bl	8001e74 <__aeabi_dsub>
 8008112:	0002      	movs	r2, r0
 8008114:	2000      	movs	r0, #0
 8008116:	000b      	movs	r3, r1
 8008118:	4931      	ldr	r1, [pc, #196]	; (80081e0 <__kernel_cos+0x1a8>)
 800811a:	f7f9 feab 	bl	8001e74 <__aeabi_dsub>
 800811e:	b00b      	add	sp, #44	; 0x2c
 8008120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008122:	4b30      	ldr	r3, [pc, #192]	; (80081e4 <__kernel_cos+0x1ac>)
 8008124:	429d      	cmp	r5, r3
 8008126:	dc37      	bgt.n	8008198 <__kernel_cos+0x160>
 8008128:	2200      	movs	r2, #0
 800812a:	492f      	ldr	r1, [pc, #188]	; (80081e8 <__kernel_cos+0x1b0>)
 800812c:	0014      	movs	r4, r2
 800812e:	186b      	adds	r3, r5, r1
 8008130:	001d      	movs	r5, r3
 8008132:	0022      	movs	r2, r4
 8008134:	002b      	movs	r3, r5
 8008136:	2000      	movs	r0, #0
 8008138:	4929      	ldr	r1, [pc, #164]	; (80081e0 <__kernel_cos+0x1a8>)
 800813a:	f7f9 fe9b 	bl	8001e74 <__aeabi_dsub>
 800813e:	2200      	movs	r2, #0
 8008140:	9006      	str	r0, [sp, #24]
 8008142:	9107      	str	r1, [sp, #28]
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <__kernel_cos+0x1a4>)
 8008146:	0030      	movs	r0, r6
 8008148:	0039      	movs	r1, r7
 800814a:	f7f9 fc13 	bl	8001974 <__aeabi_dmul>
 800814e:	0022      	movs	r2, r4
 8008150:	002b      	movs	r3, r5
 8008152:	f7f9 fe8f 	bl	8001e74 <__aeabi_dsub>
 8008156:	9a02      	ldr	r2, [sp, #8]
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	9008      	str	r0, [sp, #32]
 800815c:	9109      	str	r1, [sp, #36]	; 0x24
 800815e:	0030      	movs	r0, r6
 8008160:	0039      	movs	r1, r7
 8008162:	f7f9 fc07 	bl	8001974 <__aeabi_dmul>
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	0004      	movs	r4, r0
 800816c:	000d      	movs	r5, r1
 800816e:	9801      	ldr	r0, [sp, #4]
 8008170:	9900      	ldr	r1, [sp, #0]
 8008172:	f7f9 fbff 	bl	8001974 <__aeabi_dmul>
 8008176:	0002      	movs	r2, r0
 8008178:	000b      	movs	r3, r1
 800817a:	0020      	movs	r0, r4
 800817c:	0029      	movs	r1, r5
 800817e:	f7f9 fe79 	bl	8001e74 <__aeabi_dsub>
 8008182:	0002      	movs	r2, r0
 8008184:	000b      	movs	r3, r1
 8008186:	9808      	ldr	r0, [sp, #32]
 8008188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800818a:	f7f9 fe73 	bl	8001e74 <__aeabi_dsub>
 800818e:	0002      	movs	r2, r0
 8008190:	000b      	movs	r3, r1
 8008192:	9806      	ldr	r0, [sp, #24]
 8008194:	9907      	ldr	r1, [sp, #28]
 8008196:	e7c0      	b.n	800811a <__kernel_cos+0xe2>
 8008198:	2400      	movs	r4, #0
 800819a:	4d14      	ldr	r5, [pc, #80]	; (80081ec <__kernel_cos+0x1b4>)
 800819c:	e7c9      	b.n	8008132 <__kernel_cos+0xfa>
 800819e:	2000      	movs	r0, #0
 80081a0:	490f      	ldr	r1, [pc, #60]	; (80081e0 <__kernel_cos+0x1a8>)
 80081a2:	e7bc      	b.n	800811e <__kernel_cos+0xe6>
 80081a4:	3e3fffff 	.word	0x3e3fffff
 80081a8:	be8838d4 	.word	0xbe8838d4
 80081ac:	bda8fae9 	.word	0xbda8fae9
 80081b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80081b4:	3e21ee9e 	.word	0x3e21ee9e
 80081b8:	809c52ad 	.word	0x809c52ad
 80081bc:	3e927e4f 	.word	0x3e927e4f
 80081c0:	19cb1590 	.word	0x19cb1590
 80081c4:	3efa01a0 	.word	0x3efa01a0
 80081c8:	16c15177 	.word	0x16c15177
 80081cc:	3f56c16c 	.word	0x3f56c16c
 80081d0:	5555554c 	.word	0x5555554c
 80081d4:	3fa55555 	.word	0x3fa55555
 80081d8:	3fd33332 	.word	0x3fd33332
 80081dc:	3fe00000 	.word	0x3fe00000
 80081e0:	3ff00000 	.word	0x3ff00000
 80081e4:	3fe90000 	.word	0x3fe90000
 80081e8:	ffe00000 	.word	0xffe00000
 80081ec:	3fd20000 	.word	0x3fd20000

080081f0 <__kernel_rem_pio2>:
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	0015      	movs	r5, r2
 80081f4:	4cd4      	ldr	r4, [pc, #848]	; (8008548 <__kernel_rem_pio2+0x358>)
 80081f6:	44a5      	add	sp, r4
 80081f8:	930c      	str	r3, [sp, #48]	; 0x30
 80081fa:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80081fc:	900d      	str	r0, [sp, #52]	; 0x34
 80081fe:	009a      	lsls	r2, r3, #2
 8008200:	4bd2      	ldr	r3, [pc, #840]	; (800854c <__kernel_rem_pio2+0x35c>)
 8008202:	9106      	str	r1, [sp, #24]
 8008204:	58d3      	ldr	r3, [r2, r3]
 8008206:	1ee8      	subs	r0, r5, #3
 8008208:	9308      	str	r3, [sp, #32]
 800820a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820c:	2118      	movs	r1, #24
 800820e:	3b01      	subs	r3, #1
 8008210:	930a      	str	r3, [sp, #40]	; 0x28
 8008212:	f7f8 f80d 	bl	8000230 <__divsi3>
 8008216:	43c3      	mvns	r3, r0
 8008218:	0004      	movs	r4, r0
 800821a:	17db      	asrs	r3, r3, #31
 800821c:	401c      	ands	r4, r3
 800821e:	2318      	movs	r3, #24
 8008220:	1c62      	adds	r2, r4, #1
 8008222:	425b      	negs	r3, r3
 8008224:	4353      	muls	r3, r2
 8008226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008228:	195b      	adds	r3, r3, r5
 800822a:	4694      	mov	ip, r2
 800822c:	2500      	movs	r5, #0
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	1aa7      	subs	r7, r4, r2
 8008234:	4463      	add	r3, ip
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800823a:	00be      	lsls	r6, r7, #2
 800823c:	199e      	adds	r6, r3, r6
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	429d      	cmp	r5, r3
 8008242:	dd0b      	ble.n	800825c <__kernel_rem_pio2+0x6c>
 8008244:	2500      	movs	r5, #0
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	429d      	cmp	r5, r3
 800824a:	dc3c      	bgt.n	80082c6 <__kernel_rem_pio2+0xd6>
 800824c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824e:	2600      	movs	r6, #0
 8008250:	195f      	adds	r7, r3, r5
 8008252:	00fb      	lsls	r3, r7, #3
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	2700      	movs	r7, #0
 8008258:	2300      	movs	r3, #0
 800825a:	e028      	b.n	80082ae <__kernel_rem_pio2+0xbe>
 800825c:	42ef      	cmn	r7, r5
 800825e:	d40a      	bmi.n	8008276 <__kernel_rem_pio2+0x86>
 8008260:	00ab      	lsls	r3, r5, #2
 8008262:	58f0      	ldr	r0, [r6, r3]
 8008264:	f7fa f950 	bl	8002508 <__aeabi_i2d>
 8008268:	00eb      	lsls	r3, r5, #3
 800826a:	aa26      	add	r2, sp, #152	; 0x98
 800826c:	18d3      	adds	r3, r2, r3
 800826e:	6018      	str	r0, [r3, #0]
 8008270:	6059      	str	r1, [r3, #4]
 8008272:	3501      	adds	r5, #1
 8008274:	e7e3      	b.n	800823e <__kernel_rem_pio2+0x4e>
 8008276:	2000      	movs	r0, #0
 8008278:	2100      	movs	r1, #0
 800827a:	e7f5      	b.n	8008268 <__kernel_rem_pio2+0x78>
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	9a04      	ldr	r2, [sp, #16]
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	1ad1      	subs	r1, r2, r3
 8008284:	3908      	subs	r1, #8
 8008286:	aa26      	add	r2, sp, #152	; 0x98
 8008288:	1851      	adds	r1, r2, r1
 800828a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800828c:	6808      	ldr	r0, [r1, #0]
 800828e:	6849      	ldr	r1, [r1, #4]
 8008290:	18d3      	adds	r3, r2, r3
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f7f9 fb6d 	bl	8001974 <__aeabi_dmul>
 800829a:	000b      	movs	r3, r1
 800829c:	0002      	movs	r2, r0
 800829e:	0039      	movs	r1, r7
 80082a0:	0030      	movs	r0, r6
 80082a2:	f7f8 fc23 	bl	8000aec <__aeabi_dadd>
 80082a6:	0006      	movs	r6, r0
 80082a8:	000f      	movs	r7, r1
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	3301      	adds	r3, #1
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	4293      	cmp	r3, r2
 80082b6:	dde1      	ble.n	800827c <__kernel_rem_pio2+0x8c>
 80082b8:	00eb      	lsls	r3, r5, #3
 80082ba:	aa76      	add	r2, sp, #472	; 0x1d8
 80082bc:	18d3      	adds	r3, r2, r3
 80082be:	601e      	str	r6, [r3, #0]
 80082c0:	605f      	str	r7, [r3, #4]
 80082c2:	3501      	adds	r5, #1
 80082c4:	e7bf      	b.n	8008246 <__kernel_rem_pio2+0x56>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	aa12      	add	r2, sp, #72	; 0x48
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	189b      	adds	r3, r3, r2
 80082ce:	9310      	str	r3, [sp, #64]	; 0x40
 80082d0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80082d2:	00a4      	lsls	r4, r4, #2
 80082d4:	191b      	adds	r3, r3, r4
 80082d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	425b      	negs	r3, r3
 80082de:	930e      	str	r3, [sp, #56]	; 0x38
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	aa76      	add	r2, sp, #472	; 0x1d8
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	18d3      	adds	r3, r2, r3
 80082ec:	681e      	ldr	r6, [r3, #0]
 80082ee:	685f      	ldr	r7, [r3, #4]
 80082f0:	9b00      	ldr	r3, [sp, #0]
 80082f2:	a912      	add	r1, sp, #72	; 0x48
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	185b      	adds	r3, r3, r1
 80082f8:	9c00      	ldr	r4, [sp, #0]
 80082fa:	9307      	str	r3, [sp, #28]
 80082fc:	9211      	str	r2, [sp, #68]	; 0x44
 80082fe:	2c00      	cmp	r4, #0
 8008300:	dc73      	bgt.n	80083ea <__kernel_rem_pio2+0x1fa>
 8008302:	9a02      	ldr	r2, [sp, #8]
 8008304:	0030      	movs	r0, r6
 8008306:	0039      	movs	r1, r7
 8008308:	f000 fc16 	bl	8008b38 <scalbn>
 800830c:	23ff      	movs	r3, #255	; 0xff
 800830e:	2200      	movs	r2, #0
 8008310:	059b      	lsls	r3, r3, #22
 8008312:	0004      	movs	r4, r0
 8008314:	000d      	movs	r5, r1
 8008316:	f7f9 fb2d 	bl	8001974 <__aeabi_dmul>
 800831a:	f000 fb8b 	bl	8008a34 <floor>
 800831e:	2200      	movs	r2, #0
 8008320:	4b8b      	ldr	r3, [pc, #556]	; (8008550 <__kernel_rem_pio2+0x360>)
 8008322:	f7f9 fb27 	bl	8001974 <__aeabi_dmul>
 8008326:	0002      	movs	r2, r0
 8008328:	000b      	movs	r3, r1
 800832a:	0020      	movs	r0, r4
 800832c:	0029      	movs	r1, r5
 800832e:	f7f9 fda1 	bl	8001e74 <__aeabi_dsub>
 8008332:	000d      	movs	r5, r1
 8008334:	0004      	movs	r4, r0
 8008336:	f7fa f8b3 	bl	80024a0 <__aeabi_d2iz>
 800833a:	9007      	str	r0, [sp, #28]
 800833c:	f7fa f8e4 	bl	8002508 <__aeabi_i2d>
 8008340:	000b      	movs	r3, r1
 8008342:	0002      	movs	r2, r0
 8008344:	0029      	movs	r1, r5
 8008346:	0020      	movs	r0, r4
 8008348:	f7f9 fd94 	bl	8001e74 <__aeabi_dsub>
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	0006      	movs	r6, r0
 8008350:	000f      	movs	r7, r1
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd72      	ble.n	800843c <__kernel_rem_pio2+0x24c>
 8008356:	2118      	movs	r1, #24
 8008358:	9b00      	ldr	r3, [sp, #0]
 800835a:	aa12      	add	r2, sp, #72	; 0x48
 800835c:	3b01      	subs	r3, #1
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	589a      	ldr	r2, [r3, r2]
 8008362:	9802      	ldr	r0, [sp, #8]
 8008364:	9c07      	ldr	r4, [sp, #28]
 8008366:	1a09      	subs	r1, r1, r0
 8008368:	0010      	movs	r0, r2
 800836a:	4108      	asrs	r0, r1
 800836c:	1824      	adds	r4, r4, r0
 800836e:	4088      	lsls	r0, r1
 8008370:	1a10      	subs	r0, r2, r0
 8008372:	aa12      	add	r2, sp, #72	; 0x48
 8008374:	5098      	str	r0, [r3, r2]
 8008376:	2317      	movs	r3, #23
 8008378:	9a02      	ldr	r2, [sp, #8]
 800837a:	9407      	str	r4, [sp, #28]
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	4118      	asrs	r0, r3
 8008380:	9004      	str	r0, [sp, #16]
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd6b      	ble.n	8008460 <__kernel_rem_pio2+0x270>
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	2200      	movs	r2, #0
 800838c:	3301      	adds	r3, #1
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	2301      	movs	r3, #1
 8008392:	2580      	movs	r5, #128	; 0x80
 8008394:	0014      	movs	r4, r2
 8008396:	469c      	mov	ip, r3
 8008398:	046d      	lsls	r5, r5, #17
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	4293      	cmp	r3, r2
 800839e:	dd00      	ble.n	80083a2 <__kernel_rem_pio2+0x1b2>
 80083a0:	e0a3      	b.n	80084ea <__kernel_rem_pio2+0x2fa>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dd05      	ble.n	80083b4 <__kernel_rem_pio2+0x1c4>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d100      	bne.n	80083ae <__kernel_rem_pio2+0x1be>
 80083ac:	e0b1      	b.n	8008512 <__kernel_rem_pio2+0x322>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d100      	bne.n	80083b4 <__kernel_rem_pio2+0x1c4>
 80083b2:	e0b9      	b.n	8008528 <__kernel_rem_pio2+0x338>
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d152      	bne.n	8008460 <__kernel_rem_pio2+0x270>
 80083ba:	0032      	movs	r2, r6
 80083bc:	003b      	movs	r3, r7
 80083be:	2000      	movs	r0, #0
 80083c0:	4964      	ldr	r1, [pc, #400]	; (8008554 <__kernel_rem_pio2+0x364>)
 80083c2:	f7f9 fd57 	bl	8001e74 <__aeabi_dsub>
 80083c6:	0006      	movs	r6, r0
 80083c8:	000f      	movs	r7, r1
 80083ca:	2c00      	cmp	r4, #0
 80083cc:	d048      	beq.n	8008460 <__kernel_rem_pio2+0x270>
 80083ce:	9a02      	ldr	r2, [sp, #8]
 80083d0:	2000      	movs	r0, #0
 80083d2:	4960      	ldr	r1, [pc, #384]	; (8008554 <__kernel_rem_pio2+0x364>)
 80083d4:	f000 fbb0 	bl	8008b38 <scalbn>
 80083d8:	0002      	movs	r2, r0
 80083da:	000b      	movs	r3, r1
 80083dc:	0030      	movs	r0, r6
 80083de:	0039      	movs	r1, r7
 80083e0:	f7f9 fd48 	bl	8001e74 <__aeabi_dsub>
 80083e4:	0006      	movs	r6, r0
 80083e6:	000f      	movs	r7, r1
 80083e8:	e03a      	b.n	8008460 <__kernel_rem_pio2+0x270>
 80083ea:	2200      	movs	r2, #0
 80083ec:	4b5a      	ldr	r3, [pc, #360]	; (8008558 <__kernel_rem_pio2+0x368>)
 80083ee:	0030      	movs	r0, r6
 80083f0:	0039      	movs	r1, r7
 80083f2:	f7f9 fabf 	bl	8001974 <__aeabi_dmul>
 80083f6:	f7fa f853 	bl	80024a0 <__aeabi_d2iz>
 80083fa:	f7fa f885 	bl	8002508 <__aeabi_i2d>
 80083fe:	2200      	movs	r2, #0
 8008400:	4b56      	ldr	r3, [pc, #344]	; (800855c <__kernel_rem_pio2+0x36c>)
 8008402:	9004      	str	r0, [sp, #16]
 8008404:	9105      	str	r1, [sp, #20]
 8008406:	f7f9 fab5 	bl	8001974 <__aeabi_dmul>
 800840a:	0002      	movs	r2, r0
 800840c:	000b      	movs	r3, r1
 800840e:	0030      	movs	r0, r6
 8008410:	0039      	movs	r1, r7
 8008412:	f7f9 fd2f 	bl	8001e74 <__aeabi_dsub>
 8008416:	f7fa f843 	bl	80024a0 <__aeabi_d2iz>
 800841a:	00a5      	lsls	r5, r4, #2
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008420:	426d      	negs	r5, r5
 8008422:	3c01      	subs	r4, #1
 8008424:	5158      	str	r0, [r3, r5]
 8008426:	00e3      	lsls	r3, r4, #3
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	9804      	ldr	r0, [sp, #16]
 8008430:	9905      	ldr	r1, [sp, #20]
 8008432:	f7f8 fb5b 	bl	8000aec <__aeabi_dadd>
 8008436:	0006      	movs	r6, r0
 8008438:	000f      	movs	r7, r1
 800843a:	e760      	b.n	80082fe <__kernel_rem_pio2+0x10e>
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <__kernel_rem_pio2+0x262>
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	aa12      	add	r2, sp, #72	; 0x48
 8008446:	3b01      	subs	r3, #1
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	5898      	ldr	r0, [r3, r2]
 800844c:	15c3      	asrs	r3, r0, #23
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	e797      	b.n	8008382 <__kernel_rem_pio2+0x192>
 8008452:	2200      	movs	r2, #0
 8008454:	4b42      	ldr	r3, [pc, #264]	; (8008560 <__kernel_rem_pio2+0x370>)
 8008456:	f7f8 f80b 	bl	8000470 <__aeabi_dcmpge>
 800845a:	2800      	cmp	r0, #0
 800845c:	d142      	bne.n	80084e4 <__kernel_rem_pio2+0x2f4>
 800845e:	9004      	str	r0, [sp, #16]
 8008460:	2200      	movs	r2, #0
 8008462:	2300      	movs	r3, #0
 8008464:	0030      	movs	r0, r6
 8008466:	0039      	movs	r1, r7
 8008468:	f7f7 ffde 	bl	8000428 <__aeabi_dcmpeq>
 800846c:	2800      	cmp	r0, #0
 800846e:	d100      	bne.n	8008472 <__kernel_rem_pio2+0x282>
 8008470:	e0b4      	b.n	80085dc <__kernel_rem_pio2+0x3ec>
 8008472:	2200      	movs	r2, #0
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	1e59      	subs	r1, r3, #1
 8008478:	9808      	ldr	r0, [sp, #32]
 800847a:	3b01      	subs	r3, #1
 800847c:	4298      	cmp	r0, r3
 800847e:	dd5c      	ble.n	800853a <__kernel_rem_pio2+0x34a>
 8008480:	2a00      	cmp	r2, #0
 8008482:	d000      	beq.n	8008486 <__kernel_rem_pio2+0x296>
 8008484:	e084      	b.n	8008590 <__kernel_rem_pio2+0x3a0>
 8008486:	2301      	movs	r3, #1
 8008488:	009a      	lsls	r2, r3, #2
 800848a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800848c:	4252      	negs	r2, r2
 800848e:	588a      	ldr	r2, [r1, r2]
 8008490:	2a00      	cmp	r2, #0
 8008492:	d057      	beq.n	8008544 <__kernel_rem_pio2+0x354>
 8008494:	9a00      	ldr	r2, [sp, #0]
 8008496:	9900      	ldr	r1, [sp, #0]
 8008498:	1c57      	adds	r7, r2, #1
 800849a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800849c:	18cb      	adds	r3, r1, r3
 800849e:	1854      	adds	r4, r2, r1
 80084a0:	00e4      	lsls	r4, r4, #3
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	429f      	cmp	r7, r3
 80084a8:	dd00      	ble.n	80084ac <__kernel_rem_pio2+0x2bc>
 80084aa:	e71a      	b.n	80082e2 <__kernel_rem_pio2+0xf2>
 80084ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084ae:	ab26      	add	r3, sp, #152	; 0x98
 80084b0:	191e      	adds	r6, r3, r4
 80084b2:	00bb      	lsls	r3, r7, #2
 80084b4:	58d0      	ldr	r0, [r2, r3]
 80084b6:	f7fa f827 	bl	8002508 <__aeabi_i2d>
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	2500      	movs	r5, #0
 80084c0:	6030      	str	r0, [r6, #0]
 80084c2:	6071      	str	r1, [r6, #4]
 80084c4:	9200      	str	r2, [sp, #0]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ca:	429d      	cmp	r5, r3
 80084cc:	dd4c      	ble.n	8008568 <__kernel_rem_pio2+0x378>
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	aa76      	add	r2, sp, #472	; 0x1d8
 80084d2:	18e3      	adds	r3, r4, r3
 80084d4:	18d3      	adds	r3, r2, r3
 80084d6:	3701      	adds	r7, #1
 80084d8:	9900      	ldr	r1, [sp, #0]
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	3408      	adds	r4, #8
 80084de:	6099      	str	r1, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	e7df      	b.n	80084a4 <__kernel_rem_pio2+0x2b4>
 80084e4:	2302      	movs	r3, #2
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	e74e      	b.n	8008388 <__kernel_rem_pio2+0x198>
 80084ea:	0091      	lsls	r1, r2, #2
 80084ec:	ab12      	add	r3, sp, #72	; 0x48
 80084ee:	58cb      	ldr	r3, [r1, r3]
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	d108      	bne.n	8008506 <__kernel_rem_pio2+0x316>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <__kernel_rem_pio2+0x310>
 80084f8:	1aeb      	subs	r3, r5, r3
 80084fa:	ac12      	add	r4, sp, #72	; 0x48
 80084fc:	510b      	str	r3, [r1, r4]
 80084fe:	4663      	mov	r3, ip
 8008500:	3201      	adds	r2, #1
 8008502:	001c      	movs	r4, r3
 8008504:	e749      	b.n	800839a <__kernel_rem_pio2+0x1aa>
 8008506:	4817      	ldr	r0, [pc, #92]	; (8008564 <__kernel_rem_pio2+0x374>)
 8008508:	1ac3      	subs	r3, r0, r3
 800850a:	a812      	add	r0, sp, #72	; 0x48
 800850c:	500b      	str	r3, [r1, r0]
 800850e:	0023      	movs	r3, r4
 8008510:	e7f6      	b.n	8008500 <__kernel_rem_pio2+0x310>
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	aa12      	add	r2, sp, #72	; 0x48
 8008516:	3b01      	subs	r3, #1
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	589a      	ldr	r2, [r3, r2]
 800851c:	9211      	str	r2, [sp, #68]	; 0x44
 800851e:	0252      	lsls	r2, r2, #9
 8008520:	0a52      	lsrs	r2, r2, #9
 8008522:	a912      	add	r1, sp, #72	; 0x48
 8008524:	505a      	str	r2, [r3, r1]
 8008526:	e745      	b.n	80083b4 <__kernel_rem_pio2+0x1c4>
 8008528:	9b00      	ldr	r3, [sp, #0]
 800852a:	aa12      	add	r2, sp, #72	; 0x48
 800852c:	3b01      	subs	r3, #1
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	589a      	ldr	r2, [r3, r2]
 8008532:	9211      	str	r2, [sp, #68]	; 0x44
 8008534:	0292      	lsls	r2, r2, #10
 8008536:	0a92      	lsrs	r2, r2, #10
 8008538:	e7f3      	b.n	8008522 <__kernel_rem_pio2+0x332>
 800853a:	0098      	lsls	r0, r3, #2
 800853c:	ac12      	add	r4, sp, #72	; 0x48
 800853e:	5900      	ldr	r0, [r0, r4]
 8008540:	4302      	orrs	r2, r0
 8008542:	e799      	b.n	8008478 <__kernel_rem_pio2+0x288>
 8008544:	3301      	adds	r3, #1
 8008546:	e79f      	b.n	8008488 <__kernel_rem_pio2+0x298>
 8008548:	fffffd84 	.word	0xfffffd84
 800854c:	08009048 	.word	0x08009048
 8008550:	40200000 	.word	0x40200000
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	3e700000 	.word	0x3e700000
 800855c:	41700000 	.word	0x41700000
 8008560:	3fe00000 	.word	0x3fe00000
 8008564:	00ffffff 	.word	0x00ffffff
 8008568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800856a:	00eb      	lsls	r3, r5, #3
 800856c:	18d1      	adds	r1, r2, r3
 800856e:	1af3      	subs	r3, r6, r3
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	6849      	ldr	r1, [r1, #4]
 8008578:	f7f9 f9fc 	bl	8001974 <__aeabi_dmul>
 800857c:	0002      	movs	r2, r0
 800857e:	000b      	movs	r3, r1
 8008580:	9800      	ldr	r0, [sp, #0]
 8008582:	9901      	ldr	r1, [sp, #4]
 8008584:	f7f8 fab2 	bl	8000aec <__aeabi_dadd>
 8008588:	3501      	adds	r5, #1
 800858a:	9000      	str	r0, [sp, #0]
 800858c:	9101      	str	r1, [sp, #4]
 800858e:	e79b      	b.n	80084c8 <__kernel_rem_pio2+0x2d8>
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	9100      	str	r1, [sp, #0]
 8008594:	3b18      	subs	r3, #24
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	9b00      	ldr	r3, [sp, #0]
 800859a:	aa12      	add	r2, sp, #72	; 0x48
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	589b      	ldr	r3, [r3, r2]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d014      	beq.n	80085ce <__kernel_rem_pio2+0x3de>
 80085a4:	9a02      	ldr	r2, [sp, #8]
 80085a6:	2000      	movs	r0, #0
 80085a8:	49c7      	ldr	r1, [pc, #796]	; (80088c8 <__kernel_rem_pio2+0x6d8>)
 80085aa:	f000 fac5 	bl	8008b38 <scalbn>
 80085ae:	0006      	movs	r6, r0
 80085b0:	000f      	movs	r7, r1
 80085b2:	9c00      	ldr	r4, [sp, #0]
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	da4e      	bge.n	8008656 <__kernel_rem_pio2+0x466>
 80085b8:	2500      	movs	r5, #0
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	1b5b      	subs	r3, r3, r5
 80085be:	d500      	bpl.n	80085c2 <__kernel_rem_pio2+0x3d2>
 80085c0:	e083      	b.n	80086ca <__kernel_rem_pio2+0x4da>
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	2600      	movs	r6, #0
 80085c8:	2700      	movs	r7, #0
 80085ca:	2400      	movs	r4, #0
 80085cc:	e071      	b.n	80086b2 <__kernel_rem_pio2+0x4c2>
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	3b18      	subs	r3, #24
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	e7dd      	b.n	8008598 <__kernel_rem_pio2+0x3a8>
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	0030      	movs	r0, r6
 80085e0:	425a      	negs	r2, r3
 80085e2:	0039      	movs	r1, r7
 80085e4:	f000 faa8 	bl	8008b38 <scalbn>
 80085e8:	2200      	movs	r2, #0
 80085ea:	4bb8      	ldr	r3, [pc, #736]	; (80088cc <__kernel_rem_pio2+0x6dc>)
 80085ec:	0004      	movs	r4, r0
 80085ee:	000d      	movs	r5, r1
 80085f0:	f7f7 ff3e 	bl	8000470 <__aeabi_dcmpge>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d025      	beq.n	8008644 <__kernel_rem_pio2+0x454>
 80085f8:	2200      	movs	r2, #0
 80085fa:	4bb5      	ldr	r3, [pc, #724]	; (80088d0 <__kernel_rem_pio2+0x6e0>)
 80085fc:	0020      	movs	r0, r4
 80085fe:	0029      	movs	r1, r5
 8008600:	f7f9 f9b8 	bl	8001974 <__aeabi_dmul>
 8008604:	f7f9 ff4c 	bl	80024a0 <__aeabi_d2iz>
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	0006      	movs	r6, r0
 800860c:	009f      	lsls	r7, r3, #2
 800860e:	f7f9 ff7b 	bl	8002508 <__aeabi_i2d>
 8008612:	2200      	movs	r2, #0
 8008614:	4bad      	ldr	r3, [pc, #692]	; (80088cc <__kernel_rem_pio2+0x6dc>)
 8008616:	f7f9 f9ad 	bl	8001974 <__aeabi_dmul>
 800861a:	0002      	movs	r2, r0
 800861c:	000b      	movs	r3, r1
 800861e:	0020      	movs	r0, r4
 8008620:	0029      	movs	r1, r5
 8008622:	f7f9 fc27 	bl	8001e74 <__aeabi_dsub>
 8008626:	f7f9 ff3b 	bl	80024a0 <__aeabi_d2iz>
 800862a:	ab12      	add	r3, sp, #72	; 0x48
 800862c:	50f8      	str	r0, [r7, r3]
 800862e:	9b00      	ldr	r3, [sp, #0]
 8008630:	aa12      	add	r2, sp, #72	; 0x48
 8008632:	3301      	adds	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	9b02      	ldr	r3, [sp, #8]
 8008638:	3318      	adds	r3, #24
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	509e      	str	r6, [r3, r2]
 8008642:	e7af      	b.n	80085a4 <__kernel_rem_pio2+0x3b4>
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	0020      	movs	r0, r4
 8008648:	0029      	movs	r1, r5
 800864a:	009e      	lsls	r6, r3, #2
 800864c:	f7f9 ff28 	bl	80024a0 <__aeabi_d2iz>
 8008650:	ab12      	add	r3, sp, #72	; 0x48
 8008652:	50f0      	str	r0, [r6, r3]
 8008654:	e7a6      	b.n	80085a4 <__kernel_rem_pio2+0x3b4>
 8008656:	00e5      	lsls	r5, r4, #3
 8008658:	ab76      	add	r3, sp, #472	; 0x1d8
 800865a:	aa12      	add	r2, sp, #72	; 0x48
 800865c:	195d      	adds	r5, r3, r5
 800865e:	00a3      	lsls	r3, r4, #2
 8008660:	5898      	ldr	r0, [r3, r2]
 8008662:	f7f9 ff51 	bl	8002508 <__aeabi_i2d>
 8008666:	0032      	movs	r2, r6
 8008668:	003b      	movs	r3, r7
 800866a:	f7f9 f983 	bl	8001974 <__aeabi_dmul>
 800866e:	2200      	movs	r2, #0
 8008670:	6028      	str	r0, [r5, #0]
 8008672:	6069      	str	r1, [r5, #4]
 8008674:	4b96      	ldr	r3, [pc, #600]	; (80088d0 <__kernel_rem_pio2+0x6e0>)
 8008676:	0030      	movs	r0, r6
 8008678:	0039      	movs	r1, r7
 800867a:	f7f9 f97b 	bl	8001974 <__aeabi_dmul>
 800867e:	3c01      	subs	r4, #1
 8008680:	0006      	movs	r6, r0
 8008682:	000f      	movs	r7, r1
 8008684:	e796      	b.n	80085b4 <__kernel_rem_pio2+0x3c4>
 8008686:	9a02      	ldr	r2, [sp, #8]
 8008688:	00e3      	lsls	r3, r4, #3
 800868a:	1899      	adds	r1, r3, r2
 800868c:	aa76      	add	r2, sp, #472	; 0x1d8
 800868e:	1851      	adds	r1, r2, r1
 8008690:	4a90      	ldr	r2, [pc, #576]	; (80088d4 <__kernel_rem_pio2+0x6e4>)
 8008692:	6808      	ldr	r0, [r1, #0]
 8008694:	6849      	ldr	r1, [r1, #4]
 8008696:	18d3      	adds	r3, r2, r3
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f7f9 f96a 	bl	8001974 <__aeabi_dmul>
 80086a0:	0002      	movs	r2, r0
 80086a2:	000b      	movs	r3, r1
 80086a4:	0030      	movs	r0, r6
 80086a6:	0039      	movs	r1, r7
 80086a8:	f7f8 fa20 	bl	8000aec <__aeabi_dadd>
 80086ac:	0006      	movs	r6, r0
 80086ae:	000f      	movs	r7, r1
 80086b0:	3401      	adds	r4, #1
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	429c      	cmp	r4, r3
 80086b6:	dc01      	bgt.n	80086bc <__kernel_rem_pio2+0x4cc>
 80086b8:	42ac      	cmp	r4, r5
 80086ba:	dde4      	ble.n	8008686 <__kernel_rem_pio2+0x496>
 80086bc:	00eb      	lsls	r3, r5, #3
 80086be:	aa4e      	add	r2, sp, #312	; 0x138
 80086c0:	18d3      	adds	r3, r2, r3
 80086c2:	601e      	str	r6, [r3, #0]
 80086c4:	605f      	str	r7, [r3, #4]
 80086c6:	3501      	adds	r5, #1
 80086c8:	e777      	b.n	80085ba <__kernel_rem_pio2+0x3ca>
 80086ca:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d83d      	bhi.n	800874c <__kernel_rem_pio2+0x55c>
 80086d0:	0018      	movs	r0, r3
 80086d2:	f7f7 fd19 	bl	8000108 <__gnu_thumb1_case_uqi>
 80086d6:	022b      	.short	0x022b
 80086d8:	4302      	.short	0x4302
 80086da:	2600      	movs	r6, #0
 80086dc:	0035      	movs	r5, r6
 80086de:	9c00      	ldr	r4, [sp, #0]
 80086e0:	2c00      	cmp	r4, #0
 80086e2:	db00      	blt.n	80086e6 <__kernel_rem_pio2+0x4f6>
 80086e4:	e073      	b.n	80087ce <__kernel_rem_pio2+0x5de>
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	0029      	movs	r1, r5
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <__kernel_rem_pio2+0x504>
 80086ee:	2380      	movs	r3, #128	; 0x80
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	18e9      	adds	r1, r5, r3
 80086f4:	000b      	movs	r3, r1
 80086f6:	0032      	movs	r2, r6
 80086f8:	9906      	ldr	r1, [sp, #24]
 80086fa:	2401      	movs	r4, #1
 80086fc:	600a      	str	r2, [r1, #0]
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	984e      	ldr	r0, [sp, #312]	; 0x138
 8008702:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8008704:	0032      	movs	r2, r6
 8008706:	002b      	movs	r3, r5
 8008708:	f7f9 fbb4 	bl	8001e74 <__aeabi_dsub>
 800870c:	9b00      	ldr	r3, [sp, #0]
 800870e:	42a3      	cmp	r3, r4
 8008710:	db00      	blt.n	8008714 <__kernel_rem_pio2+0x524>
 8008712:	e069      	b.n	80087e8 <__kernel_rem_pio2+0x5f8>
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <__kernel_rem_pio2+0x530>
 800871a:	2380      	movs	r3, #128	; 0x80
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	18c9      	adds	r1, r1, r3
 8008720:	000b      	movs	r3, r1
 8008722:	0002      	movs	r2, r0
 8008724:	9906      	ldr	r1, [sp, #24]
 8008726:	608a      	str	r2, [r1, #8]
 8008728:	60cb      	str	r3, [r1, #12]
 800872a:	e00f      	b.n	800874c <__kernel_rem_pio2+0x55c>
 800872c:	2500      	movs	r5, #0
 800872e:	002c      	movs	r4, r5
 8008730:	9b00      	ldr	r3, [sp, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	da3b      	bge.n	80087ae <__kernel_rem_pio2+0x5be>
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <__kernel_rem_pio2+0x552>
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	061b      	lsls	r3, r3, #24
 8008740:	18e4      	adds	r4, r4, r3
 8008742:	002a      	movs	r2, r5
 8008744:	0023      	movs	r3, r4
 8008746:	9906      	ldr	r1, [sp, #24]
 8008748:	600a      	str	r2, [r1, #0]
 800874a:	604b      	str	r3, [r1, #4]
 800874c:	2007      	movs	r0, #7
 800874e:	9b07      	ldr	r3, [sp, #28]
 8008750:	4003      	ands	r3, r0
 8008752:	0018      	movs	r0, r3
 8008754:	239f      	movs	r3, #159	; 0x9f
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	449d      	add	sp, r3
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	00dc      	lsls	r4, r3, #3
 8008760:	ab4e      	add	r3, sp, #312	; 0x138
 8008762:	191c      	adds	r4, r3, r4
 8008764:	0025      	movs	r5, r4
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	3d08      	subs	r5, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	dc43      	bgt.n	80087fa <__kernel_rem_pio2+0x60a>
 8008772:	9d00      	ldr	r5, [sp, #0]
 8008774:	3c08      	subs	r4, #8
 8008776:	2d01      	cmp	r5, #1
 8008778:	dc5f      	bgt.n	800883a <__kernel_rem_pio2+0x64a>
 800877a:	2500      	movs	r5, #0
 800877c:	002c      	movs	r4, r5
 800877e:	9b00      	ldr	r3, [sp, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	dd00      	ble.n	8008786 <__kernel_rem_pio2+0x596>
 8008784:	e077      	b.n	8008876 <__kernel_rem_pio2+0x686>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d000      	beq.n	800878e <__kernel_rem_pio2+0x59e>
 800878c:	e083      	b.n	8008896 <__kernel_rem_pio2+0x6a6>
 800878e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8008790:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8008792:	9906      	ldr	r1, [sp, #24]
 8008794:	600a      	str	r2, [r1, #0]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800879a:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800879c:	9200      	str	r2, [sp, #0]
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	608a      	str	r2, [r1, #8]
 80087a2:	60cb      	str	r3, [r1, #12]
 80087a4:	002a      	movs	r2, r5
 80087a6:	0023      	movs	r3, r4
 80087a8:	610a      	str	r2, [r1, #16]
 80087aa:	614b      	str	r3, [r1, #20]
 80087ac:	e7ce      	b.n	800874c <__kernel_rem_pio2+0x55c>
 80087ae:	9b00      	ldr	r3, [sp, #0]
 80087b0:	aa4e      	add	r2, sp, #312	; 0x138
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	18d3      	adds	r3, r2, r3
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0028      	movs	r0, r5
 80087bc:	0021      	movs	r1, r4
 80087be:	f7f8 f995 	bl	8000aec <__aeabi_dadd>
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	0005      	movs	r5, r0
 80087c6:	3b01      	subs	r3, #1
 80087c8:	000c      	movs	r4, r1
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	e7b0      	b.n	8008730 <__kernel_rem_pio2+0x540>
 80087ce:	00e3      	lsls	r3, r4, #3
 80087d0:	aa4e      	add	r2, sp, #312	; 0x138
 80087d2:	18d3      	adds	r3, r2, r3
 80087d4:	0030      	movs	r0, r6
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	0029      	movs	r1, r5
 80087dc:	f7f8 f986 	bl	8000aec <__aeabi_dadd>
 80087e0:	3c01      	subs	r4, #1
 80087e2:	0006      	movs	r6, r0
 80087e4:	000d      	movs	r5, r1
 80087e6:	e77b      	b.n	80086e0 <__kernel_rem_pio2+0x4f0>
 80087e8:	00e3      	lsls	r3, r4, #3
 80087ea:	aa4e      	add	r2, sp, #312	; 0x138
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f7f8 f97b 	bl	8000aec <__aeabi_dadd>
 80087f6:	3401      	adds	r4, #1
 80087f8:	e788      	b.n	800870c <__kernel_rem_pio2+0x51c>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	682a      	ldr	r2, [r5, #0]
 8008802:	686b      	ldr	r3, [r5, #4]
 8008804:	9208      	str	r2, [sp, #32]
 8008806:	9309      	str	r3, [sp, #36]	; 0x24
 8008808:	9808      	ldr	r0, [sp, #32]
 800880a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880c:	68aa      	ldr	r2, [r5, #8]
 800880e:	68eb      	ldr	r3, [r5, #12]
 8008810:	920a      	str	r2, [sp, #40]	; 0x28
 8008812:	930b      	str	r3, [sp, #44]	; 0x2c
 8008814:	f7f8 f96a 	bl	8000aec <__aeabi_dadd>
 8008818:	0002      	movs	r2, r0
 800881a:	000b      	movs	r3, r1
 800881c:	0006      	movs	r6, r0
 800881e:	000f      	movs	r7, r1
 8008820:	9808      	ldr	r0, [sp, #32]
 8008822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008824:	f7f9 fb26 	bl	8001e74 <__aeabi_dsub>
 8008828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	f7f8 f95e 	bl	8000aec <__aeabi_dadd>
 8008830:	602e      	str	r6, [r5, #0]
 8008832:	606f      	str	r7, [r5, #4]
 8008834:	60a8      	str	r0, [r5, #8]
 8008836:	60e9      	str	r1, [r5, #12]
 8008838:	e797      	b.n	800876a <__kernel_rem_pio2+0x57a>
 800883a:	6826      	ldr	r6, [r4, #0]
 800883c:	6867      	ldr	r7, [r4, #4]
 800883e:	68a2      	ldr	r2, [r4, #8]
 8008840:	68e3      	ldr	r3, [r4, #12]
 8008842:	0030      	movs	r0, r6
 8008844:	0039      	movs	r1, r7
 8008846:	9202      	str	r2, [sp, #8]
 8008848:	9303      	str	r3, [sp, #12]
 800884a:	f7f8 f94f 	bl	8000aec <__aeabi_dadd>
 800884e:	9008      	str	r0, [sp, #32]
 8008850:	9109      	str	r1, [sp, #36]	; 0x24
 8008852:	0002      	movs	r2, r0
 8008854:	000b      	movs	r3, r1
 8008856:	0030      	movs	r0, r6
 8008858:	0039      	movs	r1, r7
 800885a:	f7f9 fb0b 	bl	8001e74 <__aeabi_dsub>
 800885e:	9a02      	ldr	r2, [sp, #8]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	f7f8 f943 	bl	8000aec <__aeabi_dadd>
 8008866:	9a08      	ldr	r2, [sp, #32]
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	3d01      	subs	r5, #1
 800886c:	60a0      	str	r0, [r4, #8]
 800886e:	60e1      	str	r1, [r4, #12]
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	6063      	str	r3, [r4, #4]
 8008874:	e77e      	b.n	8008774 <__kernel_rem_pio2+0x584>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	aa4e      	add	r2, sp, #312	; 0x138
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	0028      	movs	r0, r5
 8008884:	0021      	movs	r1, r4
 8008886:	f7f8 f931 	bl	8000aec <__aeabi_dadd>
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	0005      	movs	r5, r0
 800888e:	3b01      	subs	r3, #1
 8008890:	000c      	movs	r4, r1
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	e773      	b.n	800877e <__kernel_rem_pio2+0x58e>
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	2280      	movs	r2, #128	; 0x80
 800889e:	0612      	lsls	r2, r2, #24
 80088a0:	4694      	mov	ip, r2
 80088a2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80088a4:	9a06      	ldr	r2, [sp, #24]
 80088a6:	4463      	add	r3, ip
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	0013      	movs	r3, r2
 80088b0:	9a00      	ldr	r2, [sp, #0]
 80088b2:	609a      	str	r2, [r3, #8]
 80088b4:	4662      	mov	r2, ip
 80088b6:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	9a06      	ldr	r2, [sp, #24]
 80088bc:	60d3      	str	r3, [r2, #12]
 80088be:	4663      	mov	r3, ip
 80088c0:	18e4      	adds	r4, r4, r3
 80088c2:	6115      	str	r5, [r2, #16]
 80088c4:	6154      	str	r4, [r2, #20]
 80088c6:	e741      	b.n	800874c <__kernel_rem_pio2+0x55c>
 80088c8:	3ff00000 	.word	0x3ff00000
 80088cc:	41700000 	.word	0x41700000
 80088d0:	3e700000 	.word	0x3e700000
 80088d4:	08009008 	.word	0x08009008

080088d8 <__kernel_sin>:
 80088d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	9202      	str	r2, [sp, #8]
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	4a46      	ldr	r2, [pc, #280]	; (80089fc <__kernel_sin+0x124>)
 80088e2:	004b      	lsls	r3, r1, #1
 80088e4:	0005      	movs	r5, r0
 80088e6:	000c      	movs	r4, r1
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	4293      	cmp	r3, r2
 80088ec:	dc03      	bgt.n	80088f6 <__kernel_sin+0x1e>
 80088ee:	f7f9 fdd7 	bl	80024a0 <__aeabi_d2iz>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d04c      	beq.n	8008990 <__kernel_sin+0xb8>
 80088f6:	002a      	movs	r2, r5
 80088f8:	0023      	movs	r3, r4
 80088fa:	0028      	movs	r0, r5
 80088fc:	0021      	movs	r1, r4
 80088fe:	f7f9 f839 	bl	8001974 <__aeabi_dmul>
 8008902:	0006      	movs	r6, r0
 8008904:	000f      	movs	r7, r1
 8008906:	0002      	movs	r2, r0
 8008908:	000b      	movs	r3, r1
 800890a:	0028      	movs	r0, r5
 800890c:	0021      	movs	r1, r4
 800890e:	f7f9 f831 	bl	8001974 <__aeabi_dmul>
 8008912:	4a3b      	ldr	r2, [pc, #236]	; (8008a00 <__kernel_sin+0x128>)
 8008914:	9000      	str	r0, [sp, #0]
 8008916:	9101      	str	r1, [sp, #4]
 8008918:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <__kernel_sin+0x12c>)
 800891a:	0030      	movs	r0, r6
 800891c:	0039      	movs	r1, r7
 800891e:	f7f9 f829 	bl	8001974 <__aeabi_dmul>
 8008922:	4a39      	ldr	r2, [pc, #228]	; (8008a08 <__kernel_sin+0x130>)
 8008924:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <__kernel_sin+0x134>)
 8008926:	f7f9 faa5 	bl	8001e74 <__aeabi_dsub>
 800892a:	0032      	movs	r2, r6
 800892c:	003b      	movs	r3, r7
 800892e:	f7f9 f821 	bl	8001974 <__aeabi_dmul>
 8008932:	4a37      	ldr	r2, [pc, #220]	; (8008a10 <__kernel_sin+0x138>)
 8008934:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <__kernel_sin+0x13c>)
 8008936:	f7f8 f8d9 	bl	8000aec <__aeabi_dadd>
 800893a:	0032      	movs	r2, r6
 800893c:	003b      	movs	r3, r7
 800893e:	f7f9 f819 	bl	8001974 <__aeabi_dmul>
 8008942:	4a35      	ldr	r2, [pc, #212]	; (8008a18 <__kernel_sin+0x140>)
 8008944:	4b35      	ldr	r3, [pc, #212]	; (8008a1c <__kernel_sin+0x144>)
 8008946:	f7f9 fa95 	bl	8001e74 <__aeabi_dsub>
 800894a:	0032      	movs	r2, r6
 800894c:	003b      	movs	r3, r7
 800894e:	f7f9 f811 	bl	8001974 <__aeabi_dmul>
 8008952:	4b33      	ldr	r3, [pc, #204]	; (8008a20 <__kernel_sin+0x148>)
 8008954:	4a33      	ldr	r2, [pc, #204]	; (8008a24 <__kernel_sin+0x14c>)
 8008956:	f7f8 f8c9 	bl	8000aec <__aeabi_dadd>
 800895a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895c:	9004      	str	r0, [sp, #16]
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d119      	bne.n	8008998 <__kernel_sin+0xc0>
 8008964:	0002      	movs	r2, r0
 8008966:	000b      	movs	r3, r1
 8008968:	0030      	movs	r0, r6
 800896a:	0039      	movs	r1, r7
 800896c:	f7f9 f802 	bl	8001974 <__aeabi_dmul>
 8008970:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <__kernel_sin+0x150>)
 8008972:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <__kernel_sin+0x154>)
 8008974:	f7f9 fa7e 	bl	8001e74 <__aeabi_dsub>
 8008978:	9a00      	ldr	r2, [sp, #0]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	f7f8 fffa 	bl	8001974 <__aeabi_dmul>
 8008980:	0002      	movs	r2, r0
 8008982:	000b      	movs	r3, r1
 8008984:	0028      	movs	r0, r5
 8008986:	0021      	movs	r1, r4
 8008988:	f7f8 f8b0 	bl	8000aec <__aeabi_dadd>
 800898c:	0005      	movs	r5, r0
 800898e:	000c      	movs	r4, r1
 8008990:	0028      	movs	r0, r5
 8008992:	0021      	movs	r1, r4
 8008994:	b009      	add	sp, #36	; 0x24
 8008996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008998:	2200      	movs	r2, #0
 800899a:	9802      	ldr	r0, [sp, #8]
 800899c:	9903      	ldr	r1, [sp, #12]
 800899e:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <__kernel_sin+0x158>)
 80089a0:	f7f8 ffe8 	bl	8001974 <__aeabi_dmul>
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	9006      	str	r0, [sp, #24]
 80089aa:	9107      	str	r1, [sp, #28]
 80089ac:	9800      	ldr	r0, [sp, #0]
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	f7f8 ffe0 	bl	8001974 <__aeabi_dmul>
 80089b4:	0002      	movs	r2, r0
 80089b6:	000b      	movs	r3, r1
 80089b8:	9806      	ldr	r0, [sp, #24]
 80089ba:	9907      	ldr	r1, [sp, #28]
 80089bc:	f7f9 fa5a 	bl	8001e74 <__aeabi_dsub>
 80089c0:	0032      	movs	r2, r6
 80089c2:	003b      	movs	r3, r7
 80089c4:	f7f8 ffd6 	bl	8001974 <__aeabi_dmul>
 80089c8:	9a02      	ldr	r2, [sp, #8]
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	f7f9 fa52 	bl	8001e74 <__aeabi_dsub>
 80089d0:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <__kernel_sin+0x150>)
 80089d2:	0006      	movs	r6, r0
 80089d4:	000f      	movs	r7, r1
 80089d6:	9800      	ldr	r0, [sp, #0]
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <__kernel_sin+0x154>)
 80089dc:	f7f8 ffca 	bl	8001974 <__aeabi_dmul>
 80089e0:	0002      	movs	r2, r0
 80089e2:	000b      	movs	r3, r1
 80089e4:	0030      	movs	r0, r6
 80089e6:	0039      	movs	r1, r7
 80089e8:	f7f8 f880 	bl	8000aec <__aeabi_dadd>
 80089ec:	0002      	movs	r2, r0
 80089ee:	000b      	movs	r3, r1
 80089f0:	0028      	movs	r0, r5
 80089f2:	0021      	movs	r1, r4
 80089f4:	f7f9 fa3e 	bl	8001e74 <__aeabi_dsub>
 80089f8:	e7c8      	b.n	800898c <__kernel_sin+0xb4>
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	3e3fffff 	.word	0x3e3fffff
 8008a00:	5acfd57c 	.word	0x5acfd57c
 8008a04:	3de5d93a 	.word	0x3de5d93a
 8008a08:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a10:	57b1fe7d 	.word	0x57b1fe7d
 8008a14:	3ec71de3 	.word	0x3ec71de3
 8008a18:	19c161d5 	.word	0x19c161d5
 8008a1c:	3f2a01a0 	.word	0x3f2a01a0
 8008a20:	3f811111 	.word	0x3f811111
 8008a24:	1110f8a6 	.word	0x1110f8a6
 8008a28:	55555549 	.word	0x55555549
 8008a2c:	3fc55555 	.word	0x3fc55555
 8008a30:	3fe00000 	.word	0x3fe00000

08008a34 <floor>:
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	004b      	lsls	r3, r1, #1
 8008a38:	4a39      	ldr	r2, [pc, #228]	; (8008b20 <floor+0xec>)
 8008a3a:	0d5b      	lsrs	r3, r3, #21
 8008a3c:	b085      	sub	sp, #20
 8008a3e:	189e      	adds	r6, r3, r2
 8008a40:	9003      	str	r0, [sp, #12]
 8008a42:	000c      	movs	r4, r1
 8008a44:	0005      	movs	r5, r0
 8008a46:	2e13      	cmp	r6, #19
 8008a48:	dc34      	bgt.n	8008ab4 <floor+0x80>
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	da15      	bge.n	8008a7a <floor+0x46>
 8008a4e:	4a35      	ldr	r2, [pc, #212]	; (8008b24 <floor+0xf0>)
 8008a50:	4b35      	ldr	r3, [pc, #212]	; (8008b28 <floor+0xf4>)
 8008a52:	f7f8 f84b 	bl	8000aec <__aeabi_dadd>
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f7f7 fcff 	bl	800045c <__aeabi_dcmpgt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d008      	beq.n	8008a74 <floor+0x40>
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	da59      	bge.n	8008b1a <floor+0xe6>
 8008a66:	0063      	lsls	r3, r4, #1
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	432b      	orrs	r3, r5
 8008a6c:	2500      	movs	r5, #0
 8008a6e:	42ab      	cmp	r3, r5
 8008a70:	d000      	beq.n	8008a74 <floor+0x40>
 8008a72:	4c2e      	ldr	r4, [pc, #184]	; (8008b2c <floor+0xf8>)
 8008a74:	0028      	movs	r0, r5
 8008a76:	0021      	movs	r1, r4
 8008a78:	e026      	b.n	8008ac8 <floor+0x94>
 8008a7a:	4f2d      	ldr	r7, [pc, #180]	; (8008b30 <floor+0xfc>)
 8008a7c:	4137      	asrs	r7, r6
 8008a7e:	003b      	movs	r3, r7
 8008a80:	400b      	ands	r3, r1
 8008a82:	4303      	orrs	r3, r0
 8008a84:	d020      	beq.n	8008ac8 <floor+0x94>
 8008a86:	9000      	str	r0, [sp, #0]
 8008a88:	9101      	str	r1, [sp, #4]
 8008a8a:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <floor+0xf0>)
 8008a8c:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <floor+0xf4>)
 8008a8e:	9800      	ldr	r0, [sp, #0]
 8008a90:	9901      	ldr	r1, [sp, #4]
 8008a92:	f7f8 f82b 	bl	8000aec <__aeabi_dadd>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f7 fcdf 	bl	800045c <__aeabi_dcmpgt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0e8      	beq.n	8008a74 <floor+0x40>
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	da03      	bge.n	8008aae <floor+0x7a>
 8008aa6:	2380      	movs	r3, #128	; 0x80
 8008aa8:	035b      	lsls	r3, r3, #13
 8008aaa:	4133      	asrs	r3, r6
 8008aac:	18e4      	adds	r4, r4, r3
 8008aae:	43bc      	bics	r4, r7
 8008ab0:	2500      	movs	r5, #0
 8008ab2:	e7df      	b.n	8008a74 <floor+0x40>
 8008ab4:	2e33      	cmp	r6, #51	; 0x33
 8008ab6:	dd09      	ble.n	8008acc <floor+0x98>
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	429e      	cmp	r6, r3
 8008abe:	d103      	bne.n	8008ac8 <floor+0x94>
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	000b      	movs	r3, r1
 8008ac4:	f7f8 f812 	bl	8000aec <__aeabi_dadd>
 8008ac8:	b005      	add	sp, #20
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008acc:	2701      	movs	r7, #1
 8008ace:	4a19      	ldr	r2, [pc, #100]	; (8008b34 <floor+0x100>)
 8008ad0:	427f      	negs	r7, r7
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	40df      	lsrs	r7, r3
 8008ad6:	4207      	tst	r7, r0
 8008ad8:	d0f6      	beq.n	8008ac8 <floor+0x94>
 8008ada:	9000      	str	r0, [sp, #0]
 8008adc:	9101      	str	r1, [sp, #4]
 8008ade:	4a11      	ldr	r2, [pc, #68]	; (8008b24 <floor+0xf0>)
 8008ae0:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <floor+0xf4>)
 8008ae2:	9800      	ldr	r0, [sp, #0]
 8008ae4:	9901      	ldr	r1, [sp, #4]
 8008ae6:	f7f8 f801 	bl	8000aec <__aeabi_dadd>
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	f7f7 fcb5 	bl	800045c <__aeabi_dcmpgt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0be      	beq.n	8008a74 <floor+0x40>
 8008af6:	2c00      	cmp	r4, #0
 8008af8:	da02      	bge.n	8008b00 <floor+0xcc>
 8008afa:	2e14      	cmp	r6, #20
 8008afc:	d102      	bne.n	8008b04 <floor+0xd0>
 8008afe:	3401      	adds	r4, #1
 8008b00:	43bd      	bics	r5, r7
 8008b02:	e7b7      	b.n	8008a74 <floor+0x40>
 8008b04:	2334      	movs	r3, #52	; 0x34
 8008b06:	1b9e      	subs	r6, r3, r6
 8008b08:	3b33      	subs	r3, #51	; 0x33
 8008b0a:	40b3      	lsls	r3, r6
 8008b0c:	18ed      	adds	r5, r5, r3
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	429d      	cmp	r5, r3
 8008b12:	419b      	sbcs	r3, r3
 8008b14:	425b      	negs	r3, r3
 8008b16:	18e4      	adds	r4, r4, r3
 8008b18:	e7f2      	b.n	8008b00 <floor+0xcc>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	002c      	movs	r4, r5
 8008b1e:	e7a9      	b.n	8008a74 <floor+0x40>
 8008b20:	fffffc01 	.word	0xfffffc01
 8008b24:	8800759c 	.word	0x8800759c
 8008b28:	7e37e43c 	.word	0x7e37e43c
 8008b2c:	bff00000 	.word	0xbff00000
 8008b30:	000fffff 	.word	0x000fffff
 8008b34:	fffffbed 	.word	0xfffffbed

08008b38 <scalbn>:
 8008b38:	004b      	lsls	r3, r1, #1
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	0d5b      	lsrs	r3, r3, #21
 8008b3e:	0014      	movs	r4, r2
 8008b40:	000a      	movs	r2, r1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10e      	bne.n	8008b64 <scalbn+0x2c>
 8008b46:	004b      	lsls	r3, r1, #1
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	4303      	orrs	r3, r0
 8008b4c:	d011      	beq.n	8008b72 <scalbn+0x3a>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <scalbn+0x9c>)
 8008b52:	f7f8 ff0f 	bl	8001974 <__aeabi_dmul>
 8008b56:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <scalbn+0xa0>)
 8008b58:	000a      	movs	r2, r1
 8008b5a:	429c      	cmp	r4, r3
 8008b5c:	da0a      	bge.n	8008b74 <scalbn+0x3c>
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <scalbn+0xa4>)
 8008b60:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <scalbn+0xa8>)
 8008b62:	e016      	b.n	8008b92 <scalbn+0x5a>
 8008b64:	4d1f      	ldr	r5, [pc, #124]	; (8008be4 <scalbn+0xac>)
 8008b66:	42ab      	cmp	r3, r5
 8008b68:	d107      	bne.n	8008b7a <scalbn+0x42>
 8008b6a:	0002      	movs	r2, r0
 8008b6c:	000b      	movs	r3, r1
 8008b6e:	f7f7 ffbd 	bl	8000aec <__aeabi_dadd>
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	004b      	lsls	r3, r1, #1
 8008b76:	0d5b      	lsrs	r3, r3, #21
 8008b78:	3b36      	subs	r3, #54	; 0x36
 8008b7a:	4d1b      	ldr	r5, [pc, #108]	; (8008be8 <scalbn+0xb0>)
 8008b7c:	18e3      	adds	r3, r4, r3
 8008b7e:	42ab      	cmp	r3, r5
 8008b80:	dd0a      	ble.n	8008b98 <scalbn+0x60>
 8008b82:	0002      	movs	r2, r0
 8008b84:	000b      	movs	r3, r1
 8008b86:	4819      	ldr	r0, [pc, #100]	; (8008bec <scalbn+0xb4>)
 8008b88:	4919      	ldr	r1, [pc, #100]	; (8008bf0 <scalbn+0xb8>)
 8008b8a:	f000 f839 	bl	8008c00 <copysign>
 8008b8e:	4a17      	ldr	r2, [pc, #92]	; (8008bec <scalbn+0xb4>)
 8008b90:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <scalbn+0xb8>)
 8008b92:	f7f8 feef 	bl	8001974 <__aeabi_dmul>
 8008b96:	e7ec      	b.n	8008b72 <scalbn+0x3a>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd05      	ble.n	8008ba8 <scalbn+0x70>
 8008b9c:	4c15      	ldr	r4, [pc, #84]	; (8008bf4 <scalbn+0xbc>)
 8008b9e:	051b      	lsls	r3, r3, #20
 8008ba0:	4022      	ands	r2, r4
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	0011      	movs	r1, r2
 8008ba6:	e7e4      	b.n	8008b72 <scalbn+0x3a>
 8008ba8:	001d      	movs	r5, r3
 8008baa:	3535      	adds	r5, #53	; 0x35
 8008bac:	da09      	bge.n	8008bc2 <scalbn+0x8a>
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <scalbn+0xc0>)
 8008bb0:	0002      	movs	r2, r0
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	dce6      	bgt.n	8008b84 <scalbn+0x4c>
 8008bb6:	000b      	movs	r3, r1
 8008bb8:	4808      	ldr	r0, [pc, #32]	; (8008bdc <scalbn+0xa4>)
 8008bba:	4909      	ldr	r1, [pc, #36]	; (8008be0 <scalbn+0xa8>)
 8008bbc:	f000 f820 	bl	8008c00 <copysign>
 8008bc0:	e7cd      	b.n	8008b5e <scalbn+0x26>
 8008bc2:	4c0c      	ldr	r4, [pc, #48]	; (8008bf4 <scalbn+0xbc>)
 8008bc4:	3336      	adds	r3, #54	; 0x36
 8008bc6:	4022      	ands	r2, r4
 8008bc8:	051b      	lsls	r3, r3, #20
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	0019      	movs	r1, r3
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <scalbn+0xc4>)
 8008bd2:	e7de      	b.n	8008b92 <scalbn+0x5a>
 8008bd4:	43500000 	.word	0x43500000
 8008bd8:	ffff3cb0 	.word	0xffff3cb0
 8008bdc:	c2f8f359 	.word	0xc2f8f359
 8008be0:	01a56e1f 	.word	0x01a56e1f
 8008be4:	000007ff 	.word	0x000007ff
 8008be8:	000007fe 	.word	0x000007fe
 8008bec:	8800759c 	.word	0x8800759c
 8008bf0:	7e37e43c 	.word	0x7e37e43c
 8008bf4:	800fffff 	.word	0x800fffff
 8008bf8:	0000c350 	.word	0x0000c350
 8008bfc:	3c900000 	.word	0x3c900000

08008c00 <copysign>:
 8008c00:	b530      	push	{r4, r5, lr}
 8008c02:	004a      	lsls	r2, r1, #1
 8008c04:	0fdb      	lsrs	r3, r3, #31
 8008c06:	07db      	lsls	r3, r3, #31
 8008c08:	0852      	lsrs	r2, r2, #1
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	0011      	movs	r1, r2
 8008c0e:	bd30      	pop	{r4, r5, pc}

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
