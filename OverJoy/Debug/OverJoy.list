
OverJoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08007c30  08007c30  00017c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000095c  20000104  08007fdc  00020104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a60  08007fdc  00020a60  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022b6c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041a7  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c692  00000000  00000000  00046e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010a8  00000000  00000000  000534d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001068  00000000  00000000  00054580  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008f71  00000000  00000000  000555e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004dbe  00000000  00000000  0005e559  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00063317  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e3c  00000000  00000000  00063394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c14 	.word	0x08007c14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	08007c14 	.word	0x08007c14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fc4b 	bl	8001acc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fba5 	bl	8001990 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fc3d 	bl	8001acc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fc33 	bl	8001acc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fbc5 	bl	8001a04 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fbbb 	bl	8001a04 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f9e1 	bl	800066c <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f973 	bl	80005a0 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f9d3 	bl	800066c <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f9c9 	bl	800066c <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f97f 	bl	80005ec <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f975 	bl	80005ec <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fdiv>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	46de      	mov	lr, fp
 8000318:	4645      	mov	r5, r8
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0244      	lsls	r4, r0, #9
 800031e:	0043      	lsls	r3, r0, #1
 8000320:	0fc6      	lsrs	r6, r0, #31
 8000322:	b083      	sub	sp, #12
 8000324:	1c0f      	adds	r7, r1, #0
 8000326:	0a64      	lsrs	r4, r4, #9
 8000328:	0e1b      	lsrs	r3, r3, #24
 800032a:	46b2      	mov	sl, r6
 800032c:	d053      	beq.n	80003d6 <__aeabi_fdiv+0xc6>
 800032e:	2bff      	cmp	r3, #255	; 0xff
 8000330:	d027      	beq.n	8000382 <__aeabi_fdiv+0x72>
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	00e4      	lsls	r4, r4, #3
 8000336:	04d2      	lsls	r2, r2, #19
 8000338:	4314      	orrs	r4, r2
 800033a:	227f      	movs	r2, #127	; 0x7f
 800033c:	4252      	negs	r2, r2
 800033e:	4690      	mov	r8, r2
 8000340:	4498      	add	r8, r3
 8000342:	2300      	movs	r3, #0
 8000344:	4699      	mov	r9, r3
 8000346:	469b      	mov	fp, r3
 8000348:	027d      	lsls	r5, r7, #9
 800034a:	0078      	lsls	r0, r7, #1
 800034c:	0ffb      	lsrs	r3, r7, #31
 800034e:	0a6d      	lsrs	r5, r5, #9
 8000350:	0e00      	lsrs	r0, r0, #24
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	d024      	beq.n	80003a0 <__aeabi_fdiv+0x90>
 8000356:	28ff      	cmp	r0, #255	; 0xff
 8000358:	d046      	beq.n	80003e8 <__aeabi_fdiv+0xd8>
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	2100      	movs	r1, #0
 800035e:	00ed      	lsls	r5, r5, #3
 8000360:	04db      	lsls	r3, r3, #19
 8000362:	431d      	orrs	r5, r3
 8000364:	387f      	subs	r0, #127	; 0x7f
 8000366:	4647      	mov	r7, r8
 8000368:	1a38      	subs	r0, r7, r0
 800036a:	464f      	mov	r7, r9
 800036c:	430f      	orrs	r7, r1
 800036e:	00bf      	lsls	r7, r7, #2
 8000370:	46b9      	mov	r9, r7
 8000372:	0033      	movs	r3, r6
 8000374:	9a00      	ldr	r2, [sp, #0]
 8000376:	4f87      	ldr	r7, [pc, #540]	; (8000594 <__aeabi_fdiv+0x284>)
 8000378:	4053      	eors	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	58ba      	ldr	r2, [r7, r2]
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	4697      	mov	pc, r2
 8000382:	2c00      	cmp	r4, #0
 8000384:	d14e      	bne.n	8000424 <__aeabi_fdiv+0x114>
 8000386:	2308      	movs	r3, #8
 8000388:	4699      	mov	r9, r3
 800038a:	33f7      	adds	r3, #247	; 0xf7
 800038c:	4698      	mov	r8, r3
 800038e:	3bfd      	subs	r3, #253	; 0xfd
 8000390:	469b      	mov	fp, r3
 8000392:	027d      	lsls	r5, r7, #9
 8000394:	0078      	lsls	r0, r7, #1
 8000396:	0ffb      	lsrs	r3, r7, #31
 8000398:	0a6d      	lsrs	r5, r5, #9
 800039a:	0e00      	lsrs	r0, r0, #24
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	d1da      	bne.n	8000356 <__aeabi_fdiv+0x46>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d126      	bne.n	80003f2 <__aeabi_fdiv+0xe2>
 80003a4:	2000      	movs	r0, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	0033      	movs	r3, r6
 80003aa:	9a00      	ldr	r2, [sp, #0]
 80003ac:	4f7a      	ldr	r7, [pc, #488]	; (8000598 <__aeabi_fdiv+0x288>)
 80003ae:	4053      	eors	r3, r2
 80003b0:	4642      	mov	r2, r8
 80003b2:	1a10      	subs	r0, r2, r0
 80003b4:	464a      	mov	r2, r9
 80003b6:	430a      	orrs	r2, r1
 80003b8:	0092      	lsls	r2, r2, #2
 80003ba:	58ba      	ldr	r2, [r7, r2]
 80003bc:	001d      	movs	r5, r3
 80003be:	4697      	mov	pc, r2
 80003c0:	9b00      	ldr	r3, [sp, #0]
 80003c2:	002c      	movs	r4, r5
 80003c4:	469a      	mov	sl, r3
 80003c6:	468b      	mov	fp, r1
 80003c8:	465b      	mov	r3, fp
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d131      	bne.n	8000432 <__aeabi_fdiv+0x122>
 80003ce:	4653      	mov	r3, sl
 80003d0:	21ff      	movs	r1, #255	; 0xff
 80003d2:	2400      	movs	r4, #0
 80003d4:	e038      	b.n	8000448 <__aeabi_fdiv+0x138>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	d117      	bne.n	800040a <__aeabi_fdiv+0xfa>
 80003da:	2304      	movs	r3, #4
 80003dc:	4699      	mov	r9, r3
 80003de:	2300      	movs	r3, #0
 80003e0:	4698      	mov	r8, r3
 80003e2:	3301      	adds	r3, #1
 80003e4:	469b      	mov	fp, r3
 80003e6:	e7af      	b.n	8000348 <__aeabi_fdiv+0x38>
 80003e8:	20ff      	movs	r0, #255	; 0xff
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d10b      	bne.n	8000406 <__aeabi_fdiv+0xf6>
 80003ee:	2102      	movs	r1, #2
 80003f0:	e7da      	b.n	80003a8 <__aeabi_fdiv+0x98>
 80003f2:	0028      	movs	r0, r5
 80003f4:	f002 fa80 	bl	80028f8 <__clzsi2>
 80003f8:	1f43      	subs	r3, r0, #5
 80003fa:	409d      	lsls	r5, r3
 80003fc:	2376      	movs	r3, #118	; 0x76
 80003fe:	425b      	negs	r3, r3
 8000400:	1a18      	subs	r0, r3, r0
 8000402:	2100      	movs	r1, #0
 8000404:	e7af      	b.n	8000366 <__aeabi_fdiv+0x56>
 8000406:	2103      	movs	r1, #3
 8000408:	e7ad      	b.n	8000366 <__aeabi_fdiv+0x56>
 800040a:	0020      	movs	r0, r4
 800040c:	f002 fa74 	bl	80028f8 <__clzsi2>
 8000410:	1f43      	subs	r3, r0, #5
 8000412:	409c      	lsls	r4, r3
 8000414:	2376      	movs	r3, #118	; 0x76
 8000416:	425b      	negs	r3, r3
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	4698      	mov	r8, r3
 800041c:	2300      	movs	r3, #0
 800041e:	4699      	mov	r9, r3
 8000420:	469b      	mov	fp, r3
 8000422:	e791      	b.n	8000348 <__aeabi_fdiv+0x38>
 8000424:	230c      	movs	r3, #12
 8000426:	4699      	mov	r9, r3
 8000428:	33f3      	adds	r3, #243	; 0xf3
 800042a:	4698      	mov	r8, r3
 800042c:	3bfc      	subs	r3, #252	; 0xfc
 800042e:	469b      	mov	fp, r3
 8000430:	e78a      	b.n	8000348 <__aeabi_fdiv+0x38>
 8000432:	2b03      	cmp	r3, #3
 8000434:	d100      	bne.n	8000438 <__aeabi_fdiv+0x128>
 8000436:	e0a5      	b.n	8000584 <__aeabi_fdiv+0x274>
 8000438:	4655      	mov	r5, sl
 800043a:	2b01      	cmp	r3, #1
 800043c:	d000      	beq.n	8000440 <__aeabi_fdiv+0x130>
 800043e:	e081      	b.n	8000544 <__aeabi_fdiv+0x234>
 8000440:	2301      	movs	r3, #1
 8000442:	2100      	movs	r1, #0
 8000444:	2400      	movs	r4, #0
 8000446:	402b      	ands	r3, r5
 8000448:	0264      	lsls	r4, r4, #9
 800044a:	05c9      	lsls	r1, r1, #23
 800044c:	0a60      	lsrs	r0, r4, #9
 800044e:	07db      	lsls	r3, r3, #31
 8000450:	4308      	orrs	r0, r1
 8000452:	4318      	orrs	r0, r3
 8000454:	b003      	add	sp, #12
 8000456:	bc3c      	pop	{r2, r3, r4, r5}
 8000458:	4690      	mov	r8, r2
 800045a:	4699      	mov	r9, r3
 800045c:	46a2      	mov	sl, r4
 800045e:	46ab      	mov	fp, r5
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	2480      	movs	r4, #128	; 0x80
 8000464:	2300      	movs	r3, #0
 8000466:	03e4      	lsls	r4, r4, #15
 8000468:	21ff      	movs	r1, #255	; 0xff
 800046a:	e7ed      	b.n	8000448 <__aeabi_fdiv+0x138>
 800046c:	21ff      	movs	r1, #255	; 0xff
 800046e:	2400      	movs	r4, #0
 8000470:	e7ea      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000472:	2301      	movs	r3, #1
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	291b      	cmp	r1, #27
 8000478:	dd66      	ble.n	8000548 <__aeabi_fdiv+0x238>
 800047a:	9a01      	ldr	r2, [sp, #4]
 800047c:	4013      	ands	r3, r2
 800047e:	2100      	movs	r1, #0
 8000480:	2400      	movs	r4, #0
 8000482:	e7e1      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	03db      	lsls	r3, r3, #15
 8000488:	421c      	tst	r4, r3
 800048a:	d038      	beq.n	80004fe <__aeabi_fdiv+0x1ee>
 800048c:	421d      	tst	r5, r3
 800048e:	d051      	beq.n	8000534 <__aeabi_fdiv+0x224>
 8000490:	431c      	orrs	r4, r3
 8000492:	0264      	lsls	r4, r4, #9
 8000494:	0a64      	lsrs	r4, r4, #9
 8000496:	0033      	movs	r3, r6
 8000498:	21ff      	movs	r1, #255	; 0xff
 800049a:	e7d5      	b.n	8000448 <__aeabi_fdiv+0x138>
 800049c:	0163      	lsls	r3, r4, #5
 800049e:	016c      	lsls	r4, r5, #5
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d23b      	bcs.n	800051c <__aeabi_fdiv+0x20c>
 80004a4:	261b      	movs	r6, #27
 80004a6:	2100      	movs	r1, #0
 80004a8:	3801      	subs	r0, #1
 80004aa:	2501      	movs	r5, #1
 80004ac:	001f      	movs	r7, r3
 80004ae:	0049      	lsls	r1, r1, #1
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	db01      	blt.n	80004ba <__aeabi_fdiv+0x1aa>
 80004b6:	429c      	cmp	r4, r3
 80004b8:	d801      	bhi.n	80004be <__aeabi_fdiv+0x1ae>
 80004ba:	1b1b      	subs	r3, r3, r4
 80004bc:	4329      	orrs	r1, r5
 80004be:	3e01      	subs	r6, #1
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d1f3      	bne.n	80004ac <__aeabi_fdiv+0x19c>
 80004c4:	001c      	movs	r4, r3
 80004c6:	1e63      	subs	r3, r4, #1
 80004c8:	419c      	sbcs	r4, r3
 80004ca:	430c      	orrs	r4, r1
 80004cc:	0001      	movs	r1, r0
 80004ce:	317f      	adds	r1, #127	; 0x7f
 80004d0:	2900      	cmp	r1, #0
 80004d2:	ddce      	ble.n	8000472 <__aeabi_fdiv+0x162>
 80004d4:	0763      	lsls	r3, r4, #29
 80004d6:	d004      	beq.n	80004e2 <__aeabi_fdiv+0x1d2>
 80004d8:	230f      	movs	r3, #15
 80004da:	4023      	ands	r3, r4
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d000      	beq.n	80004e2 <__aeabi_fdiv+0x1d2>
 80004e0:	3404      	adds	r4, #4
 80004e2:	0123      	lsls	r3, r4, #4
 80004e4:	d503      	bpl.n	80004ee <__aeabi_fdiv+0x1de>
 80004e6:	0001      	movs	r1, r0
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <__aeabi_fdiv+0x28c>)
 80004ea:	3180      	adds	r1, #128	; 0x80
 80004ec:	401c      	ands	r4, r3
 80004ee:	29fe      	cmp	r1, #254	; 0xfe
 80004f0:	dd0d      	ble.n	800050e <__aeabi_fdiv+0x1fe>
 80004f2:	2301      	movs	r3, #1
 80004f4:	9a01      	ldr	r2, [sp, #4]
 80004f6:	21ff      	movs	r1, #255	; 0xff
 80004f8:	4013      	ands	r3, r2
 80004fa:	2400      	movs	r4, #0
 80004fc:	e7a4      	b.n	8000448 <__aeabi_fdiv+0x138>
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	03db      	lsls	r3, r3, #15
 8000502:	431c      	orrs	r4, r3
 8000504:	0264      	lsls	r4, r4, #9
 8000506:	0a64      	lsrs	r4, r4, #9
 8000508:	0033      	movs	r3, r6
 800050a:	21ff      	movs	r1, #255	; 0xff
 800050c:	e79c      	b.n	8000448 <__aeabi_fdiv+0x138>
 800050e:	2301      	movs	r3, #1
 8000510:	9a01      	ldr	r2, [sp, #4]
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2c9      	uxtb	r1, r1
 8000518:	4013      	ands	r3, r2
 800051a:	e795      	b.n	8000448 <__aeabi_fdiv+0x138>
 800051c:	1b1b      	subs	r3, r3, r4
 800051e:	261a      	movs	r6, #26
 8000520:	2101      	movs	r1, #1
 8000522:	e7c2      	b.n	80004aa <__aeabi_fdiv+0x19a>
 8000524:	9b00      	ldr	r3, [sp, #0]
 8000526:	468b      	mov	fp, r1
 8000528:	469a      	mov	sl, r3
 800052a:	2400      	movs	r4, #0
 800052c:	e74c      	b.n	80003c8 <__aeabi_fdiv+0xb8>
 800052e:	0263      	lsls	r3, r4, #9
 8000530:	d5e5      	bpl.n	80004fe <__aeabi_fdiv+0x1ee>
 8000532:	2500      	movs	r5, #0
 8000534:	2480      	movs	r4, #128	; 0x80
 8000536:	03e4      	lsls	r4, r4, #15
 8000538:	432c      	orrs	r4, r5
 800053a:	0264      	lsls	r4, r4, #9
 800053c:	0a64      	lsrs	r4, r4, #9
 800053e:	9b00      	ldr	r3, [sp, #0]
 8000540:	21ff      	movs	r1, #255	; 0xff
 8000542:	e781      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000544:	9501      	str	r5, [sp, #4]
 8000546:	e7c1      	b.n	80004cc <__aeabi_fdiv+0x1bc>
 8000548:	0023      	movs	r3, r4
 800054a:	2020      	movs	r0, #32
 800054c:	40cb      	lsrs	r3, r1
 800054e:	1a41      	subs	r1, r0, r1
 8000550:	408c      	lsls	r4, r1
 8000552:	1e61      	subs	r1, r4, #1
 8000554:	418c      	sbcs	r4, r1
 8000556:	431c      	orrs	r4, r3
 8000558:	0763      	lsls	r3, r4, #29
 800055a:	d004      	beq.n	8000566 <__aeabi_fdiv+0x256>
 800055c:	230f      	movs	r3, #15
 800055e:	4023      	ands	r3, r4
 8000560:	2b04      	cmp	r3, #4
 8000562:	d000      	beq.n	8000566 <__aeabi_fdiv+0x256>
 8000564:	3404      	adds	r4, #4
 8000566:	0163      	lsls	r3, r4, #5
 8000568:	d505      	bpl.n	8000576 <__aeabi_fdiv+0x266>
 800056a:	2301      	movs	r3, #1
 800056c:	9a01      	ldr	r2, [sp, #4]
 800056e:	2101      	movs	r1, #1
 8000570:	4013      	ands	r3, r2
 8000572:	2400      	movs	r4, #0
 8000574:	e768      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000576:	2301      	movs	r3, #1
 8000578:	9a01      	ldr	r2, [sp, #4]
 800057a:	01a4      	lsls	r4, r4, #6
 800057c:	0a64      	lsrs	r4, r4, #9
 800057e:	4013      	ands	r3, r2
 8000580:	2100      	movs	r1, #0
 8000582:	e761      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	03db      	lsls	r3, r3, #15
 8000588:	431c      	orrs	r4, r3
 800058a:	0264      	lsls	r4, r4, #9
 800058c:	0a64      	lsrs	r4, r4, #9
 800058e:	4653      	mov	r3, sl
 8000590:	21ff      	movs	r1, #255	; 0xff
 8000592:	e759      	b.n	8000448 <__aeabi_fdiv+0x138>
 8000594:	08007c50 	.word	0x08007c50
 8000598:	08007c90 	.word	0x08007c90
 800059c:	f7ffffff 	.word	0xf7ffffff

080005a0 <__eqsf2>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	0042      	lsls	r2, r0, #1
 80005a4:	0245      	lsls	r5, r0, #9
 80005a6:	024e      	lsls	r6, r1, #9
 80005a8:	004c      	lsls	r4, r1, #1
 80005aa:	0fc3      	lsrs	r3, r0, #31
 80005ac:	0a6d      	lsrs	r5, r5, #9
 80005ae:	0e12      	lsrs	r2, r2, #24
 80005b0:	0a76      	lsrs	r6, r6, #9
 80005b2:	0e24      	lsrs	r4, r4, #24
 80005b4:	0fc9      	lsrs	r1, r1, #31
 80005b6:	2001      	movs	r0, #1
 80005b8:	2aff      	cmp	r2, #255	; 0xff
 80005ba:	d006      	beq.n	80005ca <__eqsf2+0x2a>
 80005bc:	2cff      	cmp	r4, #255	; 0xff
 80005be:	d003      	beq.n	80005c8 <__eqsf2+0x28>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	d101      	bne.n	80005c8 <__eqsf2+0x28>
 80005c4:	42b5      	cmp	r5, r6
 80005c6:	d006      	beq.n	80005d6 <__eqsf2+0x36>
 80005c8:	bd70      	pop	{r4, r5, r6, pc}
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d1fc      	bne.n	80005c8 <__eqsf2+0x28>
 80005ce:	2cff      	cmp	r4, #255	; 0xff
 80005d0:	d1fa      	bne.n	80005c8 <__eqsf2+0x28>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d1f8      	bne.n	80005c8 <__eqsf2+0x28>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d006      	beq.n	80005e8 <__eqsf2+0x48>
 80005da:	2001      	movs	r0, #1
 80005dc:	2a00      	cmp	r2, #0
 80005de:	d1f3      	bne.n	80005c8 <__eqsf2+0x28>
 80005e0:	0028      	movs	r0, r5
 80005e2:	1e45      	subs	r5, r0, #1
 80005e4:	41a8      	sbcs	r0, r5
 80005e6:	e7ef      	b.n	80005c8 <__eqsf2+0x28>
 80005e8:	2000      	movs	r0, #0
 80005ea:	e7ed      	b.n	80005c8 <__eqsf2+0x28>

080005ec <__gesf2>:
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	0042      	lsls	r2, r0, #1
 80005f0:	0245      	lsls	r5, r0, #9
 80005f2:	024c      	lsls	r4, r1, #9
 80005f4:	0fc3      	lsrs	r3, r0, #31
 80005f6:	0048      	lsls	r0, r1, #1
 80005f8:	0a6d      	lsrs	r5, r5, #9
 80005fa:	0e12      	lsrs	r2, r2, #24
 80005fc:	0a64      	lsrs	r4, r4, #9
 80005fe:	0e00      	lsrs	r0, r0, #24
 8000600:	0fc9      	lsrs	r1, r1, #31
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d01e      	beq.n	8000644 <__gesf2+0x58>
 8000606:	28ff      	cmp	r0, #255	; 0xff
 8000608:	d021      	beq.n	800064e <__gesf2+0x62>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d10a      	bne.n	8000624 <__gesf2+0x38>
 800060e:	426e      	negs	r6, r5
 8000610:	416e      	adcs	r6, r5
 8000612:	b2f6      	uxtb	r6, r6
 8000614:	2800      	cmp	r0, #0
 8000616:	d10f      	bne.n	8000638 <__gesf2+0x4c>
 8000618:	2c00      	cmp	r4, #0
 800061a:	d10d      	bne.n	8000638 <__gesf2+0x4c>
 800061c:	2000      	movs	r0, #0
 800061e:	2d00      	cmp	r5, #0
 8000620:	d009      	beq.n	8000636 <__gesf2+0x4a>
 8000622:	e005      	b.n	8000630 <__gesf2+0x44>
 8000624:	2800      	cmp	r0, #0
 8000626:	d101      	bne.n	800062c <__gesf2+0x40>
 8000628:	2c00      	cmp	r4, #0
 800062a:	d001      	beq.n	8000630 <__gesf2+0x44>
 800062c:	428b      	cmp	r3, r1
 800062e:	d011      	beq.n	8000654 <__gesf2+0x68>
 8000630:	2101      	movs	r1, #1
 8000632:	4258      	negs	r0, r3
 8000634:	4308      	orrs	r0, r1
 8000636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000638:	2e00      	cmp	r6, #0
 800063a:	d0f7      	beq.n	800062c <__gesf2+0x40>
 800063c:	2001      	movs	r0, #1
 800063e:	3901      	subs	r1, #1
 8000640:	4308      	orrs	r0, r1
 8000642:	e7f8      	b.n	8000636 <__gesf2+0x4a>
 8000644:	2d00      	cmp	r5, #0
 8000646:	d0de      	beq.n	8000606 <__gesf2+0x1a>
 8000648:	2002      	movs	r0, #2
 800064a:	4240      	negs	r0, r0
 800064c:	e7f3      	b.n	8000636 <__gesf2+0x4a>
 800064e:	2c00      	cmp	r4, #0
 8000650:	d0db      	beq.n	800060a <__gesf2+0x1e>
 8000652:	e7f9      	b.n	8000648 <__gesf2+0x5c>
 8000654:	4282      	cmp	r2, r0
 8000656:	dceb      	bgt.n	8000630 <__gesf2+0x44>
 8000658:	db04      	blt.n	8000664 <__gesf2+0x78>
 800065a:	42a5      	cmp	r5, r4
 800065c:	d8e8      	bhi.n	8000630 <__gesf2+0x44>
 800065e:	2000      	movs	r0, #0
 8000660:	42a5      	cmp	r5, r4
 8000662:	d2e8      	bcs.n	8000636 <__gesf2+0x4a>
 8000664:	2101      	movs	r1, #1
 8000666:	1e58      	subs	r0, r3, #1
 8000668:	4308      	orrs	r0, r1
 800066a:	e7e4      	b.n	8000636 <__gesf2+0x4a>

0800066c <__lesf2>:
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	0042      	lsls	r2, r0, #1
 8000670:	024d      	lsls	r5, r1, #9
 8000672:	004c      	lsls	r4, r1, #1
 8000674:	0246      	lsls	r6, r0, #9
 8000676:	0a76      	lsrs	r6, r6, #9
 8000678:	0e12      	lsrs	r2, r2, #24
 800067a:	0fc3      	lsrs	r3, r0, #31
 800067c:	0a6d      	lsrs	r5, r5, #9
 800067e:	0e24      	lsrs	r4, r4, #24
 8000680:	0fc9      	lsrs	r1, r1, #31
 8000682:	2aff      	cmp	r2, #255	; 0xff
 8000684:	d016      	beq.n	80006b4 <__lesf2+0x48>
 8000686:	2cff      	cmp	r4, #255	; 0xff
 8000688:	d018      	beq.n	80006bc <__lesf2+0x50>
 800068a:	2a00      	cmp	r2, #0
 800068c:	d10a      	bne.n	80006a4 <__lesf2+0x38>
 800068e:	4270      	negs	r0, r6
 8000690:	4170      	adcs	r0, r6
 8000692:	b2c0      	uxtb	r0, r0
 8000694:	2c00      	cmp	r4, #0
 8000696:	d015      	beq.n	80006c4 <__lesf2+0x58>
 8000698:	2800      	cmp	r0, #0
 800069a:	d005      	beq.n	80006a8 <__lesf2+0x3c>
 800069c:	2001      	movs	r0, #1
 800069e:	3901      	subs	r1, #1
 80006a0:	4308      	orrs	r0, r1
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d013      	beq.n	80006d0 <__lesf2+0x64>
 80006a8:	4299      	cmp	r1, r3
 80006aa:	d014      	beq.n	80006d6 <__lesf2+0x6a>
 80006ac:	2001      	movs	r0, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	4318      	orrs	r0, r3
 80006b2:	e7f6      	b.n	80006a2 <__lesf2+0x36>
 80006b4:	2002      	movs	r0, #2
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d1f3      	bne.n	80006a2 <__lesf2+0x36>
 80006ba:	e7e4      	b.n	8000686 <__lesf2+0x1a>
 80006bc:	2002      	movs	r0, #2
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d1ef      	bne.n	80006a2 <__lesf2+0x36>
 80006c2:	e7e2      	b.n	800068a <__lesf2+0x1e>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d1e7      	bne.n	8000698 <__lesf2+0x2c>
 80006c8:	2000      	movs	r0, #0
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d0e9      	beq.n	80006a2 <__lesf2+0x36>
 80006ce:	e7ed      	b.n	80006ac <__lesf2+0x40>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d1e9      	bne.n	80006a8 <__lesf2+0x3c>
 80006d4:	e7ea      	b.n	80006ac <__lesf2+0x40>
 80006d6:	42a2      	cmp	r2, r4
 80006d8:	dc06      	bgt.n	80006e8 <__lesf2+0x7c>
 80006da:	dbdf      	blt.n	800069c <__lesf2+0x30>
 80006dc:	42ae      	cmp	r6, r5
 80006de:	d803      	bhi.n	80006e8 <__lesf2+0x7c>
 80006e0:	2000      	movs	r0, #0
 80006e2:	42ae      	cmp	r6, r5
 80006e4:	d3da      	bcc.n	800069c <__lesf2+0x30>
 80006e6:	e7dc      	b.n	80006a2 <__lesf2+0x36>
 80006e8:	2001      	movs	r0, #1
 80006ea:	4249      	negs	r1, r1
 80006ec:	4308      	orrs	r0, r1
 80006ee:	e7d8      	b.n	80006a2 <__lesf2+0x36>

080006f0 <__aeabi_fmul>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	4657      	mov	r7, sl
 80006f4:	464e      	mov	r6, r9
 80006f6:	4645      	mov	r5, r8
 80006f8:	46de      	mov	lr, fp
 80006fa:	b5e0      	push	{r5, r6, r7, lr}
 80006fc:	0247      	lsls	r7, r0, #9
 80006fe:	0046      	lsls	r6, r0, #1
 8000700:	4688      	mov	r8, r1
 8000702:	0a7f      	lsrs	r7, r7, #9
 8000704:	0e36      	lsrs	r6, r6, #24
 8000706:	0fc4      	lsrs	r4, r0, #31
 8000708:	2e00      	cmp	r6, #0
 800070a:	d047      	beq.n	800079c <__aeabi_fmul+0xac>
 800070c:	2eff      	cmp	r6, #255	; 0xff
 800070e:	d024      	beq.n	800075a <__aeabi_fmul+0x6a>
 8000710:	00fb      	lsls	r3, r7, #3
 8000712:	2780      	movs	r7, #128	; 0x80
 8000714:	04ff      	lsls	r7, r7, #19
 8000716:	431f      	orrs	r7, r3
 8000718:	2300      	movs	r3, #0
 800071a:	4699      	mov	r9, r3
 800071c:	469a      	mov	sl, r3
 800071e:	3e7f      	subs	r6, #127	; 0x7f
 8000720:	4643      	mov	r3, r8
 8000722:	025d      	lsls	r5, r3, #9
 8000724:	0058      	lsls	r0, r3, #1
 8000726:	0fdb      	lsrs	r3, r3, #31
 8000728:	0a6d      	lsrs	r5, r5, #9
 800072a:	0e00      	lsrs	r0, r0, #24
 800072c:	4698      	mov	r8, r3
 800072e:	d043      	beq.n	80007b8 <__aeabi_fmul+0xc8>
 8000730:	28ff      	cmp	r0, #255	; 0xff
 8000732:	d03b      	beq.n	80007ac <__aeabi_fmul+0xbc>
 8000734:	00eb      	lsls	r3, r5, #3
 8000736:	2580      	movs	r5, #128	; 0x80
 8000738:	2200      	movs	r2, #0
 800073a:	04ed      	lsls	r5, r5, #19
 800073c:	431d      	orrs	r5, r3
 800073e:	387f      	subs	r0, #127	; 0x7f
 8000740:	1836      	adds	r6, r6, r0
 8000742:	1c73      	adds	r3, r6, #1
 8000744:	4641      	mov	r1, r8
 8000746:	469b      	mov	fp, r3
 8000748:	464b      	mov	r3, r9
 800074a:	4061      	eors	r1, r4
 800074c:	4313      	orrs	r3, r2
 800074e:	2b0f      	cmp	r3, #15
 8000750:	d864      	bhi.n	800081c <__aeabi_fmul+0x12c>
 8000752:	4875      	ldr	r0, [pc, #468]	; (8000928 <__aeabi_fmul+0x238>)
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	58c3      	ldr	r3, [r0, r3]
 8000758:	469f      	mov	pc, r3
 800075a:	2f00      	cmp	r7, #0
 800075c:	d142      	bne.n	80007e4 <__aeabi_fmul+0xf4>
 800075e:	2308      	movs	r3, #8
 8000760:	4699      	mov	r9, r3
 8000762:	3b06      	subs	r3, #6
 8000764:	26ff      	movs	r6, #255	; 0xff
 8000766:	469a      	mov	sl, r3
 8000768:	e7da      	b.n	8000720 <__aeabi_fmul+0x30>
 800076a:	4641      	mov	r1, r8
 800076c:	2a02      	cmp	r2, #2
 800076e:	d028      	beq.n	80007c2 <__aeabi_fmul+0xd2>
 8000770:	2a03      	cmp	r2, #3
 8000772:	d100      	bne.n	8000776 <__aeabi_fmul+0x86>
 8000774:	e0ce      	b.n	8000914 <__aeabi_fmul+0x224>
 8000776:	2a01      	cmp	r2, #1
 8000778:	d000      	beq.n	800077c <__aeabi_fmul+0x8c>
 800077a:	e0ac      	b.n	80008d6 <__aeabi_fmul+0x1e6>
 800077c:	4011      	ands	r1, r2
 800077e:	2000      	movs	r0, #0
 8000780:	2200      	movs	r2, #0
 8000782:	b2cc      	uxtb	r4, r1
 8000784:	0240      	lsls	r0, r0, #9
 8000786:	05d2      	lsls	r2, r2, #23
 8000788:	0a40      	lsrs	r0, r0, #9
 800078a:	07e4      	lsls	r4, r4, #31
 800078c:	4310      	orrs	r0, r2
 800078e:	4320      	orrs	r0, r4
 8000790:	bc3c      	pop	{r2, r3, r4, r5}
 8000792:	4690      	mov	r8, r2
 8000794:	4699      	mov	r9, r3
 8000796:	46a2      	mov	sl, r4
 8000798:	46ab      	mov	fp, r5
 800079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079c:	2f00      	cmp	r7, #0
 800079e:	d115      	bne.n	80007cc <__aeabi_fmul+0xdc>
 80007a0:	2304      	movs	r3, #4
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b03      	subs	r3, #3
 80007a6:	2600      	movs	r6, #0
 80007a8:	469a      	mov	sl, r3
 80007aa:	e7b9      	b.n	8000720 <__aeabi_fmul+0x30>
 80007ac:	20ff      	movs	r0, #255	; 0xff
 80007ae:	2202      	movs	r2, #2
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d0c5      	beq.n	8000740 <__aeabi_fmul+0x50>
 80007b4:	2203      	movs	r2, #3
 80007b6:	e7c3      	b.n	8000740 <__aeabi_fmul+0x50>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d119      	bne.n	80007f0 <__aeabi_fmul+0x100>
 80007bc:	2000      	movs	r0, #0
 80007be:	2201      	movs	r2, #1
 80007c0:	e7be      	b.n	8000740 <__aeabi_fmul+0x50>
 80007c2:	2401      	movs	r4, #1
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	400c      	ands	r4, r1
 80007c8:	2000      	movs	r0, #0
 80007ca:	e7db      	b.n	8000784 <__aeabi_fmul+0x94>
 80007cc:	0038      	movs	r0, r7
 80007ce:	f002 f893 	bl	80028f8 <__clzsi2>
 80007d2:	2676      	movs	r6, #118	; 0x76
 80007d4:	1f43      	subs	r3, r0, #5
 80007d6:	409f      	lsls	r7, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	4276      	negs	r6, r6
 80007dc:	1a36      	subs	r6, r6, r0
 80007de:	4699      	mov	r9, r3
 80007e0:	469a      	mov	sl, r3
 80007e2:	e79d      	b.n	8000720 <__aeabi_fmul+0x30>
 80007e4:	230c      	movs	r3, #12
 80007e6:	4699      	mov	r9, r3
 80007e8:	3b09      	subs	r3, #9
 80007ea:	26ff      	movs	r6, #255	; 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e797      	b.n	8000720 <__aeabi_fmul+0x30>
 80007f0:	0028      	movs	r0, r5
 80007f2:	f002 f881 	bl	80028f8 <__clzsi2>
 80007f6:	1f43      	subs	r3, r0, #5
 80007f8:	409d      	lsls	r5, r3
 80007fa:	2376      	movs	r3, #118	; 0x76
 80007fc:	425b      	negs	r3, r3
 80007fe:	1a18      	subs	r0, r3, r0
 8000800:	2200      	movs	r2, #0
 8000802:	e79d      	b.n	8000740 <__aeabi_fmul+0x50>
 8000804:	2080      	movs	r0, #128	; 0x80
 8000806:	2400      	movs	r4, #0
 8000808:	03c0      	lsls	r0, r0, #15
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	e7ba      	b.n	8000784 <__aeabi_fmul+0x94>
 800080e:	003d      	movs	r5, r7
 8000810:	4652      	mov	r2, sl
 8000812:	e7ab      	b.n	800076c <__aeabi_fmul+0x7c>
 8000814:	003d      	movs	r5, r7
 8000816:	0021      	movs	r1, r4
 8000818:	4652      	mov	r2, sl
 800081a:	e7a7      	b.n	800076c <__aeabi_fmul+0x7c>
 800081c:	0c3b      	lsrs	r3, r7, #16
 800081e:	469c      	mov	ip, r3
 8000820:	042a      	lsls	r2, r5, #16
 8000822:	0c12      	lsrs	r2, r2, #16
 8000824:	0c2b      	lsrs	r3, r5, #16
 8000826:	0014      	movs	r4, r2
 8000828:	4660      	mov	r0, ip
 800082a:	4665      	mov	r5, ip
 800082c:	043f      	lsls	r7, r7, #16
 800082e:	0c3f      	lsrs	r7, r7, #16
 8000830:	437c      	muls	r4, r7
 8000832:	4342      	muls	r2, r0
 8000834:	435d      	muls	r5, r3
 8000836:	437b      	muls	r3, r7
 8000838:	0c27      	lsrs	r7, r4, #16
 800083a:	189b      	adds	r3, r3, r2
 800083c:	18ff      	adds	r7, r7, r3
 800083e:	42ba      	cmp	r2, r7
 8000840:	d903      	bls.n	800084a <__aeabi_fmul+0x15a>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	025b      	lsls	r3, r3, #9
 8000846:	469c      	mov	ip, r3
 8000848:	4465      	add	r5, ip
 800084a:	0424      	lsls	r4, r4, #16
 800084c:	043a      	lsls	r2, r7, #16
 800084e:	0c24      	lsrs	r4, r4, #16
 8000850:	1912      	adds	r2, r2, r4
 8000852:	0193      	lsls	r3, r2, #6
 8000854:	1e5c      	subs	r4, r3, #1
 8000856:	41a3      	sbcs	r3, r4
 8000858:	0c3f      	lsrs	r7, r7, #16
 800085a:	0e92      	lsrs	r2, r2, #26
 800085c:	197d      	adds	r5, r7, r5
 800085e:	431a      	orrs	r2, r3
 8000860:	01ad      	lsls	r5, r5, #6
 8000862:	4315      	orrs	r5, r2
 8000864:	012b      	lsls	r3, r5, #4
 8000866:	d504      	bpl.n	8000872 <__aeabi_fmul+0x182>
 8000868:	2301      	movs	r3, #1
 800086a:	465e      	mov	r6, fp
 800086c:	086a      	lsrs	r2, r5, #1
 800086e:	401d      	ands	r5, r3
 8000870:	4315      	orrs	r5, r2
 8000872:	0032      	movs	r2, r6
 8000874:	327f      	adds	r2, #127	; 0x7f
 8000876:	2a00      	cmp	r2, #0
 8000878:	dd25      	ble.n	80008c6 <__aeabi_fmul+0x1d6>
 800087a:	076b      	lsls	r3, r5, #29
 800087c:	d004      	beq.n	8000888 <__aeabi_fmul+0x198>
 800087e:	230f      	movs	r3, #15
 8000880:	402b      	ands	r3, r5
 8000882:	2b04      	cmp	r3, #4
 8000884:	d000      	beq.n	8000888 <__aeabi_fmul+0x198>
 8000886:	3504      	adds	r5, #4
 8000888:	012b      	lsls	r3, r5, #4
 800088a:	d503      	bpl.n	8000894 <__aeabi_fmul+0x1a4>
 800088c:	0032      	movs	r2, r6
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <__aeabi_fmul+0x23c>)
 8000890:	3280      	adds	r2, #128	; 0x80
 8000892:	401d      	ands	r5, r3
 8000894:	2afe      	cmp	r2, #254	; 0xfe
 8000896:	dc94      	bgt.n	80007c2 <__aeabi_fmul+0xd2>
 8000898:	2401      	movs	r4, #1
 800089a:	01a8      	lsls	r0, r5, #6
 800089c:	0a40      	lsrs	r0, r0, #9
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	400c      	ands	r4, r1
 80008a2:	e76f      	b.n	8000784 <__aeabi_fmul+0x94>
 80008a4:	2080      	movs	r0, #128	; 0x80
 80008a6:	03c0      	lsls	r0, r0, #15
 80008a8:	4207      	tst	r7, r0
 80008aa:	d007      	beq.n	80008bc <__aeabi_fmul+0x1cc>
 80008ac:	4205      	tst	r5, r0
 80008ae:	d105      	bne.n	80008bc <__aeabi_fmul+0x1cc>
 80008b0:	4328      	orrs	r0, r5
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	0a40      	lsrs	r0, r0, #9
 80008b6:	4644      	mov	r4, r8
 80008b8:	22ff      	movs	r2, #255	; 0xff
 80008ba:	e763      	b.n	8000784 <__aeabi_fmul+0x94>
 80008bc:	4338      	orrs	r0, r7
 80008be:	0240      	lsls	r0, r0, #9
 80008c0:	0a40      	lsrs	r0, r0, #9
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	e75e      	b.n	8000784 <__aeabi_fmul+0x94>
 80008c6:	2401      	movs	r4, #1
 80008c8:	1aa3      	subs	r3, r4, r2
 80008ca:	2b1b      	cmp	r3, #27
 80008cc:	dd05      	ble.n	80008da <__aeabi_fmul+0x1ea>
 80008ce:	400c      	ands	r4, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	e756      	b.n	8000784 <__aeabi_fmul+0x94>
 80008d6:	465e      	mov	r6, fp
 80008d8:	e7cb      	b.n	8000872 <__aeabi_fmul+0x182>
 80008da:	002a      	movs	r2, r5
 80008dc:	2020      	movs	r0, #32
 80008de:	40da      	lsrs	r2, r3
 80008e0:	1ac3      	subs	r3, r0, r3
 80008e2:	409d      	lsls	r5, r3
 80008e4:	002b      	movs	r3, r5
 80008e6:	1e5d      	subs	r5, r3, #1
 80008e8:	41ab      	sbcs	r3, r5
 80008ea:	4313      	orrs	r3, r2
 80008ec:	075a      	lsls	r2, r3, #29
 80008ee:	d004      	beq.n	80008fa <__aeabi_fmul+0x20a>
 80008f0:	220f      	movs	r2, #15
 80008f2:	401a      	ands	r2, r3
 80008f4:	2a04      	cmp	r2, #4
 80008f6:	d000      	beq.n	80008fa <__aeabi_fmul+0x20a>
 80008f8:	3304      	adds	r3, #4
 80008fa:	015a      	lsls	r2, r3, #5
 80008fc:	d504      	bpl.n	8000908 <__aeabi_fmul+0x218>
 80008fe:	2401      	movs	r4, #1
 8000900:	2201      	movs	r2, #1
 8000902:	400c      	ands	r4, r1
 8000904:	2000      	movs	r0, #0
 8000906:	e73d      	b.n	8000784 <__aeabi_fmul+0x94>
 8000908:	2401      	movs	r4, #1
 800090a:	019b      	lsls	r3, r3, #6
 800090c:	0a58      	lsrs	r0, r3, #9
 800090e:	400c      	ands	r4, r1
 8000910:	2200      	movs	r2, #0
 8000912:	e737      	b.n	8000784 <__aeabi_fmul+0x94>
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	2401      	movs	r4, #1
 8000918:	03c0      	lsls	r0, r0, #15
 800091a:	4328      	orrs	r0, r5
 800091c:	0240      	lsls	r0, r0, #9
 800091e:	0a40      	lsrs	r0, r0, #9
 8000920:	400c      	ands	r4, r1
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	e72e      	b.n	8000784 <__aeabi_fmul+0x94>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	08007cd0 	.word	0x08007cd0
 800092c:	f7ffffff 	.word	0xf7ffffff

08000930 <__aeabi_fsub>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	464f      	mov	r7, r9
 8000934:	46d6      	mov	lr, sl
 8000936:	4646      	mov	r6, r8
 8000938:	0044      	lsls	r4, r0, #1
 800093a:	b5c0      	push	{r6, r7, lr}
 800093c:	0fc2      	lsrs	r2, r0, #31
 800093e:	0247      	lsls	r7, r0, #9
 8000940:	0248      	lsls	r0, r1, #9
 8000942:	0a40      	lsrs	r0, r0, #9
 8000944:	4684      	mov	ip, r0
 8000946:	4666      	mov	r6, ip
 8000948:	0a7b      	lsrs	r3, r7, #9
 800094a:	0048      	lsls	r0, r1, #1
 800094c:	0fc9      	lsrs	r1, r1, #31
 800094e:	469a      	mov	sl, r3
 8000950:	0e24      	lsrs	r4, r4, #24
 8000952:	0015      	movs	r5, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	0e00      	lsrs	r0, r0, #24
 8000958:	4689      	mov	r9, r1
 800095a:	00f6      	lsls	r6, r6, #3
 800095c:	28ff      	cmp	r0, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x32>
 8000960:	e08f      	b.n	8000a82 <__aeabi_fsub+0x152>
 8000962:	2101      	movs	r1, #1
 8000964:	464f      	mov	r7, r9
 8000966:	404f      	eors	r7, r1
 8000968:	0039      	movs	r1, r7
 800096a:	4291      	cmp	r1, r2
 800096c:	d066      	beq.n	8000a3c <__aeabi_fsub+0x10c>
 800096e:	1a22      	subs	r2, r4, r0
 8000970:	2a00      	cmp	r2, #0
 8000972:	dc00      	bgt.n	8000976 <__aeabi_fsub+0x46>
 8000974:	e09d      	b.n	8000ab2 <__aeabi_fsub+0x182>
 8000976:	2800      	cmp	r0, #0
 8000978:	d13d      	bne.n	80009f6 <__aeabi_fsub+0xc6>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x50>
 800097e:	e08b      	b.n	8000a98 <__aeabi_fsub+0x168>
 8000980:	1e51      	subs	r1, r2, #1
 8000982:	2900      	cmp	r1, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fsub+0x58>
 8000986:	e0b5      	b.n	8000af4 <__aeabi_fsub+0x1c4>
 8000988:	2401      	movs	r4, #1
 800098a:	1b9b      	subs	r3, r3, r6
 800098c:	015a      	lsls	r2, r3, #5
 800098e:	d544      	bpl.n	8000a1a <__aeabi_fsub+0xea>
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	099f      	lsrs	r7, r3, #6
 8000994:	0038      	movs	r0, r7
 8000996:	f001 ffaf 	bl	80028f8 <__clzsi2>
 800099a:	3805      	subs	r0, #5
 800099c:	4087      	lsls	r7, r0
 800099e:	4284      	cmp	r4, r0
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_fsub+0x74>
 80009a2:	e096      	b.n	8000ad2 <__aeabi_fsub+0x1a2>
 80009a4:	1b04      	subs	r4, r0, r4
 80009a6:	003a      	movs	r2, r7
 80009a8:	2020      	movs	r0, #32
 80009aa:	3401      	adds	r4, #1
 80009ac:	40e2      	lsrs	r2, r4
 80009ae:	1b04      	subs	r4, r0, r4
 80009b0:	40a7      	lsls	r7, r4
 80009b2:	003b      	movs	r3, r7
 80009b4:	1e5f      	subs	r7, r3, #1
 80009b6:	41bb      	sbcs	r3, r7
 80009b8:	2400      	movs	r4, #0
 80009ba:	4313      	orrs	r3, r2
 80009bc:	075a      	lsls	r2, r3, #29
 80009be:	d004      	beq.n	80009ca <__aeabi_fsub+0x9a>
 80009c0:	220f      	movs	r2, #15
 80009c2:	401a      	ands	r2, r3
 80009c4:	2a04      	cmp	r2, #4
 80009c6:	d000      	beq.n	80009ca <__aeabi_fsub+0x9a>
 80009c8:	3304      	adds	r3, #4
 80009ca:	015a      	lsls	r2, r3, #5
 80009cc:	d527      	bpl.n	8000a1e <__aeabi_fsub+0xee>
 80009ce:	3401      	adds	r4, #1
 80009d0:	2cff      	cmp	r4, #255	; 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0xa6>
 80009d4:	e079      	b.n	8000aca <__aeabi_fsub+0x19a>
 80009d6:	2201      	movs	r2, #1
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	0a5b      	lsrs	r3, r3, #9
 80009dc:	b2e4      	uxtb	r4, r4
 80009de:	402a      	ands	r2, r5
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	05e4      	lsls	r4, r4, #23
 80009e4:	0a58      	lsrs	r0, r3, #9
 80009e6:	07d2      	lsls	r2, r2, #31
 80009e8:	4320      	orrs	r0, r4
 80009ea:	4310      	orrs	r0, r2
 80009ec:	bc1c      	pop	{r2, r3, r4}
 80009ee:	4690      	mov	r8, r2
 80009f0:	4699      	mov	r9, r3
 80009f2:	46a2      	mov	sl, r4
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	2cff      	cmp	r4, #255	; 0xff
 80009f8:	d0e0      	beq.n	80009bc <__aeabi_fsub+0x8c>
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	04c9      	lsls	r1, r1, #19
 80009fe:	430e      	orrs	r6, r1
 8000a00:	2a1b      	cmp	r2, #27
 8000a02:	dc7b      	bgt.n	8000afc <__aeabi_fsub+0x1cc>
 8000a04:	0031      	movs	r1, r6
 8000a06:	2020      	movs	r0, #32
 8000a08:	40d1      	lsrs	r1, r2
 8000a0a:	1a82      	subs	r2, r0, r2
 8000a0c:	4096      	lsls	r6, r2
 8000a0e:	1e72      	subs	r2, r6, #1
 8000a10:	4196      	sbcs	r6, r2
 8000a12:	430e      	orrs	r6, r1
 8000a14:	1b9b      	subs	r3, r3, r6
 8000a16:	015a      	lsls	r2, r3, #5
 8000a18:	d4ba      	bmi.n	8000990 <__aeabi_fsub+0x60>
 8000a1a:	075a      	lsls	r2, r3, #29
 8000a1c:	d1d0      	bne.n	80009c0 <__aeabi_fsub+0x90>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	08df      	lsrs	r7, r3, #3
 8000a22:	402a      	ands	r2, r5
 8000a24:	2cff      	cmp	r4, #255	; 0xff
 8000a26:	d133      	bne.n	8000a90 <__aeabi_fsub+0x160>
 8000a28:	2f00      	cmp	r7, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0xfe>
 8000a2c:	e0a8      	b.n	8000b80 <__aeabi_fsub+0x250>
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	03db      	lsls	r3, r3, #15
 8000a32:	433b      	orrs	r3, r7
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	0a5b      	lsrs	r3, r3, #9
 8000a38:	24ff      	movs	r4, #255	; 0xff
 8000a3a:	e7d1      	b.n	80009e0 <__aeabi_fsub+0xb0>
 8000a3c:	1a21      	subs	r1, r4, r0
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	dd4c      	ble.n	8000adc <__aeabi_fsub+0x1ac>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d02a      	beq.n	8000a9c <__aeabi_fsub+0x16c>
 8000a46:	2cff      	cmp	r4, #255	; 0xff
 8000a48:	d0b8      	beq.n	80009bc <__aeabi_fsub+0x8c>
 8000a4a:	2080      	movs	r0, #128	; 0x80
 8000a4c:	04c0      	lsls	r0, r0, #19
 8000a4e:	4306      	orrs	r6, r0
 8000a50:	291b      	cmp	r1, #27
 8000a52:	dd00      	ble.n	8000a56 <__aeabi_fsub+0x126>
 8000a54:	e0af      	b.n	8000bb6 <__aeabi_fsub+0x286>
 8000a56:	0030      	movs	r0, r6
 8000a58:	2720      	movs	r7, #32
 8000a5a:	40c8      	lsrs	r0, r1
 8000a5c:	1a79      	subs	r1, r7, r1
 8000a5e:	408e      	lsls	r6, r1
 8000a60:	1e71      	subs	r1, r6, #1
 8000a62:	418e      	sbcs	r6, r1
 8000a64:	4306      	orrs	r6, r0
 8000a66:	199b      	adds	r3, r3, r6
 8000a68:	0159      	lsls	r1, r3, #5
 8000a6a:	d5d6      	bpl.n	8000a1a <__aeabi_fsub+0xea>
 8000a6c:	3401      	adds	r4, #1
 8000a6e:	2cff      	cmp	r4, #255	; 0xff
 8000a70:	d100      	bne.n	8000a74 <__aeabi_fsub+0x144>
 8000a72:	e085      	b.n	8000b80 <__aeabi_fsub+0x250>
 8000a74:	2201      	movs	r2, #1
 8000a76:	497a      	ldr	r1, [pc, #488]	; (8000c60 <__aeabi_fsub+0x330>)
 8000a78:	401a      	ands	r2, r3
 8000a7a:	085b      	lsrs	r3, r3, #1
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	e79c      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_fsub+0x158>
 8000a86:	e770      	b.n	800096a <__aeabi_fsub+0x3a>
 8000a88:	e76b      	b.n	8000962 <__aeabi_fsub+0x32>
 8000a8a:	1e3b      	subs	r3, r7, #0
 8000a8c:	d1c5      	bne.n	8000a1a <__aeabi_fsub+0xea>
 8000a8e:	2200      	movs	r2, #0
 8000a90:	027b      	lsls	r3, r7, #9
 8000a92:	0a5b      	lsrs	r3, r3, #9
 8000a94:	b2e4      	uxtb	r4, r4
 8000a96:	e7a3      	b.n	80009e0 <__aeabi_fsub+0xb0>
 8000a98:	0014      	movs	r4, r2
 8000a9a:	e78f      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d04d      	beq.n	8000b3c <__aeabi_fsub+0x20c>
 8000aa0:	1e48      	subs	r0, r1, #1
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d157      	bne.n	8000b56 <__aeabi_fsub+0x226>
 8000aa6:	199b      	adds	r3, r3, r6
 8000aa8:	2401      	movs	r4, #1
 8000aaa:	015a      	lsls	r2, r3, #5
 8000aac:	d5b5      	bpl.n	8000a1a <__aeabi_fsub+0xea>
 8000aae:	2402      	movs	r4, #2
 8000ab0:	e7e0      	b.n	8000a74 <__aeabi_fsub+0x144>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d125      	bne.n	8000b02 <__aeabi_fsub+0x1d2>
 8000ab6:	1c62      	adds	r2, r4, #1
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	2a01      	cmp	r2, #1
 8000abc:	dd72      	ble.n	8000ba4 <__aeabi_fsub+0x274>
 8000abe:	1b9f      	subs	r7, r3, r6
 8000ac0:	017a      	lsls	r2, r7, #5
 8000ac2:	d535      	bpl.n	8000b30 <__aeabi_fsub+0x200>
 8000ac4:	1af7      	subs	r7, r6, r3
 8000ac6:	000d      	movs	r5, r1
 8000ac8:	e764      	b.n	8000994 <__aeabi_fsub+0x64>
 8000aca:	2201      	movs	r2, #1
 8000acc:	2300      	movs	r3, #0
 8000ace:	402a      	ands	r2, r5
 8000ad0:	e786      	b.n	80009e0 <__aeabi_fsub+0xb0>
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <__aeabi_fsub+0x334>)
 8000ad6:	1a24      	subs	r4, r4, r0
 8000ad8:	4013      	ands	r3, r2
 8000ada:	e76f      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d16c      	bne.n	8000bba <__aeabi_fsub+0x28a>
 8000ae0:	1c61      	adds	r1, r4, #1
 8000ae2:	b2c8      	uxtb	r0, r1
 8000ae4:	2801      	cmp	r0, #1
 8000ae6:	dd4e      	ble.n	8000b86 <__aeabi_fsub+0x256>
 8000ae8:	29ff      	cmp	r1, #255	; 0xff
 8000aea:	d049      	beq.n	8000b80 <__aeabi_fsub+0x250>
 8000aec:	199b      	adds	r3, r3, r6
 8000aee:	085b      	lsrs	r3, r3, #1
 8000af0:	000c      	movs	r4, r1
 8000af2:	e763      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000af4:	2aff      	cmp	r2, #255	; 0xff
 8000af6:	d041      	beq.n	8000b7c <__aeabi_fsub+0x24c>
 8000af8:	000a      	movs	r2, r1
 8000afa:	e781      	b.n	8000a00 <__aeabi_fsub+0xd0>
 8000afc:	2601      	movs	r6, #1
 8000afe:	1b9b      	subs	r3, r3, r6
 8000b00:	e789      	b.n	8000a16 <__aeabi_fsub+0xe6>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d01c      	beq.n	8000b40 <__aeabi_fsub+0x210>
 8000b06:	28ff      	cmp	r0, #255	; 0xff
 8000b08:	d021      	beq.n	8000b4e <__aeabi_fsub+0x21e>
 8000b0a:	2480      	movs	r4, #128	; 0x80
 8000b0c:	04e4      	lsls	r4, r4, #19
 8000b0e:	4252      	negs	r2, r2
 8000b10:	4323      	orrs	r3, r4
 8000b12:	2a1b      	cmp	r2, #27
 8000b14:	dd00      	ble.n	8000b18 <__aeabi_fsub+0x1e8>
 8000b16:	e096      	b.n	8000c46 <__aeabi_fsub+0x316>
 8000b18:	001c      	movs	r4, r3
 8000b1a:	2520      	movs	r5, #32
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	1aaa      	subs	r2, r5, r2
 8000b20:	4093      	lsls	r3, r2
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	4193      	sbcs	r3, r2
 8000b26:	4323      	orrs	r3, r4
 8000b28:	1af3      	subs	r3, r6, r3
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	000d      	movs	r5, r1
 8000b2e:	e72d      	b.n	800098c <__aeabi_fsub+0x5c>
 8000b30:	2f00      	cmp	r7, #0
 8000b32:	d000      	beq.n	8000b36 <__aeabi_fsub+0x206>
 8000b34:	e72e      	b.n	8000994 <__aeabi_fsub+0x64>
 8000b36:	2200      	movs	r2, #0
 8000b38:	2400      	movs	r4, #0
 8000b3a:	e7a9      	b.n	8000a90 <__aeabi_fsub+0x160>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	e73d      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d058      	beq.n	8000bf6 <__aeabi_fsub+0x2c6>
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d0ee      	beq.n	8000b28 <__aeabi_fsub+0x1f8>
 8000b4a:	28ff      	cmp	r0, #255	; 0xff
 8000b4c:	d1e1      	bne.n	8000b12 <__aeabi_fsub+0x1e2>
 8000b4e:	0033      	movs	r3, r6
 8000b50:	24ff      	movs	r4, #255	; 0xff
 8000b52:	000d      	movs	r5, r1
 8000b54:	e732      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000b56:	29ff      	cmp	r1, #255	; 0xff
 8000b58:	d010      	beq.n	8000b7c <__aeabi_fsub+0x24c>
 8000b5a:	0001      	movs	r1, r0
 8000b5c:	e778      	b.n	8000a50 <__aeabi_fsub+0x120>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d06e      	beq.n	8000c40 <__aeabi_fsub+0x310>
 8000b62:	24ff      	movs	r4, #255	; 0xff
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x23a>
 8000b68:	e728      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	4651      	mov	r1, sl
 8000b6e:	03d2      	lsls	r2, r2, #15
 8000b70:	4211      	tst	r1, r2
 8000b72:	d003      	beq.n	8000b7c <__aeabi_fsub+0x24c>
 8000b74:	4661      	mov	r1, ip
 8000b76:	4211      	tst	r1, r2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x24c>
 8000b7a:	0033      	movs	r3, r6
 8000b7c:	24ff      	movs	r4, #255	; 0xff
 8000b7e:	e71d      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000b80:	24ff      	movs	r4, #255	; 0xff
 8000b82:	2300      	movs	r3, #0
 8000b84:	e72c      	b.n	80009e0 <__aeabi_fsub+0xb0>
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d1e9      	bne.n	8000b5e <__aeabi_fsub+0x22e>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d063      	beq.n	8000c56 <__aeabi_fsub+0x326>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fsub+0x264>
 8000b92:	e713      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000b94:	199b      	adds	r3, r3, r6
 8000b96:	015a      	lsls	r2, r3, #5
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_fsub+0x26c>
 8000b9a:	e73e      	b.n	8000a1a <__aeabi_fsub+0xea>
 8000b9c:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <__aeabi_fsub+0x334>)
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	e70b      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d11e      	bne.n	8000be6 <__aeabi_fsub+0x2b6>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d12f      	bne.n	8000c0c <__aeabi_fsub+0x2dc>
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d04f      	beq.n	8000c50 <__aeabi_fsub+0x320>
 8000bb0:	0033      	movs	r3, r6
 8000bb2:	000d      	movs	r5, r1
 8000bb4:	e702      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	e755      	b.n	8000a66 <__aeabi_fsub+0x136>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d11f      	bne.n	8000bfe <__aeabi_fsub+0x2ce>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d043      	beq.n	8000c4a <__aeabi_fsub+0x31a>
 8000bc2:	43c9      	mvns	r1, r1
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d00b      	beq.n	8000be0 <__aeabi_fsub+0x2b0>
 8000bc8:	28ff      	cmp	r0, #255	; 0xff
 8000bca:	d039      	beq.n	8000c40 <__aeabi_fsub+0x310>
 8000bcc:	291b      	cmp	r1, #27
 8000bce:	dc44      	bgt.n	8000c5a <__aeabi_fsub+0x32a>
 8000bd0:	001c      	movs	r4, r3
 8000bd2:	2720      	movs	r7, #32
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	1a79      	subs	r1, r7, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	418b      	sbcs	r3, r1
 8000bde:	4323      	orrs	r3, r4
 8000be0:	199b      	adds	r3, r3, r6
 8000be2:	0004      	movs	r4, r0
 8000be4:	e740      	b.n	8000a68 <__aeabi_fsub+0x138>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d11a      	bne.n	8000c20 <__aeabi_fsub+0x2f0>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d124      	bne.n	8000c38 <__aeabi_fsub+0x308>
 8000bee:	2780      	movs	r7, #128	; 0x80
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	03ff      	lsls	r7, r7, #15
 8000bf4:	e71b      	b.n	8000a2e <__aeabi_fsub+0xfe>
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	000d      	movs	r5, r1
 8000bfc:	e6de      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000bfe:	28ff      	cmp	r0, #255	; 0xff
 8000c00:	d01e      	beq.n	8000c40 <__aeabi_fsub+0x310>
 8000c02:	2480      	movs	r4, #128	; 0x80
 8000c04:	04e4      	lsls	r4, r4, #19
 8000c06:	4249      	negs	r1, r1
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	e7df      	b.n	8000bcc <__aeabi_fsub+0x29c>
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x2e2>
 8000c10:	e6d4      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c12:	1b9f      	subs	r7, r3, r6
 8000c14:	017a      	lsls	r2, r7, #5
 8000c16:	d400      	bmi.n	8000c1a <__aeabi_fsub+0x2ea>
 8000c18:	e737      	b.n	8000a8a <__aeabi_fsub+0x15a>
 8000c1a:	1af3      	subs	r3, r6, r3
 8000c1c:	000d      	movs	r5, r1
 8000c1e:	e6cd      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c20:	24ff      	movs	r4, #255	; 0xff
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fsub+0x2f8>
 8000c26:	e6c9      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	4650      	mov	r0, sl
 8000c2c:	03d2      	lsls	r2, r2, #15
 8000c2e:	4210      	tst	r0, r2
 8000c30:	d0a4      	beq.n	8000b7c <__aeabi_fsub+0x24c>
 8000c32:	4660      	mov	r0, ip
 8000c34:	4210      	tst	r0, r2
 8000c36:	d1a1      	bne.n	8000b7c <__aeabi_fsub+0x24c>
 8000c38:	0033      	movs	r3, r6
 8000c3a:	000d      	movs	r5, r1
 8000c3c:	24ff      	movs	r4, #255	; 0xff
 8000c3e:	e6bd      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c40:	0033      	movs	r3, r6
 8000c42:	24ff      	movs	r4, #255	; 0xff
 8000c44:	e6ba      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e76e      	b.n	8000b28 <__aeabi_fsub+0x1f8>
 8000c4a:	0033      	movs	r3, r6
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	e6b5      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c50:	2700      	movs	r7, #0
 8000c52:	2200      	movs	r2, #0
 8000c54:	e71c      	b.n	8000a90 <__aeabi_fsub+0x160>
 8000c56:	0033      	movs	r3, r6
 8000c58:	e6b0      	b.n	80009bc <__aeabi_fsub+0x8c>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e7c0      	b.n	8000be0 <__aeabi_fsub+0x2b0>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	7dffffff 	.word	0x7dffffff
 8000c64:	fbffffff 	.word	0xfbffffff

08000c68 <__aeabi_i2f>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d030      	beq.n	8000cd0 <__aeabi_i2f+0x68>
 8000c6e:	17c3      	asrs	r3, r0, #31
 8000c70:	18c4      	adds	r4, r0, r3
 8000c72:	405c      	eors	r4, r3
 8000c74:	0fc5      	lsrs	r5, r0, #31
 8000c76:	0020      	movs	r0, r4
 8000c78:	f001 fe3e 	bl	80028f8 <__clzsi2>
 8000c7c:	239e      	movs	r3, #158	; 0x9e
 8000c7e:	1a1b      	subs	r3, r3, r0
 8000c80:	2b96      	cmp	r3, #150	; 0x96
 8000c82:	dc0d      	bgt.n	8000ca0 <__aeabi_i2f+0x38>
 8000c84:	2296      	movs	r2, #150	; 0x96
 8000c86:	1ad2      	subs	r2, r2, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	002a      	movs	r2, r5
 8000c8c:	0264      	lsls	r4, r4, #9
 8000c8e:	0a64      	lsrs	r4, r4, #9
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	0264      	lsls	r4, r4, #9
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0a60      	lsrs	r0, r4, #9
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	4318      	orrs	r0, r3
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2b99      	cmp	r3, #153	; 0x99
 8000ca2:	dc19      	bgt.n	8000cd8 <__aeabi_i2f+0x70>
 8000ca4:	2299      	movs	r2, #153	; 0x99
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	dd29      	ble.n	8000d00 <__aeabi_i2f+0x98>
 8000cac:	4094      	lsls	r4, r2
 8000cae:	0022      	movs	r2, r4
 8000cb0:	4c14      	ldr	r4, [pc, #80]	; (8000d04 <__aeabi_i2f+0x9c>)
 8000cb2:	4014      	ands	r4, r2
 8000cb4:	0751      	lsls	r1, r2, #29
 8000cb6:	d004      	beq.n	8000cc2 <__aeabi_i2f+0x5a>
 8000cb8:	210f      	movs	r1, #15
 8000cba:	400a      	ands	r2, r1
 8000cbc:	2a04      	cmp	r2, #4
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_i2f+0x5a>
 8000cc0:	3404      	adds	r4, #4
 8000cc2:	0162      	lsls	r2, r4, #5
 8000cc4:	d413      	bmi.n	8000cee <__aeabi_i2f+0x86>
 8000cc6:	01a4      	lsls	r4, r4, #6
 8000cc8:	0a64      	lsrs	r4, r4, #9
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	002a      	movs	r2, r5
 8000cce:	e7e0      	b.n	8000c92 <__aeabi_i2f+0x2a>
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2400      	movs	r4, #0
 8000cd6:	e7dc      	b.n	8000c92 <__aeabi_i2f+0x2a>
 8000cd8:	2205      	movs	r2, #5
 8000cda:	0021      	movs	r1, r4
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	40d1      	lsrs	r1, r2
 8000ce0:	22b9      	movs	r2, #185	; 0xb9
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	1e62      	subs	r2, r4, #1
 8000ce8:	4194      	sbcs	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	e7da      	b.n	8000ca4 <__aeabi_i2f+0x3c>
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <__aeabi_i2f+0x9c>)
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	401c      	ands	r4, r3
 8000cf4:	239f      	movs	r3, #159	; 0x9f
 8000cf6:	01a4      	lsls	r4, r4, #6
 8000cf8:	1a1b      	subs	r3, r3, r0
 8000cfa:	0a64      	lsrs	r4, r4, #9
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	e7c8      	b.n	8000c92 <__aeabi_i2f+0x2a>
 8000d00:	0022      	movs	r2, r4
 8000d02:	e7d5      	b.n	8000cb0 <__aeabi_i2f+0x48>
 8000d04:	fbffffff 	.word	0xfbffffff

08000d08 <__aeabi_dadd>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	46de      	mov	lr, fp
 8000d0e:	4657      	mov	r7, sl
 8000d10:	464e      	mov	r6, r9
 8000d12:	030c      	lsls	r4, r1, #12
 8000d14:	b5e0      	push	{r5, r6, r7, lr}
 8000d16:	004e      	lsls	r6, r1, #1
 8000d18:	0fc9      	lsrs	r1, r1, #31
 8000d1a:	4688      	mov	r8, r1
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	0a61      	lsrs	r1, r4, #9
 8000d20:	0f44      	lsrs	r4, r0, #29
 8000d22:	430c      	orrs	r4, r1
 8000d24:	00c7      	lsls	r7, r0, #3
 8000d26:	0319      	lsls	r1, r3, #12
 8000d28:	0058      	lsls	r0, r3, #1
 8000d2a:	0fdb      	lsrs	r3, r3, #31
 8000d2c:	469b      	mov	fp, r3
 8000d2e:	0a4b      	lsrs	r3, r1, #9
 8000d30:	0f51      	lsrs	r1, r2, #29
 8000d32:	430b      	orrs	r3, r1
 8000d34:	0d76      	lsrs	r6, r6, #21
 8000d36:	0d40      	lsrs	r0, r0, #21
 8000d38:	0019      	movs	r1, r3
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	45d8      	cmp	r8, fp
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dadd+0x3a>
 8000d40:	e0ae      	b.n	8000ea0 <__aeabi_dadd+0x198>
 8000d42:	1a35      	subs	r5, r6, r0
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_dadd+0x42>
 8000d48:	e0f6      	b.n	8000f38 <__aeabi_dadd+0x230>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d10f      	bne.n	8000d6e <__aeabi_dadd+0x66>
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x4c>
 8000d52:	e0db      	b.n	8000f0c <__aeabi_dadd+0x204>
 8000d54:	1e6b      	subs	r3, r5, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d000      	beq.n	8000d5c <__aeabi_dadd+0x54>
 8000d5a:	e137      	b.n	8000fcc <__aeabi_dadd+0x2c4>
 8000d5c:	1aba      	subs	r2, r7, r2
 8000d5e:	4297      	cmp	r7, r2
 8000d60:	41bf      	sbcs	r7, r7
 8000d62:	1a64      	subs	r4, r4, r1
 8000d64:	427f      	negs	r7, r7
 8000d66:	1be4      	subs	r4, r4, r7
 8000d68:	2601      	movs	r6, #1
 8000d6a:	0017      	movs	r7, r2
 8000d6c:	e024      	b.n	8000db8 <__aeabi_dadd+0xb0>
 8000d6e:	4bc6      	ldr	r3, [pc, #792]	; (8001088 <__aeabi_dadd+0x380>)
 8000d70:	429e      	cmp	r6, r3
 8000d72:	d04d      	beq.n	8000e10 <__aeabi_dadd+0x108>
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	041b      	lsls	r3, r3, #16
 8000d78:	4319      	orrs	r1, r3
 8000d7a:	2d38      	cmp	r5, #56	; 0x38
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x78>
 8000d7e:	e107      	b.n	8000f90 <__aeabi_dadd+0x288>
 8000d80:	2d1f      	cmp	r5, #31
 8000d82:	dd00      	ble.n	8000d86 <__aeabi_dadd+0x7e>
 8000d84:	e138      	b.n	8000ff8 <__aeabi_dadd+0x2f0>
 8000d86:	2020      	movs	r0, #32
 8000d88:	1b43      	subs	r3, r0, r5
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	4650      	mov	r0, sl
 8000d90:	4083      	lsls	r3, r0
 8000d92:	4699      	mov	r9, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	4648      	mov	r0, r9
 8000d98:	40eb      	lsrs	r3, r5
 8000d9a:	4318      	orrs	r0, r3
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	4650      	mov	r0, sl
 8000da0:	4082      	lsls	r2, r0
 8000da2:	1e50      	subs	r0, r2, #1
 8000da4:	4182      	sbcs	r2, r0
 8000da6:	40e9      	lsrs	r1, r5
 8000da8:	431a      	orrs	r2, r3
 8000daa:	1aba      	subs	r2, r7, r2
 8000dac:	1a61      	subs	r1, r4, r1
 8000dae:	4297      	cmp	r7, r2
 8000db0:	41a4      	sbcs	r4, r4
 8000db2:	0017      	movs	r7, r2
 8000db4:	4264      	negs	r4, r4
 8000db6:	1b0c      	subs	r4, r1, r4
 8000db8:	0223      	lsls	r3, r4, #8
 8000dba:	d562      	bpl.n	8000e82 <__aeabi_dadd+0x17a>
 8000dbc:	0264      	lsls	r4, r4, #9
 8000dbe:	0a65      	lsrs	r5, r4, #9
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dadd+0xbe>
 8000dc4:	e0df      	b.n	8000f86 <__aeabi_dadd+0x27e>
 8000dc6:	0028      	movs	r0, r5
 8000dc8:	f001 fd96 	bl	80028f8 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3b08      	subs	r3, #8
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_dadd+0xce>
 8000dd4:	e0d2      	b.n	8000f7c <__aeabi_dadd+0x274>
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	003c      	movs	r4, r7
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	40d4      	lsrs	r4, r2
 8000de0:	409f      	lsls	r7, r3
 8000de2:	4325      	orrs	r5, r4
 8000de4:	429e      	cmp	r6, r3
 8000de6:	dd00      	ble.n	8000dea <__aeabi_dadd+0xe2>
 8000de8:	e0c4      	b.n	8000f74 <__aeabi_dadd+0x26c>
 8000dea:	1b9e      	subs	r6, r3, r6
 8000dec:	1c73      	adds	r3, r6, #1
 8000dee:	2b1f      	cmp	r3, #31
 8000df0:	dd00      	ble.n	8000df4 <__aeabi_dadd+0xec>
 8000df2:	e0f1      	b.n	8000fd8 <__aeabi_dadd+0x2d0>
 8000df4:	2220      	movs	r2, #32
 8000df6:	0038      	movs	r0, r7
 8000df8:	0029      	movs	r1, r5
 8000dfa:	1ad2      	subs	r2, r2, r3
 8000dfc:	40d8      	lsrs	r0, r3
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	4097      	lsls	r7, r2
 8000e02:	002c      	movs	r4, r5
 8000e04:	4301      	orrs	r1, r0
 8000e06:	1e78      	subs	r0, r7, #1
 8000e08:	4187      	sbcs	r7, r0
 8000e0a:	40dc      	lsrs	r4, r3
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	430f      	orrs	r7, r1
 8000e10:	077b      	lsls	r3, r7, #29
 8000e12:	d009      	beq.n	8000e28 <__aeabi_dadd+0x120>
 8000e14:	230f      	movs	r3, #15
 8000e16:	403b      	ands	r3, r7
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d005      	beq.n	8000e28 <__aeabi_dadd+0x120>
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	42bb      	cmp	r3, r7
 8000e20:	41bf      	sbcs	r7, r7
 8000e22:	427f      	negs	r7, r7
 8000e24:	19e4      	adds	r4, r4, r7
 8000e26:	001f      	movs	r7, r3
 8000e28:	0223      	lsls	r3, r4, #8
 8000e2a:	d52c      	bpl.n	8000e86 <__aeabi_dadd+0x17e>
 8000e2c:	4b96      	ldr	r3, [pc, #600]	; (8001088 <__aeabi_dadd+0x380>)
 8000e2e:	3601      	adds	r6, #1
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x12e>
 8000e34:	e09a      	b.n	8000f6c <__aeabi_dadd+0x264>
 8000e36:	4645      	mov	r5, r8
 8000e38:	4b94      	ldr	r3, [pc, #592]	; (800108c <__aeabi_dadd+0x384>)
 8000e3a:	08ff      	lsrs	r7, r7, #3
 8000e3c:	401c      	ands	r4, r3
 8000e3e:	0760      	lsls	r0, r4, #29
 8000e40:	0576      	lsls	r6, r6, #21
 8000e42:	0264      	lsls	r4, r4, #9
 8000e44:	4307      	orrs	r7, r0
 8000e46:	0b24      	lsrs	r4, r4, #12
 8000e48:	0d76      	lsrs	r6, r6, #21
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0324      	lsls	r4, r4, #12
 8000e4e:	0b23      	lsrs	r3, r4, #12
 8000e50:	0d0c      	lsrs	r4, r1, #20
 8000e52:	4a8f      	ldr	r2, [pc, #572]	; (8001090 <__aeabi_dadd+0x388>)
 8000e54:	0524      	lsls	r4, r4, #20
 8000e56:	431c      	orrs	r4, r3
 8000e58:	4014      	ands	r4, r2
 8000e5a:	0533      	lsls	r3, r6, #20
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	07ed      	lsls	r5, r5, #31
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	432b      	orrs	r3, r5
 8000e66:	0038      	movs	r0, r7
 8000e68:	0019      	movs	r1, r3
 8000e6a:	bc3c      	pop	{r2, r3, r4, r5}
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	4699      	mov	r9, r3
 8000e70:	46a2      	mov	sl, r4
 8000e72:	46ab      	mov	fp, r5
 8000e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e76:	4664      	mov	r4, ip
 8000e78:	4304      	orrs	r4, r0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0x176>
 8000e7c:	e211      	b.n	80012a2 <__aeabi_dadd+0x59a>
 8000e7e:	0004      	movs	r4, r0
 8000e80:	4667      	mov	r7, ip
 8000e82:	077b      	lsls	r3, r7, #29
 8000e84:	d1c6      	bne.n	8000e14 <__aeabi_dadd+0x10c>
 8000e86:	4645      	mov	r5, r8
 8000e88:	0760      	lsls	r0, r4, #29
 8000e8a:	08ff      	lsrs	r7, r7, #3
 8000e8c:	4307      	orrs	r7, r0
 8000e8e:	08e4      	lsrs	r4, r4, #3
 8000e90:	4b7d      	ldr	r3, [pc, #500]	; (8001088 <__aeabi_dadd+0x380>)
 8000e92:	429e      	cmp	r6, r3
 8000e94:	d030      	beq.n	8000ef8 <__aeabi_dadd+0x1f0>
 8000e96:	0324      	lsls	r4, r4, #12
 8000e98:	0576      	lsls	r6, r6, #21
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	0d76      	lsrs	r6, r6, #21
 8000e9e:	e7d4      	b.n	8000e4a <__aeabi_dadd+0x142>
 8000ea0:	1a33      	subs	r3, r6, r0
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dd78      	ble.n	8000f9a <__aeabi_dadd+0x292>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d031      	beq.n	8000f10 <__aeabi_dadd+0x208>
 8000eac:	4876      	ldr	r0, [pc, #472]	; (8001088 <__aeabi_dadd+0x380>)
 8000eae:	4286      	cmp	r6, r0
 8000eb0:	d0ae      	beq.n	8000e10 <__aeabi_dadd+0x108>
 8000eb2:	2080      	movs	r0, #128	; 0x80
 8000eb4:	0400      	lsls	r0, r0, #16
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	4653      	mov	r3, sl
 8000eba:	2b38      	cmp	r3, #56	; 0x38
 8000ebc:	dc00      	bgt.n	8000ec0 <__aeabi_dadd+0x1b8>
 8000ebe:	e0e9      	b.n	8001094 <__aeabi_dadd+0x38c>
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	1e51      	subs	r1, r2, #1
 8000ec4:	418a      	sbcs	r2, r1
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	19d2      	adds	r2, r2, r7
 8000eca:	42ba      	cmp	r2, r7
 8000ecc:	41bf      	sbcs	r7, r7
 8000ece:	1909      	adds	r1, r1, r4
 8000ed0:	427c      	negs	r4, r7
 8000ed2:	0017      	movs	r7, r2
 8000ed4:	190c      	adds	r4, r1, r4
 8000ed6:	0223      	lsls	r3, r4, #8
 8000ed8:	d5d3      	bpl.n	8000e82 <__aeabi_dadd+0x17a>
 8000eda:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <__aeabi_dadd+0x380>)
 8000edc:	3601      	adds	r6, #1
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x1dc>
 8000ee2:	e13a      	b.n	800115a <__aeabi_dadd+0x452>
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <__aeabi_dadd+0x384>)
 8000ee8:	401c      	ands	r4, r3
 8000eea:	087b      	lsrs	r3, r7, #1
 8000eec:	4007      	ands	r7, r0
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	07e0      	lsls	r0, r4, #31
 8000ef2:	4307      	orrs	r7, r0
 8000ef4:	0864      	lsrs	r4, r4, #1
 8000ef6:	e78b      	b.n	8000e10 <__aeabi_dadd+0x108>
 8000ef8:	0023      	movs	r3, r4
 8000efa:	433b      	orrs	r3, r7
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x1f8>
 8000efe:	e1cb      	b.n	8001298 <__aeabi_dadd+0x590>
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	0312      	lsls	r2, r2, #12
 8000f04:	4314      	orrs	r4, r2
 8000f06:	0324      	lsls	r4, r4, #12
 8000f08:	0b24      	lsrs	r4, r4, #12
 8000f0a:	e79e      	b.n	8000e4a <__aeabi_dadd+0x142>
 8000f0c:	002e      	movs	r6, r5
 8000f0e:	e77f      	b.n	8000e10 <__aeabi_dadd+0x108>
 8000f10:	0008      	movs	r0, r1
 8000f12:	4310      	orrs	r0, r2
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dadd+0x210>
 8000f16:	e0b4      	b.n	8001082 <__aeabi_dadd+0x37a>
 8000f18:	1e58      	subs	r0, r3, #1
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dadd+0x218>
 8000f1e:	e0de      	b.n	80010de <__aeabi_dadd+0x3d6>
 8000f20:	18ba      	adds	r2, r7, r2
 8000f22:	42ba      	cmp	r2, r7
 8000f24:	419b      	sbcs	r3, r3
 8000f26:	1864      	adds	r4, r4, r1
 8000f28:	425b      	negs	r3, r3
 8000f2a:	18e4      	adds	r4, r4, r3
 8000f2c:	0017      	movs	r7, r2
 8000f2e:	2601      	movs	r6, #1
 8000f30:	0223      	lsls	r3, r4, #8
 8000f32:	d5a6      	bpl.n	8000e82 <__aeabi_dadd+0x17a>
 8000f34:	2602      	movs	r6, #2
 8000f36:	e7d5      	b.n	8000ee4 <__aeabi_dadd+0x1dc>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d16e      	bne.n	800101a <__aeabi_dadd+0x312>
 8000f3c:	1c70      	adds	r0, r6, #1
 8000f3e:	0540      	lsls	r0, r0, #21
 8000f40:	0d40      	lsrs	r0, r0, #21
 8000f42:	2801      	cmp	r0, #1
 8000f44:	dc00      	bgt.n	8000f48 <__aeabi_dadd+0x240>
 8000f46:	e0f9      	b.n	800113c <__aeabi_dadd+0x434>
 8000f48:	1ab8      	subs	r0, r7, r2
 8000f4a:	4684      	mov	ip, r0
 8000f4c:	4287      	cmp	r7, r0
 8000f4e:	4180      	sbcs	r0, r0
 8000f50:	1ae5      	subs	r5, r4, r3
 8000f52:	4240      	negs	r0, r0
 8000f54:	1a2d      	subs	r5, r5, r0
 8000f56:	0228      	lsls	r0, r5, #8
 8000f58:	d400      	bmi.n	8000f5c <__aeabi_dadd+0x254>
 8000f5a:	e089      	b.n	8001070 <__aeabi_dadd+0x368>
 8000f5c:	1bd7      	subs	r7, r2, r7
 8000f5e:	42ba      	cmp	r2, r7
 8000f60:	4192      	sbcs	r2, r2
 8000f62:	1b1c      	subs	r4, r3, r4
 8000f64:	4252      	negs	r2, r2
 8000f66:	1aa5      	subs	r5, r4, r2
 8000f68:	46d8      	mov	r8, fp
 8000f6a:	e729      	b.n	8000dc0 <__aeabi_dadd+0xb8>
 8000f6c:	4645      	mov	r5, r8
 8000f6e:	2400      	movs	r4, #0
 8000f70:	2700      	movs	r7, #0
 8000f72:	e76a      	b.n	8000e4a <__aeabi_dadd+0x142>
 8000f74:	4c45      	ldr	r4, [pc, #276]	; (800108c <__aeabi_dadd+0x384>)
 8000f76:	1af6      	subs	r6, r6, r3
 8000f78:	402c      	ands	r4, r5
 8000f7a:	e749      	b.n	8000e10 <__aeabi_dadd+0x108>
 8000f7c:	003d      	movs	r5, r7
 8000f7e:	3828      	subs	r0, #40	; 0x28
 8000f80:	4085      	lsls	r5, r0
 8000f82:	2700      	movs	r7, #0
 8000f84:	e72e      	b.n	8000de4 <__aeabi_dadd+0xdc>
 8000f86:	0038      	movs	r0, r7
 8000f88:	f001 fcb6 	bl	80028f8 <__clzsi2>
 8000f8c:	3020      	adds	r0, #32
 8000f8e:	e71d      	b.n	8000dcc <__aeabi_dadd+0xc4>
 8000f90:	430a      	orrs	r2, r1
 8000f92:	1e51      	subs	r1, r2, #1
 8000f94:	418a      	sbcs	r2, r1
 8000f96:	2100      	movs	r1, #0
 8000f98:	e707      	b.n	8000daa <__aeabi_dadd+0xa2>
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_dadd+0x298>
 8000f9e:	e0f3      	b.n	8001188 <__aeabi_dadd+0x480>
 8000fa0:	1c70      	adds	r0, r6, #1
 8000fa2:	0543      	lsls	r3, r0, #21
 8000fa4:	0d5b      	lsrs	r3, r3, #21
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_dadd+0x2a4>
 8000faa:	e0ad      	b.n	8001108 <__aeabi_dadd+0x400>
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <__aeabi_dadd+0x380>)
 8000fae:	4298      	cmp	r0, r3
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x2ac>
 8000fb2:	e0d1      	b.n	8001158 <__aeabi_dadd+0x450>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	42ba      	cmp	r2, r7
 8000fb8:	41bf      	sbcs	r7, r7
 8000fba:	1864      	adds	r4, r4, r1
 8000fbc:	427f      	negs	r7, r7
 8000fbe:	19e4      	adds	r4, r4, r7
 8000fc0:	07e7      	lsls	r7, r4, #31
 8000fc2:	0852      	lsrs	r2, r2, #1
 8000fc4:	4317      	orrs	r7, r2
 8000fc6:	0864      	lsrs	r4, r4, #1
 8000fc8:	0006      	movs	r6, r0
 8000fca:	e721      	b.n	8000e10 <__aeabi_dadd+0x108>
 8000fcc:	482e      	ldr	r0, [pc, #184]	; (8001088 <__aeabi_dadd+0x380>)
 8000fce:	4285      	cmp	r5, r0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x2cc>
 8000fd2:	e093      	b.n	80010fc <__aeabi_dadd+0x3f4>
 8000fd4:	001d      	movs	r5, r3
 8000fd6:	e6d0      	b.n	8000d7a <__aeabi_dadd+0x72>
 8000fd8:	0029      	movs	r1, r5
 8000fda:	3e1f      	subs	r6, #31
 8000fdc:	40f1      	lsrs	r1, r6
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x2dc>
 8000fe2:	e08d      	b.n	8001100 <__aeabi_dadd+0x3f8>
 8000fe4:	2240      	movs	r2, #64	; 0x40
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	409d      	lsls	r5, r3
 8000fea:	432f      	orrs	r7, r5
 8000fec:	1e7d      	subs	r5, r7, #1
 8000fee:	41af      	sbcs	r7, r5
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	430f      	orrs	r7, r1
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e744      	b.n	8000e82 <__aeabi_dadd+0x17a>
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	0008      	movs	r0, r1
 8000ffc:	3b20      	subs	r3, #32
 8000ffe:	40d8      	lsrs	r0, r3
 8001000:	0003      	movs	r3, r0
 8001002:	2d20      	cmp	r5, #32
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x300>
 8001006:	e07d      	b.n	8001104 <__aeabi_dadd+0x3fc>
 8001008:	2040      	movs	r0, #64	; 0x40
 800100a:	1b45      	subs	r5, r0, r5
 800100c:	40a9      	lsls	r1, r5
 800100e:	430a      	orrs	r2, r1
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	418a      	sbcs	r2, r1
 8001014:	2100      	movs	r1, #0
 8001016:	431a      	orrs	r2, r3
 8001018:	e6c7      	b.n	8000daa <__aeabi_dadd+0xa2>
 800101a:	2e00      	cmp	r6, #0
 800101c:	d050      	beq.n	80010c0 <__aeabi_dadd+0x3b8>
 800101e:	4e1a      	ldr	r6, [pc, #104]	; (8001088 <__aeabi_dadd+0x380>)
 8001020:	42b0      	cmp	r0, r6
 8001022:	d057      	beq.n	80010d4 <__aeabi_dadd+0x3cc>
 8001024:	2680      	movs	r6, #128	; 0x80
 8001026:	426b      	negs	r3, r5
 8001028:	4699      	mov	r9, r3
 800102a:	0436      	lsls	r6, r6, #16
 800102c:	4334      	orrs	r4, r6
 800102e:	464b      	mov	r3, r9
 8001030:	2b38      	cmp	r3, #56	; 0x38
 8001032:	dd00      	ble.n	8001036 <__aeabi_dadd+0x32e>
 8001034:	e0d6      	b.n	80011e4 <__aeabi_dadd+0x4dc>
 8001036:	2b1f      	cmp	r3, #31
 8001038:	dd00      	ble.n	800103c <__aeabi_dadd+0x334>
 800103a:	e135      	b.n	80012a8 <__aeabi_dadd+0x5a0>
 800103c:	2620      	movs	r6, #32
 800103e:	1af5      	subs	r5, r6, r3
 8001040:	0026      	movs	r6, r4
 8001042:	40ae      	lsls	r6, r5
 8001044:	46b2      	mov	sl, r6
 8001046:	003e      	movs	r6, r7
 8001048:	40de      	lsrs	r6, r3
 800104a:	46ac      	mov	ip, r5
 800104c:	0035      	movs	r5, r6
 800104e:	4656      	mov	r6, sl
 8001050:	432e      	orrs	r6, r5
 8001052:	4665      	mov	r5, ip
 8001054:	40af      	lsls	r7, r5
 8001056:	1e7d      	subs	r5, r7, #1
 8001058:	41af      	sbcs	r7, r5
 800105a:	40dc      	lsrs	r4, r3
 800105c:	4337      	orrs	r7, r6
 800105e:	1bd7      	subs	r7, r2, r7
 8001060:	42ba      	cmp	r2, r7
 8001062:	4192      	sbcs	r2, r2
 8001064:	1b0c      	subs	r4, r1, r4
 8001066:	4252      	negs	r2, r2
 8001068:	1aa4      	subs	r4, r4, r2
 800106a:	0006      	movs	r6, r0
 800106c:	46d8      	mov	r8, fp
 800106e:	e6a3      	b.n	8000db8 <__aeabi_dadd+0xb0>
 8001070:	4664      	mov	r4, ip
 8001072:	4667      	mov	r7, ip
 8001074:	432c      	orrs	r4, r5
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x372>
 8001078:	e6a2      	b.n	8000dc0 <__aeabi_dadd+0xb8>
 800107a:	2500      	movs	r5, #0
 800107c:	2600      	movs	r6, #0
 800107e:	2700      	movs	r7, #0
 8001080:	e706      	b.n	8000e90 <__aeabi_dadd+0x188>
 8001082:	001e      	movs	r6, r3
 8001084:	e6c4      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	000007ff 	.word	0x000007ff
 800108c:	ff7fffff 	.word	0xff7fffff
 8001090:	800fffff 	.word	0x800fffff
 8001094:	2b1f      	cmp	r3, #31
 8001096:	dc63      	bgt.n	8001160 <__aeabi_dadd+0x458>
 8001098:	2020      	movs	r0, #32
 800109a:	1ac3      	subs	r3, r0, r3
 800109c:	0008      	movs	r0, r1
 800109e:	4098      	lsls	r0, r3
 80010a0:	469c      	mov	ip, r3
 80010a2:	4683      	mov	fp, r0
 80010a4:	4653      	mov	r3, sl
 80010a6:	0010      	movs	r0, r2
 80010a8:	40d8      	lsrs	r0, r3
 80010aa:	0003      	movs	r3, r0
 80010ac:	4658      	mov	r0, fp
 80010ae:	4318      	orrs	r0, r3
 80010b0:	4663      	mov	r3, ip
 80010b2:	409a      	lsls	r2, r3
 80010b4:	1e53      	subs	r3, r2, #1
 80010b6:	419a      	sbcs	r2, r3
 80010b8:	4653      	mov	r3, sl
 80010ba:	4302      	orrs	r2, r0
 80010bc:	40d9      	lsrs	r1, r3
 80010be:	e703      	b.n	8000ec8 <__aeabi_dadd+0x1c0>
 80010c0:	0026      	movs	r6, r4
 80010c2:	433e      	orrs	r6, r7
 80010c4:	d006      	beq.n	80010d4 <__aeabi_dadd+0x3cc>
 80010c6:	43eb      	mvns	r3, r5
 80010c8:	4699      	mov	r9, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0c7      	beq.n	800105e <__aeabi_dadd+0x356>
 80010ce:	4e94      	ldr	r6, [pc, #592]	; (8001320 <__aeabi_dadd+0x618>)
 80010d0:	42b0      	cmp	r0, r6
 80010d2:	d1ac      	bne.n	800102e <__aeabi_dadd+0x326>
 80010d4:	000c      	movs	r4, r1
 80010d6:	0017      	movs	r7, r2
 80010d8:	0006      	movs	r6, r0
 80010da:	46d8      	mov	r8, fp
 80010dc:	e698      	b.n	8000e10 <__aeabi_dadd+0x108>
 80010de:	4b90      	ldr	r3, [pc, #576]	; (8001320 <__aeabi_dadd+0x618>)
 80010e0:	459a      	cmp	sl, r3
 80010e2:	d00b      	beq.n	80010fc <__aeabi_dadd+0x3f4>
 80010e4:	4682      	mov	sl, r0
 80010e6:	e6e7      	b.n	8000eb8 <__aeabi_dadd+0x1b0>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x3e6>
 80010ec:	e09e      	b.n	800122c <__aeabi_dadd+0x524>
 80010ee:	0018      	movs	r0, r3
 80010f0:	4310      	orrs	r0, r2
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0x3ee>
 80010f4:	e0e9      	b.n	80012ca <__aeabi_dadd+0x5c2>
 80010f6:	001c      	movs	r4, r3
 80010f8:	0017      	movs	r7, r2
 80010fa:	46d8      	mov	r8, fp
 80010fc:	4e88      	ldr	r6, [pc, #544]	; (8001320 <__aeabi_dadd+0x618>)
 80010fe:	e687      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001100:	2500      	movs	r5, #0
 8001102:	e772      	b.n	8000fea <__aeabi_dadd+0x2e2>
 8001104:	2100      	movs	r1, #0
 8001106:	e782      	b.n	800100e <__aeabi_dadd+0x306>
 8001108:	0023      	movs	r3, r4
 800110a:	433b      	orrs	r3, r7
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dadd+0x40a>
 8001110:	e0ab      	b.n	800126a <__aeabi_dadd+0x562>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x410>
 8001116:	e0e7      	b.n	80012e8 <__aeabi_dadd+0x5e0>
 8001118:	000b      	movs	r3, r1
 800111a:	4313      	orrs	r3, r2
 800111c:	d100      	bne.n	8001120 <__aeabi_dadd+0x418>
 800111e:	e677      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001120:	18ba      	adds	r2, r7, r2
 8001122:	42ba      	cmp	r2, r7
 8001124:	41bf      	sbcs	r7, r7
 8001126:	1864      	adds	r4, r4, r1
 8001128:	427f      	negs	r7, r7
 800112a:	19e4      	adds	r4, r4, r7
 800112c:	0223      	lsls	r3, r4, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dadd+0x42a>
 8001130:	e0f2      	b.n	8001318 <__aeabi_dadd+0x610>
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <__aeabi_dadd+0x61c>)
 8001134:	0017      	movs	r7, r2
 8001136:	401c      	ands	r4, r3
 8001138:	0006      	movs	r6, r0
 800113a:	e669      	b.n	8000e10 <__aeabi_dadd+0x108>
 800113c:	0020      	movs	r0, r4
 800113e:	4338      	orrs	r0, r7
 8001140:	2e00      	cmp	r6, #0
 8001142:	d1d1      	bne.n	80010e8 <__aeabi_dadd+0x3e0>
 8001144:	2800      	cmp	r0, #0
 8001146:	d15b      	bne.n	8001200 <__aeabi_dadd+0x4f8>
 8001148:	001c      	movs	r4, r3
 800114a:	4314      	orrs	r4, r2
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x448>
 800114e:	e0a8      	b.n	80012a2 <__aeabi_dadd+0x59a>
 8001150:	001c      	movs	r4, r3
 8001152:	0017      	movs	r7, r2
 8001154:	46d8      	mov	r8, fp
 8001156:	e65b      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001158:	0006      	movs	r6, r0
 800115a:	2400      	movs	r4, #0
 800115c:	2700      	movs	r7, #0
 800115e:	e697      	b.n	8000e90 <__aeabi_dadd+0x188>
 8001160:	4650      	mov	r0, sl
 8001162:	000b      	movs	r3, r1
 8001164:	3820      	subs	r0, #32
 8001166:	40c3      	lsrs	r3, r0
 8001168:	4699      	mov	r9, r3
 800116a:	4653      	mov	r3, sl
 800116c:	2b20      	cmp	r3, #32
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x46a>
 8001170:	e095      	b.n	800129e <__aeabi_dadd+0x596>
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	4650      	mov	r0, sl
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	4099      	lsls	r1, r3
 800117a:	430a      	orrs	r2, r1
 800117c:	1e51      	subs	r1, r2, #1
 800117e:	418a      	sbcs	r2, r1
 8001180:	464b      	mov	r3, r9
 8001182:	2100      	movs	r1, #0
 8001184:	431a      	orrs	r2, r3
 8001186:	e69f      	b.n	8000ec8 <__aeabi_dadd+0x1c0>
 8001188:	2e00      	cmp	r6, #0
 800118a:	d130      	bne.n	80011ee <__aeabi_dadd+0x4e6>
 800118c:	0026      	movs	r6, r4
 800118e:	433e      	orrs	r6, r7
 8001190:	d067      	beq.n	8001262 <__aeabi_dadd+0x55a>
 8001192:	43db      	mvns	r3, r3
 8001194:	469a      	mov	sl, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01c      	beq.n	80011d4 <__aeabi_dadd+0x4cc>
 800119a:	4e61      	ldr	r6, [pc, #388]	; (8001320 <__aeabi_dadd+0x618>)
 800119c:	42b0      	cmp	r0, r6
 800119e:	d060      	beq.n	8001262 <__aeabi_dadd+0x55a>
 80011a0:	4653      	mov	r3, sl
 80011a2:	2b38      	cmp	r3, #56	; 0x38
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_dadd+0x4a0>
 80011a6:	e096      	b.n	80012d6 <__aeabi_dadd+0x5ce>
 80011a8:	2b1f      	cmp	r3, #31
 80011aa:	dd00      	ble.n	80011ae <__aeabi_dadd+0x4a6>
 80011ac:	e09f      	b.n	80012ee <__aeabi_dadd+0x5e6>
 80011ae:	2620      	movs	r6, #32
 80011b0:	1af3      	subs	r3, r6, r3
 80011b2:	0026      	movs	r6, r4
 80011b4:	409e      	lsls	r6, r3
 80011b6:	469c      	mov	ip, r3
 80011b8:	46b3      	mov	fp, r6
 80011ba:	4653      	mov	r3, sl
 80011bc:	003e      	movs	r6, r7
 80011be:	40de      	lsrs	r6, r3
 80011c0:	0033      	movs	r3, r6
 80011c2:	465e      	mov	r6, fp
 80011c4:	431e      	orrs	r6, r3
 80011c6:	4663      	mov	r3, ip
 80011c8:	409f      	lsls	r7, r3
 80011ca:	1e7b      	subs	r3, r7, #1
 80011cc:	419f      	sbcs	r7, r3
 80011ce:	4653      	mov	r3, sl
 80011d0:	40dc      	lsrs	r4, r3
 80011d2:	4337      	orrs	r7, r6
 80011d4:	18bf      	adds	r7, r7, r2
 80011d6:	4297      	cmp	r7, r2
 80011d8:	4192      	sbcs	r2, r2
 80011da:	1864      	adds	r4, r4, r1
 80011dc:	4252      	negs	r2, r2
 80011de:	18a4      	adds	r4, r4, r2
 80011e0:	0006      	movs	r6, r0
 80011e2:	e678      	b.n	8000ed6 <__aeabi_dadd+0x1ce>
 80011e4:	4327      	orrs	r7, r4
 80011e6:	1e7c      	subs	r4, r7, #1
 80011e8:	41a7      	sbcs	r7, r4
 80011ea:	2400      	movs	r4, #0
 80011ec:	e737      	b.n	800105e <__aeabi_dadd+0x356>
 80011ee:	4e4c      	ldr	r6, [pc, #304]	; (8001320 <__aeabi_dadd+0x618>)
 80011f0:	42b0      	cmp	r0, r6
 80011f2:	d036      	beq.n	8001262 <__aeabi_dadd+0x55a>
 80011f4:	2680      	movs	r6, #128	; 0x80
 80011f6:	425b      	negs	r3, r3
 80011f8:	0436      	lsls	r6, r6, #16
 80011fa:	469a      	mov	sl, r3
 80011fc:	4334      	orrs	r4, r6
 80011fe:	e7cf      	b.n	80011a0 <__aeabi_dadd+0x498>
 8001200:	0018      	movs	r0, r3
 8001202:	4310      	orrs	r0, r2
 8001204:	d100      	bne.n	8001208 <__aeabi_dadd+0x500>
 8001206:	e603      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001208:	1ab8      	subs	r0, r7, r2
 800120a:	4684      	mov	ip, r0
 800120c:	4567      	cmp	r7, ip
 800120e:	41ad      	sbcs	r5, r5
 8001210:	1ae0      	subs	r0, r4, r3
 8001212:	426d      	negs	r5, r5
 8001214:	1b40      	subs	r0, r0, r5
 8001216:	0205      	lsls	r5, r0, #8
 8001218:	d400      	bmi.n	800121c <__aeabi_dadd+0x514>
 800121a:	e62c      	b.n	8000e76 <__aeabi_dadd+0x16e>
 800121c:	1bd7      	subs	r7, r2, r7
 800121e:	42ba      	cmp	r2, r7
 8001220:	4192      	sbcs	r2, r2
 8001222:	1b1c      	subs	r4, r3, r4
 8001224:	4252      	negs	r2, r2
 8001226:	1aa4      	subs	r4, r4, r2
 8001228:	46d8      	mov	r8, fp
 800122a:	e5f1      	b.n	8000e10 <__aeabi_dadd+0x108>
 800122c:	0018      	movs	r0, r3
 800122e:	4310      	orrs	r0, r2
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x52c>
 8001232:	e763      	b.n	80010fc <__aeabi_dadd+0x3f4>
 8001234:	08f8      	lsrs	r0, r7, #3
 8001236:	0767      	lsls	r7, r4, #29
 8001238:	4307      	orrs	r7, r0
 800123a:	2080      	movs	r0, #128	; 0x80
 800123c:	08e4      	lsrs	r4, r4, #3
 800123e:	0300      	lsls	r0, r0, #12
 8001240:	4204      	tst	r4, r0
 8001242:	d008      	beq.n	8001256 <__aeabi_dadd+0x54e>
 8001244:	08dd      	lsrs	r5, r3, #3
 8001246:	4205      	tst	r5, r0
 8001248:	d105      	bne.n	8001256 <__aeabi_dadd+0x54e>
 800124a:	08d2      	lsrs	r2, r2, #3
 800124c:	0759      	lsls	r1, r3, #29
 800124e:	4311      	orrs	r1, r2
 8001250:	000f      	movs	r7, r1
 8001252:	002c      	movs	r4, r5
 8001254:	46d8      	mov	r8, fp
 8001256:	0f7b      	lsrs	r3, r7, #29
 8001258:	00e4      	lsls	r4, r4, #3
 800125a:	431c      	orrs	r4, r3
 800125c:	00ff      	lsls	r7, r7, #3
 800125e:	4e30      	ldr	r6, [pc, #192]	; (8001320 <__aeabi_dadd+0x618>)
 8001260:	e5d6      	b.n	8000e10 <__aeabi_dadd+0x108>
 8001262:	000c      	movs	r4, r1
 8001264:	0017      	movs	r7, r2
 8001266:	0006      	movs	r6, r0
 8001268:	e5d2      	b.n	8000e10 <__aeabi_dadd+0x108>
 800126a:	2b00      	cmp	r3, #0
 800126c:	d038      	beq.n	80012e0 <__aeabi_dadd+0x5d8>
 800126e:	000b      	movs	r3, r1
 8001270:	4313      	orrs	r3, r2
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x56e>
 8001274:	e742      	b.n	80010fc <__aeabi_dadd+0x3f4>
 8001276:	08f8      	lsrs	r0, r7, #3
 8001278:	0767      	lsls	r7, r4, #29
 800127a:	4307      	orrs	r7, r0
 800127c:	2080      	movs	r0, #128	; 0x80
 800127e:	08e4      	lsrs	r4, r4, #3
 8001280:	0300      	lsls	r0, r0, #12
 8001282:	4204      	tst	r4, r0
 8001284:	d0e7      	beq.n	8001256 <__aeabi_dadd+0x54e>
 8001286:	08cb      	lsrs	r3, r1, #3
 8001288:	4203      	tst	r3, r0
 800128a:	d1e4      	bne.n	8001256 <__aeabi_dadd+0x54e>
 800128c:	08d2      	lsrs	r2, r2, #3
 800128e:	0749      	lsls	r1, r1, #29
 8001290:	4311      	orrs	r1, r2
 8001292:	000f      	movs	r7, r1
 8001294:	001c      	movs	r4, r3
 8001296:	e7de      	b.n	8001256 <__aeabi_dadd+0x54e>
 8001298:	2700      	movs	r7, #0
 800129a:	2400      	movs	r4, #0
 800129c:	e5d5      	b.n	8000e4a <__aeabi_dadd+0x142>
 800129e:	2100      	movs	r1, #0
 80012a0:	e76b      	b.n	800117a <__aeabi_dadd+0x472>
 80012a2:	2500      	movs	r5, #0
 80012a4:	2700      	movs	r7, #0
 80012a6:	e5f3      	b.n	8000e90 <__aeabi_dadd+0x188>
 80012a8:	464e      	mov	r6, r9
 80012aa:	0025      	movs	r5, r4
 80012ac:	3e20      	subs	r6, #32
 80012ae:	40f5      	lsrs	r5, r6
 80012b0:	464b      	mov	r3, r9
 80012b2:	002e      	movs	r6, r5
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	d02d      	beq.n	8001314 <__aeabi_dadd+0x60c>
 80012b8:	2540      	movs	r5, #64	; 0x40
 80012ba:	1aed      	subs	r5, r5, r3
 80012bc:	40ac      	lsls	r4, r5
 80012be:	4327      	orrs	r7, r4
 80012c0:	1e7c      	subs	r4, r7, #1
 80012c2:	41a7      	sbcs	r7, r4
 80012c4:	2400      	movs	r4, #0
 80012c6:	4337      	orrs	r7, r6
 80012c8:	e6c9      	b.n	800105e <__aeabi_dadd+0x356>
 80012ca:	2480      	movs	r4, #128	; 0x80
 80012cc:	2500      	movs	r5, #0
 80012ce:	0324      	lsls	r4, r4, #12
 80012d0:	4e13      	ldr	r6, [pc, #76]	; (8001320 <__aeabi_dadd+0x618>)
 80012d2:	2700      	movs	r7, #0
 80012d4:	e5dc      	b.n	8000e90 <__aeabi_dadd+0x188>
 80012d6:	4327      	orrs	r7, r4
 80012d8:	1e7c      	subs	r4, r7, #1
 80012da:	41a7      	sbcs	r7, r4
 80012dc:	2400      	movs	r4, #0
 80012de:	e779      	b.n	80011d4 <__aeabi_dadd+0x4cc>
 80012e0:	000c      	movs	r4, r1
 80012e2:	0017      	movs	r7, r2
 80012e4:	4e0e      	ldr	r6, [pc, #56]	; (8001320 <__aeabi_dadd+0x618>)
 80012e6:	e593      	b.n	8000e10 <__aeabi_dadd+0x108>
 80012e8:	000c      	movs	r4, r1
 80012ea:	0017      	movs	r7, r2
 80012ec:	e590      	b.n	8000e10 <__aeabi_dadd+0x108>
 80012ee:	4656      	mov	r6, sl
 80012f0:	0023      	movs	r3, r4
 80012f2:	3e20      	subs	r6, #32
 80012f4:	40f3      	lsrs	r3, r6
 80012f6:	4699      	mov	r9, r3
 80012f8:	4653      	mov	r3, sl
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d00e      	beq.n	800131c <__aeabi_dadd+0x614>
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	4656      	mov	r6, sl
 8001302:	1b9b      	subs	r3, r3, r6
 8001304:	409c      	lsls	r4, r3
 8001306:	4327      	orrs	r7, r4
 8001308:	1e7c      	subs	r4, r7, #1
 800130a:	41a7      	sbcs	r7, r4
 800130c:	464b      	mov	r3, r9
 800130e:	2400      	movs	r4, #0
 8001310:	431f      	orrs	r7, r3
 8001312:	e75f      	b.n	80011d4 <__aeabi_dadd+0x4cc>
 8001314:	2400      	movs	r4, #0
 8001316:	e7d2      	b.n	80012be <__aeabi_dadd+0x5b6>
 8001318:	0017      	movs	r7, r2
 800131a:	e5b2      	b.n	8000e82 <__aeabi_dadd+0x17a>
 800131c:	2400      	movs	r4, #0
 800131e:	e7f2      	b.n	8001306 <__aeabi_dadd+0x5fe>
 8001320:	000007ff 	.word	0x000007ff
 8001324:	ff7fffff 	.word	0xff7fffff

08001328 <__aeabi_ddiv>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	4657      	mov	r7, sl
 800132c:	4645      	mov	r5, r8
 800132e:	46de      	mov	lr, fp
 8001330:	464e      	mov	r6, r9
 8001332:	b5e0      	push	{r5, r6, r7, lr}
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	030e      	lsls	r6, r1, #12
 8001338:	b087      	sub	sp, #28
 800133a:	4683      	mov	fp, r0
 800133c:	4692      	mov	sl, r2
 800133e:	001d      	movs	r5, r3
 8001340:	4680      	mov	r8, r0
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fcf      	lsrs	r7, r1, #31
 8001348:	2c00      	cmp	r4, #0
 800134a:	d04f      	beq.n	80013ec <__aeabi_ddiv+0xc4>
 800134c:	4b6f      	ldr	r3, [pc, #444]	; (800150c <__aeabi_ddiv+0x1e4>)
 800134e:	429c      	cmp	r4, r3
 8001350:	d035      	beq.n	80013be <__aeabi_ddiv+0x96>
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	0f42      	lsrs	r2, r0, #29
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	00f6      	lsls	r6, r6, #3
 800135a:	4313      	orrs	r3, r2
 800135c:	4333      	orrs	r3, r6
 800135e:	4699      	mov	r9, r3
 8001360:	00c3      	lsls	r3, r0, #3
 8001362:	4698      	mov	r8, r3
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <__aeabi_ddiv+0x1e8>)
 8001366:	2600      	movs	r6, #0
 8001368:	469c      	mov	ip, r3
 800136a:	2300      	movs	r3, #0
 800136c:	4464      	add	r4, ip
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	032b      	lsls	r3, r5, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	469b      	mov	fp, r3
 8001376:	006b      	lsls	r3, r5, #1
 8001378:	0fed      	lsrs	r5, r5, #31
 800137a:	4650      	mov	r0, sl
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	9501      	str	r5, [sp, #4]
 8001380:	d05e      	beq.n	8001440 <__aeabi_ddiv+0x118>
 8001382:	4a62      	ldr	r2, [pc, #392]	; (800150c <__aeabi_ddiv+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d053      	beq.n	8001430 <__aeabi_ddiv+0x108>
 8001388:	465a      	mov	r2, fp
 800138a:	00d1      	lsls	r1, r2, #3
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0f40      	lsrs	r0, r0, #29
 8001390:	0412      	lsls	r2, r2, #16
 8001392:	4302      	orrs	r2, r0
 8001394:	430a      	orrs	r2, r1
 8001396:	4693      	mov	fp, r2
 8001398:	4652      	mov	r2, sl
 800139a:	00d1      	lsls	r1, r2, #3
 800139c:	4a5c      	ldr	r2, [pc, #368]	; (8001510 <__aeabi_ddiv+0x1e8>)
 800139e:	4694      	mov	ip, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	4463      	add	r3, ip
 80013a4:	0038      	movs	r0, r7
 80013a6:	4068      	eors	r0, r5
 80013a8:	4684      	mov	ip, r0
 80013aa:	9002      	str	r0, [sp, #8]
 80013ac:	1ae4      	subs	r4, r4, r3
 80013ae:	4316      	orrs	r6, r2
 80013b0:	2e0f      	cmp	r6, #15
 80013b2:	d900      	bls.n	80013b6 <__aeabi_ddiv+0x8e>
 80013b4:	e0b4      	b.n	8001520 <__aeabi_ddiv+0x1f8>
 80013b6:	4b57      	ldr	r3, [pc, #348]	; (8001514 <__aeabi_ddiv+0x1ec>)
 80013b8:	00b6      	lsls	r6, r6, #2
 80013ba:	599b      	ldr	r3, [r3, r6]
 80013bc:	469f      	mov	pc, r3
 80013be:	0003      	movs	r3, r0
 80013c0:	4333      	orrs	r3, r6
 80013c2:	4699      	mov	r9, r3
 80013c4:	d16c      	bne.n	80014a0 <__aeabi_ddiv+0x178>
 80013c6:	2300      	movs	r3, #0
 80013c8:	4698      	mov	r8, r3
 80013ca:	3302      	adds	r3, #2
 80013cc:	2608      	movs	r6, #8
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	e7ce      	b.n	8001370 <__aeabi_ddiv+0x48>
 80013d2:	46cb      	mov	fp, r9
 80013d4:	4641      	mov	r1, r8
 80013d6:	9a03      	ldr	r2, [sp, #12]
 80013d8:	9701      	str	r7, [sp, #4]
 80013da:	2a02      	cmp	r2, #2
 80013dc:	d165      	bne.n	80014aa <__aeabi_ddiv+0x182>
 80013de:	9b01      	ldr	r3, [sp, #4]
 80013e0:	4c4a      	ldr	r4, [pc, #296]	; (800150c <__aeabi_ddiv+0x1e4>)
 80013e2:	469c      	mov	ip, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	2200      	movs	r2, #0
 80013e8:	4698      	mov	r8, r3
 80013ea:	e06b      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 80013ec:	0003      	movs	r3, r0
 80013ee:	4333      	orrs	r3, r6
 80013f0:	4699      	mov	r9, r3
 80013f2:	d04e      	beq.n	8001492 <__aeabi_ddiv+0x16a>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0xd2>
 80013f8:	e1bc      	b.n	8001774 <__aeabi_ddiv+0x44c>
 80013fa:	0030      	movs	r0, r6
 80013fc:	f001 fa7c 	bl	80028f8 <__clzsi2>
 8001400:	0003      	movs	r3, r0
 8001402:	3b0b      	subs	r3, #11
 8001404:	2b1c      	cmp	r3, #28
 8001406:	dd00      	ble.n	800140a <__aeabi_ddiv+0xe2>
 8001408:	e1ac      	b.n	8001764 <__aeabi_ddiv+0x43c>
 800140a:	221d      	movs	r2, #29
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	465a      	mov	r2, fp
 8001410:	0001      	movs	r1, r0
 8001412:	40da      	lsrs	r2, r3
 8001414:	3908      	subs	r1, #8
 8001416:	408e      	lsls	r6, r1
 8001418:	0013      	movs	r3, r2
 800141a:	4333      	orrs	r3, r6
 800141c:	4699      	mov	r9, r3
 800141e:	465b      	mov	r3, fp
 8001420:	408b      	lsls	r3, r1
 8001422:	4698      	mov	r8, r3
 8001424:	2300      	movs	r3, #0
 8001426:	4c3c      	ldr	r4, [pc, #240]	; (8001518 <__aeabi_ddiv+0x1f0>)
 8001428:	2600      	movs	r6, #0
 800142a:	1a24      	subs	r4, r4, r0
 800142c:	9303      	str	r3, [sp, #12]
 800142e:	e79f      	b.n	8001370 <__aeabi_ddiv+0x48>
 8001430:	4651      	mov	r1, sl
 8001432:	465a      	mov	r2, fp
 8001434:	4311      	orrs	r1, r2
 8001436:	d129      	bne.n	800148c <__aeabi_ddiv+0x164>
 8001438:	2200      	movs	r2, #0
 800143a:	4693      	mov	fp, r2
 800143c:	3202      	adds	r2, #2
 800143e:	e7b1      	b.n	80013a4 <__aeabi_ddiv+0x7c>
 8001440:	4659      	mov	r1, fp
 8001442:	4301      	orrs	r1, r0
 8001444:	d01e      	beq.n	8001484 <__aeabi_ddiv+0x15c>
 8001446:	465b      	mov	r3, fp
 8001448:	2b00      	cmp	r3, #0
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x126>
 800144c:	e19e      	b.n	800178c <__aeabi_ddiv+0x464>
 800144e:	4658      	mov	r0, fp
 8001450:	f001 fa52 	bl	80028f8 <__clzsi2>
 8001454:	0003      	movs	r3, r0
 8001456:	3b0b      	subs	r3, #11
 8001458:	2b1c      	cmp	r3, #28
 800145a:	dd00      	ble.n	800145e <__aeabi_ddiv+0x136>
 800145c:	e18f      	b.n	800177e <__aeabi_ddiv+0x456>
 800145e:	0002      	movs	r2, r0
 8001460:	4659      	mov	r1, fp
 8001462:	3a08      	subs	r2, #8
 8001464:	4091      	lsls	r1, r2
 8001466:	468b      	mov	fp, r1
 8001468:	211d      	movs	r1, #29
 800146a:	1acb      	subs	r3, r1, r3
 800146c:	4651      	mov	r1, sl
 800146e:	40d9      	lsrs	r1, r3
 8001470:	000b      	movs	r3, r1
 8001472:	4659      	mov	r1, fp
 8001474:	430b      	orrs	r3, r1
 8001476:	4651      	mov	r1, sl
 8001478:	469b      	mov	fp, r3
 800147a:	4091      	lsls	r1, r2
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <__aeabi_ddiv+0x1f0>)
 800147e:	2200      	movs	r2, #0
 8001480:	1a1b      	subs	r3, r3, r0
 8001482:	e78f      	b.n	80013a4 <__aeabi_ddiv+0x7c>
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	469b      	mov	fp, r3
 800148a:	e78b      	b.n	80013a4 <__aeabi_ddiv+0x7c>
 800148c:	4651      	mov	r1, sl
 800148e:	2203      	movs	r2, #3
 8001490:	e788      	b.n	80013a4 <__aeabi_ddiv+0x7c>
 8001492:	2300      	movs	r3, #0
 8001494:	4698      	mov	r8, r3
 8001496:	3301      	adds	r3, #1
 8001498:	2604      	movs	r6, #4
 800149a:	2400      	movs	r4, #0
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	e767      	b.n	8001370 <__aeabi_ddiv+0x48>
 80014a0:	2303      	movs	r3, #3
 80014a2:	46b1      	mov	r9, r6
 80014a4:	9303      	str	r3, [sp, #12]
 80014a6:	260c      	movs	r6, #12
 80014a8:	e762      	b.n	8001370 <__aeabi_ddiv+0x48>
 80014aa:	2a03      	cmp	r2, #3
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x188>
 80014ae:	e25c      	b.n	800196a <__aeabi_ddiv+0x642>
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	2a01      	cmp	r2, #1
 80014b4:	d000      	beq.n	80014b8 <__aeabi_ddiv+0x190>
 80014b6:	e1e4      	b.n	8001882 <__aeabi_ddiv+0x55a>
 80014b8:	4013      	ands	r3, r2
 80014ba:	469c      	mov	ip, r3
 80014bc:	2300      	movs	r3, #0
 80014be:	2400      	movs	r4, #0
 80014c0:	2200      	movs	r2, #0
 80014c2:	4698      	mov	r8, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	0312      	lsls	r2, r2, #12
 80014c8:	0b13      	lsrs	r3, r2, #12
 80014ca:	0d0a      	lsrs	r2, r1, #20
 80014cc:	0512      	lsls	r2, r2, #20
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0523      	lsls	r3, r4, #20
 80014d2:	4c12      	ldr	r4, [pc, #72]	; (800151c <__aeabi_ddiv+0x1f4>)
 80014d4:	4640      	mov	r0, r8
 80014d6:	4022      	ands	r2, r4
 80014d8:	4313      	orrs	r3, r2
 80014da:	4662      	mov	r2, ip
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	07d2      	lsls	r2, r2, #31
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	4313      	orrs	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	b007      	add	sp, #28
 80014e8:	bc3c      	pop	{r2, r3, r4, r5}
 80014ea:	4690      	mov	r8, r2
 80014ec:	4699      	mov	r9, r3
 80014ee:	46a2      	mov	sl, r4
 80014f0:	46ab      	mov	fp, r5
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f4:	2300      	movs	r3, #0
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	469c      	mov	ip, r3
 80014fa:	0312      	lsls	r2, r2, #12
 80014fc:	4698      	mov	r8, r3
 80014fe:	4c03      	ldr	r4, [pc, #12]	; (800150c <__aeabi_ddiv+0x1e4>)
 8001500:	e7e0      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001502:	2300      	movs	r3, #0
 8001504:	4c01      	ldr	r4, [pc, #4]	; (800150c <__aeabi_ddiv+0x1e4>)
 8001506:	2200      	movs	r2, #0
 8001508:	4698      	mov	r8, r3
 800150a:	e7db      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 800150c:	000007ff 	.word	0x000007ff
 8001510:	fffffc01 	.word	0xfffffc01
 8001514:	08007d10 	.word	0x08007d10
 8001518:	fffffc0d 	.word	0xfffffc0d
 800151c:	800fffff 	.word	0x800fffff
 8001520:	45d9      	cmp	r9, fp
 8001522:	d900      	bls.n	8001526 <__aeabi_ddiv+0x1fe>
 8001524:	e139      	b.n	800179a <__aeabi_ddiv+0x472>
 8001526:	d100      	bne.n	800152a <__aeabi_ddiv+0x202>
 8001528:	e134      	b.n	8001794 <__aeabi_ddiv+0x46c>
 800152a:	2300      	movs	r3, #0
 800152c:	4646      	mov	r6, r8
 800152e:	464d      	mov	r5, r9
 8001530:	469a      	mov	sl, r3
 8001532:	3c01      	subs	r4, #1
 8001534:	465b      	mov	r3, fp
 8001536:	0e0a      	lsrs	r2, r1, #24
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	431a      	orrs	r2, r3
 800153c:	020b      	lsls	r3, r1, #8
 800153e:	0c17      	lsrs	r7, r2, #16
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	0413      	lsls	r3, r2, #16
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	0039      	movs	r1, r7
 8001548:	0028      	movs	r0, r5
 800154a:	4690      	mov	r8, r2
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	f7fe fddb 	bl	8000108 <__udivsi3>
 8001552:	0002      	movs	r2, r0
 8001554:	9b01      	ldr	r3, [sp, #4]
 8001556:	4683      	mov	fp, r0
 8001558:	435a      	muls	r2, r3
 800155a:	0028      	movs	r0, r5
 800155c:	0039      	movs	r1, r7
 800155e:	4691      	mov	r9, r2
 8001560:	f7fe fe58 	bl	8000214 <__aeabi_uidivmod>
 8001564:	0c35      	lsrs	r5, r6, #16
 8001566:	0409      	lsls	r1, r1, #16
 8001568:	430d      	orrs	r5, r1
 800156a:	45a9      	cmp	r9, r5
 800156c:	d90d      	bls.n	800158a <__aeabi_ddiv+0x262>
 800156e:	465b      	mov	r3, fp
 8001570:	4445      	add	r5, r8
 8001572:	3b01      	subs	r3, #1
 8001574:	45a8      	cmp	r8, r5
 8001576:	d900      	bls.n	800157a <__aeabi_ddiv+0x252>
 8001578:	e13a      	b.n	80017f0 <__aeabi_ddiv+0x4c8>
 800157a:	45a9      	cmp	r9, r5
 800157c:	d800      	bhi.n	8001580 <__aeabi_ddiv+0x258>
 800157e:	e137      	b.n	80017f0 <__aeabi_ddiv+0x4c8>
 8001580:	2302      	movs	r3, #2
 8001582:	425b      	negs	r3, r3
 8001584:	469c      	mov	ip, r3
 8001586:	4445      	add	r5, r8
 8001588:	44e3      	add	fp, ip
 800158a:	464b      	mov	r3, r9
 800158c:	1aeb      	subs	r3, r5, r3
 800158e:	0039      	movs	r1, r7
 8001590:	0018      	movs	r0, r3
 8001592:	9304      	str	r3, [sp, #16]
 8001594:	f7fe fdb8 	bl	8000108 <__udivsi3>
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	0005      	movs	r5, r0
 800159c:	4343      	muls	r3, r0
 800159e:	0039      	movs	r1, r7
 80015a0:	9804      	ldr	r0, [sp, #16]
 80015a2:	4699      	mov	r9, r3
 80015a4:	f7fe fe36 	bl	8000214 <__aeabi_uidivmod>
 80015a8:	0433      	lsls	r3, r6, #16
 80015aa:	0409      	lsls	r1, r1, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	430b      	orrs	r3, r1
 80015b0:	4599      	cmp	r9, r3
 80015b2:	d909      	bls.n	80015c8 <__aeabi_ddiv+0x2a0>
 80015b4:	4443      	add	r3, r8
 80015b6:	1e6a      	subs	r2, r5, #1
 80015b8:	4598      	cmp	r8, r3
 80015ba:	d900      	bls.n	80015be <__aeabi_ddiv+0x296>
 80015bc:	e11a      	b.n	80017f4 <__aeabi_ddiv+0x4cc>
 80015be:	4599      	cmp	r9, r3
 80015c0:	d800      	bhi.n	80015c4 <__aeabi_ddiv+0x29c>
 80015c2:	e117      	b.n	80017f4 <__aeabi_ddiv+0x4cc>
 80015c4:	3d02      	subs	r5, #2
 80015c6:	4443      	add	r3, r8
 80015c8:	464a      	mov	r2, r9
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	465a      	mov	r2, fp
 80015ce:	0412      	lsls	r2, r2, #16
 80015d0:	432a      	orrs	r2, r5
 80015d2:	9903      	ldr	r1, [sp, #12]
 80015d4:	4693      	mov	fp, r2
 80015d6:	0c10      	lsrs	r0, r2, #16
 80015d8:	0c0a      	lsrs	r2, r1, #16
 80015da:	4691      	mov	r9, r2
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	465a      	mov	r2, fp
 80015e0:	0c09      	lsrs	r1, r1, #16
 80015e2:	464e      	mov	r6, r9
 80015e4:	000d      	movs	r5, r1
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	4345      	muls	r5, r0
 80015ec:	9105      	str	r1, [sp, #20]
 80015ee:	4351      	muls	r1, r2
 80015f0:	4372      	muls	r2, r6
 80015f2:	4370      	muls	r0, r6
 80015f4:	1952      	adds	r2, r2, r5
 80015f6:	0c0e      	lsrs	r6, r1, #16
 80015f8:	18b2      	adds	r2, r6, r2
 80015fa:	4295      	cmp	r5, r2
 80015fc:	d903      	bls.n	8001606 <__aeabi_ddiv+0x2de>
 80015fe:	2580      	movs	r5, #128	; 0x80
 8001600:	026d      	lsls	r5, r5, #9
 8001602:	46ac      	mov	ip, r5
 8001604:	4460      	add	r0, ip
 8001606:	0c15      	lsrs	r5, r2, #16
 8001608:	0409      	lsls	r1, r1, #16
 800160a:	0412      	lsls	r2, r2, #16
 800160c:	0c09      	lsrs	r1, r1, #16
 800160e:	1828      	adds	r0, r5, r0
 8001610:	1852      	adds	r2, r2, r1
 8001612:	4283      	cmp	r3, r0
 8001614:	d200      	bcs.n	8001618 <__aeabi_ddiv+0x2f0>
 8001616:	e0ce      	b.n	80017b6 <__aeabi_ddiv+0x48e>
 8001618:	d100      	bne.n	800161c <__aeabi_ddiv+0x2f4>
 800161a:	e0c8      	b.n	80017ae <__aeabi_ddiv+0x486>
 800161c:	1a1d      	subs	r5, r3, r0
 800161e:	4653      	mov	r3, sl
 8001620:	1a9e      	subs	r6, r3, r2
 8001622:	45b2      	cmp	sl, r6
 8001624:	4192      	sbcs	r2, r2
 8001626:	4252      	negs	r2, r2
 8001628:	1aab      	subs	r3, r5, r2
 800162a:	469a      	mov	sl, r3
 800162c:	4598      	cmp	r8, r3
 800162e:	d100      	bne.n	8001632 <__aeabi_ddiv+0x30a>
 8001630:	e117      	b.n	8001862 <__aeabi_ddiv+0x53a>
 8001632:	0039      	movs	r1, r7
 8001634:	0018      	movs	r0, r3
 8001636:	f7fe fd67 	bl	8000108 <__udivsi3>
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	0005      	movs	r5, r0
 800163e:	4343      	muls	r3, r0
 8001640:	0039      	movs	r1, r7
 8001642:	4650      	mov	r0, sl
 8001644:	9304      	str	r3, [sp, #16]
 8001646:	f7fe fde5 	bl	8000214 <__aeabi_uidivmod>
 800164a:	9804      	ldr	r0, [sp, #16]
 800164c:	040b      	lsls	r3, r1, #16
 800164e:	0c31      	lsrs	r1, r6, #16
 8001650:	4319      	orrs	r1, r3
 8001652:	4288      	cmp	r0, r1
 8001654:	d909      	bls.n	800166a <__aeabi_ddiv+0x342>
 8001656:	4441      	add	r1, r8
 8001658:	1e6b      	subs	r3, r5, #1
 800165a:	4588      	cmp	r8, r1
 800165c:	d900      	bls.n	8001660 <__aeabi_ddiv+0x338>
 800165e:	e107      	b.n	8001870 <__aeabi_ddiv+0x548>
 8001660:	4288      	cmp	r0, r1
 8001662:	d800      	bhi.n	8001666 <__aeabi_ddiv+0x33e>
 8001664:	e104      	b.n	8001870 <__aeabi_ddiv+0x548>
 8001666:	3d02      	subs	r5, #2
 8001668:	4441      	add	r1, r8
 800166a:	9b04      	ldr	r3, [sp, #16]
 800166c:	1acb      	subs	r3, r1, r3
 800166e:	0018      	movs	r0, r3
 8001670:	0039      	movs	r1, r7
 8001672:	9304      	str	r3, [sp, #16]
 8001674:	f7fe fd48 	bl	8000108 <__udivsi3>
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	4682      	mov	sl, r0
 800167c:	4343      	muls	r3, r0
 800167e:	0039      	movs	r1, r7
 8001680:	9804      	ldr	r0, [sp, #16]
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	f7fe fdc6 	bl	8000214 <__aeabi_uidivmod>
 8001688:	9801      	ldr	r0, [sp, #4]
 800168a:	040b      	lsls	r3, r1, #16
 800168c:	0431      	lsls	r1, r6, #16
 800168e:	0c09      	lsrs	r1, r1, #16
 8001690:	4319      	orrs	r1, r3
 8001692:	4288      	cmp	r0, r1
 8001694:	d90d      	bls.n	80016b2 <__aeabi_ddiv+0x38a>
 8001696:	4653      	mov	r3, sl
 8001698:	4441      	add	r1, r8
 800169a:	3b01      	subs	r3, #1
 800169c:	4588      	cmp	r8, r1
 800169e:	d900      	bls.n	80016a2 <__aeabi_ddiv+0x37a>
 80016a0:	e0e8      	b.n	8001874 <__aeabi_ddiv+0x54c>
 80016a2:	4288      	cmp	r0, r1
 80016a4:	d800      	bhi.n	80016a8 <__aeabi_ddiv+0x380>
 80016a6:	e0e5      	b.n	8001874 <__aeabi_ddiv+0x54c>
 80016a8:	2302      	movs	r3, #2
 80016aa:	425b      	negs	r3, r3
 80016ac:	469c      	mov	ip, r3
 80016ae:	4441      	add	r1, r8
 80016b0:	44e2      	add	sl, ip
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	042d      	lsls	r5, r5, #16
 80016b6:	1ace      	subs	r6, r1, r3
 80016b8:	4651      	mov	r1, sl
 80016ba:	4329      	orrs	r1, r5
 80016bc:	9d05      	ldr	r5, [sp, #20]
 80016be:	464f      	mov	r7, r9
 80016c0:	002a      	movs	r2, r5
 80016c2:	040b      	lsls	r3, r1, #16
 80016c4:	0c08      	lsrs	r0, r1, #16
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	435a      	muls	r2, r3
 80016ca:	4345      	muls	r5, r0
 80016cc:	437b      	muls	r3, r7
 80016ce:	4378      	muls	r0, r7
 80016d0:	195b      	adds	r3, r3, r5
 80016d2:	0c17      	lsrs	r7, r2, #16
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	429d      	cmp	r5, r3
 80016d8:	d903      	bls.n	80016e2 <__aeabi_ddiv+0x3ba>
 80016da:	2580      	movs	r5, #128	; 0x80
 80016dc:	026d      	lsls	r5, r5, #9
 80016de:	46ac      	mov	ip, r5
 80016e0:	4460      	add	r0, ip
 80016e2:	0c1d      	lsrs	r5, r3, #16
 80016e4:	0412      	lsls	r2, r2, #16
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	0c12      	lsrs	r2, r2, #16
 80016ea:	1828      	adds	r0, r5, r0
 80016ec:	189b      	adds	r3, r3, r2
 80016ee:	4286      	cmp	r6, r0
 80016f0:	d200      	bcs.n	80016f4 <__aeabi_ddiv+0x3cc>
 80016f2:	e093      	b.n	800181c <__aeabi_ddiv+0x4f4>
 80016f4:	d100      	bne.n	80016f8 <__aeabi_ddiv+0x3d0>
 80016f6:	e08e      	b.n	8001816 <__aeabi_ddiv+0x4ee>
 80016f8:	2301      	movs	r3, #1
 80016fa:	4319      	orrs	r1, r3
 80016fc:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <__aeabi_ddiv+0x658>)
 80016fe:	18e3      	adds	r3, r4, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	dc00      	bgt.n	8001706 <__aeabi_ddiv+0x3de>
 8001704:	e099      	b.n	800183a <__aeabi_ddiv+0x512>
 8001706:	074a      	lsls	r2, r1, #29
 8001708:	d000      	beq.n	800170c <__aeabi_ddiv+0x3e4>
 800170a:	e09e      	b.n	800184a <__aeabi_ddiv+0x522>
 800170c:	465a      	mov	r2, fp
 800170e:	01d2      	lsls	r2, r2, #7
 8001710:	d506      	bpl.n	8001720 <__aeabi_ddiv+0x3f8>
 8001712:	465a      	mov	r2, fp
 8001714:	4b9b      	ldr	r3, [pc, #620]	; (8001984 <__aeabi_ddiv+0x65c>)
 8001716:	401a      	ands	r2, r3
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	4693      	mov	fp, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	18e3      	adds	r3, r4, r3
 8001720:	4a99      	ldr	r2, [pc, #612]	; (8001988 <__aeabi_ddiv+0x660>)
 8001722:	4293      	cmp	r3, r2
 8001724:	dd68      	ble.n	80017f8 <__aeabi_ddiv+0x4d0>
 8001726:	2301      	movs	r3, #1
 8001728:	9a02      	ldr	r2, [sp, #8]
 800172a:	4c98      	ldr	r4, [pc, #608]	; (800198c <__aeabi_ddiv+0x664>)
 800172c:	401a      	ands	r2, r3
 800172e:	2300      	movs	r3, #0
 8001730:	4694      	mov	ip, r2
 8001732:	4698      	mov	r8, r3
 8001734:	2200      	movs	r2, #0
 8001736:	e6c5      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	464b      	mov	r3, r9
 800173c:	0312      	lsls	r2, r2, #12
 800173e:	4213      	tst	r3, r2
 8001740:	d00a      	beq.n	8001758 <__aeabi_ddiv+0x430>
 8001742:	465b      	mov	r3, fp
 8001744:	4213      	tst	r3, r2
 8001746:	d106      	bne.n	8001756 <__aeabi_ddiv+0x42e>
 8001748:	431a      	orrs	r2, r3
 800174a:	0312      	lsls	r2, r2, #12
 800174c:	0b12      	lsrs	r2, r2, #12
 800174e:	46ac      	mov	ip, r5
 8001750:	4688      	mov	r8, r1
 8001752:	4c8e      	ldr	r4, [pc, #568]	; (800198c <__aeabi_ddiv+0x664>)
 8001754:	e6b6      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001756:	464b      	mov	r3, r9
 8001758:	431a      	orrs	r2, r3
 800175a:	0312      	lsls	r2, r2, #12
 800175c:	0b12      	lsrs	r2, r2, #12
 800175e:	46bc      	mov	ip, r7
 8001760:	4c8a      	ldr	r4, [pc, #552]	; (800198c <__aeabi_ddiv+0x664>)
 8001762:	e6af      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001764:	0003      	movs	r3, r0
 8001766:	465a      	mov	r2, fp
 8001768:	3b28      	subs	r3, #40	; 0x28
 800176a:	409a      	lsls	r2, r3
 800176c:	2300      	movs	r3, #0
 800176e:	4691      	mov	r9, r2
 8001770:	4698      	mov	r8, r3
 8001772:	e657      	b.n	8001424 <__aeabi_ddiv+0xfc>
 8001774:	4658      	mov	r0, fp
 8001776:	f001 f8bf 	bl	80028f8 <__clzsi2>
 800177a:	3020      	adds	r0, #32
 800177c:	e640      	b.n	8001400 <__aeabi_ddiv+0xd8>
 800177e:	0003      	movs	r3, r0
 8001780:	4652      	mov	r2, sl
 8001782:	3b28      	subs	r3, #40	; 0x28
 8001784:	409a      	lsls	r2, r3
 8001786:	2100      	movs	r1, #0
 8001788:	4693      	mov	fp, r2
 800178a:	e677      	b.n	800147c <__aeabi_ddiv+0x154>
 800178c:	f001 f8b4 	bl	80028f8 <__clzsi2>
 8001790:	3020      	adds	r0, #32
 8001792:	e65f      	b.n	8001454 <__aeabi_ddiv+0x12c>
 8001794:	4588      	cmp	r8, r1
 8001796:	d200      	bcs.n	800179a <__aeabi_ddiv+0x472>
 8001798:	e6c7      	b.n	800152a <__aeabi_ddiv+0x202>
 800179a:	464b      	mov	r3, r9
 800179c:	07de      	lsls	r6, r3, #31
 800179e:	085d      	lsrs	r5, r3, #1
 80017a0:	4643      	mov	r3, r8
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	431e      	orrs	r6, r3
 80017a6:	4643      	mov	r3, r8
 80017a8:	07db      	lsls	r3, r3, #31
 80017aa:	469a      	mov	sl, r3
 80017ac:	e6c2      	b.n	8001534 <__aeabi_ddiv+0x20c>
 80017ae:	2500      	movs	r5, #0
 80017b0:	4592      	cmp	sl, r2
 80017b2:	d300      	bcc.n	80017b6 <__aeabi_ddiv+0x48e>
 80017b4:	e733      	b.n	800161e <__aeabi_ddiv+0x2f6>
 80017b6:	9e03      	ldr	r6, [sp, #12]
 80017b8:	4659      	mov	r1, fp
 80017ba:	46b4      	mov	ip, r6
 80017bc:	44e2      	add	sl, ip
 80017be:	45b2      	cmp	sl, r6
 80017c0:	41ad      	sbcs	r5, r5
 80017c2:	426d      	negs	r5, r5
 80017c4:	4445      	add	r5, r8
 80017c6:	18eb      	adds	r3, r5, r3
 80017c8:	3901      	subs	r1, #1
 80017ca:	4598      	cmp	r8, r3
 80017cc:	d207      	bcs.n	80017de <__aeabi_ddiv+0x4b6>
 80017ce:	4298      	cmp	r0, r3
 80017d0:	d900      	bls.n	80017d4 <__aeabi_ddiv+0x4ac>
 80017d2:	e07f      	b.n	80018d4 <__aeabi_ddiv+0x5ac>
 80017d4:	d100      	bne.n	80017d8 <__aeabi_ddiv+0x4b0>
 80017d6:	e0bc      	b.n	8001952 <__aeabi_ddiv+0x62a>
 80017d8:	1a1d      	subs	r5, r3, r0
 80017da:	468b      	mov	fp, r1
 80017dc:	e71f      	b.n	800161e <__aeabi_ddiv+0x2f6>
 80017de:	4598      	cmp	r8, r3
 80017e0:	d1fa      	bne.n	80017d8 <__aeabi_ddiv+0x4b0>
 80017e2:	9d03      	ldr	r5, [sp, #12]
 80017e4:	4555      	cmp	r5, sl
 80017e6:	d9f2      	bls.n	80017ce <__aeabi_ddiv+0x4a6>
 80017e8:	4643      	mov	r3, r8
 80017ea:	468b      	mov	fp, r1
 80017ec:	1a1d      	subs	r5, r3, r0
 80017ee:	e716      	b.n	800161e <__aeabi_ddiv+0x2f6>
 80017f0:	469b      	mov	fp, r3
 80017f2:	e6ca      	b.n	800158a <__aeabi_ddiv+0x262>
 80017f4:	0015      	movs	r5, r2
 80017f6:	e6e7      	b.n	80015c8 <__aeabi_ddiv+0x2a0>
 80017f8:	465a      	mov	r2, fp
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	0752      	lsls	r2, r2, #29
 80017fe:	430a      	orrs	r2, r1
 8001800:	055b      	lsls	r3, r3, #21
 8001802:	4690      	mov	r8, r2
 8001804:	0d5c      	lsrs	r4, r3, #21
 8001806:	465a      	mov	r2, fp
 8001808:	2301      	movs	r3, #1
 800180a:	9902      	ldr	r1, [sp, #8]
 800180c:	0252      	lsls	r2, r2, #9
 800180e:	4019      	ands	r1, r3
 8001810:	0b12      	lsrs	r2, r2, #12
 8001812:	468c      	mov	ip, r1
 8001814:	e656      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <__aeabi_ddiv+0x4f4>
 800181a:	e76f      	b.n	80016fc <__aeabi_ddiv+0x3d4>
 800181c:	4446      	add	r6, r8
 800181e:	1e4a      	subs	r2, r1, #1
 8001820:	45b0      	cmp	r8, r6
 8001822:	d929      	bls.n	8001878 <__aeabi_ddiv+0x550>
 8001824:	0011      	movs	r1, r2
 8001826:	4286      	cmp	r6, r0
 8001828:	d000      	beq.n	800182c <__aeabi_ddiv+0x504>
 800182a:	e765      	b.n	80016f8 <__aeabi_ddiv+0x3d0>
 800182c:	9a03      	ldr	r2, [sp, #12]
 800182e:	4293      	cmp	r3, r2
 8001830:	d000      	beq.n	8001834 <__aeabi_ddiv+0x50c>
 8001832:	e761      	b.n	80016f8 <__aeabi_ddiv+0x3d0>
 8001834:	e762      	b.n	80016fc <__aeabi_ddiv+0x3d4>
 8001836:	2101      	movs	r1, #1
 8001838:	4249      	negs	r1, r1
 800183a:	2001      	movs	r0, #1
 800183c:	1ac2      	subs	r2, r0, r3
 800183e:	2a38      	cmp	r2, #56	; 0x38
 8001840:	dd21      	ble.n	8001886 <__aeabi_ddiv+0x55e>
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	4003      	ands	r3, r0
 8001846:	469c      	mov	ip, r3
 8001848:	e638      	b.n	80014bc <__aeabi_ddiv+0x194>
 800184a:	220f      	movs	r2, #15
 800184c:	400a      	ands	r2, r1
 800184e:	2a04      	cmp	r2, #4
 8001850:	d100      	bne.n	8001854 <__aeabi_ddiv+0x52c>
 8001852:	e75b      	b.n	800170c <__aeabi_ddiv+0x3e4>
 8001854:	000a      	movs	r2, r1
 8001856:	1d11      	adds	r1, r2, #4
 8001858:	4291      	cmp	r1, r2
 800185a:	4192      	sbcs	r2, r2
 800185c:	4252      	negs	r2, r2
 800185e:	4493      	add	fp, r2
 8001860:	e754      	b.n	800170c <__aeabi_ddiv+0x3e4>
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <__aeabi_ddiv+0x658>)
 8001864:	18e3      	adds	r3, r4, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	dde5      	ble.n	8001836 <__aeabi_ddiv+0x50e>
 800186a:	2201      	movs	r2, #1
 800186c:	4252      	negs	r2, r2
 800186e:	e7f2      	b.n	8001856 <__aeabi_ddiv+0x52e>
 8001870:	001d      	movs	r5, r3
 8001872:	e6fa      	b.n	800166a <__aeabi_ddiv+0x342>
 8001874:	469a      	mov	sl, r3
 8001876:	e71c      	b.n	80016b2 <__aeabi_ddiv+0x38a>
 8001878:	42b0      	cmp	r0, r6
 800187a:	d839      	bhi.n	80018f0 <__aeabi_ddiv+0x5c8>
 800187c:	d06e      	beq.n	800195c <__aeabi_ddiv+0x634>
 800187e:	0011      	movs	r1, r2
 8001880:	e73a      	b.n	80016f8 <__aeabi_ddiv+0x3d0>
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	e73a      	b.n	80016fc <__aeabi_ddiv+0x3d4>
 8001886:	2a1f      	cmp	r2, #31
 8001888:	dc3c      	bgt.n	8001904 <__aeabi_ddiv+0x5dc>
 800188a:	2320      	movs	r3, #32
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	000c      	movs	r4, r1
 8001890:	4658      	mov	r0, fp
 8001892:	4099      	lsls	r1, r3
 8001894:	4098      	lsls	r0, r3
 8001896:	1e4b      	subs	r3, r1, #1
 8001898:	4199      	sbcs	r1, r3
 800189a:	465b      	mov	r3, fp
 800189c:	40d4      	lsrs	r4, r2
 800189e:	40d3      	lsrs	r3, r2
 80018a0:	4320      	orrs	r0, r4
 80018a2:	4308      	orrs	r0, r1
 80018a4:	001a      	movs	r2, r3
 80018a6:	0743      	lsls	r3, r0, #29
 80018a8:	d009      	beq.n	80018be <__aeabi_ddiv+0x596>
 80018aa:	230f      	movs	r3, #15
 80018ac:	4003      	ands	r3, r0
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d005      	beq.n	80018be <__aeabi_ddiv+0x596>
 80018b2:	0001      	movs	r1, r0
 80018b4:	1d08      	adds	r0, r1, #4
 80018b6:	4288      	cmp	r0, r1
 80018b8:	419b      	sbcs	r3, r3
 80018ba:	425b      	negs	r3, r3
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	0213      	lsls	r3, r2, #8
 80018c0:	d53a      	bpl.n	8001938 <__aeabi_ddiv+0x610>
 80018c2:	2301      	movs	r3, #1
 80018c4:	9a02      	ldr	r2, [sp, #8]
 80018c6:	2401      	movs	r4, #1
 80018c8:	401a      	ands	r2, r3
 80018ca:	2300      	movs	r3, #0
 80018cc:	4694      	mov	ip, r2
 80018ce:	4698      	mov	r8, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	e5f7      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 80018d4:	2102      	movs	r1, #2
 80018d6:	4249      	negs	r1, r1
 80018d8:	468c      	mov	ip, r1
 80018da:	9d03      	ldr	r5, [sp, #12]
 80018dc:	44e3      	add	fp, ip
 80018de:	46ac      	mov	ip, r5
 80018e0:	44e2      	add	sl, ip
 80018e2:	45aa      	cmp	sl, r5
 80018e4:	41ad      	sbcs	r5, r5
 80018e6:	426d      	negs	r5, r5
 80018e8:	4445      	add	r5, r8
 80018ea:	18ed      	adds	r5, r5, r3
 80018ec:	1a2d      	subs	r5, r5, r0
 80018ee:	e696      	b.n	800161e <__aeabi_ddiv+0x2f6>
 80018f0:	1e8a      	subs	r2, r1, #2
 80018f2:	9903      	ldr	r1, [sp, #12]
 80018f4:	004d      	lsls	r5, r1, #1
 80018f6:	428d      	cmp	r5, r1
 80018f8:	4189      	sbcs	r1, r1
 80018fa:	4249      	negs	r1, r1
 80018fc:	4441      	add	r1, r8
 80018fe:	1876      	adds	r6, r6, r1
 8001900:	9503      	str	r5, [sp, #12]
 8001902:	e78f      	b.n	8001824 <__aeabi_ddiv+0x4fc>
 8001904:	201f      	movs	r0, #31
 8001906:	4240      	negs	r0, r0
 8001908:	1ac3      	subs	r3, r0, r3
 800190a:	4658      	mov	r0, fp
 800190c:	40d8      	lsrs	r0, r3
 800190e:	0003      	movs	r3, r0
 8001910:	2a20      	cmp	r2, #32
 8001912:	d028      	beq.n	8001966 <__aeabi_ddiv+0x63e>
 8001914:	2040      	movs	r0, #64	; 0x40
 8001916:	465d      	mov	r5, fp
 8001918:	1a82      	subs	r2, r0, r2
 800191a:	4095      	lsls	r5, r2
 800191c:	4329      	orrs	r1, r5
 800191e:	1e4a      	subs	r2, r1, #1
 8001920:	4191      	sbcs	r1, r2
 8001922:	4319      	orrs	r1, r3
 8001924:	2307      	movs	r3, #7
 8001926:	2200      	movs	r2, #0
 8001928:	400b      	ands	r3, r1
 800192a:	d009      	beq.n	8001940 <__aeabi_ddiv+0x618>
 800192c:	230f      	movs	r3, #15
 800192e:	2200      	movs	r2, #0
 8001930:	400b      	ands	r3, r1
 8001932:	0008      	movs	r0, r1
 8001934:	2b04      	cmp	r3, #4
 8001936:	d1bd      	bne.n	80018b4 <__aeabi_ddiv+0x58c>
 8001938:	0001      	movs	r1, r0
 800193a:	0753      	lsls	r3, r2, #29
 800193c:	0252      	lsls	r2, r2, #9
 800193e:	0b12      	lsrs	r2, r2, #12
 8001940:	08c9      	lsrs	r1, r1, #3
 8001942:	4319      	orrs	r1, r3
 8001944:	2301      	movs	r3, #1
 8001946:	4688      	mov	r8, r1
 8001948:	9902      	ldr	r1, [sp, #8]
 800194a:	2400      	movs	r4, #0
 800194c:	4019      	ands	r1, r3
 800194e:	468c      	mov	ip, r1
 8001950:	e5b8      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001952:	4552      	cmp	r2, sl
 8001954:	d8be      	bhi.n	80018d4 <__aeabi_ddiv+0x5ac>
 8001956:	468b      	mov	fp, r1
 8001958:	2500      	movs	r5, #0
 800195a:	e660      	b.n	800161e <__aeabi_ddiv+0x2f6>
 800195c:	9d03      	ldr	r5, [sp, #12]
 800195e:	429d      	cmp	r5, r3
 8001960:	d3c6      	bcc.n	80018f0 <__aeabi_ddiv+0x5c8>
 8001962:	0011      	movs	r1, r2
 8001964:	e762      	b.n	800182c <__aeabi_ddiv+0x504>
 8001966:	2500      	movs	r5, #0
 8001968:	e7d8      	b.n	800191c <__aeabi_ddiv+0x5f4>
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	465b      	mov	r3, fp
 800196e:	0312      	lsls	r2, r2, #12
 8001970:	431a      	orrs	r2, r3
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	0312      	lsls	r2, r2, #12
 8001976:	0b12      	lsrs	r2, r2, #12
 8001978:	469c      	mov	ip, r3
 800197a:	4688      	mov	r8, r1
 800197c:	4c03      	ldr	r4, [pc, #12]	; (800198c <__aeabi_ddiv+0x664>)
 800197e:	e5a1      	b.n	80014c4 <__aeabi_ddiv+0x19c>
 8001980:	000003ff 	.word	0x000003ff
 8001984:	feffffff 	.word	0xfeffffff
 8001988:	000007fe 	.word	0x000007fe
 800198c:	000007ff 	.word	0x000007ff

08001990 <__eqdf2>:
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	464f      	mov	r7, r9
 8001994:	4646      	mov	r6, r8
 8001996:	46d6      	mov	lr, sl
 8001998:	005c      	lsls	r4, r3, #1
 800199a:	b5c0      	push	{r6, r7, lr}
 800199c:	031f      	lsls	r7, r3, #12
 800199e:	0fdb      	lsrs	r3, r3, #31
 80019a0:	469a      	mov	sl, r3
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <__eqdf2+0x70>)
 80019a4:	030e      	lsls	r6, r1, #12
 80019a6:	004d      	lsls	r5, r1, #1
 80019a8:	4684      	mov	ip, r0
 80019aa:	4680      	mov	r8, r0
 80019ac:	0b36      	lsrs	r6, r6, #12
 80019ae:	0d6d      	lsrs	r5, r5, #21
 80019b0:	0fc9      	lsrs	r1, r1, #31
 80019b2:	4691      	mov	r9, r2
 80019b4:	0b3f      	lsrs	r7, r7, #12
 80019b6:	0d64      	lsrs	r4, r4, #21
 80019b8:	2001      	movs	r0, #1
 80019ba:	429d      	cmp	r5, r3
 80019bc:	d008      	beq.n	80019d0 <__eqdf2+0x40>
 80019be:	429c      	cmp	r4, r3
 80019c0:	d001      	beq.n	80019c6 <__eqdf2+0x36>
 80019c2:	42a5      	cmp	r5, r4
 80019c4:	d00b      	beq.n	80019de <__eqdf2+0x4e>
 80019c6:	bc1c      	pop	{r2, r3, r4}
 80019c8:	4690      	mov	r8, r2
 80019ca:	4699      	mov	r9, r3
 80019cc:	46a2      	mov	sl, r4
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d0:	4663      	mov	r3, ip
 80019d2:	4333      	orrs	r3, r6
 80019d4:	d1f7      	bne.n	80019c6 <__eqdf2+0x36>
 80019d6:	42ac      	cmp	r4, r5
 80019d8:	d1f5      	bne.n	80019c6 <__eqdf2+0x36>
 80019da:	433a      	orrs	r2, r7
 80019dc:	d1f3      	bne.n	80019c6 <__eqdf2+0x36>
 80019de:	2001      	movs	r0, #1
 80019e0:	42be      	cmp	r6, r7
 80019e2:	d1f0      	bne.n	80019c6 <__eqdf2+0x36>
 80019e4:	45c8      	cmp	r8, r9
 80019e6:	d1ee      	bne.n	80019c6 <__eqdf2+0x36>
 80019e8:	4551      	cmp	r1, sl
 80019ea:	d007      	beq.n	80019fc <__eqdf2+0x6c>
 80019ec:	2d00      	cmp	r5, #0
 80019ee:	d1ea      	bne.n	80019c6 <__eqdf2+0x36>
 80019f0:	4663      	mov	r3, ip
 80019f2:	431e      	orrs	r6, r3
 80019f4:	0030      	movs	r0, r6
 80019f6:	1e46      	subs	r6, r0, #1
 80019f8:	41b0      	sbcs	r0, r6
 80019fa:	e7e4      	b.n	80019c6 <__eqdf2+0x36>
 80019fc:	2000      	movs	r0, #0
 80019fe:	e7e2      	b.n	80019c6 <__eqdf2+0x36>
 8001a00:	000007ff 	.word	0x000007ff

08001a04 <__gedf2>:
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	4645      	mov	r5, r8
 8001a08:	46de      	mov	lr, fp
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	464e      	mov	r6, r9
 8001a0e:	b5e0      	push	{r5, r6, r7, lr}
 8001a10:	031f      	lsls	r7, r3, #12
 8001a12:	0b3d      	lsrs	r5, r7, #12
 8001a14:	4f2c      	ldr	r7, [pc, #176]	; (8001ac8 <__gedf2+0xc4>)
 8001a16:	030e      	lsls	r6, r1, #12
 8001a18:	004c      	lsls	r4, r1, #1
 8001a1a:	46ab      	mov	fp, r5
 8001a1c:	005d      	lsls	r5, r3, #1
 8001a1e:	4684      	mov	ip, r0
 8001a20:	0b36      	lsrs	r6, r6, #12
 8001a22:	0d64      	lsrs	r4, r4, #21
 8001a24:	0fc9      	lsrs	r1, r1, #31
 8001a26:	4690      	mov	r8, r2
 8001a28:	0d6d      	lsrs	r5, r5, #21
 8001a2a:	0fdb      	lsrs	r3, r3, #31
 8001a2c:	42bc      	cmp	r4, r7
 8001a2e:	d02a      	beq.n	8001a86 <__gedf2+0x82>
 8001a30:	4f25      	ldr	r7, [pc, #148]	; (8001ac8 <__gedf2+0xc4>)
 8001a32:	42bd      	cmp	r5, r7
 8001a34:	d02d      	beq.n	8001a92 <__gedf2+0x8e>
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d10f      	bne.n	8001a5a <__gedf2+0x56>
 8001a3a:	4330      	orrs	r0, r6
 8001a3c:	0007      	movs	r7, r0
 8001a3e:	4681      	mov	r9, r0
 8001a40:	4278      	negs	r0, r7
 8001a42:	4178      	adcs	r0, r7
 8001a44:	b2c0      	uxtb	r0, r0
 8001a46:	2d00      	cmp	r5, #0
 8001a48:	d117      	bne.n	8001a7a <__gedf2+0x76>
 8001a4a:	465f      	mov	r7, fp
 8001a4c:	433a      	orrs	r2, r7
 8001a4e:	d114      	bne.n	8001a7a <__gedf2+0x76>
 8001a50:	464b      	mov	r3, r9
 8001a52:	2000      	movs	r0, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <__gedf2+0x6a>
 8001a58:	e006      	b.n	8001a68 <__gedf2+0x64>
 8001a5a:	2d00      	cmp	r5, #0
 8001a5c:	d102      	bne.n	8001a64 <__gedf2+0x60>
 8001a5e:	4658      	mov	r0, fp
 8001a60:	4302      	orrs	r2, r0
 8001a62:	d001      	beq.n	8001a68 <__gedf2+0x64>
 8001a64:	4299      	cmp	r1, r3
 8001a66:	d018      	beq.n	8001a9a <__gedf2+0x96>
 8001a68:	4248      	negs	r0, r1
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4308      	orrs	r0, r1
 8001a6e:	bc3c      	pop	{r2, r3, r4, r5}
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	46a2      	mov	sl, r4
 8001a76:	46ab      	mov	fp, r5
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d0f2      	beq.n	8001a64 <__gedf2+0x60>
 8001a7e:	2001      	movs	r0, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	4318      	orrs	r0, r3
 8001a84:	e7f3      	b.n	8001a6e <__gedf2+0x6a>
 8001a86:	0037      	movs	r7, r6
 8001a88:	4307      	orrs	r7, r0
 8001a8a:	d0d1      	beq.n	8001a30 <__gedf2+0x2c>
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	4240      	negs	r0, r0
 8001a90:	e7ed      	b.n	8001a6e <__gedf2+0x6a>
 8001a92:	465f      	mov	r7, fp
 8001a94:	4317      	orrs	r7, r2
 8001a96:	d0ce      	beq.n	8001a36 <__gedf2+0x32>
 8001a98:	e7f8      	b.n	8001a8c <__gedf2+0x88>
 8001a9a:	42ac      	cmp	r4, r5
 8001a9c:	dce4      	bgt.n	8001a68 <__gedf2+0x64>
 8001a9e:	da03      	bge.n	8001aa8 <__gedf2+0xa4>
 8001aa0:	1e48      	subs	r0, r1, #1
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4308      	orrs	r0, r1
 8001aa6:	e7e2      	b.n	8001a6e <__gedf2+0x6a>
 8001aa8:	455e      	cmp	r6, fp
 8001aaa:	d8dd      	bhi.n	8001a68 <__gedf2+0x64>
 8001aac:	d006      	beq.n	8001abc <__gedf2+0xb8>
 8001aae:	2000      	movs	r0, #0
 8001ab0:	455e      	cmp	r6, fp
 8001ab2:	d2dc      	bcs.n	8001a6e <__gedf2+0x6a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	1e48      	subs	r0, r1, #1
 8001ab8:	4318      	orrs	r0, r3
 8001aba:	e7d8      	b.n	8001a6e <__gedf2+0x6a>
 8001abc:	45c4      	cmp	ip, r8
 8001abe:	d8d3      	bhi.n	8001a68 <__gedf2+0x64>
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	45c4      	cmp	ip, r8
 8001ac4:	d3f6      	bcc.n	8001ab4 <__gedf2+0xb0>
 8001ac6:	e7d2      	b.n	8001a6e <__gedf2+0x6a>
 8001ac8:	000007ff 	.word	0x000007ff

08001acc <__ledf2>:
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	464e      	mov	r6, r9
 8001ad0:	4645      	mov	r5, r8
 8001ad2:	46de      	mov	lr, fp
 8001ad4:	4657      	mov	r7, sl
 8001ad6:	005c      	lsls	r4, r3, #1
 8001ad8:	b5e0      	push	{r5, r6, r7, lr}
 8001ada:	031f      	lsls	r7, r3, #12
 8001adc:	0fdb      	lsrs	r3, r3, #31
 8001ade:	4699      	mov	r9, r3
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <__ledf2+0xc0>)
 8001ae2:	030e      	lsls	r6, r1, #12
 8001ae4:	004d      	lsls	r5, r1, #1
 8001ae6:	0fc9      	lsrs	r1, r1, #31
 8001ae8:	4684      	mov	ip, r0
 8001aea:	0b36      	lsrs	r6, r6, #12
 8001aec:	0d6d      	lsrs	r5, r5, #21
 8001aee:	468b      	mov	fp, r1
 8001af0:	4690      	mov	r8, r2
 8001af2:	0b3f      	lsrs	r7, r7, #12
 8001af4:	0d64      	lsrs	r4, r4, #21
 8001af6:	429d      	cmp	r5, r3
 8001af8:	d020      	beq.n	8001b3c <__ledf2+0x70>
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <__ledf2+0xc0>)
 8001afc:	429c      	cmp	r4, r3
 8001afe:	d022      	beq.n	8001b46 <__ledf2+0x7a>
 8001b00:	2d00      	cmp	r5, #0
 8001b02:	d112      	bne.n	8001b2a <__ledf2+0x5e>
 8001b04:	4330      	orrs	r0, r6
 8001b06:	4243      	negs	r3, r0
 8001b08:	4143      	adcs	r3, r0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d01f      	beq.n	8001b50 <__ledf2+0x84>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <__ledf2+0x62>
 8001b14:	464b      	mov	r3, r9
 8001b16:	2001      	movs	r0, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4303      	orrs	r3, r0
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	bc3c      	pop	{r2, r3, r4, r5}
 8001b20:	4690      	mov	r8, r2
 8001b22:	4699      	mov	r9, r3
 8001b24:	46a2      	mov	sl, r4
 8001b26:	46ab      	mov	fp, r5
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	2c00      	cmp	r4, #0
 8001b2c:	d016      	beq.n	8001b5c <__ledf2+0x90>
 8001b2e:	45cb      	cmp	fp, r9
 8001b30:	d017      	beq.n	8001b62 <__ledf2+0x96>
 8001b32:	465b      	mov	r3, fp
 8001b34:	4259      	negs	r1, r3
 8001b36:	2301      	movs	r3, #1
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	e7ef      	b.n	8001b1c <__ledf2+0x50>
 8001b3c:	0031      	movs	r1, r6
 8001b3e:	2302      	movs	r3, #2
 8001b40:	4301      	orrs	r1, r0
 8001b42:	d1eb      	bne.n	8001b1c <__ledf2+0x50>
 8001b44:	e7d9      	b.n	8001afa <__ledf2+0x2e>
 8001b46:	0039      	movs	r1, r7
 8001b48:	2302      	movs	r3, #2
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	d1e6      	bne.n	8001b1c <__ledf2+0x50>
 8001b4e:	e7d7      	b.n	8001b00 <__ledf2+0x34>
 8001b50:	433a      	orrs	r2, r7
 8001b52:	d1dd      	bne.n	8001b10 <__ledf2+0x44>
 8001b54:	2300      	movs	r3, #0
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d0e0      	beq.n	8001b1c <__ledf2+0x50>
 8001b5a:	e7ea      	b.n	8001b32 <__ledf2+0x66>
 8001b5c:	433a      	orrs	r2, r7
 8001b5e:	d1e6      	bne.n	8001b2e <__ledf2+0x62>
 8001b60:	e7e7      	b.n	8001b32 <__ledf2+0x66>
 8001b62:	42a5      	cmp	r5, r4
 8001b64:	dce5      	bgt.n	8001b32 <__ledf2+0x66>
 8001b66:	db05      	blt.n	8001b74 <__ledf2+0xa8>
 8001b68:	42be      	cmp	r6, r7
 8001b6a:	d8e2      	bhi.n	8001b32 <__ledf2+0x66>
 8001b6c:	d007      	beq.n	8001b7e <__ledf2+0xb2>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	42be      	cmp	r6, r7
 8001b72:	d2d3      	bcs.n	8001b1c <__ledf2+0x50>
 8001b74:	4659      	mov	r1, fp
 8001b76:	2301      	movs	r3, #1
 8001b78:	3901      	subs	r1, #1
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	e7ce      	b.n	8001b1c <__ledf2+0x50>
 8001b7e:	45c4      	cmp	ip, r8
 8001b80:	d8d7      	bhi.n	8001b32 <__ledf2+0x66>
 8001b82:	2300      	movs	r3, #0
 8001b84:	45c4      	cmp	ip, r8
 8001b86:	d3f5      	bcc.n	8001b74 <__ledf2+0xa8>
 8001b88:	e7c8      	b.n	8001b1c <__ledf2+0x50>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	000007ff 	.word	0x000007ff

08001b90 <__aeabi_dmul>:
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	4657      	mov	r7, sl
 8001b94:	4645      	mov	r5, r8
 8001b96:	46de      	mov	lr, fp
 8001b98:	464e      	mov	r6, r9
 8001b9a:	b5e0      	push	{r5, r6, r7, lr}
 8001b9c:	030c      	lsls	r4, r1, #12
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	004e      	lsls	r6, r1, #1
 8001ba2:	0b23      	lsrs	r3, r4, #12
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	0007      	movs	r7, r0
 8001ba8:	4692      	mov	sl, r2
 8001baa:	469b      	mov	fp, r3
 8001bac:	0d76      	lsrs	r6, r6, #21
 8001bae:	0fcd      	lsrs	r5, r1, #31
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	d06b      	beq.n	8001c8c <__aeabi_dmul+0xfc>
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <__aeabi_dmul+0x1dc>)
 8001bb6:	429e      	cmp	r6, r3
 8001bb8:	d035      	beq.n	8001c26 <__aeabi_dmul+0x96>
 8001bba:	2480      	movs	r4, #128	; 0x80
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	0f42      	lsrs	r2, r0, #29
 8001bc0:	0424      	lsls	r4, r4, #16
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4314      	orrs	r4, r2
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	00c3      	lsls	r3, r0, #3
 8001bca:	4699      	mov	r9, r3
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <__aeabi_dmul+0x1e0>)
 8001bce:	46a3      	mov	fp, r4
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2700      	movs	r7, #0
 8001bd6:	4466      	add	r6, ip
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	4643      	mov	r3, r8
 8001bdc:	031c      	lsls	r4, r3, #12
 8001bde:	005a      	lsls	r2, r3, #1
 8001be0:	0fdb      	lsrs	r3, r3, #31
 8001be2:	4650      	mov	r0, sl
 8001be4:	0b24      	lsrs	r4, r4, #12
 8001be6:	0d52      	lsrs	r2, r2, #21
 8001be8:	4698      	mov	r8, r3
 8001bea:	d100      	bne.n	8001bee <__aeabi_dmul+0x5e>
 8001bec:	e076      	b.n	8001cdc <__aeabi_dmul+0x14c>
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <__aeabi_dmul+0x1dc>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d06d      	beq.n	8001cd0 <__aeabi_dmul+0x140>
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	0f41      	lsrs	r1, r0, #29
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	495c      	ldr	r1, [pc, #368]	; (8001d70 <__aeabi_dmul+0x1e0>)
 8001bfe:	00e4      	lsls	r4, r4, #3
 8001c00:	468c      	mov	ip, r1
 8001c02:	431c      	orrs	r4, r3
 8001c04:	00c3      	lsls	r3, r0, #3
 8001c06:	2000      	movs	r0, #0
 8001c08:	4462      	add	r2, ip
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	18b6      	adds	r6, r6, r2
 8001c0e:	4069      	eors	r1, r5
 8001c10:	1c72      	adds	r2, r6, #1
 8001c12:	9101      	str	r1, [sp, #4]
 8001c14:	4694      	mov	ip, r2
 8001c16:	4307      	orrs	r7, r0
 8001c18:	2f0f      	cmp	r7, #15
 8001c1a:	d900      	bls.n	8001c1e <__aeabi_dmul+0x8e>
 8001c1c:	e0b0      	b.n	8001d80 <__aeabi_dmul+0x1f0>
 8001c1e:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <__aeabi_dmul+0x1e4>)
 8001c20:	00bf      	lsls	r7, r7, #2
 8001c22:	59d2      	ldr	r2, [r2, r7]
 8001c24:	4697      	mov	pc, r2
 8001c26:	465b      	mov	r3, fp
 8001c28:	4303      	orrs	r3, r0
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dmul+0xa0>
 8001c2e:	e087      	b.n	8001d40 <__aeabi_dmul+0x1b0>
 8001c30:	2300      	movs	r3, #0
 8001c32:	469b      	mov	fp, r3
 8001c34:	3302      	adds	r3, #2
 8001c36:	2708      	movs	r7, #8
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	e7ce      	b.n	8001bda <__aeabi_dmul+0x4a>
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	9201      	str	r2, [sp, #4]
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d067      	beq.n	8001d14 <__aeabi_dmul+0x184>
 8001c44:	2803      	cmp	r0, #3
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dmul+0xba>
 8001c48:	e20e      	b.n	8002068 <__aeabi_dmul+0x4d8>
 8001c4a:	2801      	cmp	r0, #1
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dmul+0xc0>
 8001c4e:	e162      	b.n	8001f16 <__aeabi_dmul+0x386>
 8001c50:	2300      	movs	r3, #0
 8001c52:	2400      	movs	r4, #0
 8001c54:	2200      	movs	r2, #0
 8001c56:	4699      	mov	r9, r3
 8001c58:	9901      	ldr	r1, [sp, #4]
 8001c5a:	4001      	ands	r1, r0
 8001c5c:	b2cd      	uxtb	r5, r1
 8001c5e:	2100      	movs	r1, #0
 8001c60:	0312      	lsls	r2, r2, #12
 8001c62:	0d0b      	lsrs	r3, r1, #20
 8001c64:	0b12      	lsrs	r2, r2, #12
 8001c66:	051b      	lsls	r3, r3, #20
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4a43      	ldr	r2, [pc, #268]	; (8001d78 <__aeabi_dmul+0x1e8>)
 8001c6c:	0524      	lsls	r4, r4, #20
 8001c6e:	4013      	ands	r3, r2
 8001c70:	431c      	orrs	r4, r3
 8001c72:	0064      	lsls	r4, r4, #1
 8001c74:	07ed      	lsls	r5, r5, #31
 8001c76:	0864      	lsrs	r4, r4, #1
 8001c78:	432c      	orrs	r4, r5
 8001c7a:	4648      	mov	r0, r9
 8001c7c:	0021      	movs	r1, r4
 8001c7e:	b007      	add	sp, #28
 8001c80:	bc3c      	pop	{r2, r3, r4, r5}
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	46a2      	mov	sl, r4
 8001c88:	46ab      	mov	fp, r5
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	4699      	mov	r9, r3
 8001c90:	d04f      	beq.n	8001d32 <__aeabi_dmul+0x1a2>
 8001c92:	465b      	mov	r3, fp
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x10a>
 8001c98:	e189      	b.n	8001fae <__aeabi_dmul+0x41e>
 8001c9a:	4658      	mov	r0, fp
 8001c9c:	f000 fe2c 	bl	80028f8 <__clzsi2>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	3b0b      	subs	r3, #11
 8001ca4:	2b1c      	cmp	r3, #28
 8001ca6:	dd00      	ble.n	8001caa <__aeabi_dmul+0x11a>
 8001ca8:	e17a      	b.n	8001fa0 <__aeabi_dmul+0x410>
 8001caa:	221d      	movs	r2, #29
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	003a      	movs	r2, r7
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	465c      	mov	r4, fp
 8001cb4:	40da      	lsrs	r2, r3
 8001cb6:	3908      	subs	r1, #8
 8001cb8:	408c      	lsls	r4, r1
 8001cba:	0013      	movs	r3, r2
 8001cbc:	408f      	lsls	r7, r1
 8001cbe:	4323      	orrs	r3, r4
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	46b9      	mov	r9, r7
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4e2d      	ldr	r6, [pc, #180]	; (8001d7c <__aeabi_dmul+0x1ec>)
 8001cc8:	2700      	movs	r7, #0
 8001cca:	1a36      	subs	r6, r6, r0
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	e784      	b.n	8001bda <__aeabi_dmul+0x4a>
 8001cd0:	4653      	mov	r3, sl
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	d12a      	bne.n	8001d2c <__aeabi_dmul+0x19c>
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	2002      	movs	r0, #2
 8001cda:	e796      	b.n	8001c0a <__aeabi_dmul+0x7a>
 8001cdc:	4653      	mov	r3, sl
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	d020      	beq.n	8001d24 <__aeabi_dmul+0x194>
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dmul+0x158>
 8001ce6:	e157      	b.n	8001f98 <__aeabi_dmul+0x408>
 8001ce8:	0020      	movs	r0, r4
 8001cea:	f000 fe05 	bl	80028f8 <__clzsi2>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	3b0b      	subs	r3, #11
 8001cf2:	2b1c      	cmp	r3, #28
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dmul+0x168>
 8001cf6:	e149      	b.n	8001f8c <__aeabi_dmul+0x3fc>
 8001cf8:	211d      	movs	r1, #29
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	4651      	mov	r1, sl
 8001cfe:	0002      	movs	r2, r0
 8001d00:	40d9      	lsrs	r1, r3
 8001d02:	4653      	mov	r3, sl
 8001d04:	3a08      	subs	r2, #8
 8001d06:	4094      	lsls	r4, r2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	430c      	orrs	r4, r1
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <__aeabi_dmul+0x1ec>)
 8001d0e:	1a12      	subs	r2, r2, r0
 8001d10:	2000      	movs	r0, #0
 8001d12:	e77a      	b.n	8001c0a <__aeabi_dmul+0x7a>
 8001d14:	2501      	movs	r5, #1
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	4c14      	ldr	r4, [pc, #80]	; (8001d6c <__aeabi_dmul+0x1dc>)
 8001d1a:	401d      	ands	r5, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4699      	mov	r9, r3
 8001d22:	e79c      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001d24:	2400      	movs	r4, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	2001      	movs	r0, #1
 8001d2a:	e76e      	b.n	8001c0a <__aeabi_dmul+0x7a>
 8001d2c:	4653      	mov	r3, sl
 8001d2e:	2003      	movs	r0, #3
 8001d30:	e76b      	b.n	8001c0a <__aeabi_dmul+0x7a>
 8001d32:	2300      	movs	r3, #0
 8001d34:	469b      	mov	fp, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	2704      	movs	r7, #4
 8001d3a:	2600      	movs	r6, #0
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	e74c      	b.n	8001bda <__aeabi_dmul+0x4a>
 8001d40:	2303      	movs	r3, #3
 8001d42:	4681      	mov	r9, r0
 8001d44:	270c      	movs	r7, #12
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	e747      	b.n	8001bda <__aeabi_dmul+0x4a>
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2500      	movs	r5, #0
 8001d50:	0312      	lsls	r2, r2, #12
 8001d52:	4699      	mov	r9, r3
 8001d54:	4c05      	ldr	r4, [pc, #20]	; (8001d6c <__aeabi_dmul+0x1dc>)
 8001d56:	e782      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001d58:	465c      	mov	r4, fp
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	9802      	ldr	r0, [sp, #8]
 8001d5e:	e76f      	b.n	8001c40 <__aeabi_dmul+0xb0>
 8001d60:	465c      	mov	r4, fp
 8001d62:	464b      	mov	r3, r9
 8001d64:	9501      	str	r5, [sp, #4]
 8001d66:	9802      	ldr	r0, [sp, #8]
 8001d68:	e76a      	b.n	8001c40 <__aeabi_dmul+0xb0>
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	000007ff 	.word	0x000007ff
 8001d70:	fffffc01 	.word	0xfffffc01
 8001d74:	08007d50 	.word	0x08007d50
 8001d78:	800fffff 	.word	0x800fffff
 8001d7c:	fffffc0d 	.word	0xfffffc0d
 8001d80:	464a      	mov	r2, r9
 8001d82:	4649      	mov	r1, r9
 8001d84:	0c17      	lsrs	r7, r2, #16
 8001d86:	0c1a      	lsrs	r2, r3, #16
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	0c1b      	lsrs	r3, r3, #16
 8001d8c:	0408      	lsls	r0, r1, #16
 8001d8e:	0019      	movs	r1, r3
 8001d90:	0c00      	lsrs	r0, r0, #16
 8001d92:	4341      	muls	r1, r0
 8001d94:	0015      	movs	r5, r2
 8001d96:	4688      	mov	r8, r1
 8001d98:	0019      	movs	r1, r3
 8001d9a:	437d      	muls	r5, r7
 8001d9c:	4379      	muls	r1, r7
 8001d9e:	9503      	str	r5, [sp, #12]
 8001da0:	4689      	mov	r9, r1
 8001da2:	0029      	movs	r1, r5
 8001da4:	0015      	movs	r5, r2
 8001da6:	4345      	muls	r5, r0
 8001da8:	444d      	add	r5, r9
 8001daa:	9502      	str	r5, [sp, #8]
 8001dac:	4645      	mov	r5, r8
 8001dae:	0c2d      	lsrs	r5, r5, #16
 8001db0:	46aa      	mov	sl, r5
 8001db2:	9d02      	ldr	r5, [sp, #8]
 8001db4:	4455      	add	r5, sl
 8001db6:	45a9      	cmp	r9, r5
 8001db8:	d906      	bls.n	8001dc8 <__aeabi_dmul+0x238>
 8001dba:	468a      	mov	sl, r1
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0249      	lsls	r1, r1, #9
 8001dc0:	4689      	mov	r9, r1
 8001dc2:	44ca      	add	sl, r9
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	9103      	str	r1, [sp, #12]
 8001dc8:	0c29      	lsrs	r1, r5, #16
 8001dca:	9104      	str	r1, [sp, #16]
 8001dcc:	4641      	mov	r1, r8
 8001dce:	0409      	lsls	r1, r1, #16
 8001dd0:	042d      	lsls	r5, r5, #16
 8001dd2:	0c09      	lsrs	r1, r1, #16
 8001dd4:	4688      	mov	r8, r1
 8001dd6:	0029      	movs	r1, r5
 8001dd8:	0c25      	lsrs	r5, r4, #16
 8001dda:	0424      	lsls	r4, r4, #16
 8001ddc:	4441      	add	r1, r8
 8001dde:	0c24      	lsrs	r4, r4, #16
 8001de0:	9105      	str	r1, [sp, #20]
 8001de2:	0021      	movs	r1, r4
 8001de4:	4341      	muls	r1, r0
 8001de6:	4688      	mov	r8, r1
 8001de8:	0021      	movs	r1, r4
 8001dea:	4379      	muls	r1, r7
 8001dec:	468a      	mov	sl, r1
 8001dee:	4368      	muls	r0, r5
 8001df0:	4641      	mov	r1, r8
 8001df2:	4450      	add	r0, sl
 8001df4:	4681      	mov	r9, r0
 8001df6:	0c08      	lsrs	r0, r1, #16
 8001df8:	4448      	add	r0, r9
 8001dfa:	436f      	muls	r7, r5
 8001dfc:	4582      	cmp	sl, r0
 8001dfe:	d903      	bls.n	8001e08 <__aeabi_dmul+0x278>
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0249      	lsls	r1, r1, #9
 8001e04:	4689      	mov	r9, r1
 8001e06:	444f      	add	r7, r9
 8001e08:	0c01      	lsrs	r1, r0, #16
 8001e0a:	4689      	mov	r9, r1
 8001e0c:	0039      	movs	r1, r7
 8001e0e:	4449      	add	r1, r9
 8001e10:	9102      	str	r1, [sp, #8]
 8001e12:	4641      	mov	r1, r8
 8001e14:	040f      	lsls	r7, r1, #16
 8001e16:	9904      	ldr	r1, [sp, #16]
 8001e18:	0c3f      	lsrs	r7, r7, #16
 8001e1a:	4688      	mov	r8, r1
 8001e1c:	0400      	lsls	r0, r0, #16
 8001e1e:	19c0      	adds	r0, r0, r7
 8001e20:	4480      	add	r8, r0
 8001e22:	4641      	mov	r1, r8
 8001e24:	9104      	str	r1, [sp, #16]
 8001e26:	4659      	mov	r1, fp
 8001e28:	0c0f      	lsrs	r7, r1, #16
 8001e2a:	0409      	lsls	r1, r1, #16
 8001e2c:	0c09      	lsrs	r1, r1, #16
 8001e2e:	4688      	mov	r8, r1
 8001e30:	4359      	muls	r1, r3
 8001e32:	468a      	mov	sl, r1
 8001e34:	0039      	movs	r1, r7
 8001e36:	4351      	muls	r1, r2
 8001e38:	4689      	mov	r9, r1
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	434a      	muls	r2, r1
 8001e3e:	4651      	mov	r1, sl
 8001e40:	0c09      	lsrs	r1, r1, #16
 8001e42:	468b      	mov	fp, r1
 8001e44:	437b      	muls	r3, r7
 8001e46:	18d2      	adds	r2, r2, r3
 8001e48:	445a      	add	r2, fp
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d903      	bls.n	8001e56 <__aeabi_dmul+0x2c6>
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	469b      	mov	fp, r3
 8001e54:	44d9      	add	r9, fp
 8001e56:	4651      	mov	r1, sl
 8001e58:	0409      	lsls	r1, r1, #16
 8001e5a:	0c09      	lsrs	r1, r1, #16
 8001e5c:	468a      	mov	sl, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	4361      	muls	r1, r4
 8001e62:	437c      	muls	r4, r7
 8001e64:	0c13      	lsrs	r3, r2, #16
 8001e66:	0412      	lsls	r2, r2, #16
 8001e68:	444b      	add	r3, r9
 8001e6a:	4452      	add	r2, sl
 8001e6c:	46a1      	mov	r9, r4
 8001e6e:	468a      	mov	sl, r1
 8001e70:	003c      	movs	r4, r7
 8001e72:	4641      	mov	r1, r8
 8001e74:	436c      	muls	r4, r5
 8001e76:	434d      	muls	r5, r1
 8001e78:	4651      	mov	r1, sl
 8001e7a:	444d      	add	r5, r9
 8001e7c:	0c0f      	lsrs	r7, r1, #16
 8001e7e:	197d      	adds	r5, r7, r5
 8001e80:	45a9      	cmp	r9, r5
 8001e82:	d903      	bls.n	8001e8c <__aeabi_dmul+0x2fc>
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	0249      	lsls	r1, r1, #9
 8001e88:	4688      	mov	r8, r1
 8001e8a:	4444      	add	r4, r8
 8001e8c:	9f04      	ldr	r7, [sp, #16]
 8001e8e:	9903      	ldr	r1, [sp, #12]
 8001e90:	46b8      	mov	r8, r7
 8001e92:	4441      	add	r1, r8
 8001e94:	468b      	mov	fp, r1
 8001e96:	4583      	cmp	fp, r0
 8001e98:	4180      	sbcs	r0, r0
 8001e9a:	4241      	negs	r1, r0
 8001e9c:	4688      	mov	r8, r1
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	0408      	lsls	r0, r1, #16
 8001ea2:	042f      	lsls	r7, r5, #16
 8001ea4:	0c00      	lsrs	r0, r0, #16
 8001ea6:	183f      	adds	r7, r7, r0
 8001ea8:	4658      	mov	r0, fp
 8001eaa:	9902      	ldr	r1, [sp, #8]
 8001eac:	1810      	adds	r0, r2, r0
 8001eae:	4689      	mov	r9, r1
 8001eb0:	4290      	cmp	r0, r2
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	444f      	add	r7, r9
 8001eb6:	46ba      	mov	sl, r7
 8001eb8:	4252      	negs	r2, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4693      	mov	fp, r2
 8001ebe:	44c2      	add	sl, r8
 8001ec0:	44d1      	add	r9, sl
 8001ec2:	44cb      	add	fp, r9
 8001ec4:	428f      	cmp	r7, r1
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	45c2      	cmp	sl, r8
 8001eca:	4189      	sbcs	r1, r1
 8001ecc:	4599      	cmp	r9, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	4593      	cmp	fp, r2
 8001ed2:	4192      	sbcs	r2, r2
 8001ed4:	427f      	negs	r7, r7
 8001ed6:	4249      	negs	r1, r1
 8001ed8:	0c2d      	lsrs	r5, r5, #16
 8001eda:	4252      	negs	r2, r2
 8001edc:	430f      	orrs	r7, r1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	197f      	adds	r7, r7, r5
 8001ee4:	18ff      	adds	r7, r7, r3
 8001ee6:	465b      	mov	r3, fp
 8001ee8:	193c      	adds	r4, r7, r4
 8001eea:	0ddb      	lsrs	r3, r3, #23
 8001eec:	9a05      	ldr	r2, [sp, #20]
 8001eee:	0264      	lsls	r4, r4, #9
 8001ef0:	431c      	orrs	r4, r3
 8001ef2:	0243      	lsls	r3, r0, #9
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	1e5d      	subs	r5, r3, #1
 8001ef8:	41ab      	sbcs	r3, r5
 8001efa:	465a      	mov	r2, fp
 8001efc:	0dc0      	lsrs	r0, r0, #23
 8001efe:	4303      	orrs	r3, r0
 8001f00:	0252      	lsls	r2, r2, #9
 8001f02:	4313      	orrs	r3, r2
 8001f04:	01e2      	lsls	r2, r4, #7
 8001f06:	d556      	bpl.n	8001fb6 <__aeabi_dmul+0x426>
 8001f08:	2001      	movs	r0, #1
 8001f0a:	085a      	lsrs	r2, r3, #1
 8001f0c:	4003      	ands	r3, r0
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	07e2      	lsls	r2, r4, #31
 8001f12:	4313      	orrs	r3, r2
 8001f14:	0864      	lsrs	r4, r4, #1
 8001f16:	485a      	ldr	r0, [pc, #360]	; (8002080 <__aeabi_dmul+0x4f0>)
 8001f18:	4460      	add	r0, ip
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	dd4d      	ble.n	8001fba <__aeabi_dmul+0x42a>
 8001f1e:	075a      	lsls	r2, r3, #29
 8001f20:	d009      	beq.n	8001f36 <__aeabi_dmul+0x3a6>
 8001f22:	220f      	movs	r2, #15
 8001f24:	401a      	ands	r2, r3
 8001f26:	2a04      	cmp	r2, #4
 8001f28:	d005      	beq.n	8001f36 <__aeabi_dmul+0x3a6>
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	01e2      	lsls	r2, r4, #7
 8001f38:	d504      	bpl.n	8001f44 <__aeabi_dmul+0x3b4>
 8001f3a:	2080      	movs	r0, #128	; 0x80
 8001f3c:	4a51      	ldr	r2, [pc, #324]	; (8002084 <__aeabi_dmul+0x4f4>)
 8001f3e:	00c0      	lsls	r0, r0, #3
 8001f40:	4014      	ands	r4, r2
 8001f42:	4460      	add	r0, ip
 8001f44:	4a50      	ldr	r2, [pc, #320]	; (8002088 <__aeabi_dmul+0x4f8>)
 8001f46:	4290      	cmp	r0, r2
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dmul+0x3bc>
 8001f4a:	e6e3      	b.n	8001d14 <__aeabi_dmul+0x184>
 8001f4c:	2501      	movs	r5, #1
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	0762      	lsls	r2, r4, #29
 8001f52:	431a      	orrs	r2, r3
 8001f54:	0264      	lsls	r4, r4, #9
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	4691      	mov	r9, r2
 8001f5a:	0b22      	lsrs	r2, r4, #12
 8001f5c:	0544      	lsls	r4, r0, #21
 8001f5e:	0d64      	lsrs	r4, r4, #21
 8001f60:	401d      	ands	r5, r3
 8001f62:	e67c      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	4659      	mov	r1, fp
 8001f68:	0312      	lsls	r2, r2, #12
 8001f6a:	4211      	tst	r1, r2
 8001f6c:	d008      	beq.n	8001f80 <__aeabi_dmul+0x3f0>
 8001f6e:	4214      	tst	r4, r2
 8001f70:	d106      	bne.n	8001f80 <__aeabi_dmul+0x3f0>
 8001f72:	4322      	orrs	r2, r4
 8001f74:	0312      	lsls	r2, r2, #12
 8001f76:	0b12      	lsrs	r2, r2, #12
 8001f78:	4645      	mov	r5, r8
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4c43      	ldr	r4, [pc, #268]	; (800208c <__aeabi_dmul+0x4fc>)
 8001f7e:	e66e      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001f80:	465b      	mov	r3, fp
 8001f82:	431a      	orrs	r2, r3
 8001f84:	0312      	lsls	r2, r2, #12
 8001f86:	0b12      	lsrs	r2, r2, #12
 8001f88:	4c40      	ldr	r4, [pc, #256]	; (800208c <__aeabi_dmul+0x4fc>)
 8001f8a:	e668      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	4654      	mov	r4, sl
 8001f90:	3b28      	subs	r3, #40	; 0x28
 8001f92:	409c      	lsls	r4, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	e6b9      	b.n	8001d0c <__aeabi_dmul+0x17c>
 8001f98:	f000 fcae 	bl	80028f8 <__clzsi2>
 8001f9c:	3020      	adds	r0, #32
 8001f9e:	e6a6      	b.n	8001cee <__aeabi_dmul+0x15e>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	3b28      	subs	r3, #40	; 0x28
 8001fa4:	409f      	lsls	r7, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	46bb      	mov	fp, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	e68a      	b.n	8001cc4 <__aeabi_dmul+0x134>
 8001fae:	f000 fca3 	bl	80028f8 <__clzsi2>
 8001fb2:	3020      	adds	r0, #32
 8001fb4:	e674      	b.n	8001ca0 <__aeabi_dmul+0x110>
 8001fb6:	46b4      	mov	ip, r6
 8001fb8:	e7ad      	b.n	8001f16 <__aeabi_dmul+0x386>
 8001fba:	2501      	movs	r5, #1
 8001fbc:	1a2a      	subs	r2, r5, r0
 8001fbe:	2a38      	cmp	r2, #56	; 0x38
 8001fc0:	dd06      	ble.n	8001fd0 <__aeabi_dmul+0x440>
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	401d      	ands	r5, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4699      	mov	r9, r3
 8001fce:	e646      	b.n	8001c5e <__aeabi_dmul+0xce>
 8001fd0:	2a1f      	cmp	r2, #31
 8001fd2:	dc21      	bgt.n	8002018 <__aeabi_dmul+0x488>
 8001fd4:	2520      	movs	r5, #32
 8001fd6:	0020      	movs	r0, r4
 8001fd8:	1aad      	subs	r5, r5, r2
 8001fda:	001e      	movs	r6, r3
 8001fdc:	40ab      	lsls	r3, r5
 8001fde:	40a8      	lsls	r0, r5
 8001fe0:	40d6      	lsrs	r6, r2
 8001fe2:	1e5d      	subs	r5, r3, #1
 8001fe4:	41ab      	sbcs	r3, r5
 8001fe6:	4330      	orrs	r0, r6
 8001fe8:	4318      	orrs	r0, r3
 8001fea:	40d4      	lsrs	r4, r2
 8001fec:	0743      	lsls	r3, r0, #29
 8001fee:	d009      	beq.n	8002004 <__aeabi_dmul+0x474>
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	4003      	ands	r3, r0
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dmul+0x474>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	1d18      	adds	r0, r3, #4
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	425b      	negs	r3, r3
 8002002:	18e4      	adds	r4, r4, r3
 8002004:	0223      	lsls	r3, r4, #8
 8002006:	d521      	bpl.n	800204c <__aeabi_dmul+0x4bc>
 8002008:	2501      	movs	r5, #1
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	2401      	movs	r4, #1
 800200e:	401d      	ands	r5, r3
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	4699      	mov	r9, r3
 8002016:	e622      	b.n	8001c5e <__aeabi_dmul+0xce>
 8002018:	251f      	movs	r5, #31
 800201a:	0021      	movs	r1, r4
 800201c:	426d      	negs	r5, r5
 800201e:	1a28      	subs	r0, r5, r0
 8002020:	40c1      	lsrs	r1, r0
 8002022:	0008      	movs	r0, r1
 8002024:	2a20      	cmp	r2, #32
 8002026:	d01d      	beq.n	8002064 <__aeabi_dmul+0x4d4>
 8002028:	355f      	adds	r5, #95	; 0x5f
 800202a:	1aaa      	subs	r2, r5, r2
 800202c:	4094      	lsls	r4, r2
 800202e:	4323      	orrs	r3, r4
 8002030:	1e5c      	subs	r4, r3, #1
 8002032:	41a3      	sbcs	r3, r4
 8002034:	2507      	movs	r5, #7
 8002036:	4303      	orrs	r3, r0
 8002038:	401d      	ands	r5, r3
 800203a:	2200      	movs	r2, #0
 800203c:	2d00      	cmp	r5, #0
 800203e:	d009      	beq.n	8002054 <__aeabi_dmul+0x4c4>
 8002040:	220f      	movs	r2, #15
 8002042:	2400      	movs	r4, #0
 8002044:	401a      	ands	r2, r3
 8002046:	0018      	movs	r0, r3
 8002048:	2a04      	cmp	r2, #4
 800204a:	d1d6      	bne.n	8001ffa <__aeabi_dmul+0x46a>
 800204c:	0003      	movs	r3, r0
 800204e:	0765      	lsls	r5, r4, #29
 8002050:	0264      	lsls	r4, r4, #9
 8002052:	0b22      	lsrs	r2, r4, #12
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	432b      	orrs	r3, r5
 8002058:	2501      	movs	r5, #1
 800205a:	4699      	mov	r9, r3
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	2400      	movs	r4, #0
 8002060:	401d      	ands	r5, r3
 8002062:	e5fc      	b.n	8001c5e <__aeabi_dmul+0xce>
 8002064:	2400      	movs	r4, #0
 8002066:	e7e2      	b.n	800202e <__aeabi_dmul+0x49e>
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	2501      	movs	r5, #1
 800206c:	0312      	lsls	r2, r2, #12
 800206e:	4322      	orrs	r2, r4
 8002070:	9901      	ldr	r1, [sp, #4]
 8002072:	0312      	lsls	r2, r2, #12
 8002074:	0b12      	lsrs	r2, r2, #12
 8002076:	400d      	ands	r5, r1
 8002078:	4699      	mov	r9, r3
 800207a:	4c04      	ldr	r4, [pc, #16]	; (800208c <__aeabi_dmul+0x4fc>)
 800207c:	e5ef      	b.n	8001c5e <__aeabi_dmul+0xce>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	000003ff 	.word	0x000003ff
 8002084:	feffffff 	.word	0xfeffffff
 8002088:	000007fe 	.word	0x000007fe
 800208c:	000007ff 	.word	0x000007ff

08002090 <__aeabi_dsub>:
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	4646      	mov	r6, r8
 8002094:	46d6      	mov	lr, sl
 8002096:	464f      	mov	r7, r9
 8002098:	030c      	lsls	r4, r1, #12
 800209a:	b5c0      	push	{r6, r7, lr}
 800209c:	0fcd      	lsrs	r5, r1, #31
 800209e:	004e      	lsls	r6, r1, #1
 80020a0:	0a61      	lsrs	r1, r4, #9
 80020a2:	0f44      	lsrs	r4, r0, #29
 80020a4:	430c      	orrs	r4, r1
 80020a6:	00c1      	lsls	r1, r0, #3
 80020a8:	0058      	lsls	r0, r3, #1
 80020aa:	0d40      	lsrs	r0, r0, #21
 80020ac:	4684      	mov	ip, r0
 80020ae:	468a      	mov	sl, r1
 80020b0:	000f      	movs	r7, r1
 80020b2:	0319      	lsls	r1, r3, #12
 80020b4:	0f50      	lsrs	r0, r2, #29
 80020b6:	0a49      	lsrs	r1, r1, #9
 80020b8:	4301      	orrs	r1, r0
 80020ba:	48c6      	ldr	r0, [pc, #792]	; (80023d4 <__aeabi_dsub+0x344>)
 80020bc:	0d76      	lsrs	r6, r6, #21
 80020be:	46a8      	mov	r8, r5
 80020c0:	0fdb      	lsrs	r3, r3, #31
 80020c2:	00d2      	lsls	r2, r2, #3
 80020c4:	4584      	cmp	ip, r0
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x3a>
 80020c8:	e0d8      	b.n	800227c <__aeabi_dsub+0x1ec>
 80020ca:	2001      	movs	r0, #1
 80020cc:	4043      	eors	r3, r0
 80020ce:	42ab      	cmp	r3, r5
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x44>
 80020d2:	e0a6      	b.n	8002222 <__aeabi_dsub+0x192>
 80020d4:	4660      	mov	r0, ip
 80020d6:	1a35      	subs	r5, r6, r0
 80020d8:	2d00      	cmp	r5, #0
 80020da:	dc00      	bgt.n	80020de <__aeabi_dsub+0x4e>
 80020dc:	e105      	b.n	80022ea <__aeabi_dsub+0x25a>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d110      	bne.n	8002104 <__aeabi_dsub+0x74>
 80020e2:	000b      	movs	r3, r1
 80020e4:	4313      	orrs	r3, r2
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x5a>
 80020e8:	e0d7      	b.n	800229a <__aeabi_dsub+0x20a>
 80020ea:	1e6b      	subs	r3, r5, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d000      	beq.n	80020f2 <__aeabi_dsub+0x62>
 80020f0:	e14b      	b.n	800238a <__aeabi_dsub+0x2fa>
 80020f2:	4653      	mov	r3, sl
 80020f4:	1a9f      	subs	r7, r3, r2
 80020f6:	45ba      	cmp	sl, r7
 80020f8:	4180      	sbcs	r0, r0
 80020fa:	1a64      	subs	r4, r4, r1
 80020fc:	4240      	negs	r0, r0
 80020fe:	1a24      	subs	r4, r4, r0
 8002100:	2601      	movs	r6, #1
 8002102:	e01e      	b.n	8002142 <__aeabi_dsub+0xb2>
 8002104:	4bb3      	ldr	r3, [pc, #716]	; (80023d4 <__aeabi_dsub+0x344>)
 8002106:	429e      	cmp	r6, r3
 8002108:	d048      	beq.n	800219c <__aeabi_dsub+0x10c>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	4319      	orrs	r1, r3
 8002110:	2d38      	cmp	r5, #56	; 0x38
 8002112:	dd00      	ble.n	8002116 <__aeabi_dsub+0x86>
 8002114:	e119      	b.n	800234a <__aeabi_dsub+0x2ba>
 8002116:	2d1f      	cmp	r5, #31
 8002118:	dd00      	ble.n	800211c <__aeabi_dsub+0x8c>
 800211a:	e14c      	b.n	80023b6 <__aeabi_dsub+0x326>
 800211c:	2320      	movs	r3, #32
 800211e:	000f      	movs	r7, r1
 8002120:	1b5b      	subs	r3, r3, r5
 8002122:	0010      	movs	r0, r2
 8002124:	409a      	lsls	r2, r3
 8002126:	409f      	lsls	r7, r3
 8002128:	40e8      	lsrs	r0, r5
 800212a:	1e53      	subs	r3, r2, #1
 800212c:	419a      	sbcs	r2, r3
 800212e:	40e9      	lsrs	r1, r5
 8002130:	4307      	orrs	r7, r0
 8002132:	4317      	orrs	r7, r2
 8002134:	4653      	mov	r3, sl
 8002136:	1bdf      	subs	r7, r3, r7
 8002138:	1a61      	subs	r1, r4, r1
 800213a:	45ba      	cmp	sl, r7
 800213c:	41a4      	sbcs	r4, r4
 800213e:	4264      	negs	r4, r4
 8002140:	1b0c      	subs	r4, r1, r4
 8002142:	0223      	lsls	r3, r4, #8
 8002144:	d400      	bmi.n	8002148 <__aeabi_dsub+0xb8>
 8002146:	e0c5      	b.n	80022d4 <__aeabi_dsub+0x244>
 8002148:	0264      	lsls	r4, r4, #9
 800214a:	0a65      	lsrs	r5, r4, #9
 800214c:	2d00      	cmp	r5, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0xc2>
 8002150:	e0f6      	b.n	8002340 <__aeabi_dsub+0x2b0>
 8002152:	0028      	movs	r0, r5
 8002154:	f000 fbd0 	bl	80028f8 <__clzsi2>
 8002158:	0003      	movs	r3, r0
 800215a:	3b08      	subs	r3, #8
 800215c:	2b1f      	cmp	r3, #31
 800215e:	dd00      	ble.n	8002162 <__aeabi_dsub+0xd2>
 8002160:	e0e9      	b.n	8002336 <__aeabi_dsub+0x2a6>
 8002162:	2220      	movs	r2, #32
 8002164:	003c      	movs	r4, r7
 8002166:	1ad2      	subs	r2, r2, r3
 8002168:	409d      	lsls	r5, r3
 800216a:	40d4      	lsrs	r4, r2
 800216c:	409f      	lsls	r7, r3
 800216e:	4325      	orrs	r5, r4
 8002170:	429e      	cmp	r6, r3
 8002172:	dd00      	ble.n	8002176 <__aeabi_dsub+0xe6>
 8002174:	e0db      	b.n	800232e <__aeabi_dsub+0x29e>
 8002176:	1b9e      	subs	r6, r3, r6
 8002178:	1c73      	adds	r3, r6, #1
 800217a:	2b1f      	cmp	r3, #31
 800217c:	dd00      	ble.n	8002180 <__aeabi_dsub+0xf0>
 800217e:	e10a      	b.n	8002396 <__aeabi_dsub+0x306>
 8002180:	2220      	movs	r2, #32
 8002182:	0038      	movs	r0, r7
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	0029      	movs	r1, r5
 8002188:	4097      	lsls	r7, r2
 800218a:	002c      	movs	r4, r5
 800218c:	4091      	lsls	r1, r2
 800218e:	40d8      	lsrs	r0, r3
 8002190:	1e7a      	subs	r2, r7, #1
 8002192:	4197      	sbcs	r7, r2
 8002194:	40dc      	lsrs	r4, r3
 8002196:	2600      	movs	r6, #0
 8002198:	4301      	orrs	r1, r0
 800219a:	430f      	orrs	r7, r1
 800219c:	077b      	lsls	r3, r7, #29
 800219e:	d009      	beq.n	80021b4 <__aeabi_dsub+0x124>
 80021a0:	230f      	movs	r3, #15
 80021a2:	403b      	ands	r3, r7
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d005      	beq.n	80021b4 <__aeabi_dsub+0x124>
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	42bb      	cmp	r3, r7
 80021ac:	41bf      	sbcs	r7, r7
 80021ae:	427f      	negs	r7, r7
 80021b0:	19e4      	adds	r4, r4, r7
 80021b2:	001f      	movs	r7, r3
 80021b4:	0223      	lsls	r3, r4, #8
 80021b6:	d525      	bpl.n	8002204 <__aeabi_dsub+0x174>
 80021b8:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <__aeabi_dsub+0x344>)
 80021ba:	3601      	adds	r6, #1
 80021bc:	429e      	cmp	r6, r3
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x132>
 80021c0:	e0af      	b.n	8002322 <__aeabi_dsub+0x292>
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <__aeabi_dsub+0x348>)
 80021c4:	2501      	movs	r5, #1
 80021c6:	401c      	ands	r4, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	0762      	lsls	r2, r4, #29
 80021cc:	08ff      	lsrs	r7, r7, #3
 80021ce:	0264      	lsls	r4, r4, #9
 80021d0:	0576      	lsls	r6, r6, #21
 80021d2:	4317      	orrs	r7, r2
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	0d76      	lsrs	r6, r6, #21
 80021d8:	401d      	ands	r5, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	0324      	lsls	r4, r4, #12
 80021de:	0b23      	lsrs	r3, r4, #12
 80021e0:	0d0c      	lsrs	r4, r1, #20
 80021e2:	4a7e      	ldr	r2, [pc, #504]	; (80023dc <__aeabi_dsub+0x34c>)
 80021e4:	0524      	lsls	r4, r4, #20
 80021e6:	431c      	orrs	r4, r3
 80021e8:	4014      	ands	r4, r2
 80021ea:	0533      	lsls	r3, r6, #20
 80021ec:	4323      	orrs	r3, r4
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	07ed      	lsls	r5, r5, #31
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	432b      	orrs	r3, r5
 80021f6:	0038      	movs	r0, r7
 80021f8:	0019      	movs	r1, r3
 80021fa:	bc1c      	pop	{r2, r3, r4}
 80021fc:	4690      	mov	r8, r2
 80021fe:	4699      	mov	r9, r3
 8002200:	46a2      	mov	sl, r4
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	2501      	movs	r5, #1
 8002206:	4643      	mov	r3, r8
 8002208:	0762      	lsls	r2, r4, #29
 800220a:	08ff      	lsrs	r7, r7, #3
 800220c:	4317      	orrs	r7, r2
 800220e:	08e4      	lsrs	r4, r4, #3
 8002210:	401d      	ands	r5, r3
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <__aeabi_dsub+0x344>)
 8002214:	429e      	cmp	r6, r3
 8002216:	d036      	beq.n	8002286 <__aeabi_dsub+0x1f6>
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	0576      	lsls	r6, r6, #21
 800221c:	0b24      	lsrs	r4, r4, #12
 800221e:	0d76      	lsrs	r6, r6, #21
 8002220:	e7db      	b.n	80021da <__aeabi_dsub+0x14a>
 8002222:	4663      	mov	r3, ip
 8002224:	1af3      	subs	r3, r6, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	dc00      	bgt.n	800222c <__aeabi_dsub+0x19c>
 800222a:	e094      	b.n	8002356 <__aeabi_dsub+0x2c6>
 800222c:	4660      	mov	r0, ip
 800222e:	2800      	cmp	r0, #0
 8002230:	d035      	beq.n	800229e <__aeabi_dsub+0x20e>
 8002232:	4868      	ldr	r0, [pc, #416]	; (80023d4 <__aeabi_dsub+0x344>)
 8002234:	4286      	cmp	r6, r0
 8002236:	d0b1      	beq.n	800219c <__aeabi_dsub+0x10c>
 8002238:	2780      	movs	r7, #128	; 0x80
 800223a:	043f      	lsls	r7, r7, #16
 800223c:	4339      	orrs	r1, r7
 800223e:	2b38      	cmp	r3, #56	; 0x38
 8002240:	dc00      	bgt.n	8002244 <__aeabi_dsub+0x1b4>
 8002242:	e0fd      	b.n	8002440 <__aeabi_dsub+0x3b0>
 8002244:	430a      	orrs	r2, r1
 8002246:	0017      	movs	r7, r2
 8002248:	2100      	movs	r1, #0
 800224a:	1e7a      	subs	r2, r7, #1
 800224c:	4197      	sbcs	r7, r2
 800224e:	4457      	add	r7, sl
 8002250:	4557      	cmp	r7, sl
 8002252:	4180      	sbcs	r0, r0
 8002254:	1909      	adds	r1, r1, r4
 8002256:	4244      	negs	r4, r0
 8002258:	190c      	adds	r4, r1, r4
 800225a:	0223      	lsls	r3, r4, #8
 800225c:	d53a      	bpl.n	80022d4 <__aeabi_dsub+0x244>
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <__aeabi_dsub+0x344>)
 8002260:	3601      	adds	r6, #1
 8002262:	429e      	cmp	r6, r3
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x1d8>
 8002266:	e14b      	b.n	8002500 <__aeabi_dsub+0x470>
 8002268:	2201      	movs	r2, #1
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <__aeabi_dsub+0x348>)
 800226c:	401c      	ands	r4, r3
 800226e:	087b      	lsrs	r3, r7, #1
 8002270:	4017      	ands	r7, r2
 8002272:	431f      	orrs	r7, r3
 8002274:	07e2      	lsls	r2, r4, #31
 8002276:	4317      	orrs	r7, r2
 8002278:	0864      	lsrs	r4, r4, #1
 800227a:	e78f      	b.n	800219c <__aeabi_dsub+0x10c>
 800227c:	0008      	movs	r0, r1
 800227e:	4310      	orrs	r0, r2
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x1f4>
 8002282:	e724      	b.n	80020ce <__aeabi_dsub+0x3e>
 8002284:	e721      	b.n	80020ca <__aeabi_dsub+0x3a>
 8002286:	0023      	movs	r3, r4
 8002288:	433b      	orrs	r3, r7
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x1fe>
 800228c:	e1b9      	b.n	8002602 <__aeabi_dsub+0x572>
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0312      	lsls	r2, r2, #12
 8002292:	4314      	orrs	r4, r2
 8002294:	0324      	lsls	r4, r4, #12
 8002296:	0b24      	lsrs	r4, r4, #12
 8002298:	e79f      	b.n	80021da <__aeabi_dsub+0x14a>
 800229a:	002e      	movs	r6, r5
 800229c:	e77e      	b.n	800219c <__aeabi_dsub+0x10c>
 800229e:	0008      	movs	r0, r1
 80022a0:	4310      	orrs	r0, r2
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dsub+0x216>
 80022a4:	e0ca      	b.n	800243c <__aeabi_dsub+0x3ac>
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	4684      	mov	ip, r0
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d000      	beq.n	80022b0 <__aeabi_dsub+0x220>
 80022ae:	e0e7      	b.n	8002480 <__aeabi_dsub+0x3f0>
 80022b0:	4452      	add	r2, sl
 80022b2:	4552      	cmp	r2, sl
 80022b4:	4180      	sbcs	r0, r0
 80022b6:	1864      	adds	r4, r4, r1
 80022b8:	4240      	negs	r0, r0
 80022ba:	1824      	adds	r4, r4, r0
 80022bc:	0017      	movs	r7, r2
 80022be:	2601      	movs	r6, #1
 80022c0:	0223      	lsls	r3, r4, #8
 80022c2:	d507      	bpl.n	80022d4 <__aeabi_dsub+0x244>
 80022c4:	2602      	movs	r6, #2
 80022c6:	e7cf      	b.n	8002268 <__aeabi_dsub+0x1d8>
 80022c8:	4664      	mov	r4, ip
 80022ca:	432c      	orrs	r4, r5
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x240>
 80022ce:	e1b3      	b.n	8002638 <__aeabi_dsub+0x5a8>
 80022d0:	002c      	movs	r4, r5
 80022d2:	4667      	mov	r7, ip
 80022d4:	077b      	lsls	r3, r7, #29
 80022d6:	d000      	beq.n	80022da <__aeabi_dsub+0x24a>
 80022d8:	e762      	b.n	80021a0 <__aeabi_dsub+0x110>
 80022da:	0763      	lsls	r3, r4, #29
 80022dc:	08ff      	lsrs	r7, r7, #3
 80022de:	431f      	orrs	r7, r3
 80022e0:	2501      	movs	r5, #1
 80022e2:	4643      	mov	r3, r8
 80022e4:	08e4      	lsrs	r4, r4, #3
 80022e6:	401d      	ands	r5, r3
 80022e8:	e793      	b.n	8002212 <__aeabi_dsub+0x182>
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	d178      	bne.n	80023e0 <__aeabi_dsub+0x350>
 80022ee:	1c75      	adds	r5, r6, #1
 80022f0:	056d      	lsls	r5, r5, #21
 80022f2:	0d6d      	lsrs	r5, r5, #21
 80022f4:	2d01      	cmp	r5, #1
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x26a>
 80022f8:	e0f2      	b.n	80024e0 <__aeabi_dsub+0x450>
 80022fa:	4650      	mov	r0, sl
 80022fc:	1a80      	subs	r0, r0, r2
 80022fe:	4582      	cmp	sl, r0
 8002300:	41bf      	sbcs	r7, r7
 8002302:	1a65      	subs	r5, r4, r1
 8002304:	427f      	negs	r7, r7
 8002306:	1bed      	subs	r5, r5, r7
 8002308:	4684      	mov	ip, r0
 800230a:	0228      	lsls	r0, r5, #8
 800230c:	d400      	bmi.n	8002310 <__aeabi_dsub+0x280>
 800230e:	e08c      	b.n	800242a <__aeabi_dsub+0x39a>
 8002310:	4650      	mov	r0, sl
 8002312:	1a17      	subs	r7, r2, r0
 8002314:	42ba      	cmp	r2, r7
 8002316:	4192      	sbcs	r2, r2
 8002318:	1b0c      	subs	r4, r1, r4
 800231a:	4255      	negs	r5, r2
 800231c:	1b65      	subs	r5, r4, r5
 800231e:	4698      	mov	r8, r3
 8002320:	e714      	b.n	800214c <__aeabi_dsub+0xbc>
 8002322:	2501      	movs	r5, #1
 8002324:	4643      	mov	r3, r8
 8002326:	2400      	movs	r4, #0
 8002328:	401d      	ands	r5, r3
 800232a:	2700      	movs	r7, #0
 800232c:	e755      	b.n	80021da <__aeabi_dsub+0x14a>
 800232e:	4c2a      	ldr	r4, [pc, #168]	; (80023d8 <__aeabi_dsub+0x348>)
 8002330:	1af6      	subs	r6, r6, r3
 8002332:	402c      	ands	r4, r5
 8002334:	e732      	b.n	800219c <__aeabi_dsub+0x10c>
 8002336:	003d      	movs	r5, r7
 8002338:	3828      	subs	r0, #40	; 0x28
 800233a:	4085      	lsls	r5, r0
 800233c:	2700      	movs	r7, #0
 800233e:	e717      	b.n	8002170 <__aeabi_dsub+0xe0>
 8002340:	0038      	movs	r0, r7
 8002342:	f000 fad9 	bl	80028f8 <__clzsi2>
 8002346:	3020      	adds	r0, #32
 8002348:	e706      	b.n	8002158 <__aeabi_dsub+0xc8>
 800234a:	430a      	orrs	r2, r1
 800234c:	0017      	movs	r7, r2
 800234e:	2100      	movs	r1, #0
 8002350:	1e7a      	subs	r2, r7, #1
 8002352:	4197      	sbcs	r7, r2
 8002354:	e6ee      	b.n	8002134 <__aeabi_dsub+0xa4>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <__aeabi_dsub+0x2cc>
 800235a:	e0e5      	b.n	8002528 <__aeabi_dsub+0x498>
 800235c:	1c73      	adds	r3, r6, #1
 800235e:	469c      	mov	ip, r3
 8002360:	055b      	lsls	r3, r3, #21
 8002362:	0d5b      	lsrs	r3, r3, #21
 8002364:	2b01      	cmp	r3, #1
 8002366:	dc00      	bgt.n	800236a <__aeabi_dsub+0x2da>
 8002368:	e09f      	b.n	80024aa <__aeabi_dsub+0x41a>
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <__aeabi_dsub+0x344>)
 800236c:	459c      	cmp	ip, r3
 800236e:	d100      	bne.n	8002372 <__aeabi_dsub+0x2e2>
 8002370:	e0c5      	b.n	80024fe <__aeabi_dsub+0x46e>
 8002372:	4452      	add	r2, sl
 8002374:	4552      	cmp	r2, sl
 8002376:	4180      	sbcs	r0, r0
 8002378:	1864      	adds	r4, r4, r1
 800237a:	4240      	negs	r0, r0
 800237c:	1824      	adds	r4, r4, r0
 800237e:	07e7      	lsls	r7, r4, #31
 8002380:	0852      	lsrs	r2, r2, #1
 8002382:	4317      	orrs	r7, r2
 8002384:	0864      	lsrs	r4, r4, #1
 8002386:	4666      	mov	r6, ip
 8002388:	e708      	b.n	800219c <__aeabi_dsub+0x10c>
 800238a:	4812      	ldr	r0, [pc, #72]	; (80023d4 <__aeabi_dsub+0x344>)
 800238c:	4285      	cmp	r5, r0
 800238e:	d100      	bne.n	8002392 <__aeabi_dsub+0x302>
 8002390:	e085      	b.n	800249e <__aeabi_dsub+0x40e>
 8002392:	001d      	movs	r5, r3
 8002394:	e6bc      	b.n	8002110 <__aeabi_dsub+0x80>
 8002396:	0029      	movs	r1, r5
 8002398:	3e1f      	subs	r6, #31
 800239a:	40f1      	lsrs	r1, r6
 800239c:	2b20      	cmp	r3, #32
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x312>
 80023a0:	e07f      	b.n	80024a2 <__aeabi_dsub+0x412>
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	409d      	lsls	r5, r3
 80023a8:	432f      	orrs	r7, r5
 80023aa:	1e7d      	subs	r5, r7, #1
 80023ac:	41af      	sbcs	r7, r5
 80023ae:	2400      	movs	r4, #0
 80023b0:	430f      	orrs	r7, r1
 80023b2:	2600      	movs	r6, #0
 80023b4:	e78e      	b.n	80022d4 <__aeabi_dsub+0x244>
 80023b6:	002b      	movs	r3, r5
 80023b8:	000f      	movs	r7, r1
 80023ba:	3b20      	subs	r3, #32
 80023bc:	40df      	lsrs	r7, r3
 80023be:	2d20      	cmp	r5, #32
 80023c0:	d071      	beq.n	80024a6 <__aeabi_dsub+0x416>
 80023c2:	2340      	movs	r3, #64	; 0x40
 80023c4:	1b5d      	subs	r5, r3, r5
 80023c6:	40a9      	lsls	r1, r5
 80023c8:	430a      	orrs	r2, r1
 80023ca:	1e51      	subs	r1, r2, #1
 80023cc:	418a      	sbcs	r2, r1
 80023ce:	2100      	movs	r1, #0
 80023d0:	4317      	orrs	r7, r2
 80023d2:	e6af      	b.n	8002134 <__aeabi_dsub+0xa4>
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	ff7fffff 	.word	0xff7fffff
 80023dc:	800fffff 	.word	0x800fffff
 80023e0:	2e00      	cmp	r6, #0
 80023e2:	d03e      	beq.n	8002462 <__aeabi_dsub+0x3d2>
 80023e4:	4eb3      	ldr	r6, [pc, #716]	; (80026b4 <__aeabi_dsub+0x624>)
 80023e6:	45b4      	cmp	ip, r6
 80023e8:	d045      	beq.n	8002476 <__aeabi_dsub+0x3e6>
 80023ea:	2680      	movs	r6, #128	; 0x80
 80023ec:	0436      	lsls	r6, r6, #16
 80023ee:	426d      	negs	r5, r5
 80023f0:	4334      	orrs	r4, r6
 80023f2:	2d38      	cmp	r5, #56	; 0x38
 80023f4:	dd00      	ble.n	80023f8 <__aeabi_dsub+0x368>
 80023f6:	e0a8      	b.n	800254a <__aeabi_dsub+0x4ba>
 80023f8:	2d1f      	cmp	r5, #31
 80023fa:	dd00      	ble.n	80023fe <__aeabi_dsub+0x36e>
 80023fc:	e11f      	b.n	800263e <__aeabi_dsub+0x5ae>
 80023fe:	2620      	movs	r6, #32
 8002400:	0027      	movs	r7, r4
 8002402:	4650      	mov	r0, sl
 8002404:	1b76      	subs	r6, r6, r5
 8002406:	40b7      	lsls	r7, r6
 8002408:	40e8      	lsrs	r0, r5
 800240a:	4307      	orrs	r7, r0
 800240c:	4650      	mov	r0, sl
 800240e:	40b0      	lsls	r0, r6
 8002410:	1e46      	subs	r6, r0, #1
 8002412:	41b0      	sbcs	r0, r6
 8002414:	40ec      	lsrs	r4, r5
 8002416:	4338      	orrs	r0, r7
 8002418:	1a17      	subs	r7, r2, r0
 800241a:	42ba      	cmp	r2, r7
 800241c:	4192      	sbcs	r2, r2
 800241e:	1b0c      	subs	r4, r1, r4
 8002420:	4252      	negs	r2, r2
 8002422:	1aa4      	subs	r4, r4, r2
 8002424:	4666      	mov	r6, ip
 8002426:	4698      	mov	r8, r3
 8002428:	e68b      	b.n	8002142 <__aeabi_dsub+0xb2>
 800242a:	4664      	mov	r4, ip
 800242c:	4667      	mov	r7, ip
 800242e:	432c      	orrs	r4, r5
 8002430:	d000      	beq.n	8002434 <__aeabi_dsub+0x3a4>
 8002432:	e68b      	b.n	800214c <__aeabi_dsub+0xbc>
 8002434:	2500      	movs	r5, #0
 8002436:	2600      	movs	r6, #0
 8002438:	2700      	movs	r7, #0
 800243a:	e6ea      	b.n	8002212 <__aeabi_dsub+0x182>
 800243c:	001e      	movs	r6, r3
 800243e:	e6ad      	b.n	800219c <__aeabi_dsub+0x10c>
 8002440:	2b1f      	cmp	r3, #31
 8002442:	dc60      	bgt.n	8002506 <__aeabi_dsub+0x476>
 8002444:	2720      	movs	r7, #32
 8002446:	1af8      	subs	r0, r7, r3
 8002448:	000f      	movs	r7, r1
 800244a:	4684      	mov	ip, r0
 800244c:	4087      	lsls	r7, r0
 800244e:	0010      	movs	r0, r2
 8002450:	40d8      	lsrs	r0, r3
 8002452:	4307      	orrs	r7, r0
 8002454:	4660      	mov	r0, ip
 8002456:	4082      	lsls	r2, r0
 8002458:	1e50      	subs	r0, r2, #1
 800245a:	4182      	sbcs	r2, r0
 800245c:	40d9      	lsrs	r1, r3
 800245e:	4317      	orrs	r7, r2
 8002460:	e6f5      	b.n	800224e <__aeabi_dsub+0x1be>
 8002462:	0026      	movs	r6, r4
 8002464:	4650      	mov	r0, sl
 8002466:	4306      	orrs	r6, r0
 8002468:	d005      	beq.n	8002476 <__aeabi_dsub+0x3e6>
 800246a:	43ed      	mvns	r5, r5
 800246c:	2d00      	cmp	r5, #0
 800246e:	d0d3      	beq.n	8002418 <__aeabi_dsub+0x388>
 8002470:	4e90      	ldr	r6, [pc, #576]	; (80026b4 <__aeabi_dsub+0x624>)
 8002472:	45b4      	cmp	ip, r6
 8002474:	d1bd      	bne.n	80023f2 <__aeabi_dsub+0x362>
 8002476:	000c      	movs	r4, r1
 8002478:	0017      	movs	r7, r2
 800247a:	4666      	mov	r6, ip
 800247c:	4698      	mov	r8, r3
 800247e:	e68d      	b.n	800219c <__aeabi_dsub+0x10c>
 8002480:	488c      	ldr	r0, [pc, #560]	; (80026b4 <__aeabi_dsub+0x624>)
 8002482:	4283      	cmp	r3, r0
 8002484:	d00b      	beq.n	800249e <__aeabi_dsub+0x40e>
 8002486:	4663      	mov	r3, ip
 8002488:	e6d9      	b.n	800223e <__aeabi_dsub+0x1ae>
 800248a:	2d00      	cmp	r5, #0
 800248c:	d000      	beq.n	8002490 <__aeabi_dsub+0x400>
 800248e:	e096      	b.n	80025be <__aeabi_dsub+0x52e>
 8002490:	0008      	movs	r0, r1
 8002492:	4310      	orrs	r0, r2
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x408>
 8002496:	e0e2      	b.n	800265e <__aeabi_dsub+0x5ce>
 8002498:	000c      	movs	r4, r1
 800249a:	0017      	movs	r7, r2
 800249c:	4698      	mov	r8, r3
 800249e:	4e85      	ldr	r6, [pc, #532]	; (80026b4 <__aeabi_dsub+0x624>)
 80024a0:	e67c      	b.n	800219c <__aeabi_dsub+0x10c>
 80024a2:	2500      	movs	r5, #0
 80024a4:	e780      	b.n	80023a8 <__aeabi_dsub+0x318>
 80024a6:	2100      	movs	r1, #0
 80024a8:	e78e      	b.n	80023c8 <__aeabi_dsub+0x338>
 80024aa:	0023      	movs	r3, r4
 80024ac:	4650      	mov	r0, sl
 80024ae:	4303      	orrs	r3, r0
 80024b0:	2e00      	cmp	r6, #0
 80024b2:	d000      	beq.n	80024b6 <__aeabi_dsub+0x426>
 80024b4:	e0a8      	b.n	8002608 <__aeabi_dsub+0x578>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x42c>
 80024ba:	e0de      	b.n	800267a <__aeabi_dsub+0x5ea>
 80024bc:	000b      	movs	r3, r1
 80024be:	4313      	orrs	r3, r2
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x434>
 80024c2:	e66b      	b.n	800219c <__aeabi_dsub+0x10c>
 80024c4:	4452      	add	r2, sl
 80024c6:	4552      	cmp	r2, sl
 80024c8:	4180      	sbcs	r0, r0
 80024ca:	1864      	adds	r4, r4, r1
 80024cc:	4240      	negs	r0, r0
 80024ce:	1824      	adds	r4, r4, r0
 80024d0:	0017      	movs	r7, r2
 80024d2:	0223      	lsls	r3, r4, #8
 80024d4:	d400      	bmi.n	80024d8 <__aeabi_dsub+0x448>
 80024d6:	e6fd      	b.n	80022d4 <__aeabi_dsub+0x244>
 80024d8:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <__aeabi_dsub+0x628>)
 80024da:	4666      	mov	r6, ip
 80024dc:	401c      	ands	r4, r3
 80024de:	e65d      	b.n	800219c <__aeabi_dsub+0x10c>
 80024e0:	0025      	movs	r5, r4
 80024e2:	4650      	mov	r0, sl
 80024e4:	4305      	orrs	r5, r0
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	d1cf      	bne.n	800248a <__aeabi_dsub+0x3fa>
 80024ea:	2d00      	cmp	r5, #0
 80024ec:	d14f      	bne.n	800258e <__aeabi_dsub+0x4fe>
 80024ee:	000c      	movs	r4, r1
 80024f0:	4314      	orrs	r4, r2
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x466>
 80024f4:	e0a0      	b.n	8002638 <__aeabi_dsub+0x5a8>
 80024f6:	000c      	movs	r4, r1
 80024f8:	0017      	movs	r7, r2
 80024fa:	4698      	mov	r8, r3
 80024fc:	e64e      	b.n	800219c <__aeabi_dsub+0x10c>
 80024fe:	4666      	mov	r6, ip
 8002500:	2400      	movs	r4, #0
 8002502:	2700      	movs	r7, #0
 8002504:	e685      	b.n	8002212 <__aeabi_dsub+0x182>
 8002506:	001f      	movs	r7, r3
 8002508:	0008      	movs	r0, r1
 800250a:	3f20      	subs	r7, #32
 800250c:	40f8      	lsrs	r0, r7
 800250e:	0007      	movs	r7, r0
 8002510:	2b20      	cmp	r3, #32
 8002512:	d100      	bne.n	8002516 <__aeabi_dsub+0x486>
 8002514:	e08e      	b.n	8002634 <__aeabi_dsub+0x5a4>
 8002516:	2040      	movs	r0, #64	; 0x40
 8002518:	1ac3      	subs	r3, r0, r3
 800251a:	4099      	lsls	r1, r3
 800251c:	430a      	orrs	r2, r1
 800251e:	1e51      	subs	r1, r2, #1
 8002520:	418a      	sbcs	r2, r1
 8002522:	2100      	movs	r1, #0
 8002524:	4317      	orrs	r7, r2
 8002526:	e692      	b.n	800224e <__aeabi_dsub+0x1be>
 8002528:	2e00      	cmp	r6, #0
 800252a:	d114      	bne.n	8002556 <__aeabi_dsub+0x4c6>
 800252c:	0026      	movs	r6, r4
 800252e:	4650      	mov	r0, sl
 8002530:	4306      	orrs	r6, r0
 8002532:	d062      	beq.n	80025fa <__aeabi_dsub+0x56a>
 8002534:	43db      	mvns	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d15c      	bne.n	80025f4 <__aeabi_dsub+0x564>
 800253a:	1887      	adds	r7, r0, r2
 800253c:	4297      	cmp	r7, r2
 800253e:	4192      	sbcs	r2, r2
 8002540:	1864      	adds	r4, r4, r1
 8002542:	4252      	negs	r2, r2
 8002544:	18a4      	adds	r4, r4, r2
 8002546:	4666      	mov	r6, ip
 8002548:	e687      	b.n	800225a <__aeabi_dsub+0x1ca>
 800254a:	4650      	mov	r0, sl
 800254c:	4320      	orrs	r0, r4
 800254e:	1e44      	subs	r4, r0, #1
 8002550:	41a0      	sbcs	r0, r4
 8002552:	2400      	movs	r4, #0
 8002554:	e760      	b.n	8002418 <__aeabi_dsub+0x388>
 8002556:	4e57      	ldr	r6, [pc, #348]	; (80026b4 <__aeabi_dsub+0x624>)
 8002558:	45b4      	cmp	ip, r6
 800255a:	d04e      	beq.n	80025fa <__aeabi_dsub+0x56a>
 800255c:	2680      	movs	r6, #128	; 0x80
 800255e:	0436      	lsls	r6, r6, #16
 8002560:	425b      	negs	r3, r3
 8002562:	4334      	orrs	r4, r6
 8002564:	2b38      	cmp	r3, #56	; 0x38
 8002566:	dd00      	ble.n	800256a <__aeabi_dsub+0x4da>
 8002568:	e07f      	b.n	800266a <__aeabi_dsub+0x5da>
 800256a:	2b1f      	cmp	r3, #31
 800256c:	dd00      	ble.n	8002570 <__aeabi_dsub+0x4e0>
 800256e:	e08b      	b.n	8002688 <__aeabi_dsub+0x5f8>
 8002570:	2620      	movs	r6, #32
 8002572:	0027      	movs	r7, r4
 8002574:	4650      	mov	r0, sl
 8002576:	1af6      	subs	r6, r6, r3
 8002578:	40b7      	lsls	r7, r6
 800257a:	40d8      	lsrs	r0, r3
 800257c:	4307      	orrs	r7, r0
 800257e:	4650      	mov	r0, sl
 8002580:	40b0      	lsls	r0, r6
 8002582:	1e46      	subs	r6, r0, #1
 8002584:	41b0      	sbcs	r0, r6
 8002586:	4307      	orrs	r7, r0
 8002588:	40dc      	lsrs	r4, r3
 800258a:	18bf      	adds	r7, r7, r2
 800258c:	e7d6      	b.n	800253c <__aeabi_dsub+0x4ac>
 800258e:	000d      	movs	r5, r1
 8002590:	4315      	orrs	r5, r2
 8002592:	d100      	bne.n	8002596 <__aeabi_dsub+0x506>
 8002594:	e602      	b.n	800219c <__aeabi_dsub+0x10c>
 8002596:	4650      	mov	r0, sl
 8002598:	1a80      	subs	r0, r0, r2
 800259a:	4582      	cmp	sl, r0
 800259c:	41bf      	sbcs	r7, r7
 800259e:	1a65      	subs	r5, r4, r1
 80025a0:	427f      	negs	r7, r7
 80025a2:	1bed      	subs	r5, r5, r7
 80025a4:	4684      	mov	ip, r0
 80025a6:	0228      	lsls	r0, r5, #8
 80025a8:	d400      	bmi.n	80025ac <__aeabi_dsub+0x51c>
 80025aa:	e68d      	b.n	80022c8 <__aeabi_dsub+0x238>
 80025ac:	4650      	mov	r0, sl
 80025ae:	1a17      	subs	r7, r2, r0
 80025b0:	42ba      	cmp	r2, r7
 80025b2:	4192      	sbcs	r2, r2
 80025b4:	1b0c      	subs	r4, r1, r4
 80025b6:	4252      	negs	r2, r2
 80025b8:	1aa4      	subs	r4, r4, r2
 80025ba:	4698      	mov	r8, r3
 80025bc:	e5ee      	b.n	800219c <__aeabi_dsub+0x10c>
 80025be:	000d      	movs	r5, r1
 80025c0:	4315      	orrs	r5, r2
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dsub+0x536>
 80025c4:	e76b      	b.n	800249e <__aeabi_dsub+0x40e>
 80025c6:	4650      	mov	r0, sl
 80025c8:	0767      	lsls	r7, r4, #29
 80025ca:	08c0      	lsrs	r0, r0, #3
 80025cc:	4307      	orrs	r7, r0
 80025ce:	2080      	movs	r0, #128	; 0x80
 80025d0:	08e4      	lsrs	r4, r4, #3
 80025d2:	0300      	lsls	r0, r0, #12
 80025d4:	4204      	tst	r4, r0
 80025d6:	d007      	beq.n	80025e8 <__aeabi_dsub+0x558>
 80025d8:	08cd      	lsrs	r5, r1, #3
 80025da:	4205      	tst	r5, r0
 80025dc:	d104      	bne.n	80025e8 <__aeabi_dsub+0x558>
 80025de:	002c      	movs	r4, r5
 80025e0:	4698      	mov	r8, r3
 80025e2:	08d7      	lsrs	r7, r2, #3
 80025e4:	0749      	lsls	r1, r1, #29
 80025e6:	430f      	orrs	r7, r1
 80025e8:	0f7b      	lsrs	r3, r7, #29
 80025ea:	00e4      	lsls	r4, r4, #3
 80025ec:	431c      	orrs	r4, r3
 80025ee:	00ff      	lsls	r7, r7, #3
 80025f0:	4e30      	ldr	r6, [pc, #192]	; (80026b4 <__aeabi_dsub+0x624>)
 80025f2:	e5d3      	b.n	800219c <__aeabi_dsub+0x10c>
 80025f4:	4e2f      	ldr	r6, [pc, #188]	; (80026b4 <__aeabi_dsub+0x624>)
 80025f6:	45b4      	cmp	ip, r6
 80025f8:	d1b4      	bne.n	8002564 <__aeabi_dsub+0x4d4>
 80025fa:	000c      	movs	r4, r1
 80025fc:	0017      	movs	r7, r2
 80025fe:	4666      	mov	r6, ip
 8002600:	e5cc      	b.n	800219c <__aeabi_dsub+0x10c>
 8002602:	2700      	movs	r7, #0
 8002604:	2400      	movs	r4, #0
 8002606:	e5e8      	b.n	80021da <__aeabi_dsub+0x14a>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d039      	beq.n	8002680 <__aeabi_dsub+0x5f0>
 800260c:	000b      	movs	r3, r1
 800260e:	4313      	orrs	r3, r2
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x584>
 8002612:	e744      	b.n	800249e <__aeabi_dsub+0x40e>
 8002614:	08c0      	lsrs	r0, r0, #3
 8002616:	0767      	lsls	r7, r4, #29
 8002618:	4307      	orrs	r7, r0
 800261a:	2080      	movs	r0, #128	; 0x80
 800261c:	08e4      	lsrs	r4, r4, #3
 800261e:	0300      	lsls	r0, r0, #12
 8002620:	4204      	tst	r4, r0
 8002622:	d0e1      	beq.n	80025e8 <__aeabi_dsub+0x558>
 8002624:	08cb      	lsrs	r3, r1, #3
 8002626:	4203      	tst	r3, r0
 8002628:	d1de      	bne.n	80025e8 <__aeabi_dsub+0x558>
 800262a:	08d7      	lsrs	r7, r2, #3
 800262c:	0749      	lsls	r1, r1, #29
 800262e:	430f      	orrs	r7, r1
 8002630:	001c      	movs	r4, r3
 8002632:	e7d9      	b.n	80025e8 <__aeabi_dsub+0x558>
 8002634:	2100      	movs	r1, #0
 8002636:	e771      	b.n	800251c <__aeabi_dsub+0x48c>
 8002638:	2500      	movs	r5, #0
 800263a:	2700      	movs	r7, #0
 800263c:	e5e9      	b.n	8002212 <__aeabi_dsub+0x182>
 800263e:	002e      	movs	r6, r5
 8002640:	0027      	movs	r7, r4
 8002642:	3e20      	subs	r6, #32
 8002644:	40f7      	lsrs	r7, r6
 8002646:	2d20      	cmp	r5, #32
 8002648:	d02f      	beq.n	80026aa <__aeabi_dsub+0x61a>
 800264a:	2640      	movs	r6, #64	; 0x40
 800264c:	1b75      	subs	r5, r6, r5
 800264e:	40ac      	lsls	r4, r5
 8002650:	4650      	mov	r0, sl
 8002652:	4320      	orrs	r0, r4
 8002654:	1e44      	subs	r4, r0, #1
 8002656:	41a0      	sbcs	r0, r4
 8002658:	2400      	movs	r4, #0
 800265a:	4338      	orrs	r0, r7
 800265c:	e6dc      	b.n	8002418 <__aeabi_dsub+0x388>
 800265e:	2480      	movs	r4, #128	; 0x80
 8002660:	2500      	movs	r5, #0
 8002662:	0324      	lsls	r4, r4, #12
 8002664:	4e13      	ldr	r6, [pc, #76]	; (80026b4 <__aeabi_dsub+0x624>)
 8002666:	2700      	movs	r7, #0
 8002668:	e5d3      	b.n	8002212 <__aeabi_dsub+0x182>
 800266a:	4650      	mov	r0, sl
 800266c:	4320      	orrs	r0, r4
 800266e:	0007      	movs	r7, r0
 8002670:	1e78      	subs	r0, r7, #1
 8002672:	4187      	sbcs	r7, r0
 8002674:	2400      	movs	r4, #0
 8002676:	18bf      	adds	r7, r7, r2
 8002678:	e760      	b.n	800253c <__aeabi_dsub+0x4ac>
 800267a:	000c      	movs	r4, r1
 800267c:	0017      	movs	r7, r2
 800267e:	e58d      	b.n	800219c <__aeabi_dsub+0x10c>
 8002680:	000c      	movs	r4, r1
 8002682:	0017      	movs	r7, r2
 8002684:	4e0b      	ldr	r6, [pc, #44]	; (80026b4 <__aeabi_dsub+0x624>)
 8002686:	e589      	b.n	800219c <__aeabi_dsub+0x10c>
 8002688:	001e      	movs	r6, r3
 800268a:	0027      	movs	r7, r4
 800268c:	3e20      	subs	r6, #32
 800268e:	40f7      	lsrs	r7, r6
 8002690:	2b20      	cmp	r3, #32
 8002692:	d00c      	beq.n	80026ae <__aeabi_dsub+0x61e>
 8002694:	2640      	movs	r6, #64	; 0x40
 8002696:	1af3      	subs	r3, r6, r3
 8002698:	409c      	lsls	r4, r3
 800269a:	4650      	mov	r0, sl
 800269c:	4320      	orrs	r0, r4
 800269e:	1e44      	subs	r4, r0, #1
 80026a0:	41a0      	sbcs	r0, r4
 80026a2:	4307      	orrs	r7, r0
 80026a4:	2400      	movs	r4, #0
 80026a6:	18bf      	adds	r7, r7, r2
 80026a8:	e748      	b.n	800253c <__aeabi_dsub+0x4ac>
 80026aa:	2400      	movs	r4, #0
 80026ac:	e7d0      	b.n	8002650 <__aeabi_dsub+0x5c0>
 80026ae:	2400      	movs	r4, #0
 80026b0:	e7f3      	b.n	800269a <__aeabi_dsub+0x60a>
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	000007ff 	.word	0x000007ff
 80026b8:	ff7fffff 	.word	0xff7fffff

080026bc <__aeabi_i2d>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	2800      	cmp	r0, #0
 80026c0:	d030      	beq.n	8002724 <__aeabi_i2d+0x68>
 80026c2:	17c3      	asrs	r3, r0, #31
 80026c4:	18c4      	adds	r4, r0, r3
 80026c6:	405c      	eors	r4, r3
 80026c8:	0fc5      	lsrs	r5, r0, #31
 80026ca:	0020      	movs	r0, r4
 80026cc:	f000 f914 	bl	80028f8 <__clzsi2>
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <__aeabi_i2d+0x74>)
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <__aeabi_i2d+0x78>)
 80026d4:	1a1b      	subs	r3, r3, r0
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	2a1f      	cmp	r2, #31
 80026da:	dd18      	ble.n	800270e <__aeabi_i2d+0x52>
 80026dc:	4a16      	ldr	r2, [pc, #88]	; (8002738 <__aeabi_i2d+0x7c>)
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	4094      	lsls	r4, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	0324      	lsls	r4, r4, #12
 80026e6:	055b      	lsls	r3, r3, #21
 80026e8:	0b24      	lsrs	r4, r4, #12
 80026ea:	0d5b      	lsrs	r3, r3, #21
 80026ec:	2100      	movs	r1, #0
 80026ee:	0010      	movs	r0, r2
 80026f0:	0324      	lsls	r4, r4, #12
 80026f2:	0d0a      	lsrs	r2, r1, #20
 80026f4:	0b24      	lsrs	r4, r4, #12
 80026f6:	0512      	lsls	r2, r2, #20
 80026f8:	4322      	orrs	r2, r4
 80026fa:	4c10      	ldr	r4, [pc, #64]	; (800273c <__aeabi_i2d+0x80>)
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	4022      	ands	r2, r4
 8002700:	4313      	orrs	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	07ed      	lsls	r5, r5, #31
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	432b      	orrs	r3, r5
 800270a:	0019      	movs	r1, r3
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	0021      	movs	r1, r4
 8002710:	4091      	lsls	r1, r2
 8002712:	000a      	movs	r2, r1
 8002714:	210b      	movs	r1, #11
 8002716:	1a08      	subs	r0, r1, r0
 8002718:	40c4      	lsrs	r4, r0
 800271a:	055b      	lsls	r3, r3, #21
 800271c:	0324      	lsls	r4, r4, #12
 800271e:	0b24      	lsrs	r4, r4, #12
 8002720:	0d5b      	lsrs	r3, r3, #21
 8002722:	e7e3      	b.n	80026ec <__aeabi_i2d+0x30>
 8002724:	2500      	movs	r5, #0
 8002726:	2300      	movs	r3, #0
 8002728:	2400      	movs	r4, #0
 800272a:	2200      	movs	r2, #0
 800272c:	e7de      	b.n	80026ec <__aeabi_i2d+0x30>
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	0000041e 	.word	0x0000041e
 8002734:	00000433 	.word	0x00000433
 8002738:	00000413 	.word	0x00000413
 800273c:	800fffff 	.word	0x800fffff

08002740 <__aeabi_f2d>:
 8002740:	0041      	lsls	r1, r0, #1
 8002742:	0e09      	lsrs	r1, r1, #24
 8002744:	1c4b      	adds	r3, r1, #1
 8002746:	b570      	push	{r4, r5, r6, lr}
 8002748:	b2db      	uxtb	r3, r3
 800274a:	0246      	lsls	r6, r0, #9
 800274c:	0a75      	lsrs	r5, r6, #9
 800274e:	0fc4      	lsrs	r4, r0, #31
 8002750:	2b01      	cmp	r3, #1
 8002752:	dd14      	ble.n	800277e <__aeabi_f2d+0x3e>
 8002754:	23e0      	movs	r3, #224	; 0xe0
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	076d      	lsls	r5, r5, #29
 800275a:	0b36      	lsrs	r6, r6, #12
 800275c:	18cb      	adds	r3, r1, r3
 800275e:	2100      	movs	r1, #0
 8002760:	0d0a      	lsrs	r2, r1, #20
 8002762:	0028      	movs	r0, r5
 8002764:	0512      	lsls	r2, r2, #20
 8002766:	4d1c      	ldr	r5, [pc, #112]	; (80027d8 <__aeabi_f2d+0x98>)
 8002768:	4332      	orrs	r2, r6
 800276a:	055b      	lsls	r3, r3, #21
 800276c:	402a      	ands	r2, r5
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	4313      	orrs	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	07e4      	lsls	r4, r4, #31
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	4323      	orrs	r3, r4
 800277a:	0019      	movs	r1, r3
 800277c:	bd70      	pop	{r4, r5, r6, pc}
 800277e:	2900      	cmp	r1, #0
 8002780:	d114      	bne.n	80027ac <__aeabi_f2d+0x6c>
 8002782:	2d00      	cmp	r5, #0
 8002784:	d01e      	beq.n	80027c4 <__aeabi_f2d+0x84>
 8002786:	0028      	movs	r0, r5
 8002788:	f000 f8b6 	bl	80028f8 <__clzsi2>
 800278c:	280a      	cmp	r0, #10
 800278e:	dc1c      	bgt.n	80027ca <__aeabi_f2d+0x8a>
 8002790:	230b      	movs	r3, #11
 8002792:	002a      	movs	r2, r5
 8002794:	1a1b      	subs	r3, r3, r0
 8002796:	40da      	lsrs	r2, r3
 8002798:	0003      	movs	r3, r0
 800279a:	3315      	adds	r3, #21
 800279c:	409d      	lsls	r5, r3
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <__aeabi_f2d+0x9c>)
 80027a0:	0312      	lsls	r2, r2, #12
 80027a2:	1a1b      	subs	r3, r3, r0
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	0b16      	lsrs	r6, r2, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e7d8      	b.n	800275e <__aeabi_f2d+0x1e>
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	d006      	beq.n	80027be <__aeabi_f2d+0x7e>
 80027b0:	0b32      	lsrs	r2, r6, #12
 80027b2:	2680      	movs	r6, #128	; 0x80
 80027b4:	0336      	lsls	r6, r6, #12
 80027b6:	076d      	lsls	r5, r5, #29
 80027b8:	4316      	orrs	r6, r2
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <__aeabi_f2d+0xa0>)
 80027bc:	e7cf      	b.n	800275e <__aeabi_f2d+0x1e>
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <__aeabi_f2d+0xa0>)
 80027c0:	2600      	movs	r6, #0
 80027c2:	e7cc      	b.n	800275e <__aeabi_f2d+0x1e>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2600      	movs	r6, #0
 80027c8:	e7c9      	b.n	800275e <__aeabi_f2d+0x1e>
 80027ca:	0003      	movs	r3, r0
 80027cc:	002a      	movs	r2, r5
 80027ce:	3b0b      	subs	r3, #11
 80027d0:	409a      	lsls	r2, r3
 80027d2:	2500      	movs	r5, #0
 80027d4:	e7e3      	b.n	800279e <__aeabi_f2d+0x5e>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	800fffff 	.word	0x800fffff
 80027dc:	00000389 	.word	0x00000389
 80027e0:	000007ff 	.word	0x000007ff

080027e4 <__aeabi_d2f>:
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	004c      	lsls	r4, r1, #1
 80027e8:	0d64      	lsrs	r4, r4, #21
 80027ea:	030b      	lsls	r3, r1, #12
 80027ec:	1c62      	adds	r2, r4, #1
 80027ee:	0f45      	lsrs	r5, r0, #29
 80027f0:	0a5b      	lsrs	r3, r3, #9
 80027f2:	0552      	lsls	r2, r2, #21
 80027f4:	432b      	orrs	r3, r5
 80027f6:	0fc9      	lsrs	r1, r1, #31
 80027f8:	00c5      	lsls	r5, r0, #3
 80027fa:	0d52      	lsrs	r2, r2, #21
 80027fc:	2a01      	cmp	r2, #1
 80027fe:	dd28      	ble.n	8002852 <__aeabi_d2f+0x6e>
 8002800:	4a3a      	ldr	r2, [pc, #232]	; (80028ec <__aeabi_d2f+0x108>)
 8002802:	18a6      	adds	r6, r4, r2
 8002804:	2efe      	cmp	r6, #254	; 0xfe
 8002806:	dc1b      	bgt.n	8002840 <__aeabi_d2f+0x5c>
 8002808:	2e00      	cmp	r6, #0
 800280a:	dd3e      	ble.n	800288a <__aeabi_d2f+0xa6>
 800280c:	0180      	lsls	r0, r0, #6
 800280e:	0002      	movs	r2, r0
 8002810:	1e50      	subs	r0, r2, #1
 8002812:	4182      	sbcs	r2, r0
 8002814:	0f6d      	lsrs	r5, r5, #29
 8002816:	432a      	orrs	r2, r5
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4313      	orrs	r3, r2
 800281c:	075a      	lsls	r2, r3, #29
 800281e:	d004      	beq.n	800282a <__aeabi_d2f+0x46>
 8002820:	220f      	movs	r2, #15
 8002822:	401a      	ands	r2, r3
 8002824:	2a04      	cmp	r2, #4
 8002826:	d000      	beq.n	800282a <__aeabi_d2f+0x46>
 8002828:	3304      	adds	r3, #4
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	04d2      	lsls	r2, r2, #19
 800282e:	401a      	ands	r2, r3
 8002830:	d05a      	beq.n	80028e8 <__aeabi_d2f+0x104>
 8002832:	3601      	adds	r6, #1
 8002834:	2eff      	cmp	r6, #255	; 0xff
 8002836:	d003      	beq.n	8002840 <__aeabi_d2f+0x5c>
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	0a5b      	lsrs	r3, r3, #9
 800283c:	b2f4      	uxtb	r4, r6
 800283e:	e001      	b.n	8002844 <__aeabi_d2f+0x60>
 8002840:	24ff      	movs	r4, #255	; 0xff
 8002842:	2300      	movs	r3, #0
 8002844:	0258      	lsls	r0, r3, #9
 8002846:	05e4      	lsls	r4, r4, #23
 8002848:	0a40      	lsrs	r0, r0, #9
 800284a:	07c9      	lsls	r1, r1, #31
 800284c:	4320      	orrs	r0, r4
 800284e:	4308      	orrs	r0, r1
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002852:	2c00      	cmp	r4, #0
 8002854:	d007      	beq.n	8002866 <__aeabi_d2f+0x82>
 8002856:	431d      	orrs	r5, r3
 8002858:	d0f2      	beq.n	8002840 <__aeabi_d2f+0x5c>
 800285a:	2080      	movs	r0, #128	; 0x80
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	0480      	lsls	r0, r0, #18
 8002860:	4303      	orrs	r3, r0
 8002862:	26ff      	movs	r6, #255	; 0xff
 8002864:	e7da      	b.n	800281c <__aeabi_d2f+0x38>
 8002866:	432b      	orrs	r3, r5
 8002868:	d003      	beq.n	8002872 <__aeabi_d2f+0x8e>
 800286a:	2305      	movs	r3, #5
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	2cff      	cmp	r4, #255	; 0xff
 8002870:	d003      	beq.n	800287a <__aeabi_d2f+0x96>
 8002872:	025b      	lsls	r3, r3, #9
 8002874:	0a5b      	lsrs	r3, r3, #9
 8002876:	b2e4      	uxtb	r4, r4
 8002878:	e7e4      	b.n	8002844 <__aeabi_d2f+0x60>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d032      	beq.n	80028e4 <__aeabi_d2f+0x100>
 800287e:	2080      	movs	r0, #128	; 0x80
 8002880:	03c0      	lsls	r0, r0, #15
 8002882:	4303      	orrs	r3, r0
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	e7dc      	b.n	8002844 <__aeabi_d2f+0x60>
 800288a:	0032      	movs	r2, r6
 800288c:	3217      	adds	r2, #23
 800288e:	db14      	blt.n	80028ba <__aeabi_d2f+0xd6>
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	271e      	movs	r7, #30
 8002894:	0412      	lsls	r2, r2, #16
 8002896:	4313      	orrs	r3, r2
 8002898:	1bbf      	subs	r7, r7, r6
 800289a:	2f1f      	cmp	r7, #31
 800289c:	dc0f      	bgt.n	80028be <__aeabi_d2f+0xda>
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <__aeabi_d2f+0x10c>)
 80028a0:	4694      	mov	ip, r2
 80028a2:	4464      	add	r4, ip
 80028a4:	002a      	movs	r2, r5
 80028a6:	40a5      	lsls	r5, r4
 80028a8:	002e      	movs	r6, r5
 80028aa:	40a3      	lsls	r3, r4
 80028ac:	1e75      	subs	r5, r6, #1
 80028ae:	41ae      	sbcs	r6, r5
 80028b0:	40fa      	lsrs	r2, r7
 80028b2:	4333      	orrs	r3, r6
 80028b4:	4313      	orrs	r3, r2
 80028b6:	2600      	movs	r6, #0
 80028b8:	e7b0      	b.n	800281c <__aeabi_d2f+0x38>
 80028ba:	2400      	movs	r4, #0
 80028bc:	e7d5      	b.n	800286a <__aeabi_d2f+0x86>
 80028be:	2202      	movs	r2, #2
 80028c0:	4252      	negs	r2, r2
 80028c2:	1b96      	subs	r6, r2, r6
 80028c4:	001a      	movs	r2, r3
 80028c6:	40f2      	lsrs	r2, r6
 80028c8:	2f20      	cmp	r7, #32
 80028ca:	d009      	beq.n	80028e0 <__aeabi_d2f+0xfc>
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <__aeabi_d2f+0x110>)
 80028ce:	4684      	mov	ip, r0
 80028d0:	4464      	add	r4, ip
 80028d2:	40a3      	lsls	r3, r4
 80028d4:	432b      	orrs	r3, r5
 80028d6:	1e5d      	subs	r5, r3, #1
 80028d8:	41ab      	sbcs	r3, r5
 80028da:	2600      	movs	r6, #0
 80028dc:	4313      	orrs	r3, r2
 80028de:	e79d      	b.n	800281c <__aeabi_d2f+0x38>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e7f7      	b.n	80028d4 <__aeabi_d2f+0xf0>
 80028e4:	2300      	movs	r3, #0
 80028e6:	e7ad      	b.n	8002844 <__aeabi_d2f+0x60>
 80028e8:	0034      	movs	r4, r6
 80028ea:	e7bf      	b.n	800286c <__aeabi_d2f+0x88>
 80028ec:	fffffc80 	.word	0xfffffc80
 80028f0:	fffffc82 	.word	0xfffffc82
 80028f4:	fffffca2 	.word	0xfffffca2

080028f8 <__clzsi2>:
 80028f8:	211c      	movs	r1, #28
 80028fa:	2301      	movs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	4298      	cmp	r0, r3
 8002900:	d301      	bcc.n	8002906 <__clzsi2+0xe>
 8002902:	0c00      	lsrs	r0, r0, #16
 8002904:	3910      	subs	r1, #16
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	4298      	cmp	r0, r3
 800290a:	d301      	bcc.n	8002910 <__clzsi2+0x18>
 800290c:	0a00      	lsrs	r0, r0, #8
 800290e:	3908      	subs	r1, #8
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	4298      	cmp	r0, r3
 8002914:	d301      	bcc.n	800291a <__clzsi2+0x22>
 8002916:	0900      	lsrs	r0, r0, #4
 8002918:	3904      	subs	r1, #4
 800291a:	a202      	add	r2, pc, #8	; (adr r2, 8002924 <__clzsi2+0x2c>)
 800291c:	5c10      	ldrb	r0, [r2, r0]
 800291e:	1840      	adds	r0, r0, r1
 8002920:	4770      	bx	lr
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	02020304 	.word	0x02020304
 8002928:	01010101 	.word	0x01010101
	...

08002934 <GetMaxMinValues>:

uint8_t tempArray[64];

void GetMaxMinValues(void)
{
	if(mainData.maxX < mainData.currentX){
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <GetMaxMinValues+0x44>)
 8002936:	210c      	movs	r1, #12
 8002938:	5e5a      	ldrsh	r2, [r3, r1]
 800293a:	2108      	movs	r1, #8
 800293c:	5e5b      	ldrsh	r3, [r3, r1]
 800293e:	429a      	cmp	r2, r3
 8002940:	da01      	bge.n	8002946 <GetMaxMinValues+0x12>
		mainData.maxX = mainData.currentX;
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <GetMaxMinValues+0x44>)
 8002944:	8193      	strh	r3, [r2, #12]
	}
	if(mainData.minX > mainData.currentX){
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <GetMaxMinValues+0x44>)
 8002948:	2110      	movs	r1, #16
 800294a:	5e52      	ldrsh	r2, [r2, r1]
 800294c:	4293      	cmp	r3, r2
 800294e:	da01      	bge.n	8002954 <GetMaxMinValues+0x20>
		mainData.minX = mainData.currentX;
 8002950:	4a09      	ldr	r2, [pc, #36]	; (8002978 <GetMaxMinValues+0x44>)
 8002952:	8213      	strh	r3, [r2, #16]
	}

	if(mainData.maxY < mainData.currentY){
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <GetMaxMinValues+0x44>)
 8002956:	210e      	movs	r1, #14
 8002958:	5e5a      	ldrsh	r2, [r3, r1]
 800295a:	210a      	movs	r1, #10
 800295c:	5e5b      	ldrsh	r3, [r3, r1]
 800295e:	429a      	cmp	r2, r3
 8002960:	da01      	bge.n	8002966 <GetMaxMinValues+0x32>
		mainData.maxY = mainData.currentY;
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <GetMaxMinValues+0x44>)
 8002964:	81d3      	strh	r3, [r2, #14]
	}
	if(mainData.minY > mainData.currentY){
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <GetMaxMinValues+0x44>)
 8002968:	2112      	movs	r1, #18
 800296a:	5e52      	ldrsh	r2, [r2, r1]
 800296c:	4293      	cmp	r3, r2
 800296e:	da01      	bge.n	8002974 <GetMaxMinValues+0x40>
		mainData.minY = mainData.currentY;
 8002970:	4a01      	ldr	r2, [pc, #4]	; (8002978 <GetMaxMinValues+0x44>)
 8002972:	8253      	strh	r3, [r2, #18]
	}
}
 8002974:	4770      	bx	lr
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	200001d0 	.word	0x200001d0

0800297c <GetTempValues>:

void GetTempValues(void)
{
 800297c:	b510      	push	{r4, lr}
	TLEReadData(TLE_TEMP_VALUE, NULL);
 800297e:	2100      	movs	r1, #0
 8002980:	2002      	movs	r0, #2
 8002982:	f000 f8ed 	bl	8002b60 <TLEReadData>
}
 8002986:	bd10      	pop	{r4, pc}

08002988 <GetColibValues>:


void GetColibValues(void)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b085      	sub	sp, #20
	/*		Offset Definition
	================================================================*/
	mainData.colibData.offsetX = (mainData.maxX + mainData.minX) / 2;
 800298c:	4f30      	ldr	r7, [pc, #192]	; (8002a50 <GetColibValues+0xc8>)
 800298e:	230c      	movs	r3, #12
 8002990:	5ef9      	ldrsh	r1, [r7, r3]
 8002992:	2310      	movs	r3, #16
 8002994:	5efd      	ldrsh	r5, [r7, r3]
 8002996:	194b      	adds	r3, r1, r5
 8002998:	0fd8      	lsrs	r0, r3, #31
 800299a:	18c0      	adds	r0, r0, r3
 800299c:	1040      	asrs	r0, r0, #1
 800299e:	b200      	sxth	r0, r0
 80029a0:	82b8      	strh	r0, [r7, #20]
	mainData.colibData.offsetY = (mainData.maxY + mainData.minY) / 2;
 80029a2:	220e      	movs	r2, #14
 80029a4:	5ebb      	ldrsh	r3, [r7, r2]
 80029a6:	2412      	movs	r4, #18
 80029a8:	5f3a      	ldrsh	r2, [r7, r4]
 80029aa:	189e      	adds	r6, r3, r2
 80029ac:	0ff4      	lsrs	r4, r6, #31
 80029ae:	19a4      	adds	r4, r4, r6
 80029b0:	1064      	asrs	r4, r4, #1
 80029b2:	b224      	sxth	r4, r4
 80029b4:	82fc      	strh	r4, [r7, #22]

	/*		Amplitude Definition
	================================================================*/
	mainData.colibData.amplitudeX = (mainData.maxX - mainData.minX) / 2;
 80029b6:	1b4d      	subs	r5, r1, r5
 80029b8:	0fe9      	lsrs	r1, r5, #31
 80029ba:	1949      	adds	r1, r1, r5
 80029bc:	1049      	asrs	r1, r1, #1
 80029be:	8339      	strh	r1, [r7, #24]
	mainData.colibData.amplitudeY = (mainData.maxY - mainData.minY) / 2;
 80029c0:	1a9a      	subs	r2, r3, r2
 80029c2:	0fd3      	lsrs	r3, r2, #31
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	105b      	asrs	r3, r3, #1
 80029c8:	837b      	strh	r3, [r7, #26]

	/*		Temperature-Dependent Behavior
	================================================================*/
	mainData.colibData.tempGradX = 0.116296 + (0.0010147 * mainData.colibData.offsetX);
 80029ca:	f7ff fe77 	bl	80026bc <__aeabi_i2d>
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <GetColibValues+0xcc>)
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <GetColibValues+0xd0>)
 80029d2:	9000      	str	r0, [sp, #0]
 80029d4:	9101      	str	r1, [sp, #4]
 80029d6:	f7ff f8db 	bl	8001b90 <__aeabi_dmul>
 80029da:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <GetColibValues+0xd4>)
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <GetColibValues+0xd8>)
 80029de:	f7fe f993 	bl	8000d08 <__aeabi_dadd>
 80029e2:	f7ff feff 	bl	80027e4 <__aeabi_d2f>
 80029e6:	1c05      	adds	r5, r0, #0
 80029e8:	61f8      	str	r0, [r7, #28]
	mainData.colibData.tempGradY = -0.079401 + (0.0010121 * mainData.colibData.offsetY);
 80029ea:	0020      	movs	r0, r4
 80029ec:	f7ff fe66 	bl	80026bc <__aeabi_i2d>
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <GetColibValues+0xdc>)
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <GetColibValues+0xe0>)
 80029f4:	9002      	str	r0, [sp, #8]
 80029f6:	9103      	str	r1, [sp, #12]
 80029f8:	f7ff f8ca 	bl	8001b90 <__aeabi_dmul>
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <GetColibValues+0xe4>)
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <GetColibValues+0xe8>)
 8002a00:	f7ff fb46 	bl	8002090 <__aeabi_dsub>
 8002a04:	f7ff feee 	bl	80027e4 <__aeabi_d2f>
 8002a08:	1c04      	adds	r4, r0, #0
 8002a0a:	6238      	str	r0, [r7, #32]
	/*		Temperature-Dependent Offset Value
	================================================================*/
//	TLEReadData(TLE_TEMP_VALUE, &tleValues);
//	sysDataTLE.tempDepend.x = sysDataTLE.offset.x + (sysDataTLE.tempGrad.x / -188.75) * (tleValues[0] - sysDataTLE.tempX);
//	sysDataTLE.tempDepend.y = sysDataTLE.offset.y + (sysDataTLE.tempGrad.y / -188.75) * (tleValues[0] - sysDataTLE.tempX);
	mainData.colibData.tempDependX = mainData.colibData.offsetX + (mainData.colibData.tempGradX / -188.75);
 8002a0c:	1c28      	adds	r0, r5, #0
 8002a0e:	f7ff fe97 	bl	8002740 <__aeabi_f2d>
 8002a12:	2200      	movs	r2, #0
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <GetColibValues+0xec>)
 8002a16:	f7fe fc87 	bl	8001328 <__aeabi_ddiv>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	000b      	movs	r3, r1
 8002a1e:	9800      	ldr	r0, [sp, #0]
 8002a20:	9901      	ldr	r1, [sp, #4]
 8002a22:	f7fe f971 	bl	8000d08 <__aeabi_dadd>
 8002a26:	f7ff fedd 	bl	80027e4 <__aeabi_d2f>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24
	mainData.colibData.tempDependY = mainData.colibData.offsetY + (mainData.colibData.tempGradY / -188.75);
 8002a2c:	1c20      	adds	r0, r4, #0
 8002a2e:	f7ff fe87 	bl	8002740 <__aeabi_f2d>
 8002a32:	2200      	movs	r2, #0
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <GetColibValues+0xec>)
 8002a36:	f7fe fc77 	bl	8001328 <__aeabi_ddiv>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	000b      	movs	r3, r1
 8002a3e:	9802      	ldr	r0, [sp, #8]
 8002a40:	9903      	ldr	r1, [sp, #12]
 8002a42:	f7fe f961 	bl	8000d08 <__aeabi_dadd>
 8002a46:	f7ff fecd 	bl	80027e4 <__aeabi_d2f>
 8002a4a:	62b8      	str	r0, [r7, #40]	; 0x28

//	/*		Temperature-Dependent Offset Value
//	================================================================*/
////	TLEReadData(TLE_MAIN_VALUES, tleValues);
//	sysDataTLE.ortDef = cos(tleValues[0]) - sin(tleValues[1]);
}
 8002a4c:	b005      	add	sp, #20
 8002a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a50:	200001d0 	.word	0x200001d0
 8002a54:	d42d135f 	.word	0xd42d135f
 8002a58:	3f509ff5 	.word	0x3f509ff5
 8002a5c:	1ca7d673 	.word	0x1ca7d673
 8002a60:	3fbdc593 	.word	0x3fbdc593
 8002a64:	199e36b7 	.word	0x199e36b7
 8002a68:	3f50950e 	.word	0x3f50950e
 8002a6c:	ba450acc 	.word	0xba450acc
 8002a70:	3fb4539f 	.word	0x3fb4539f
 8002a74:	c0679800 	.word	0xc0679800

08002a78 <GetResultAngle>:

float GetResultAngle(void)
{
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float ampNormY;
	float radAngle;
	static float fi = 0;
	static float fiX = 0;

	TLEReadData(TLE_MAIN_VALUES, NULL);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f000 f86f 	bl	8002b60 <TLEReadData>
	GetMaxMinValues();
 8002a82:	f7ff ff57 	bl	8002934 <GetMaxMinValues>
	GetColibValues();
 8002a86:	f7ff ff7f 	bl	8002988 <GetColibValues>


	/*		Offset Correction
	================================================================*/
	offCorX = mainData.currentX - mainData.colibData.tempDependX;
 8002a8a:	4c30      	ldr	r4, [pc, #192]	; (8002b4c <GetResultAngle+0xd4>)
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	5ee0      	ldrsh	r0, [r4, r3]
 8002a90:	f7fe f8ea 	bl	8000c68 <__aeabi_i2f>
 8002a94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a96:	f7fd ff4b 	bl	8000930 <__aeabi_fsub>
 8002a9a:	1c05      	adds	r5, r0, #0
	offCorY = mainData.currentY - mainData.colibData.tempDependY;
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	5ee0      	ldrsh	r0, [r4, r3]
 8002aa0:	f7fe f8e2 	bl	8000c68 <__aeabi_i2f>
 8002aa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002aa6:	f7fd ff43 	bl	8000930 <__aeabi_fsub>
 8002aaa:	1c06      	adds	r6, r0, #0

	/*		Amplitude Normalization
	================================================================*/
	ampNormX = offCorX / mainData.colibData.amplitudeX;
 8002aac:	2318      	movs	r3, #24
 8002aae:	5ee0      	ldrsh	r0, [r4, r3]
 8002ab0:	f7fe f8da 	bl	8000c68 <__aeabi_i2f>
 8002ab4:	1c01      	adds	r1, r0, #0
 8002ab6:	1c28      	adds	r0, r5, #0
 8002ab8:	f7fd fc2a 	bl	8000310 <__aeabi_fdiv>
 8002abc:	1c05      	adds	r5, r0, #0
	ampNormY = offCorY / mainData.colibData.amplitudeY;
 8002abe:	231a      	movs	r3, #26
 8002ac0:	5ee0      	ldrsh	r0, [r4, r3]
 8002ac2:	f7fe f8d1 	bl	8000c68 <__aeabi_i2f>
 8002ac6:	1c01      	adds	r1, r0, #0
 8002ac8:	1c30      	adds	r0, r6, #0
 8002aca:	f7fd fc21 	bl	8000310 <__aeabi_fdiv>
 8002ace:	1c06      	adds	r6, r0, #0

	/*		Resulting Angle RAW
	================================================================*/
	radAngle = atan2(ampNormY, ampNormX);
 8002ad0:	1c28      	adds	r0, r5, #0
 8002ad2:	f7ff fe35 	bl	8002740 <__aeabi_f2d>
 8002ad6:	0004      	movs	r4, r0
 8002ad8:	000d      	movs	r5, r1
 8002ada:	1c30      	adds	r0, r6, #0
 8002adc:	f7ff fe30 	bl	8002740 <__aeabi_f2d>
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	002b      	movs	r3, r5
 8002ae4:	f004 fe53 	bl	800778e <atan2>
 8002ae8:	f7ff fe7c 	bl	80027e4 <__aeabi_d2f>
 8002aec:	1c04      	adds	r4, r0, #0
	if(radAngle >= -PI_CONST && radAngle <= 0){
 8002aee:	f7ff fe27 	bl	8002740 <__aeabi_f2d>
 8002af2:	0006      	movs	r6, r0
 8002af4:	000f      	movs	r7, r1
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <GetResultAngle+0xd8>)
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <GetResultAngle+0xdc>)
 8002afa:	f7fd fbc5 	bl	8000288 <__aeabi_dcmpge>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d005      	beq.n	8002b0e <GetResultAngle+0x96>
 8002b02:	2100      	movs	r1, #0
 8002b04:	1c20      	adds	r0, r4, #0
 8002b06:	f7fd fbe5 	bl	80002d4 <__aeabi_fcmple>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d10f      	bne.n	8002b2e <GetResultAngle+0xb6>
		radAngle = PI_CONST + (PI_CONST + radAngle);
	}
	mainData.curResultAngle_RAW = (radAngle * 180) / PI_CONST;
 8002b0e:	4912      	ldr	r1, [pc, #72]	; (8002b58 <GetResultAngle+0xe0>)
 8002b10:	1c20      	adds	r0, r4, #0
 8002b12:	f7fd fded 	bl	80006f0 <__aeabi_fmul>
 8002b16:	f7ff fe13 	bl	8002740 <__aeabi_f2d>
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <GetResultAngle+0xd8>)
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <GetResultAngle+0xe4>)
 8002b1e:	f7fe fc03 	bl	8001328 <__aeabi_ddiv>
 8002b22:	f7ff fe5f 	bl	80027e4 <__aeabi_d2f>
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <GetResultAngle+0xd4>)
 8002b28:	6018      	str	r0, [r3, #0]
//			radAngle = PI_CONST + (PI_CONST + radAngle);
//		}
//		mainData.curResultAngle_DFT = (radAngle * 180) / PI_CONST;
//	}
	return 0;
}
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radAngle = PI_CONST + (PI_CONST + radAngle);
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <GetResultAngle+0xd8>)
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <GetResultAngle+0xe4>)
 8002b32:	0030      	movs	r0, r6
 8002b34:	0039      	movs	r1, r7
 8002b36:	f7fe f8e7 	bl	8000d08 <__aeabi_dadd>
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <GetResultAngle+0xd8>)
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <GetResultAngle+0xe4>)
 8002b3e:	f7fe f8e3 	bl	8000d08 <__aeabi_dadd>
 8002b42:	f7ff fe4f 	bl	80027e4 <__aeabi_d2f>
 8002b46:	1c04      	adds	r4, r0, #0
 8002b48:	e7e1      	b.n	8002b0e <GetResultAngle+0x96>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	200001d0 	.word	0x200001d0
 8002b50:	54411744 	.word	0x54411744
 8002b54:	c00921fb 	.word	0xc00921fb
 8002b58:	43340000 	.word	0x43340000
 8002b5c:	400921fb 	.word	0x400921fb

08002b60 <TLEReadData>:
extern SPI_HandleTypeDef hspi2;

extern mainDataTypeDef mainData;

uint8_t TLEReadData(uint8_t dataType, void *pData)
{
 8002b60:	b530      	push	{r4, r5, lr}
 8002b62:	b087      	sub	sp, #28
	uint8_t bufRX[16];
	HAL_StatusTypeDef ret;
	uint16_t bufTX;
	uint8_t temp;

	switch (dataType)
 8002b64:	2801      	cmp	r0, #1
 8002b66:	d005      	beq.n	8002b74 <TLEReadData+0x14>
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d100      	bne.n	8002b6e <TLEReadData+0xe>
 8002b6c:	e0a8      	b.n	8002cc0 <TLEReadData+0x160>
			break;

	}

	return 0;
}
 8002b6e:	2000      	movs	r0, #0
 8002b70:	b007      	add	sp, #28
 8002b72:	bd30      	pop	{r4, r5, pc}
				bufTX = TLE_UPDATE;
 8002b74:	466b      	mov	r3, sp
 8002b76:	1d9c      	adds	r4, r3, #6
 8002b78:	2300      	movs	r3, #0
 8002b7a:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2110      	movs	r1, #16
 8002b80:	48c4      	ldr	r0, [pc, #784]	; (8002e94 <TLEReadData+0x334>)
 8002b82:	f000 fe8f 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002b86:	2202      	movs	r2, #2
 8002b88:	0021      	movs	r1, r4
 8002b8a:	48c3      	ldr	r0, [pc, #780]	; (8002e98 <TLEReadData+0x338>)
 8002b8c:	f002 ffde 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002b90:	48c1      	ldr	r0, [pc, #772]	; (8002e98 <TLEReadData+0x338>)
 8002b92:	f003 fad9 	bl	8006148 <HAL_SPI_GetState>
 8002b96:	2801      	cmp	r0, #1
 8002b98:	d1fa      	bne.n	8002b90 <TLEReadData+0x30>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002b9a:	4dbe      	ldr	r5, [pc, #760]	; (8002e94 <TLEReadData+0x334>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	0028      	movs	r0, r5
 8002ba2:	f000 fe7f 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8002ba6:	466b      	mov	r3, sp
 8002ba8:	1d9c      	adds	r4, r3, #6
 8002baa:	2387      	movs	r3, #135	; 0x87
 8002bac:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	0028      	movs	r0, r5
 8002bb4:	f000 fe76 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	0021      	movs	r1, r4
 8002bbc:	48b6      	ldr	r0, [pc, #728]	; (8002e98 <TLEReadData+0x338>)
 8002bbe:	f002 ffc5 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002bc2:	48b5      	ldr	r0, [pc, #724]	; (8002e98 <TLEReadData+0x338>)
 8002bc4:	f003 fac0 	bl	8006148 <HAL_SPI_GetState>
 8002bc8:	2801      	cmp	r0, #1
 8002bca:	d1fa      	bne.n	8002bc2 <TLEReadData+0x62>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002bcc:	4cb2      	ldr	r4, [pc, #712]	; (8002e98 <TLEReadData+0x338>)
 8002bce:	2301      	movs	r3, #1
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	a902      	add	r1, sp, #8
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f002 fef1 	bl	80059bc <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg, 7);
 8002bda:	2207      	movs	r2, #7
 8002bdc:	49af      	ldr	r1, [pc, #700]	; (8002e9c <TLEReadData+0x33c>)
 8002bde:	0020      	movs	r0, r4
 8002be0:	f003 f93c 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002be4:	48ac      	ldr	r0, [pc, #688]	; (8002e98 <TLEReadData+0x338>)
 8002be6:	f003 faaf 	bl	8006148 <HAL_SPI_GetState>
 8002bea:	2801      	cmp	r0, #1
 8002bec:	d1fa      	bne.n	8002be4 <TLEReadData+0x84>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002bee:	4da9      	ldr	r5, [pc, #676]	; (8002e94 <TLEReadData+0x334>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	0028      	movs	r0, r5
 8002bf6:	f000 fe55 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 8002bfa:	466b      	mov	r3, sp
 8002bfc:	1d9c      	adds	r4, r3, #6
 8002bfe:	23bf      	movs	r3, #191	; 0xbf
 8002c00:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2110      	movs	r1, #16
 8002c06:	0028      	movs	r0, r5
 8002c08:	f000 fe4c 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	0021      	movs	r1, r4
 8002c10:	48a1      	ldr	r0, [pc, #644]	; (8002e98 <TLEReadData+0x338>)
 8002c12:	f002 ff9b 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c16:	48a0      	ldr	r0, [pc, #640]	; (8002e98 <TLEReadData+0x338>)
 8002c18:	f003 fa96 	bl	8006148 <HAL_SPI_GetState>
 8002c1c:	2801      	cmp	r0, #1
 8002c1e:	d1fa      	bne.n	8002c16 <TLEReadData+0xb6>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002c20:	4c9d      	ldr	r4, [pc, #628]	; (8002e98 <TLEReadData+0x338>)
 8002c22:	2301      	movs	r3, #1
 8002c24:	2201      	movs	r2, #1
 8002c26:	a902      	add	r1, sp, #8
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f002 fec7 	bl	80059bc <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg+7, 7);
 8002c2e:	2207      	movs	r2, #7
 8002c30:	499b      	ldr	r1, [pc, #620]	; (8002ea0 <TLEReadData+0x340>)
 8002c32:	0020      	movs	r0, r4
 8002c34:	f003 f912 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c38:	4897      	ldr	r0, [pc, #604]	; (8002e98 <TLEReadData+0x338>)
 8002c3a:	f003 fa85 	bl	8006148 <HAL_SPI_GetState>
 8002c3e:	2801      	cmp	r0, #1
 8002c40:	d1fa      	bne.n	8002c38 <TLEReadData+0xd8>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002c42:	4d94      	ldr	r5, [pc, #592]	; (8002e94 <TLEReadData+0x334>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	2110      	movs	r1, #16
 8002c48:	0028      	movs	r0, r5
 8002c4a:	f000 fe2b 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 8002c4e:	466b      	mov	r3, sp
 8002c50:	1d9c      	adds	r4, r3, #6
 8002c52:	23f2      	movs	r3, #242	; 0xf2
 8002c54:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2110      	movs	r1, #16
 8002c5a:	0028      	movs	r0, r5
 8002c5c:	f000 fe22 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	0021      	movs	r1, r4
 8002c64:	488c      	ldr	r0, [pc, #560]	; (8002e98 <TLEReadData+0x338>)
 8002c66:	f002 ff71 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c6a:	488b      	ldr	r0, [pc, #556]	; (8002e98 <TLEReadData+0x338>)
 8002c6c:	f003 fa6c 	bl	8006148 <HAL_SPI_GetState>
 8002c70:	2801      	cmp	r0, #1
 8002c72:	d1fa      	bne.n	8002c6a <TLEReadData+0x10a>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002c74:	4c88      	ldr	r4, [pc, #544]	; (8002e98 <TLEReadData+0x338>)
 8002c76:	2301      	movs	r3, #1
 8002c78:	2201      	movs	r2, #1
 8002c7a:	a902      	add	r1, sp, #8
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	f002 fe9d 	bl	80059bc <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg+14, 2);
 8002c82:	2202      	movs	r2, #2
 8002c84:	4987      	ldr	r1, [pc, #540]	; (8002ea4 <TLEReadData+0x344>)
 8002c86:	0020      	movs	r0, r4
 8002c88:	f003 f8e8 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002c8c:	4882      	ldr	r0, [pc, #520]	; (8002e98 <TLEReadData+0x338>)
 8002c8e:	f003 fa5b 	bl	8006148 <HAL_SPI_GetState>
 8002c92:	2801      	cmp	r0, #1
 8002c94:	d1fa      	bne.n	8002c8c <TLEReadData+0x12c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002c96:	2201      	movs	r2, #1
 8002c98:	2110      	movs	r1, #16
 8002c9a:	487e      	ldr	r0, [pc, #504]	; (8002e94 <TLEReadData+0x334>)
 8002c9c:	f000 fe02 	bl	80038a4 <HAL_GPIO_WritePin>
				mainData.currentX = (mainData.allReg.highByteX << 8) + mainData.allReg.lowByteX;
 8002ca0:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <TLEReadData+0x348>)
 8002ca2:	222e      	movs	r2, #46	; 0x2e
 8002ca4:	5c9a      	ldrb	r2, [r3, r2]
 8002ca6:	0212      	lsls	r2, r2, #8
 8002ca8:	212d      	movs	r1, #45	; 0x2d
 8002caa:	5c59      	ldrb	r1, [r3, r1]
 8002cac:	1852      	adds	r2, r2, r1
 8002cae:	811a      	strh	r2, [r3, #8]
				mainData.currentY = (mainData.allReg.highByteY << 8) + mainData.allReg.lowByteY;
 8002cb0:	2230      	movs	r2, #48	; 0x30
 8002cb2:	5c9a      	ldrb	r2, [r3, r2]
 8002cb4:	0212      	lsls	r2, r2, #8
 8002cb6:	212f      	movs	r1, #47	; 0x2f
 8002cb8:	5c59      	ldrb	r1, [r3, r1]
 8002cba:	1852      	adds	r2, r2, r1
 8002cbc:	815a      	strh	r2, [r3, #10]
			break;
 8002cbe:	e756      	b.n	8002b6e <TLEReadData+0xe>
				bufTX = (bufTX << 8) + temp;
 8002cc0:	466b      	mov	r3, sp
 8002cc2:	1d9c      	adds	r4, r3, #6
 8002cc4:	4b79      	ldr	r3, [pc, #484]	; (8002eac <TLEReadData+0x34c>)
 8002cc6:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2110      	movs	r1, #16
 8002ccc:	4871      	ldr	r0, [pc, #452]	; (8002e94 <TLEReadData+0x334>)
 8002cce:	f000 fde9 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	0021      	movs	r1, r4
 8002cd6:	4870      	ldr	r0, [pc, #448]	; (8002e98 <TLEReadData+0x338>)
 8002cd8:	f002 ff38 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002cdc:	486e      	ldr	r0, [pc, #440]	; (8002e98 <TLEReadData+0x338>)
 8002cde:	f003 fa33 	bl	8006148 <HAL_SPI_GetState>
 8002ce2:	2801      	cmp	r0, #1
 8002ce4:	d1fa      	bne.n	8002cdc <TLEReadData+0x17c>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002ce6:	4d6b      	ldr	r5, [pc, #428]	; (8002e94 <TLEReadData+0x334>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2110      	movs	r1, #16
 8002cec:	0028      	movs	r0, r5
 8002cee:	f000 fdd9 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 8002cf2:	466b      	mov	r3, sp
 8002cf4:	1d9c      	adds	r4, r3, #6
 8002cf6:	4b6e      	ldr	r3, [pc, #440]	; (8002eb0 <TLEReadData+0x350>)
 8002cf8:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2110      	movs	r1, #16
 8002cfe:	0028      	movs	r0, r5
 8002d00:	f000 fdd0 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002d04:	2202      	movs	r2, #2
 8002d06:	0021      	movs	r1, r4
 8002d08:	4863      	ldr	r0, [pc, #396]	; (8002e98 <TLEReadData+0x338>)
 8002d0a:	f002 ff1f 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d0e:	4862      	ldr	r0, [pc, #392]	; (8002e98 <TLEReadData+0x338>)
 8002d10:	f003 fa1a 	bl	8006148 <HAL_SPI_GetState>
 8002d14:	2801      	cmp	r0, #1
 8002d16:	d1fa      	bne.n	8002d0e <TLEReadData+0x1ae>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002d18:	4d5e      	ldr	r5, [pc, #376]	; (8002e94 <TLEReadData+0x334>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	0028      	movs	r0, r5
 8002d20:	f000 fdc0 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_UPDATE;
 8002d24:	466b      	mov	r3, sp
 8002d26:	1d9c      	adds	r4, r3, #6
 8002d28:	2300      	movs	r3, #0
 8002d2a:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2110      	movs	r1, #16
 8002d30:	0028      	movs	r0, r5
 8002d32:	f000 fdb7 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002d36:	2202      	movs	r2, #2
 8002d38:	0021      	movs	r1, r4
 8002d3a:	4857      	ldr	r0, [pc, #348]	; (8002e98 <TLEReadData+0x338>)
 8002d3c:	f002 ff06 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d40:	4855      	ldr	r0, [pc, #340]	; (8002e98 <TLEReadData+0x338>)
 8002d42:	f003 fa01 	bl	8006148 <HAL_SPI_GetState>
 8002d46:	2801      	cmp	r0, #1
 8002d48:	d1fa      	bne.n	8002d40 <TLEReadData+0x1e0>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002d4a:	4d52      	ldr	r5, [pc, #328]	; (8002e94 <TLEReadData+0x334>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2110      	movs	r1, #16
 8002d50:	0028      	movs	r0, r5
 8002d52:	f000 fda7 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_I;
 8002d56:	466b      	mov	r3, sp
 8002d58:	1d9c      	adds	r4, r3, #6
 8002d5a:	2387      	movs	r3, #135	; 0x87
 8002d5c:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2110      	movs	r1, #16
 8002d62:	0028      	movs	r0, r5
 8002d64:	f000 fd9e 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002d68:	2201      	movs	r2, #1
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	484a      	ldr	r0, [pc, #296]	; (8002e98 <TLEReadData+0x338>)
 8002d6e:	f002 feed 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d72:	4849      	ldr	r0, [pc, #292]	; (8002e98 <TLEReadData+0x338>)
 8002d74:	f003 f9e8 	bl	8006148 <HAL_SPI_GetState>
 8002d78:	2801      	cmp	r0, #1
 8002d7a:	d1fa      	bne.n	8002d72 <TLEReadData+0x212>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002d7c:	4c46      	ldr	r4, [pc, #280]	; (8002e98 <TLEReadData+0x338>)
 8002d7e:	2301      	movs	r3, #1
 8002d80:	2201      	movs	r2, #1
 8002d82:	a902      	add	r1, sp, #8
 8002d84:	0020      	movs	r0, r4
 8002d86:	f002 fe19 	bl	80059bc <HAL_SPI_Receive>
			 	ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg, 7);
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	4943      	ldr	r1, [pc, #268]	; (8002e9c <TLEReadData+0x33c>)
 8002d8e:	0020      	movs	r0, r4
 8002d90:	f003 f864 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002d94:	4840      	ldr	r0, [pc, #256]	; (8002e98 <TLEReadData+0x338>)
 8002d96:	f003 f9d7 	bl	8006148 <HAL_SPI_GetState>
 8002d9a:	2801      	cmp	r0, #1
 8002d9c:	d1fa      	bne.n	8002d94 <TLEReadData+0x234>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002d9e:	4d3d      	ldr	r5, [pc, #244]	; (8002e94 <TLEReadData+0x334>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	2110      	movs	r1, #16
 8002da4:	0028      	movs	r0, r5
 8002da6:	f000 fd7d 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_II;
 8002daa:	466b      	mov	r3, sp
 8002dac:	1d9c      	adds	r4, r3, #6
 8002dae:	23bf      	movs	r3, #191	; 0xbf
 8002db0:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2110      	movs	r1, #16
 8002db6:	0028      	movs	r0, r5
 8002db8:	f000 fd74 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	0021      	movs	r1, r4
 8002dc0:	4835      	ldr	r0, [pc, #212]	; (8002e98 <TLEReadData+0x338>)
 8002dc2:	f002 fec3 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002dc6:	4834      	ldr	r0, [pc, #208]	; (8002e98 <TLEReadData+0x338>)
 8002dc8:	f003 f9be 	bl	8006148 <HAL_SPI_GetState>
 8002dcc:	2801      	cmp	r0, #1
 8002dce:	d1fa      	bne.n	8002dc6 <TLEReadData+0x266>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002dd0:	4c31      	ldr	r4, [pc, #196]	; (8002e98 <TLEReadData+0x338>)
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	a902      	add	r1, sp, #8
 8002dd8:	0020      	movs	r0, r4
 8002dda:	f002 fdef 	bl	80059bc <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg+7, 7);
 8002dde:	2207      	movs	r2, #7
 8002de0:	492f      	ldr	r1, [pc, #188]	; (8002ea0 <TLEReadData+0x340>)
 8002de2:	0020      	movs	r0, r4
 8002de4:	f003 f83a 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002de8:	482b      	ldr	r0, [pc, #172]	; (8002e98 <TLEReadData+0x338>)
 8002dea:	f003 f9ad 	bl	8006148 <HAL_SPI_GetState>
 8002dee:	2801      	cmp	r0, #1
 8002df0:	d1fa      	bne.n	8002de8 <TLEReadData+0x288>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002df2:	4d28      	ldr	r5, [pc, #160]	; (8002e94 <TLEReadData+0x334>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	2110      	movs	r1, #16
 8002df8:	0028      	movs	r0, r5
 8002dfa:	f000 fd53 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = TLE_ALL_DATA_III;
 8002dfe:	466b      	mov	r3, sp
 8002e00:	1d9c      	adds	r4, r3, #6
 8002e02:	23f2      	movs	r3, #242	; 0xf2
 8002e04:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2110      	movs	r1, #16
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	f000 fd4a 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 1);
 8002e10:	2201      	movs	r2, #1
 8002e12:	0021      	movs	r1, r4
 8002e14:	4820      	ldr	r0, [pc, #128]	; (8002e98 <TLEReadData+0x338>)
 8002e16:	f002 fe99 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002e1a:	481f      	ldr	r0, [pc, #124]	; (8002e98 <TLEReadData+0x338>)
 8002e1c:	f003 f994 	bl	8006148 <HAL_SPI_GetState>
 8002e20:	2801      	cmp	r0, #1
 8002e22:	d1fa      	bne.n	8002e1a <TLEReadData+0x2ba>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&bufRX, 1, 1);
 8002e24:	4c1c      	ldr	r4, [pc, #112]	; (8002e98 <TLEReadData+0x338>)
 8002e26:	2301      	movs	r3, #1
 8002e28:	2201      	movs	r2, #1
 8002e2a:	a902      	add	r1, sp, #8
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	f002 fdc5 	bl	80059bc <HAL_SPI_Receive>
				ret = HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)&mainData.allReg+14, 2);
 8002e32:	2202      	movs	r2, #2
 8002e34:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <TLEReadData+0x344>)
 8002e36:	0020      	movs	r0, r4
 8002e38:	f003 f810 	bl	8005e5c <HAL_SPI_Receive_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002e3c:	4816      	ldr	r0, [pc, #88]	; (8002e98 <TLEReadData+0x338>)
 8002e3e:	f003 f983 	bl	8006148 <HAL_SPI_GetState>
 8002e42:	2801      	cmp	r0, #1
 8002e44:	d1fa      	bne.n	8002e3c <TLEReadData+0x2dc>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002e46:	4d13      	ldr	r5, [pc, #76]	; (8002e94 <TLEReadData+0x334>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	f000 fd29 	bl	80038a4 <HAL_GPIO_WritePin>
				bufTX = (bufTX << 8) + temp;
 8002e52:	466b      	mov	r3, sp
 8002e54:	1d9c      	adds	r4, r3, #6
 8002e56:	2361      	movs	r3, #97	; 0x61
 8002e58:	8023      	strh	r3, [r4, #0]
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	0028      	movs	r0, r5
 8002e60:	f000 fd20 	bl	80038a4 <HAL_GPIO_WritePin>
				ret = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)&bufTX, 2);
 8002e64:	2202      	movs	r2, #2
 8002e66:	0021      	movs	r1, r4
 8002e68:	480b      	ldr	r0, [pc, #44]	; (8002e98 <TLEReadData+0x338>)
 8002e6a:	f002 fe6f 	bl	8005b4c <HAL_SPI_Transmit_DMA>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002e6e:	480a      	ldr	r0, [pc, #40]	; (8002e98 <TLEReadData+0x338>)
 8002e70:	f003 f96a 	bl	8006148 <HAL_SPI_GetState>
 8002e74:	2801      	cmp	r0, #1
 8002e76:	d1fa      	bne.n	8002e6e <TLEReadData+0x30e>
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <TLEReadData+0x334>)
 8002e7e:	f000 fd11 	bl	80038a4 <HAL_GPIO_WritePin>
				mainData.temp = (mainData.allReg.highByteX << 8) + mainData.allReg.lowByteX;
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <TLEReadData+0x348>)
 8002e84:	232e      	movs	r3, #46	; 0x2e
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	212d      	movs	r1, #45	; 0x2d
 8002e8c:	5c51      	ldrb	r1, [r2, r1]
 8002e8e:	185b      	adds	r3, r3, r1
 8002e90:	8793      	strh	r3, [r2, #60]	; 0x3c
			break;
 8002e92:	e66c      	b.n	8002b6e <TLEReadData+0xe>
 8002e94:	48000400 	.word	0x48000400
 8002e98:	20000254 	.word	0x20000254
 8002e9c:	200001fc 	.word	0x200001fc
 8002ea0:	20000203 	.word	0x20000203
 8002ea4:	2000020a 	.word	0x2000020a
 8002ea8:	200001d0 	.word	0x200001d0
 8002eac:	00005a71 	.word	0x00005a71
 8002eb0:	ffff8061 	.word	0xffff8061

08002eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	2214      	movs	r2, #20
 8002eba:	2100      	movs	r1, #0
 8002ebc:	a803      	add	r0, sp, #12
 8002ebe:	f004 fc5e 	bl	800777e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <MX_GPIO_Init+0xb4>)
 8002ec4:	6959      	ldr	r1, [r3, #20]
 8002ec6:	2080      	movs	r0, #128	; 0x80
 8002ec8:	0300      	lsls	r0, r0, #12
 8002eca:	4301      	orrs	r1, r0
 8002ecc:	6159      	str	r1, [r3, #20]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	4002      	ands	r2, r0
 8002ed2:	9200      	str	r2, [sp, #0]
 8002ed4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	6959      	ldr	r1, [r3, #20]
 8002ed8:	2080      	movs	r0, #128	; 0x80
 8002eda:	0280      	lsls	r0, r0, #10
 8002edc:	4301      	orrs	r1, r0
 8002ede:	6159      	str	r1, [r3, #20]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	4002      	ands	r2, r0
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	02c9      	lsls	r1, r1, #11
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002efa:	2790      	movs	r7, #144	; 0x90
 8002efc:	05ff      	lsls	r7, r7, #23
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	0038      	movs	r0, r7
 8002f04:	f000 fcce 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002f08:	4e18      	ldr	r6, [pc, #96]	; (8002f6c <MX_GPIO_Init+0xb8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	0030      	movs	r0, r6
 8002f10:	f000 fcc8 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	019b      	lsls	r3, r3, #6
 8002f18:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_GPIO_Init+0xbc>)
 8002f1c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2500      	movs	r5, #0
 8002f20:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f22:	a903      	add	r1, sp, #12
 8002f24:	4813      	ldr	r0, [pc, #76]	; (8002f74 <MX_GPIO_Init+0xc0>)
 8002f26:	f000 fbef 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2401      	movs	r4, #1
 8002f30:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f36:	a903      	add	r1, sp, #12
 8002f38:	0038      	movs	r0, r7
 8002f3a:	f000 fbe5 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002f3e:	2310      	movs	r3, #16
 8002f40:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f44:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f46:	3b0d      	subs	r3, #13
 8002f48:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	a903      	add	r1, sp, #12
 8002f4c:	0030      	movs	r0, r6
 8002f4e:	f000 fbdb 	bl	8003708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2102      	movs	r1, #2
 8002f56:	2007      	movs	r0, #7
 8002f58:	f000 fab4 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002f5c:	2007      	movs	r0, #7
 8002f5e:	f000 fae3 	bl	8003528 <HAL_NVIC_EnableIRQ>

}
 8002f62:	b009      	add	sp, #36	; 0x24
 8002f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	10310000 	.word	0x10310000
 8002f74:	48000800 	.word	0x48000800

08002f78 <MX_DMA_Init>:
{
 8002f78:	b500      	push	{lr}
 8002f7a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <MX_DMA_Init+0x2c>)
 8002f7e:	6951      	ldr	r1, [r2, #20]
 8002f80:	2301      	movs	r3, #1
 8002f82:	4319      	orrs	r1, r3
 8002f84:	6151      	str	r1, [r2, #20]
 8002f86:	6952      	ldr	r2, [r2, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	200b      	movs	r0, #11
 8002f94:	f000 fa96 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002f98:	200b      	movs	r0, #11
 8002f9a:	f000 fac5 	bl	8003528 <HAL_NVIC_EnableIRQ>
}
 8002f9e:	b003      	add	sp, #12
 8002fa0:	bd00      	pop	{pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <MX_TIM3_Init>:
{
 8002fa8:	b530      	push	{r4, r5, lr}
 8002faa:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fac:	2208      	movs	r2, #8
 8002fae:	2100      	movs	r1, #0
 8002fb0:	a808      	add	r0, sp, #32
 8002fb2:	f004 fbe4 	bl	800777e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fb6:	221c      	movs	r2, #28
 8002fb8:	2100      	movs	r1, #0
 8002fba:	a801      	add	r0, sp, #4
 8002fbc:	f004 fbdf 	bl	800777e <memset>
  htim3.Instance = TIM3;
 8002fc0:	4c11      	ldr	r4, [pc, #68]	; (8003008 <MX_TIM3_Init+0x60>)
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <MX_TIM3_Init+0x64>)
 8002fc4:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 2;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	2500      	movs	r5, #0
 8002fcc:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 3;
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd2:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f003 faae 	bl	8006538 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fdc:	9508      	str	r5, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fde:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fe0:	a908      	add	r1, sp, #32
 8002fe2:	0020      	movs	r0, r4
 8002fe4:	f003 fbba 	bl	800675c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fe8:	2360      	movs	r3, #96	; 0x60
 8002fea:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002fec:	9502      	str	r5, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fee:	9503      	str	r5, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ff0:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	a901      	add	r1, sp, #4
 8002ff6:	0020      	movs	r0, r4
 8002ff8:	f003 fafc 	bl	80065f4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f000 f967 	bl	80032d0 <HAL_TIM_MspPostInit>
}
 8003002:	b00b      	add	sp, #44	; 0x2c
 8003004:	bd30      	pop	{r4, r5, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000304 	.word	0x20000304
 800300c:	40000400 	.word	0x40000400

08003010 <MX_SPI2_Init>:
{
 8003010:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8003012:	4810      	ldr	r0, [pc, #64]	; (8003054 <MX_SPI2_Init+0x44>)
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <MX_SPI2_Init+0x48>)
 8003016:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003018:	2382      	movs	r3, #130	; 0x82
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003024:	23e0      	movs	r3, #224	; 0xe0
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800302e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0092      	lsls	r2, r2, #2
 8003034:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003036:	3ae1      	subs	r2, #225	; 0xe1
 8003038:	3aff      	subs	r2, #255	; 0xff
 800303a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800303c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800303e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003040:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003042:	3a19      	subs	r2, #25
 8003044:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003046:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003048:	3308      	adds	r3, #8
 800304a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800304c:	f002 fafc 	bl	8005648 <HAL_SPI_Init>
}
 8003050:	bd10      	pop	{r4, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000254 	.word	0x20000254
 8003058:	40003800 	.word	0x40003800

0800305c <SystemClock_Config>:
{
 800305c:	b510      	push	{r4, lr}
 800305e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003060:	2234      	movs	r2, #52	; 0x34
 8003062:	2100      	movs	r1, #0
 8003064:	a80b      	add	r0, sp, #44	; 0x2c
 8003066:	f004 fb8a 	bl	800777e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800306a:	2210      	movs	r2, #16
 800306c:	2100      	movs	r1, #0
 800306e:	a807      	add	r0, sp, #28
 8003070:	f004 fb85 	bl	800777e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003074:	221c      	movs	r2, #28
 8003076:	2100      	movs	r1, #0
 8003078:	4668      	mov	r0, sp
 800307a:	f004 fb80 	bl	800777e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800307e:	2320      	movs	r3, #32
 8003080:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003082:	3b1f      	subs	r3, #31
 8003084:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003086:	a80b      	add	r0, sp, #44	; 0x2c
 8003088:	f001 fd52 	bl	8004b30 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800308c:	2307      	movs	r3, #7
 800308e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003090:	3b04      	subs	r3, #4
 8003092:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003094:	2400      	movs	r4, #0
 8003096:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003098:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800309a:	2101      	movs	r1, #1
 800309c:	a807      	add	r0, sp, #28
 800309e:	f002 f80d 	bl	80050bc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	029b      	lsls	r3, r3, #10
 80030a6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80030a8:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030aa:	4668      	mov	r0, sp
 80030ac:	f002 f8fa 	bl	80052a4 <HAL_RCCEx_PeriphCLKConfig>
}
 80030b0:	b018      	add	sp, #96	; 0x60
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <main>:
{
 80030b4:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80030b6:	f000 f9d5 	bl	8003464 <HAL_Init>
  SystemClock_Config();
 80030ba:	f7ff ffcf 	bl	800305c <SystemClock_Config>
  MX_GPIO_Init();
 80030be:	f7ff fef9 	bl	8002eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80030c2:	f7ff ff59 	bl	8002f78 <MX_DMA_Init>
  MX_TIM3_Init();
 80030c6:	f7ff ff6f 	bl	8002fa8 <MX_TIM3_Init>
  MX_SPI2_Init();
 80030ca:	f7ff ffa1 	bl	8003010 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80030ce:	f004 f8e3 	bl	8007298 <MX_USB_DEVICE_Init>
	TIM3->CCR2 = 2;
 80030d2:	2202      	movs	r2, #2
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <main+0x8c>)
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80030d8:	2104      	movs	r1, #4
 80030da:	481a      	ldr	r0, [pc, #104]	; (8003144 <main+0x90>)
 80030dc:	f003 fb0c 	bl	80066f8 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f000 f9dd 	bl	80034a0 <HAL_Delay>
	  GetTempValues();
 80030e6:	f7ff fc49 	bl	800297c <GetTempValues>
	  GetTempValues();
 80030ea:	f7ff fc47 	bl	800297c <GetTempValues>
 80030ee:	e00a      	b.n	8003106 <main+0x52>
		  GetTempValues();
 80030f0:	f7ff fc44 	bl	800297c <GetTempValues>
		  GetTempValues();
 80030f4:	f7ff fc42 	bl	800297c <GetTempValues>
		  colibState = 0;
 80030f8:	2200      	movs	r2, #0
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <main+0x94>)
 80030fc:	701a      	strb	r2, [r3, #0]
	  if(usbOn == 1){
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <main+0x98>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d006      	beq.n	8003114 <main+0x60>
	  if(colibState == 0){
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <main+0x94>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <main+0x3c>
		  GetResultAngle();
 800310e:	f7ff fcb3 	bl	8002a78 <GetResultAngle>
 8003112:	e7f4      	b.n	80030fe <main+0x4a>
			memcpy(tempUSBBuf+1, &mainData, 63);
 8003114:	4c0e      	ldr	r4, [pc, #56]	; (8003150 <main+0x9c>)
 8003116:	223f      	movs	r2, #63	; 0x3f
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <main+0xa0>)
 800311a:	0020      	movs	r0, r4
 800311c:	f004 fb26 	bl	800776c <memcpy>
			tempUSBBuf[0] = 0x91;
 8003120:	3c01      	subs	r4, #1
 8003122:	2391      	movs	r3, #145	; 0x91
 8003124:	7023      	strb	r3, [r4, #0]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&tempUSBBuf, sizeof(tempUSBBuf));
 8003126:	4d0c      	ldr	r5, [pc, #48]	; (8003158 <main+0xa4>)
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	0021      	movs	r1, r4
 800312c:	0028      	movs	r0, r5
 800312e:	f003 fc2e 	bl	800698e <USBD_CUSTOM_HID_SendReport>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&tempUSBBuf, sizeof(tempUSBBuf));
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	0021      	movs	r1, r4
 8003136:	0028      	movs	r0, r5
 8003138:	f003 fc29 	bl	800698e <USBD_CUSTOM_HID_SendReport>
 800313c:	e7e3      	b.n	8003106 <main+0x52>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40000400 	.word	0x40000400
 8003144:	20000304 	.word	0x20000304
 8003148:	20000346 	.word	0x20000346
 800314c:	20000120 	.word	0x20000120
 8003150:	20000349 	.word	0x20000349
 8003154:	200001d0 	.word	0x200001d0
 8003158:	2000041c 	.word	0x2000041c

0800315c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800315e:	6802      	ldr	r2, [r0, #0]
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003162:	429a      	cmp	r2, r3
 8003164:	d000      	beq.n	8003168 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003166:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8003168:	f000 f98c 	bl	8003484 <HAL_IncTick>
}
 800316c:	e7fb      	b.n	8003166 <HAL_TIM_PeriodElapsedCallback+0xa>
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40001000 	.word	0x40001000

08003174 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b500      	push	{lr}
 800317a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_MspInit+0x3c>)
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	2201      	movs	r2, #1
 8003182:	4311      	orrs	r1, r2
 8003184:	6199      	str	r1, [r3, #24]
 8003186:	6999      	ldr	r1, [r3, #24]
 8003188:	400a      	ands	r2, r1
 800318a:	9200      	str	r2, [sp, #0]
 800318c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0549      	lsls	r1, r1, #21
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	400b      	ands	r3, r1
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	2004      	movs	r0, #4
 80031a6:	f000 f98d 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80031aa:	2004      	movs	r0, #4
 80031ac:	f000 f9bc 	bl	8003528 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b0:	b003      	add	sp, #12
 80031b2:	bd00      	pop	{pc}
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031be:	2214      	movs	r2, #20
 80031c0:	2100      	movs	r1, #0
 80031c2:	a803      	add	r0, sp, #12
 80031c4:	f004 fadb 	bl	800777e <memset>
  if(hspi->Instance==SPI2)
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_SPI_MspInit+0xd0>)
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031d0:	b009      	add	sp, #36	; 0x24
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_SPI_MspInit+0xd4>)
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	2080      	movs	r0, #128	; 0x80
 80031da:	01c0      	lsls	r0, r0, #7
 80031dc:	4301      	orrs	r1, r0
 80031de:	61d9      	str	r1, [r3, #28]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	4002      	ands	r2, r0
 80031e4:	9201      	str	r2, [sp, #4]
 80031e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	02c9      	lsls	r1, r1, #11
 80031ee:	430a      	orrs	r2, r1
 80031f0:	615a      	str	r2, [r3, #20]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	400b      	ands	r3, r1
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2502      	movs	r5, #2
 8003202:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003204:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003206:	2703      	movs	r7, #3
 8003208:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	4e21      	ldr	r6, [pc, #132]	; (8003290 <HAL_SPI_MspInit+0xd8>)
 800320c:	a903      	add	r1, sp, #12
 800320e:	0030      	movs	r0, r6
 8003210:	f000 fa7a 	bl	8003708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800321c:	2301      	movs	r3, #1
 800321e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003220:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003222:	2500      	movs	r5, #0
 8003224:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003226:	a903      	add	r1, sp, #12
 8003228:	0030      	movs	r0, r6
 800322a:	f000 fa6d 	bl	8003708 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800322e:	4819      	ldr	r0, [pc, #100]	; (8003294 <HAL_SPI_MspInit+0xdc>)
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_SPI_MspInit+0xe0>)
 8003232:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003234:	2310      	movs	r3, #16
 8003236:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003238:	6085      	str	r5, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800323a:	3370      	adds	r3, #112	; 0x70
 800323c:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323e:	6105      	str	r5, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003240:	6145      	str	r5, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003242:	6185      	str	r5, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003244:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003246:	f000 f9a3 	bl	8003590 <HAL_DMA_Init>
 800324a:	2800      	cmp	r0, #0
 800324c:	d116      	bne.n	800327c <HAL_SPI_MspInit+0xc4>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_SPI_MspInit+0xdc>)
 8003250:	6563      	str	r3, [r4, #84]	; 0x54
 8003252:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003254:	4811      	ldr	r0, [pc, #68]	; (800329c <HAL_SPI_MspInit+0xe4>)
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_SPI_MspInit+0xe8>)
 8003258:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325a:	2300      	movs	r3, #0
 800325c:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325e:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	60c2      	str	r2, [r0, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003264:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003266:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003268:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800326c:	f000 f990 	bl	8003590 <HAL_DMA_Init>
 8003270:	2800      	cmp	r0, #0
 8003272:	d106      	bne.n	8003282 <HAL_SPI_MspInit+0xca>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_SPI_MspInit+0xe4>)
 8003276:	65a3      	str	r3, [r4, #88]	; 0x58
 8003278:	625c      	str	r4, [r3, #36]	; 0x24
}
 800327a:	e7a9      	b.n	80031d0 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800327c:	f7ff ff7a 	bl	8003174 <Error_Handler>
 8003280:	e7e5      	b.n	800324e <HAL_SPI_MspInit+0x96>
      Error_Handler();
 8003282:	f7ff ff77 	bl	8003174 <Error_Handler>
 8003286:	e7f5      	b.n	8003274 <HAL_SPI_MspInit+0xbc>
 8003288:	40003800 	.word	0x40003800
 800328c:	40021000 	.word	0x40021000
 8003290:	48000400 	.word	0x48000400
 8003294:	2000038c 	.word	0x2000038c
 8003298:	40020058 	.word	0x40020058
 800329c:	200002b8 	.word	0x200002b8
 80032a0:	40020044 	.word	0x40020044

080032a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032a4:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 80032a6:	6802      	ldr	r2, [r0, #0]
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_TIM_PWM_MspInit+0x24>)
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_TIM_PWM_MspInit+0xe>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032ae:	b002      	add	sp, #8
 80032b0:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b2:	4a06      	ldr	r2, [pc, #24]	; (80032cc <HAL_TIM_PWM_MspInit+0x28>)
 80032b4:	69d1      	ldr	r1, [r2, #28]
 80032b6:	2302      	movs	r3, #2
 80032b8:	4319      	orrs	r1, r3
 80032ba:	61d1      	str	r1, [r2, #28]
 80032bc:	69d2      	ldr	r2, [r2, #28]
 80032be:	4013      	ands	r3, r2
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	9b01      	ldr	r3, [sp, #4]
}
 80032c4:	e7f3      	b.n	80032ae <HAL_TIM_PWM_MspInit+0xa>
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032d0:	b510      	push	{r4, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d6:	2214      	movs	r2, #20
 80032d8:	2100      	movs	r1, #0
 80032da:	a801      	add	r0, sp, #4
 80032dc:	f004 fa4f 	bl	800777e <memset>
  if(htim->Instance==TIM3)
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_TIM_MspPostInit+0x4c>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032e8:	b006      	add	sp, #24
 80032ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_TIM_MspPostInit+0x50>)
 80032ee:	6951      	ldr	r1, [r2, #20]
 80032f0:	2080      	movs	r0, #128	; 0x80
 80032f2:	02c0      	lsls	r0, r0, #11
 80032f4:	4301      	orrs	r1, r0
 80032f6:	6151      	str	r1, [r2, #20]
 80032f8:	6953      	ldr	r3, [r2, #20]
 80032fa:	4003      	ands	r3, r0
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GEN_Pin;
 8003300:	2320      	movs	r3, #32
 8003302:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	3b1e      	subs	r3, #30
 8003306:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003308:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330a:	3301      	adds	r3, #1
 800330c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800330e:	3b02      	subs	r3, #2
 8003310:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GEN_GPIO_Port, &GPIO_InitStruct);
 8003312:	a901      	add	r1, sp, #4
 8003314:	4803      	ldr	r0, [pc, #12]	; (8003324 <HAL_TIM_MspPostInit+0x54>)
 8003316:	f000 f9f7 	bl	8003708 <HAL_GPIO_Init>
}
 800331a:	e7e5      	b.n	80032e8 <HAL_TIM_MspPostInit+0x18>
 800331c:	40000400 	.word	0x40000400
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400

08003328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b500      	push	{lr}
 800332a:	b087      	sub	sp, #28
 800332c:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800332e:	2200      	movs	r2, #0
 8003330:	2011      	movs	r0, #17
 8003332:	f000 f8c7 	bl	80034c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003336:	2011      	movs	r0, #17
 8003338:	f000 f8f6 	bl	8003528 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <HAL_InitTick+0x64>)
 800333e:	69d1      	ldr	r1, [r2, #28]
 8003340:	2310      	movs	r3, #16
 8003342:	4319      	orrs	r1, r3
 8003344:	61d1      	str	r1, [r2, #28]
 8003346:	69d2      	ldr	r2, [r2, #28]
 8003348:	4013      	ands	r3, r2
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800334e:	a901      	add	r1, sp, #4
 8003350:	a802      	add	r0, sp, #8
 8003352:	f001 ff8b 	bl	800526c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003356:	f001 ff79 	bl	800524c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800335a:	490d      	ldr	r1, [pc, #52]	; (8003390 <HAL_InitTick+0x68>)
 800335c:	f7fc fed4 	bl	8000108 <__udivsi3>
 8003360:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <HAL_InitTick+0x6c>)
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_InitTick+0x70>)
 8003366:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_InitTick+0x74>)
 800336a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800336c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003372:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003374:	f003 f8c6 	bl	8006504 <HAL_TIM_Base_Init>
 8003378:	2800      	cmp	r0, #0
 800337a:	d002      	beq.n	8003382 <HAL_InitTick+0x5a>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800337c:	2001      	movs	r0, #1
}
 800337e:	b007      	add	sp, #28
 8003380:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8003382:	4804      	ldr	r0, [pc, #16]	; (8003394 <HAL_InitTick+0x6c>)
 8003384:	f002 ffaf 	bl	80062e6 <HAL_TIM_Base_Start_IT>
 8003388:	e7f9      	b.n	800337e <HAL_InitTick+0x56>
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	40021000 	.word	0x40021000
 8003390:	000f4240 	.word	0x000f4240
 8003394:	200003d8 	.word	0x200003d8
 8003398:	40001000 	.word	0x40001000
 800339c:	000003e7 	.word	0x000003e7

080033a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033a0:	4770      	bx	lr

080033a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a2:	e7fe      	b.n	80033a2 <HardFault_Handler>

080033a4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033a4:	4770      	bx	lr

080033a6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a8:	4770      	bx	lr

080033aa <RCC_CRS_IRQHandler>:

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80033aa:	4770      	bx	lr

080033ac <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80033ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80033ae:	2080      	movs	r0, #128	; 0x80
 80033b0:	0180      	lsls	r0, r0, #6
 80033b2:	f000 fa7f 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
//		joyStates.a7 = 0;
//  }
//  else{
//	  joyStates.a7 = 1;
//  }
  if(colibState == 0){
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <EXTI4_15_IRQHandler+0x1c>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <EXTI4_15_IRQHandler+0x18>
	  colibState = 1;
 80033be:	2201      	movs	r2, #1
 80033c0:	4b01      	ldr	r3, [pc, #4]	; (80033c8 <EXTI4_15_IRQHandler+0x1c>)
 80033c2:	701a      	strb	r2, [r3, #0]
//	}
//	else{
//		joyStates.a7 = 0;
//	}
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000346 	.word	0x20000346

080033cc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80033cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80033ce:	4803      	ldr	r0, [pc, #12]	; (80033dc <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 80033d0:	f000 f945 	bl	800365e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80033d6:	f000 f942 	bl	800365e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	200002b8 	.word	0x200002b8
 80033e0:	2000038c 	.word	0x2000038c

080033e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033e6:	4802      	ldr	r0, [pc, #8]	; (80033f0 <TIM6_DAC_IRQHandler+0xc>)
 80033e8:	f002 ff8c 	bl	8006304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	200003d8 	.word	0x200003d8

080033f4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80033f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80033f6:	4802      	ldr	r0, [pc, #8]	; (8003400 <USB_IRQHandler+0xc>)
 80033f8:	f001 faec 	bl	80049d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000840 	.word	0x20000840

08003404 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <SystemInit+0x48>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	480f      	ldr	r0, [pc, #60]	; (8003450 <SystemInit+0x4c>)
 8003412:	4002      	ands	r2, r0
 8003414:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <SystemInit+0x50>)
 800341a:	4002      	ands	r2, r0
 800341c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <SystemInit+0x54>)
 8003422:	4002      	ands	r2, r0
 8003424:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <SystemInit+0x58>)
 800342a:	4002      	ands	r2, r0
 800342c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	200f      	movs	r0, #15
 8003432:	4382      	bics	r2, r0
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <SystemInit+0x5c>)
 800343a:	4002      	ands	r2, r0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800343e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003440:	438a      	bics	r2, r1
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]

}
 8003448:	4770      	bx	lr
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	08ffb80c 	.word	0x08ffb80c
 8003454:	fef6ffff 	.word	0xfef6ffff
 8003458:	fffbffff 	.word	0xfffbffff
 800345c:	ffc0ffff 	.word	0xffc0ffff
 8003460:	fffcfe2c 	.word	0xfffcfe2c

08003464 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003466:	4a06      	ldr	r2, [pc, #24]	; (8003480 <HAL_Init+0x1c>)
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	2110      	movs	r1, #16
 800346c:	430b      	orrs	r3, r1
 800346e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003470:	2000      	movs	r0, #0
 8003472:	f7ff ff59 	bl	8003328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003476:	f7ff fe7f 	bl	8003178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800347a:	2000      	movs	r0, #0
 800347c:	bd10      	pop	{r4, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	40022000 	.word	0x40022000

08003484 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003484:	4a02      	ldr	r2, [pc, #8]	; (8003490 <HAL_IncTick+0xc>)
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	4770      	bx	lr
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	20000418 	.word	0x20000418

08003494 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <HAL_GetTick+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	20000418 	.word	0x20000418

080034a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80034a0:	b530      	push	{r4, r5, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a6:	f7ff fff5 	bl	8003494 <HAL_GetTick>
 80034aa:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 80034ac:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ae:	1c63      	adds	r3, r4, #1
 80034b0:	d000      	beq.n	80034b4 <HAL_Delay+0x14>
  {
     wait++;
 80034b2:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	1b40      	subs	r0, r0, r5
 80034ba:	42a0      	cmp	r0, r4
 80034bc:	d3fa      	bcc.n	80034b4 <HAL_Delay+0x14>
  {
  }
}
 80034be:	b003      	add	sp, #12
 80034c0:	bd30      	pop	{r4, r5, pc}
	...

080034c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80034c6:	2800      	cmp	r0, #0
 80034c8:	db11      	blt.n	80034ee <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ca:	0883      	lsrs	r3, r0, #2
 80034cc:	4d14      	ldr	r5, [pc, #80]	; (8003520 <HAL_NVIC_SetPriority+0x5c>)
 80034ce:	33c0      	adds	r3, #192	; 0xc0
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	595c      	ldr	r4, [r3, r5]
 80034d4:	2203      	movs	r2, #3
 80034d6:	4010      	ands	r0, r2
 80034d8:	00c0      	lsls	r0, r0, #3
 80034da:	32fc      	adds	r2, #252	; 0xfc
 80034dc:	0016      	movs	r6, r2
 80034de:	4086      	lsls	r6, r0
 80034e0:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034e2:	0189      	lsls	r1, r1, #6
 80034e4:	400a      	ands	r2, r1
 80034e6:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034e8:	4322      	orrs	r2, r4
 80034ea:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ee:	b2c0      	uxtb	r0, r0
 80034f0:	230f      	movs	r3, #15
 80034f2:	4003      	ands	r3, r0
 80034f4:	3b08      	subs	r3, #8
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3306      	adds	r3, #6
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_NVIC_SetPriority+0x60>)
 80034fe:	4694      	mov	ip, r2
 8003500:	4463      	add	r3, ip
 8003502:	685d      	ldr	r5, [r3, #4]
 8003504:	2203      	movs	r2, #3
 8003506:	4010      	ands	r0, r2
 8003508:	00c0      	lsls	r0, r0, #3
 800350a:	24ff      	movs	r4, #255	; 0xff
 800350c:	0022      	movs	r2, r4
 800350e:	4082      	lsls	r2, r0
 8003510:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003512:	0189      	lsls	r1, r1, #6
 8003514:	400c      	ands	r4, r1
 8003516:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003518:	432c      	orrs	r4, r5
 800351a:	605c      	str	r4, [r3, #4]
 800351c:	e7e6      	b.n	80034ec <HAL_NVIC_SetPriority+0x28>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003528:	231f      	movs	r3, #31
 800352a:	4018      	ands	r0, r3
 800352c:	3b1e      	subs	r3, #30
 800352e:	4083      	lsls	r3, r0
 8003530:	4a01      	ldr	r2, [pc, #4]	; (8003538 <HAL_NVIC_EnableIRQ+0x10>)
 8003532:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003534:	4770      	bx	lr
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	e000e100 	.word	0xe000e100

0800353c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353c:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800353e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8003540:	2401      	movs	r4, #1
 8003542:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003544:	40b4      	lsls	r4, r6
 8003546:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003548:	6804      	ldr	r4, [r0, #0]
 800354a:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354c:	6843      	ldr	r3, [r0, #4]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d004      	beq.n	800355c <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003556:	6803      	ldr	r3, [r0, #0]
 8003558:	60da      	str	r2, [r3, #12]
  }
}
 800355a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800355c:	6803      	ldr	r3, [r0, #0]
 800355e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003560:	6803      	ldr	r3, [r0, #0]
 8003562:	60d9      	str	r1, [r3, #12]
 8003564:	e7f9      	b.n	800355a <DMA_SetConfig+0x1e>
	...

08003568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003568:	b510      	push	{r4, lr}
 800356a:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <DMA_CalcBaseAndBitshift+0x20>)
 8003570:	4694      	mov	ip, r2
 8003572:	4463      	add	r3, ip
 8003574:	0018      	movs	r0, r3
 8003576:	2114      	movs	r1, #20
 8003578:	f7fc fdc6 	bl	8000108 <__udivsi3>
 800357c:	0080      	lsls	r0, r0, #2
 800357e:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <DMA_CalcBaseAndBitshift+0x24>)
 8003582:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8003584:	bd10      	pop	{r4, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	bffdfff8 	.word	0xbffdfff8
 800358c:	40020000 	.word	0x40020000

08003590 <HAL_DMA_Init>:
{ 
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8003594:	d024      	beq.n	80035e0 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003596:	2521      	movs	r5, #33	; 0x21
 8003598:	2302      	movs	r3, #2
 800359a:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 800359c:	6801      	ldr	r1, [r0, #0]
 800359e:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a0:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_DMA_Init+0x54>)
 80035a2:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80035a4:	6843      	ldr	r3, [r0, #4]
 80035a6:	6880      	ldr	r0, [r0, #8]
 80035a8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	68e0      	ldr	r0, [r4, #12]
 80035ac:	4303      	orrs	r3, r0
 80035ae:	6920      	ldr	r0, [r4, #16]
 80035b0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	6960      	ldr	r0, [r4, #20]
 80035b4:	4303      	orrs	r3, r0
 80035b6:	69a0      	ldr	r0, [r4, #24]
 80035b8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	69e0      	ldr	r0, [r4, #28]
 80035bc:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80035be:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80035c0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80035c2:	0020      	movs	r0, r4
 80035c4:	f7ff ffd0 	bl	8003568 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80035cc:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80035ce:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80035d0:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80035d4:	2201      	movs	r2, #1
 80035d6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80035d8:	321f      	adds	r2, #31
 80035da:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80035dc:	2000      	movs	r0, #0
}  
 80035de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7fc      	b.n	80035de <HAL_DMA_Init+0x4e>
 80035e4:	ffffc00f 	.word	0xffffc00f

080035e8 <HAL_DMA_Start_IT>:
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80035ec:	2020      	movs	r0, #32
 80035ee:	5c20      	ldrb	r0, [r4, r0]
 80035f0:	2801      	cmp	r0, #1
 80035f2:	d032      	beq.n	800365a <HAL_DMA_Start_IT+0x72>
 80035f4:	2501      	movs	r5, #1
 80035f6:	2020      	movs	r0, #32
 80035f8:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80035fa:	3001      	adds	r0, #1
 80035fc:	5c20      	ldrb	r0, [r4, r0]
 80035fe:	2801      	cmp	r0, #1
 8003600:	d004      	beq.n	800360c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003602:	2200      	movs	r2, #0
 8003604:	2320      	movs	r3, #32
 8003606:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8003608:	2002      	movs	r0, #2
} 
 800360a:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	3501      	adds	r5, #1
 800360e:	3020      	adds	r0, #32
 8003610:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003612:	2000      	movs	r0, #0
 8003614:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003616:	6825      	ldr	r5, [r4, #0]
 8003618:	6828      	ldr	r0, [r5, #0]
 800361a:	2601      	movs	r6, #1
 800361c:	43b0      	bics	r0, r6
 800361e:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003620:	0020      	movs	r0, r4
 8003622:	f7ff ff8b 	bl	800353c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8003626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	210e      	movs	r1, #14
 8003632:	430b      	orrs	r3, r1
 8003634:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	2101      	movs	r1, #1
 800363c:	430b      	orrs	r3, r1
 800363e:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003640:	2000      	movs	r0, #0
 8003642:	e7e2      	b.n	800360a <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	210a      	movs	r1, #10
 800364a:	430b      	orrs	r3, r1
 800364c:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	3906      	subs	r1, #6
 8003654:	438b      	bics	r3, r1
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e7ed      	b.n	8003636 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800365a:	2002      	movs	r0, #2
 800365c:	e7d5      	b.n	800360a <HAL_DMA_Start_IT+0x22>

0800365e <HAL_DMA_IRQHandler>:
{
 800365e:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003660:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003662:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003664:	6804      	ldr	r4, [r0, #0]
 8003666:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003668:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800366a:	2304      	movs	r3, #4
 800366c:	408b      	lsls	r3, r1
 800366e:	4213      	tst	r3, r2
 8003670:	d012      	beq.n	8003698 <HAL_DMA_IRQHandler+0x3a>
 8003672:	076b      	lsls	r3, r5, #29
 8003674:	d510      	bpl.n	8003698 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	d403      	bmi.n	8003684 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	4393      	bics	r3, r2
 8003682:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003684:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003686:	2304      	movs	r3, #4
 8003688:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800368a:	408b      	lsls	r3, r1
 800368c:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800368e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d000      	beq.n	8003696 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8003694:	4798      	blx	r3
}  
 8003696:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003698:	2302      	movs	r3, #2
 800369a:	408b      	lsls	r3, r1
 800369c:	4213      	tst	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x74>
 80036a0:	07ab      	lsls	r3, r5, #30
 80036a2:	d516      	bpl.n	80036d2 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	d406      	bmi.n	80036b8 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	220a      	movs	r2, #10
 80036ae:	4393      	bics	r3, r2
 80036b0:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80036b2:	3a09      	subs	r2, #9
 80036b4:	2321      	movs	r3, #33	; 0x21
 80036b6:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80036ba:	2302      	movs	r3, #2
 80036bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036be:	408b      	lsls	r3, r1
 80036c0:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2320      	movs	r3, #32
 80036c6:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 80036c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0e3      	beq.n	8003696 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 80036ce:	4798      	blx	r3
 80036d0:	e7e1      	b.n	8003696 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036d2:	2308      	movs	r3, #8
 80036d4:	408b      	lsls	r3, r1
 80036d6:	4213      	tst	r3, r2
 80036d8:	d0dd      	beq.n	8003696 <HAL_DMA_IRQHandler+0x38>
 80036da:	072b      	lsls	r3, r5, #28
 80036dc:	d5db      	bpl.n	8003696 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	220e      	movs	r2, #14
 80036e2:	4393      	bics	r3, r2
 80036e4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80036e8:	2301      	movs	r3, #1
 80036ea:	0019      	movs	r1, r3
 80036ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80036ee:	40a1      	lsls	r1, r4
 80036f0:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036f2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80036f4:	2221      	movs	r2, #33	; 0x21
 80036f6:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 80036f8:	2200      	movs	r2, #0
 80036fa:	331f      	adds	r3, #31
 80036fc:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80036fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0c8      	beq.n	8003696 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8003704:	4798      	blx	r3
}  
 8003706:	e7c6      	b.n	8003696 <HAL_DMA_IRQHandler+0x38>

08003708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	46c6      	mov	lr, r8
 800370c:	b500      	push	{lr}
 800370e:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8003710:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003712:	e081      	b.n	8003818 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003714:	08df      	lsrs	r7, r3, #3
 8003716:	3708      	adds	r7, #8
 8003718:	00bf      	lsls	r7, r7, #2
 800371a:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800371c:	2507      	movs	r5, #7
 800371e:	401d      	ands	r5, r3
 8003720:	00ad      	lsls	r5, r5, #2
 8003722:	240f      	movs	r4, #15
 8003724:	40ac      	lsls	r4, r5
 8003726:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003728:	690c      	ldr	r4, [r1, #16]
 800372a:	40ac      	lsls	r4, r5
 800372c:	0025      	movs	r5, r4
 800372e:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003730:	503d      	str	r5, [r7, r0]
 8003732:	e081      	b.n	8003838 <HAL_GPIO_Init+0x130>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003734:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003736:	4664      	mov	r4, ip
 8003738:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800373a:	68ce      	ldr	r6, [r1, #12]
 800373c:	40be      	lsls	r6, r7
 800373e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003740:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003744:	002c      	movs	r4, r5
 8003746:	4645      	mov	r5, r8
 8003748:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800374a:	684d      	ldr	r5, [r1, #4]
 800374c:	092e      	lsrs	r6, r5, #4
 800374e:	2501      	movs	r5, #1
 8003750:	4035      	ands	r5, r6
 8003752:	409d      	lsls	r5, r3
 8003754:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003756:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003758:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800375a:	4665      	mov	r5, ip
 800375c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800375e:	688d      	ldr	r5, [r1, #8]
 8003760:	40bd      	lsls	r5, r7
 8003762:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003764:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003766:	684c      	ldr	r4, [r1, #4]
 8003768:	00e4      	lsls	r4, r4, #3
 800376a:	d554      	bpl.n	8003816 <HAL_GPIO_Init+0x10e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376c:	4d46      	ldr	r5, [pc, #280]	; (8003888 <HAL_GPIO_Init+0x180>)
 800376e:	69ae      	ldr	r6, [r5, #24]
 8003770:	2401      	movs	r4, #1
 8003772:	4326      	orrs	r6, r4
 8003774:	61ae      	str	r6, [r5, #24]
 8003776:	69ad      	ldr	r5, [r5, #24]
 8003778:	402c      	ands	r4, r5
 800377a:	9401      	str	r4, [sp, #4]
 800377c:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800377e:	089c      	lsrs	r4, r3, #2
 8003780:	1ca5      	adds	r5, r4, #2
 8003782:	00ad      	lsls	r5, r5, #2
 8003784:	4e41      	ldr	r6, [pc, #260]	; (800388c <HAL_GPIO_Init+0x184>)
 8003786:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003788:	2703      	movs	r7, #3
 800378a:	401f      	ands	r7, r3
 800378c:	00bd      	lsls	r5, r7, #2
 800378e:	270f      	movs	r7, #15
 8003790:	40af      	lsls	r7, r5
 8003792:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003794:	2790      	movs	r7, #144	; 0x90
 8003796:	05ff      	lsls	r7, r7, #23
 8003798:	42b8      	cmp	r0, r7
 800379a:	d068      	beq.n	800386e <HAL_GPIO_Init+0x166>
 800379c:	4f3c      	ldr	r7, [pc, #240]	; (8003890 <HAL_GPIO_Init+0x188>)
 800379e:	42b8      	cmp	r0, r7
 80037a0:	d067      	beq.n	8003872 <HAL_GPIO_Init+0x16a>
 80037a2:	4f3c      	ldr	r7, [pc, #240]	; (8003894 <HAL_GPIO_Init+0x18c>)
 80037a4:	42b8      	cmp	r0, r7
 80037a6:	d066      	beq.n	8003876 <HAL_GPIO_Init+0x16e>
 80037a8:	4f3b      	ldr	r7, [pc, #236]	; (8003898 <HAL_GPIO_Init+0x190>)
 80037aa:	42b8      	cmp	r0, r7
 80037ac:	d065      	beq.n	800387a <HAL_GPIO_Init+0x172>
 80037ae:	4f3b      	ldr	r7, [pc, #236]	; (800389c <HAL_GPIO_Init+0x194>)
 80037b0:	42b8      	cmp	r0, r7
 80037b2:	d05a      	beq.n	800386a <HAL_GPIO_Init+0x162>
 80037b4:	2705      	movs	r7, #5
 80037b6:	40af      	lsls	r7, r5
 80037b8:	003d      	movs	r5, r7
 80037ba:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80037bc:	3402      	adds	r4, #2
 80037be:	00a4      	lsls	r4, r4, #2
 80037c0:	4e32      	ldr	r6, [pc, #200]	; (800388c <HAL_GPIO_Init+0x184>)
 80037c2:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c4:	4c36      	ldr	r4, [pc, #216]	; (80038a0 <HAL_GPIO_Init+0x198>)
 80037c6:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037c8:	43d4      	mvns	r4, r2
 80037ca:	0026      	movs	r6, r4
 80037cc:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ce:	684f      	ldr	r7, [r1, #4]
 80037d0:	03ff      	lsls	r7, r7, #15
 80037d2:	d501      	bpl.n	80037d8 <HAL_GPIO_Init+0xd0>
        {
          SET_BIT(temp, iocurrent); 
 80037d4:	4315      	orrs	r5, r2
 80037d6:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80037d8:	4d31      	ldr	r5, [pc, #196]	; (80038a0 <HAL_GPIO_Init+0x198>)
 80037da:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80037dc:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80037de:	002e      	movs	r6, r5
 80037e0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037e2:	684f      	ldr	r7, [r1, #4]
 80037e4:	03bf      	lsls	r7, r7, #14
 80037e6:	d501      	bpl.n	80037ec <HAL_GPIO_Init+0xe4>
        { 
          SET_BIT(temp, iocurrent); 
 80037e8:	4315      	orrs	r5, r2
 80037ea:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80037ec:	4d2c      	ldr	r5, [pc, #176]	; (80038a0 <HAL_GPIO_Init+0x198>)
 80037ee:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f0:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80037f2:	002e      	movs	r6, r5
 80037f4:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f6:	684f      	ldr	r7, [r1, #4]
 80037f8:	02ff      	lsls	r7, r7, #11
 80037fa:	d501      	bpl.n	8003800 <HAL_GPIO_Init+0xf8>
        {
          SET_BIT(temp, iocurrent); 
 80037fc:	4315      	orrs	r5, r2
 80037fe:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003800:	4d27      	ldr	r5, [pc, #156]	; (80038a0 <HAL_GPIO_Init+0x198>)
 8003802:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003804:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003806:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003808:	684e      	ldr	r6, [r1, #4]
 800380a:	02b6      	lsls	r6, r6, #10
 800380c:	d501      	bpl.n	8003812 <HAL_GPIO_Init+0x10a>
        {
          SET_BIT(temp, iocurrent); 
 800380e:	432a      	orrs	r2, r5
 8003810:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <HAL_GPIO_Init+0x198>)
 8003814:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8003816:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003818:	680a      	ldr	r2, [r1, #0]
 800381a:	0014      	movs	r4, r2
 800381c:	40dc      	lsrs	r4, r3
 800381e:	d02e      	beq.n	800387e <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003820:	2401      	movs	r4, #1
 8003822:	409c      	lsls	r4, r3
 8003824:	46a0      	mov	r8, r4
 8003826:	4022      	ands	r2, r4
    if(iocurrent)
 8003828:	d0f5      	beq.n	8003816 <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800382a:	684d      	ldr	r5, [r1, #4]
 800382c:	2d02      	cmp	r5, #2
 800382e:	d100      	bne.n	8003832 <HAL_GPIO_Init+0x12a>
 8003830:	e770      	b.n	8003714 <HAL_GPIO_Init+0xc>
 8003832:	2d12      	cmp	r5, #18
 8003834:	d100      	bne.n	8003838 <HAL_GPIO_Init+0x130>
 8003836:	e76d      	b.n	8003714 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 8003838:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800383a:	005f      	lsls	r7, r3, #1
 800383c:	2503      	movs	r5, #3
 800383e:	002c      	movs	r4, r5
 8003840:	40bc      	lsls	r4, r7
 8003842:	43e4      	mvns	r4, r4
 8003844:	46a4      	mov	ip, r4
 8003846:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003848:	684c      	ldr	r4, [r1, #4]
 800384a:	4025      	ands	r5, r4
 800384c:	40bd      	lsls	r5, r7
 800384e:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8003850:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003852:	684d      	ldr	r5, [r1, #4]
 8003854:	1e6e      	subs	r6, r5, #1
 8003856:	2e01      	cmp	r6, #1
 8003858:	d800      	bhi.n	800385c <HAL_GPIO_Init+0x154>
 800385a:	e76b      	b.n	8003734 <HAL_GPIO_Init+0x2c>
 800385c:	2d11      	cmp	r5, #17
 800385e:	d100      	bne.n	8003862 <HAL_GPIO_Init+0x15a>
 8003860:	e768      	b.n	8003734 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003862:	2d12      	cmp	r5, #18
 8003864:	d000      	beq.n	8003868 <HAL_GPIO_Init+0x160>
 8003866:	e777      	b.n	8003758 <HAL_GPIO_Init+0x50>
 8003868:	e764      	b.n	8003734 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800386a:	2704      	movs	r7, #4
 800386c:	e7a3      	b.n	80037b6 <HAL_GPIO_Init+0xae>
 800386e:	2700      	movs	r7, #0
 8003870:	e7a1      	b.n	80037b6 <HAL_GPIO_Init+0xae>
 8003872:	2701      	movs	r7, #1
 8003874:	e79f      	b.n	80037b6 <HAL_GPIO_Init+0xae>
 8003876:	2702      	movs	r7, #2
 8003878:	e79d      	b.n	80037b6 <HAL_GPIO_Init+0xae>
 800387a:	2703      	movs	r7, #3
 800387c:	e79b      	b.n	80037b6 <HAL_GPIO_Init+0xae>
  } 
}
 800387e:	b002      	add	sp, #8
 8003880:	bc04      	pop	{r2}
 8003882:	4690      	mov	r8, r2
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	40021000 	.word	0x40021000
 800388c:	40010000 	.word	0x40010000
 8003890:	48000400 	.word	0x48000400
 8003894:	48000800 	.word	0x48000800
 8003898:	48000c00 	.word	0x48000c00
 800389c:	48001000 	.word	0x48001000
 80038a0:	40010400 	.word	0x40010400

080038a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d101      	bne.n	80038ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80038aa:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ac:	6181      	str	r1, [r0, #24]
 80038ae:	e7fc      	b.n	80038aa <HAL_GPIO_WritePin+0x6>

080038b0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80038b4:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4218      	tst	r0, r3
 80038bc:	d100      	bne.n	80038c0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80038be:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80038c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c4:	f7ff fff4 	bl	80038b0 <HAL_GPIO_EXTI_Callback>
}
 80038c8:	e7f9      	b.n	80038be <HAL_GPIO_EXTI_IRQHandler+0xa>
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	40010400 	.word	0x40010400

080038d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80038d4:	d058      	beq.n	8003988 <HAL_PCD_Init+0xb8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80038d6:	23ea      	movs	r3, #234	; 0xea
 80038d8:	33ff      	adds	r3, #255	; 0xff
 80038da:	5cc3      	ldrb	r3, [r0, r3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_PCD_Init+0x1c>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038e0:	2203      	movs	r2, #3
 80038e2:	23ea      	movs	r3, #234	; 0xea
 80038e4:	33ff      	adds	r3, #255	; 0xff
 80038e6:	54e2      	strb	r2, [r4, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80038e8:	2200      	movs	r2, #0
 80038ea:	e018      	b.n	800391e <HAL_PCD_Init+0x4e>
    hpcd->Lock = HAL_UNLOCKED;
 80038ec:	2200      	movs	r2, #0
 80038ee:	33e9      	adds	r3, #233	; 0xe9
 80038f0:	33ff      	adds	r3, #255	; 0xff
 80038f2:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 80038f4:	f003 fdc0 	bl	8007478 <HAL_PCD_MspInit>
 80038f8:	e7f2      	b.n	80038e0 <HAL_PCD_Init+0x10>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80038fa:	00d1      	lsls	r1, r2, #3
 80038fc:	1a89      	subs	r1, r1, r2
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	18e3      	adds	r3, r4, r3
 8003902:	0019      	movs	r1, r3
 8003904:	3129      	adds	r1, #41	; 0x29
 8003906:	2001      	movs	r0, #1
 8003908:	7008      	strb	r0, [r1, #0]
   hpcd->IN_ep[i].num = i;
 800390a:	3901      	subs	r1, #1
 800390c:	700a      	strb	r2, [r1, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800390e:	0018      	movs	r0, r3
 8003910:	302b      	adds	r0, #43	; 0x2b
 8003912:	2100      	movs	r1, #0
 8003914:	7001      	strb	r1, [r0, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8003916:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0U;
 8003918:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0U;
 800391a:	63d9      	str	r1, [r3, #60]	; 0x3c
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800391c:	3201      	adds	r2, #1
 800391e:	6860      	ldr	r0, [r4, #4]
 8003920:	4282      	cmp	r2, r0
 8003922:	d3ea      	bcc.n	80038fa <HAL_PCD_Init+0x2a>
 8003924:	2200      	movs	r2, #0
 8003926:	e014      	b.n	8003952 <HAL_PCD_Init+0x82>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8003928:	00d1      	lsls	r1, r2, #3
 800392a:	1a89      	subs	r1, r1, r2
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	18e3      	adds	r3, r4, r3
 8003930:	001d      	movs	r5, r3
 8003932:	350a      	adds	r5, #10
 8003934:	35ff      	adds	r5, #255	; 0xff
 8003936:	2100      	movs	r1, #0
 8003938:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].num = i;
 800393a:	3d01      	subs	r5, #1
 800393c:	702a      	strb	r2, [r5, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800393e:	3503      	adds	r5, #3
 8003940:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8003942:	3509      	adds	r5, #9
 8003944:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8003946:	3504      	adds	r5, #4
 8003948:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800394a:	331d      	adds	r3, #29
 800394c:	33ff      	adds	r3, #255	; 0xff
 800394e:	6019      	str	r1, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8003950:	3201      	adds	r2, #1
 8003952:	4282      	cmp	r2, r0
 8003954:	d3e8      	bcc.n	8003928 <HAL_PCD_Init+0x58>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	2201      	movs	r2, #1
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	52ca      	strh	r2, [r1, r3]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800395e:	2200      	movs	r2, #0
 8003960:	6821      	ldr	r1, [r4, #0]
 8003962:	52ca      	strh	r2, [r1, r3]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8003964:	2144      	movs	r1, #68	; 0x44
 8003966:	6820      	ldr	r0, [r4, #0]
 8003968:	5242      	strh	r2, [r0, r1]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800396a:	310c      	adds	r1, #12
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	5242      	strh	r2, [r0, r1]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8003970:	4a06      	ldr	r2, [pc, #24]	; (800398c <HAL_PCD_Init+0xbc>)
 8003972:	6821      	ldr	r1, [r4, #0]
 8003974:	52ca      	strh	r2, [r1, r3]
  
  hpcd->USB_Address = 0U;
 8003976:	3b1c      	subs	r3, #28
 8003978:	2200      	movs	r2, #0
 800397a:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 800397c:	23ea      	movs	r3, #234	; 0xea
 800397e:	33ff      	adds	r3, #255	; 0xff
 8003980:	2201      	movs	r2, #1
 8003982:	54e2      	strb	r2, [r4, r3]

 return HAL_OK;
 8003984:	2000      	movs	r0, #0
}
 8003986:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e7fc      	b.n	8003986 <HAL_PCD_Init+0xb6>
 800398c:	ffffbf00 	.word	0xffffbf00

08003990 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8003990:	6801      	ldr	r1, [r0, #0]
 8003992:	2258      	movs	r2, #88	; 0x58
 8003994:	5a8b      	ldrh	r3, [r1, r2]
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <HAL_PCD_Start+0x14>)
 8003998:	4303      	orrs	r3, r0
 800399a:	b29b      	uxth	r3, r3
 800399c:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	4770      	bx	lr
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	ffff8000 	.word	0xffff8000

080039a8 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80039a8:	23f4      	movs	r3, #244	; 0xf4
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	5cc3      	ldrb	r3, [r0, r3]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d013      	beq.n	80039da <HAL_PCD_SetAddress+0x32>
 80039b2:	2201      	movs	r2, #1
 80039b4:	23f4      	movs	r3, #244	; 0xf4
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	54c2      	strb	r2, [r0, r3]

   if(address == 0U) 
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_PCD_SetAddress+0x2c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80039be:	327f      	adds	r2, #127	; 0x7f
 80039c0:	3b9d      	subs	r3, #157	; 0x9d
 80039c2:	3bff      	subs	r3, #255	; 0xff
 80039c4:	6801      	ldr	r1, [r0, #0]
 80039c6:	52ca      	strh	r2, [r1, r3]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 80039c8:	2200      	movs	r2, #0
 80039ca:	23f4      	movs	r3, #244	; 0xf4
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80039d0:	2000      	movs	r0, #0
}
 80039d2:	4770      	bx	lr
     hpcd->USB_Address = address;
 80039d4:	2324      	movs	r3, #36	; 0x24
 80039d6:	54c1      	strb	r1, [r0, r3]
 80039d8:	e7f6      	b.n	80039c8 <HAL_PCD_SetAddress+0x20>
   __HAL_LOCK(hpcd); 
 80039da:	2002      	movs	r0, #2
 80039dc:	e7f9      	b.n	80039d2 <HAL_PCD_SetAddress+0x2a>
	...

080039e0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80039e0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80039e2:	b24e      	sxtb	r6, r1
 80039e4:	2e00      	cmp	r6, #0
 80039e6:	db65      	blt.n	8003ab4 <HAL_PCD_EP_Open+0xd4>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80039e8:	247f      	movs	r4, #127	; 0x7f
 80039ea:	400c      	ands	r4, r1
 80039ec:	00e5      	lsls	r5, r4, #3
 80039ee:	1b2d      	subs	r5, r5, r4
 80039f0:	00ac      	lsls	r4, r5, #2
 80039f2:	3409      	adds	r4, #9
 80039f4:	34ff      	adds	r4, #255	; 0xff
 80039f6:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 80039f8:	257f      	movs	r5, #127	; 0x7f
 80039fa:	400d      	ands	r5, r1
 80039fc:	7025      	strb	r5, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80039fe:	0ff6      	lsrs	r6, r6, #31
 8003a00:	7066      	strb	r6, [r4, #1]
  ep->maxpacket = ep_mps;
 8003a02:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8003a04:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8003a06:	23f4      	movs	r3, #244	; 0xf4
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	5cc3      	ldrb	r3, [r0, r3]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d100      	bne.n	8003a12 <HAL_PCD_EP_Open+0x32>
 8003a10:	e175      	b.n	8003cfe <HAL_PCD_EP_Open+0x31e>
 8003a12:	2201      	movs	r2, #1
 8003a14:	23f4      	movs	r3, #244	; 0xf4
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	54c2      	strb	r2, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8003a1a:	78e3      	ldrb	r3, [r4, #3]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d100      	bne.n	8003a22 <HAL_PCD_EP_Open+0x42>
 8003a20:	e074      	b.n	8003b0c <HAL_PCD_EP_Open+0x12c>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04e      	beq.n	8003ac4 <HAL_PCD_EP_Open+0xe4>
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d059      	beq.n	8003ade <HAL_PCD_EP_Open+0xfe>
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d061      	beq.n	8003af2 <HAL_PCD_EP_Open+0x112>
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8003a2e:	7822      	ldrb	r2, [r4, #0]
 8003a30:	0093      	lsls	r3, r2, #2
 8003a32:	6801      	ldr	r1, [r0, #0]
 8003a34:	468c      	mov	ip, r1
 8003a36:	4463      	add	r3, ip
 8003a38:	8819      	ldrh	r1, [r3, #0]
 8003a3a:	4db2      	ldr	r5, [pc, #712]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003a3c:	4029      	ands	r1, r5
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	49b1      	ldr	r1, [pc, #708]	; (8003d08 <HAL_PCD_EP_Open+0x328>)
 8003a42:	430a      	orrs	r2, r1
 8003a44:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8003a46:	7aa3      	ldrb	r3, [r4, #10]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d000      	beq.n	8003a4e <HAL_PCD_EP_Open+0x6e>
 8003a4c:	e0b5      	b.n	8003bba <HAL_PCD_EP_Open+0x1da>
  {
    if (ep->is_in)
 8003a4e:	7863      	ldrb	r3, [r4, #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d100      	bne.n	8003a56 <HAL_PCD_EP_Open+0x76>
 8003a54:	e067      	b.n	8003b26 <HAL_PCD_EP_Open+0x146>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003a56:	6801      	ldr	r1, [r0, #0]
 8003a58:	2350      	movs	r3, #80	; 0x50
 8003a5a:	5acb      	ldrh	r3, [r1, r3]
 8003a5c:	7822      	ldrb	r2, [r4, #0]
 8003a5e:	00d2      	lsls	r2, r2, #3
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	185b      	adds	r3, r3, r1
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	00d2      	lsls	r2, r2, #3
 8003a68:	4694      	mov	ip, r2
 8003a6a:	4463      	add	r3, ip
 8003a6c:	88a2      	ldrh	r2, [r4, #4]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	438a      	bics	r2, r1
 8003a72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003a74:	7823      	ldrb	r3, [r4, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	6802      	ldr	r2, [r0, #0]
 8003a7a:	4694      	mov	ip, r2
 8003a7c:	4463      	add	r3, ip
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	0651      	lsls	r1, r2, #25
 8003a82:	d503      	bpl.n	8003a8c <HAL_PCD_EP_Open+0xac>
 8003a84:	402a      	ands	r2, r5
 8003a86:	49a1      	ldr	r1, [pc, #644]	; (8003d0c <HAL_PCD_EP_Open+0x32c>)
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8003a8c:	7822      	ldrb	r2, [r4, #0]
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	6803      	ldr	r3, [r0, #0]
 8003a92:	469c      	mov	ip, r3
 8003a94:	4462      	add	r2, ip
 8003a96:	8813      	ldrh	r3, [r2, #0]
 8003a98:	499d      	ldr	r1, [pc, #628]	; (8003d10 <HAL_PCD_EP_Open+0x330>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	404b      	eors	r3, r1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4999      	ldr	r1, [pc, #612]	; (8003d08 <HAL_PCD_EP_Open+0x328>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	23f4      	movs	r3, #244	; 0xf4
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	54c2      	strb	r2, [r0, r3]
  return ret;
 8003ab0:	2000      	movs	r0, #0
}
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003ab4:	247f      	movs	r4, #127	; 0x7f
 8003ab6:	400c      	ands	r4, r1
 8003ab8:	00e5      	lsls	r5, r4, #3
 8003aba:	1b2d      	subs	r5, r5, r4
 8003abc:	00ac      	lsls	r4, r5, #2
 8003abe:	3428      	adds	r4, #40	; 0x28
 8003ac0:	1904      	adds	r4, r0, r4
 8003ac2:	e799      	b.n	80039f8 <HAL_PCD_EP_Open+0x18>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8003ac4:	7823      	ldrb	r3, [r4, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	6802      	ldr	r2, [r0, #0]
 8003aca:	4694      	mov	ip, r2
 8003acc:	4463      	add	r3, ip
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	4990      	ldr	r1, [pc, #576]	; (8003d14 <HAL_PCD_EP_Open+0x334>)
 8003ad2:	4011      	ands	r1, r2
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0092      	lsls	r2, r2, #2
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	801a      	strh	r2, [r3, #0]
    break;
 8003adc:	e7a7      	b.n	8003a2e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8003ade:	7823      	ldrb	r3, [r4, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	6802      	ldr	r2, [r0, #0]
 8003ae4:	4694      	mov	ip, r2
 8003ae6:	4463      	add	r3, ip
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	498a      	ldr	r1, [pc, #552]	; (8003d14 <HAL_PCD_EP_Open+0x334>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	801a      	strh	r2, [r3, #0]
    break;
 8003af0:	e79d      	b.n	8003a2e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8003af2:	7823      	ldrb	r3, [r4, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	6802      	ldr	r2, [r0, #0]
 8003af8:	4694      	mov	ip, r2
 8003afa:	4463      	add	r3, ip
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	4985      	ldr	r1, [pc, #532]	; (8003d14 <HAL_PCD_EP_Open+0x334>)
 8003b00:	4011      	ands	r1, r2
 8003b02:	22c0      	movs	r2, #192	; 0xc0
 8003b04:	00d2      	lsls	r2, r2, #3
 8003b06:	430a      	orrs	r2, r1
 8003b08:	801a      	strh	r2, [r3, #0]
    break;
 8003b0a:	e790      	b.n	8003a2e <HAL_PCD_EP_Open+0x4e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8003b0c:	7823      	ldrb	r3, [r4, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	6802      	ldr	r2, [r0, #0]
 8003b12:	4694      	mov	ip, r2
 8003b14:	4463      	add	r3, ip
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	497e      	ldr	r1, [pc, #504]	; (8003d14 <HAL_PCD_EP_Open+0x334>)
 8003b1a:	4011      	ands	r1, r2
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	00d2      	lsls	r2, r2, #3
 8003b20:	430a      	orrs	r2, r1
 8003b22:	801a      	strh	r2, [r3, #0]
    break;
 8003b24:	e783      	b.n	8003a2e <HAL_PCD_EP_Open+0x4e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003b26:	6801      	ldr	r1, [r0, #0]
 8003b28:	2550      	movs	r5, #80	; 0x50
 8003b2a:	5b4b      	ldrh	r3, [r1, r5]
 8003b2c:	7822      	ldrb	r2, [r4, #0]
 8003b2e:	00d2      	lsls	r2, r2, #3
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	185b      	adds	r3, r3, r1
 8003b34:	4a78      	ldr	r2, [pc, #480]	; (8003d18 <HAL_PCD_EP_Open+0x338>)
 8003b36:	4694      	mov	ip, r2
 8003b38:	4463      	add	r3, ip
 8003b3a:	88a2      	ldrh	r2, [r4, #4]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	438a      	bics	r2, r1
 8003b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003b42:	6801      	ldr	r1, [r0, #0]
 8003b44:	5b4b      	ldrh	r3, [r1, r5]
 8003b46:	7822      	ldrb	r2, [r4, #0]
 8003b48:	00d2      	lsls	r2, r2, #3
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	185b      	adds	r3, r3, r1
 8003b4e:	4a73      	ldr	r2, [pc, #460]	; (8003d1c <HAL_PCD_EP_Open+0x33c>)
 8003b50:	4694      	mov	ip, r2
 8003b52:	4463      	add	r3, ip
 8003b54:	68e1      	ldr	r1, [r4, #12]
 8003b56:	293e      	cmp	r1, #62	; 0x3e
 8003b58:	d926      	bls.n	8003ba8 <HAL_PCD_EP_Open+0x1c8>
 8003b5a:	094a      	lsrs	r2, r1, #5
 8003b5c:	b292      	uxth	r2, r2
 8003b5e:	06c9      	lsls	r1, r1, #27
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_EP_Open+0x186>
 8003b62:	3a01      	subs	r2, #1
 8003b64:	b292      	uxth	r2, r2
 8003b66:	0292      	lsls	r2, r2, #10
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	496d      	ldr	r1, [pc, #436]	; (8003d20 <HAL_PCD_EP_Open+0x340>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003b70:	7823      	ldrb	r3, [r4, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	6802      	ldr	r2, [r0, #0]
 8003b76:	4694      	mov	ip, r2
 8003b78:	4463      	add	r3, ip
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	0451      	lsls	r1, r2, #17
 8003b7e:	d504      	bpl.n	8003b8a <HAL_PCD_EP_Open+0x1aa>
 8003b80:	4960      	ldr	r1, [pc, #384]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	4967      	ldr	r1, [pc, #412]	; (8003d24 <HAL_PCD_EP_Open+0x344>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003b8a:	7823      	ldrb	r3, [r4, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	6802      	ldr	r2, [r0, #0]
 8003b90:	4694      	mov	ip, r2
 8003b92:	4463      	add	r3, ip
 8003b94:	8819      	ldrh	r1, [r3, #0]
 8003b96:	4a64      	ldr	r2, [pc, #400]	; (8003d28 <HAL_PCD_EP_Open+0x348>)
 8003b98:	4011      	ands	r1, r2
 8003b9a:	22c0      	movs	r2, #192	; 0xc0
 8003b9c:	0192      	lsls	r2, r2, #6
 8003b9e:	4051      	eors	r1, r2
 8003ba0:	4a59      	ldr	r2, [pc, #356]	; (8003d08 <HAL_PCD_EP_Open+0x328>)
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e77f      	b.n	8003aa8 <HAL_PCD_EP_Open+0xc8>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8003ba8:	084a      	lsrs	r2, r1, #1
 8003baa:	b292      	uxth	r2, r2
 8003bac:	07c9      	lsls	r1, r1, #31
 8003bae:	d501      	bpl.n	8003bb4 <HAL_PCD_EP_Open+0x1d4>
 8003bb0:	3201      	adds	r2, #1
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	0292      	lsls	r2, r2, #10
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	e7da      	b.n	8003b70 <HAL_PCD_EP_Open+0x190>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8003bba:	7823      	ldrb	r3, [r4, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	6802      	ldr	r2, [r0, #0]
 8003bc0:	4694      	mov	ip, r2
 8003bc2:	4463      	add	r3, ip
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	4959      	ldr	r1, [pc, #356]	; (8003d2c <HAL_PCD_EP_Open+0x34c>)
 8003bc8:	4011      	ands	r1, r2
 8003bca:	4a59      	ldr	r2, [pc, #356]	; (8003d30 <HAL_PCD_EP_Open+0x350>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8003bd0:	6801      	ldr	r1, [r0, #0]
 8003bd2:	2650      	movs	r6, #80	; 0x50
 8003bd4:	5b8b      	ldrh	r3, [r1, r6]
 8003bd6:	7822      	ldrb	r2, [r4, #0]
 8003bd8:	00d2      	lsls	r2, r2, #3
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	185b      	adds	r3, r3, r1
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	00d2      	lsls	r2, r2, #3
 8003be2:	4694      	mov	ip, r2
 8003be4:	4463      	add	r3, ip
 8003be6:	88e2      	ldrh	r2, [r4, #6]
 8003be8:	2101      	movs	r1, #1
 8003bea:	438a      	bics	r2, r1
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	6805      	ldr	r5, [r0, #0]
 8003bf0:	5bab      	ldrh	r3, [r5, r6]
 8003bf2:	7822      	ldrb	r2, [r4, #0]
 8003bf4:	00d2      	lsls	r2, r2, #3
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	195b      	adds	r3, r3, r5
 8003bfa:	4a47      	ldr	r2, [pc, #284]	; (8003d18 <HAL_PCD_EP_Open+0x338>)
 8003bfc:	4694      	mov	ip, r2
 8003bfe:	4463      	add	r3, ip
 8003c00:	8922      	ldrh	r2, [r4, #8]
 8003c02:	438a      	bics	r2, r1
 8003c04:	801a      	strh	r2, [r3, #0]
    if (ep->is_in==0U)
 8003c06:	7863      	ldrb	r3, [r4, #1]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d13d      	bne.n	8003c88 <HAL_PCD_EP_Open+0x2a8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003c0c:	7823      	ldrb	r3, [r4, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	6802      	ldr	r2, [r0, #0]
 8003c12:	4694      	mov	ip, r2
 8003c14:	4463      	add	r3, ip
 8003c16:	881a      	ldrh	r2, [r3, #0]
 8003c18:	0451      	lsls	r1, r2, #17
 8003c1a:	d504      	bpl.n	8003c26 <HAL_PCD_EP_Open+0x246>
 8003c1c:	4939      	ldr	r1, [pc, #228]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	4940      	ldr	r1, [pc, #256]	; (8003d24 <HAL_PCD_EP_Open+0x344>)
 8003c22:	430a      	orrs	r2, r1
 8003c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003c26:	7823      	ldrb	r3, [r4, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	6802      	ldr	r2, [r0, #0]
 8003c2c:	4694      	mov	ip, r2
 8003c2e:	4463      	add	r3, ip
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	0651      	lsls	r1, r2, #25
 8003c34:	d504      	bpl.n	8003c40 <HAL_PCD_EP_Open+0x260>
 8003c36:	4933      	ldr	r1, [pc, #204]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	4934      	ldr	r1, [pc, #208]	; (8003d0c <HAL_PCD_EP_Open+0x32c>)
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003c40:	7823      	ldrb	r3, [r4, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	6802      	ldr	r2, [r0, #0]
 8003c46:	4694      	mov	ip, r2
 8003c48:	4463      	add	r3, ip
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	492d      	ldr	r1, [pc, #180]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003c4e:	4011      	ands	r1, r2
 8003c50:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <HAL_PCD_EP_Open+0x32c>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003c56:	7821      	ldrb	r1, [r4, #0]
 8003c58:	0089      	lsls	r1, r1, #2
 8003c5a:	6803      	ldr	r3, [r0, #0]
 8003c5c:	469c      	mov	ip, r3
 8003c5e:	4461      	add	r1, ip
 8003c60:	880b      	ldrh	r3, [r1, #0]
 8003c62:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <HAL_PCD_EP_Open+0x348>)
 8003c64:	401a      	ands	r2, r3
 8003c66:	23c0      	movs	r3, #192	; 0xc0
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	4053      	eors	r3, r2
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_PCD_EP_Open+0x328>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003c72:	7823      	ldrb	r3, [r4, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	6801      	ldr	r1, [r0, #0]
 8003c78:	468c      	mov	ip, r1
 8003c7a:	4463      	add	r3, ip
 8003c7c:	8819      	ldrh	r1, [r3, #0]
 8003c7e:	4c24      	ldr	r4, [pc, #144]	; (8003d10 <HAL_PCD_EP_Open+0x330>)
 8003c80:	4021      	ands	r1, r4
 8003c82:	430a      	orrs	r2, r1
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e70f      	b.n	8003aa8 <HAL_PCD_EP_Open+0xc8>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003c88:	7823      	ldrb	r3, [r4, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	6802      	ldr	r2, [r0, #0]
 8003c8e:	4694      	mov	ip, r2
 8003c90:	4463      	add	r3, ip
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	0451      	lsls	r1, r2, #17
 8003c96:	d504      	bpl.n	8003ca2 <HAL_PCD_EP_Open+0x2c2>
 8003c98:	491a      	ldr	r1, [pc, #104]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	4921      	ldr	r1, [pc, #132]	; (8003d24 <HAL_PCD_EP_Open+0x344>)
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	6802      	ldr	r2, [r0, #0]
 8003ca8:	4694      	mov	ip, r2
 8003caa:	4463      	add	r3, ip
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	0651      	lsls	r1, r2, #25
 8003cb0:	d504      	bpl.n	8003cbc <HAL_PCD_EP_Open+0x2dc>
 8003cb2:	4914      	ldr	r1, [pc, #80]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	4915      	ldr	r1, [pc, #84]	; (8003d0c <HAL_PCD_EP_Open+0x32c>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003cbc:	7823      	ldrb	r3, [r4, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	6802      	ldr	r2, [r0, #0]
 8003cc2:	4694      	mov	ip, r2
 8003cc4:	4463      	add	r3, ip
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	490e      	ldr	r1, [pc, #56]	; (8003d04 <HAL_PCD_EP_Open+0x324>)
 8003cca:	4011      	ands	r1, r2
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_PCD_EP_Open+0x344>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003cd2:	7821      	ldrb	r1, [r4, #0]
 8003cd4:	0089      	lsls	r1, r1, #2
 8003cd6:	6803      	ldr	r3, [r0, #0]
 8003cd8:	469c      	mov	ip, r3
 8003cda:	4461      	add	r1, ip
 8003cdc:	880b      	ldrh	r3, [r1, #0]
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <HAL_PCD_EP_Open+0x330>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_PCD_EP_Open+0x328>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003ce8:	7823      	ldrb	r3, [r4, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	6801      	ldr	r1, [r0, #0]
 8003cee:	468c      	mov	ip, r1
 8003cf0:	4463      	add	r3, ip
 8003cf2:	8819      	ldrh	r1, [r3, #0]
 8003cf4:	4c0c      	ldr	r4, [pc, #48]	; (8003d28 <HAL_PCD_EP_Open+0x348>)
 8003cf6:	4021      	ands	r1, r4
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	e6d4      	b.n	8003aa8 <HAL_PCD_EP_Open+0xc8>
  __HAL_LOCK(hpcd); 
 8003cfe:	2002      	movs	r0, #2
 8003d00:	e6d7      	b.n	8003ab2 <HAL_PCD_EP_Open+0xd2>
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	00000f0f 	.word	0x00000f0f
 8003d08:	ffff8080 	.word	0xffff8080
 8003d0c:	ffff80c0 	.word	0xffff80c0
 8003d10:	ffff8fbf 	.word	0xffff8fbf
 8003d14:	ffff898f 	.word	0xffff898f
 8003d18:	00000404 	.word	0x00000404
 8003d1c:	00000406 	.word	0x00000406
 8003d20:	ffff8000 	.word	0xffff8000
 8003d24:	ffffc080 	.word	0xffffc080
 8003d28:	ffffbf8f 	.word	0xffffbf8f
 8003d2c:	00000e0f 	.word	0x00000e0f
 8003d30:	ffff8180 	.word	0xffff8180

08003d34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003d34:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8003d36:	b24a      	sxtb	r2, r1
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	db3a      	blt.n	8003db2 <HAL_PCD_EP_Close+0x7e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003d3c:	237f      	movs	r3, #127	; 0x7f
 8003d3e:	400b      	ands	r3, r1
 8003d40:	00dc      	lsls	r4, r3, #3
 8003d42:	1ae4      	subs	r4, r4, r3
 8003d44:	00a3      	lsls	r3, r4, #2
 8003d46:	3309      	adds	r3, #9
 8003d48:	33ff      	adds	r3, #255	; 0xff
 8003d4a:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 8003d4c:	247f      	movs	r4, #127	; 0x7f
 8003d4e:	4021      	ands	r1, r4
 8003d50:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003d52:	0fd2      	lsrs	r2, r2, #31
 8003d54:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8003d56:	22f4      	movs	r2, #244	; 0xf4
 8003d58:	0052      	lsls	r2, r2, #1
 8003d5a:	5c82      	ldrb	r2, [r0, r2]
 8003d5c:	2a01      	cmp	r2, #1
 8003d5e:	d100      	bne.n	8003d62 <HAL_PCD_EP_Close+0x2e>
 8003d60:	e0c1      	b.n	8003ee6 <HAL_PCD_EP_Close+0x1b2>
 8003d62:	2101      	movs	r1, #1
 8003d64:	22f4      	movs	r2, #244	; 0xf4
 8003d66:	0052      	lsls	r2, r2, #1
 8003d68:	5481      	strb	r1, [r0, r2]

  if (ep->doublebuffer == 0U) 
 8003d6a:	7a9a      	ldrb	r2, [r3, #10]
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d141      	bne.n	8003df4 <HAL_PCD_EP_Close+0xc0>
  {
    if (ep->is_in)
 8003d70:	785a      	ldrb	r2, [r3, #1]
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d025      	beq.n	8003dc2 <HAL_PCD_EP_Close+0x8e>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	6801      	ldr	r1, [r0, #0]
 8003d7c:	468c      	mov	ip, r1
 8003d7e:	4462      	add	r2, ip
 8003d80:	8811      	ldrh	r1, [r2, #0]
 8003d82:	064c      	lsls	r4, r1, #25
 8003d84:	d504      	bpl.n	8003d90 <HAL_PCD_EP_Close+0x5c>
 8003d86:	4c59      	ldr	r4, [pc, #356]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003d88:	4021      	ands	r1, r4
 8003d8a:	4c59      	ldr	r4, [pc, #356]	; (8003ef0 <HAL_PCD_EP_Close+0x1bc>)
 8003d8c:	4321      	orrs	r1, r4
 8003d8e:	8011      	strh	r1, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	6802      	ldr	r2, [r0, #0]
 8003d96:	4694      	mov	ip, r2
 8003d98:	4463      	add	r3, ip
 8003d9a:	881a      	ldrh	r2, [r3, #0]
 8003d9c:	4955      	ldr	r1, [pc, #340]	; (8003ef4 <HAL_PCD_EP_Close+0x1c0>)
 8003d9e:	4011      	ands	r1, r2
 8003da0:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <HAL_PCD_EP_Close+0x1c4>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003da6:	2200      	movs	r2, #0
 8003da8:	23f4      	movs	r3, #244	; 0xf4
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003dae:	2000      	movs	r0, #0
}
 8003db0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003db2:	237f      	movs	r3, #127	; 0x7f
 8003db4:	400b      	ands	r3, r1
 8003db6:	00dc      	lsls	r4, r3, #3
 8003db8:	1ae4      	subs	r4, r4, r3
 8003dba:	00a3      	lsls	r3, r4, #2
 8003dbc:	3328      	adds	r3, #40	; 0x28
 8003dbe:	18c3      	adds	r3, r0, r3
 8003dc0:	e7c4      	b.n	8003d4c <HAL_PCD_EP_Close+0x18>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	6801      	ldr	r1, [r0, #0]
 8003dc8:	468c      	mov	ip, r1
 8003dca:	4462      	add	r2, ip
 8003dcc:	8811      	ldrh	r1, [r2, #0]
 8003dce:	044c      	lsls	r4, r1, #17
 8003dd0:	d504      	bpl.n	8003ddc <HAL_PCD_EP_Close+0xa8>
 8003dd2:	4c46      	ldr	r4, [pc, #280]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003dd4:	4021      	ands	r1, r4
 8003dd6:	4c49      	ldr	r4, [pc, #292]	; (8003efc <HAL_PCD_EP_Close+0x1c8>)
 8003dd8:	4321      	orrs	r1, r4
 8003dda:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	6802      	ldr	r2, [r0, #0]
 8003de2:	4694      	mov	ip, r2
 8003de4:	4463      	add	r3, ip
 8003de6:	881a      	ldrh	r2, [r3, #0]
 8003de8:	4945      	ldr	r1, [pc, #276]	; (8003f00 <HAL_PCD_EP_Close+0x1cc>)
 8003dea:	4011      	ands	r1, r2
 8003dec:	4a42      	ldr	r2, [pc, #264]	; (8003ef8 <HAL_PCD_EP_Close+0x1c4>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e7d8      	b.n	8003da6 <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 8003df4:	785a      	ldrb	r2, [r3, #1]
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	d13a      	bne.n	8003e70 <HAL_PCD_EP_Close+0x13c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	0092      	lsls	r2, r2, #2
 8003dfe:	6801      	ldr	r1, [r0, #0]
 8003e00:	468c      	mov	ip, r1
 8003e02:	4462      	add	r2, ip
 8003e04:	8811      	ldrh	r1, [r2, #0]
 8003e06:	044c      	lsls	r4, r1, #17
 8003e08:	d504      	bpl.n	8003e14 <HAL_PCD_EP_Close+0xe0>
 8003e0a:	4c38      	ldr	r4, [pc, #224]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003e0c:	4021      	ands	r1, r4
 8003e0e:	4c3b      	ldr	r4, [pc, #236]	; (8003efc <HAL_PCD_EP_Close+0x1c8>)
 8003e10:	4321      	orrs	r1, r4
 8003e12:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	6801      	ldr	r1, [r0, #0]
 8003e1a:	468c      	mov	ip, r1
 8003e1c:	4462      	add	r2, ip
 8003e1e:	8811      	ldrh	r1, [r2, #0]
 8003e20:	064c      	lsls	r4, r1, #25
 8003e22:	d504      	bpl.n	8003e2e <HAL_PCD_EP_Close+0xfa>
 8003e24:	4c31      	ldr	r4, [pc, #196]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003e26:	4021      	ands	r1, r4
 8003e28:	4c31      	ldr	r4, [pc, #196]	; (8003ef0 <HAL_PCD_EP_Close+0x1bc>)
 8003e2a:	4321      	orrs	r1, r4
 8003e2c:	8011      	strh	r1, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	6801      	ldr	r1, [r0, #0]
 8003e34:	468c      	mov	ip, r1
 8003e36:	4462      	add	r2, ip
 8003e38:	8811      	ldrh	r1, [r2, #0]
 8003e3a:	4c2c      	ldr	r4, [pc, #176]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003e3c:	400c      	ands	r4, r1
 8003e3e:	492c      	ldr	r1, [pc, #176]	; (8003ef0 <HAL_PCD_EP_Close+0x1bc>)
 8003e40:	4321      	orrs	r1, r4
 8003e42:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003e44:	781c      	ldrb	r4, [r3, #0]
 8003e46:	00a4      	lsls	r4, r4, #2
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	4694      	mov	ip, r2
 8003e4c:	4464      	add	r4, ip
 8003e4e:	8822      	ldrh	r2, [r4, #0]
 8003e50:	492b      	ldr	r1, [pc, #172]	; (8003f00 <HAL_PCD_EP_Close+0x1cc>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	4928      	ldr	r1, [pc, #160]	; (8003ef8 <HAL_PCD_EP_Close+0x1c4>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	6802      	ldr	r2, [r0, #0]
 8003e60:	4694      	mov	ip, r2
 8003e62:	4463      	add	r3, ip
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	4c23      	ldr	r4, [pc, #140]	; (8003ef4 <HAL_PCD_EP_Close+0x1c0>)
 8003e68:	4022      	ands	r2, r4
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	8019      	strh	r1, [r3, #0]
 8003e6e:	e79a      	b.n	8003da6 <HAL_PCD_EP_Close+0x72>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	0092      	lsls	r2, r2, #2
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	468c      	mov	ip, r1
 8003e78:	4462      	add	r2, ip
 8003e7a:	8811      	ldrh	r1, [r2, #0]
 8003e7c:	044c      	lsls	r4, r1, #17
 8003e7e:	d504      	bpl.n	8003e8a <HAL_PCD_EP_Close+0x156>
 8003e80:	4c1a      	ldr	r4, [pc, #104]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003e82:	4021      	ands	r1, r4
 8003e84:	4c1d      	ldr	r4, [pc, #116]	; (8003efc <HAL_PCD_EP_Close+0x1c8>)
 8003e86:	4321      	orrs	r1, r4
 8003e88:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	6801      	ldr	r1, [r0, #0]
 8003e90:	468c      	mov	ip, r1
 8003e92:	4462      	add	r2, ip
 8003e94:	8811      	ldrh	r1, [r2, #0]
 8003e96:	064c      	lsls	r4, r1, #25
 8003e98:	d504      	bpl.n	8003ea4 <HAL_PCD_EP_Close+0x170>
 8003e9a:	4c14      	ldr	r4, [pc, #80]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003e9c:	4021      	ands	r1, r4
 8003e9e:	4c14      	ldr	r4, [pc, #80]	; (8003ef0 <HAL_PCD_EP_Close+0x1bc>)
 8003ea0:	4321      	orrs	r1, r4
 8003ea2:	8011      	strh	r1, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	6801      	ldr	r1, [r0, #0]
 8003eaa:	468c      	mov	ip, r1
 8003eac:	4462      	add	r2, ip
 8003eae:	8811      	ldrh	r1, [r2, #0]
 8003eb0:	4c0e      	ldr	r4, [pc, #56]	; (8003eec <HAL_PCD_EP_Close+0x1b8>)
 8003eb2:	400c      	ands	r4, r1
 8003eb4:	4911      	ldr	r1, [pc, #68]	; (8003efc <HAL_PCD_EP_Close+0x1c8>)
 8003eb6:	4321      	orrs	r1, r4
 8003eb8:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8003eba:	781c      	ldrb	r4, [r3, #0]
 8003ebc:	00a4      	lsls	r4, r4, #2
 8003ebe:	6802      	ldr	r2, [r0, #0]
 8003ec0:	4694      	mov	ip, r2
 8003ec2:	4464      	add	r4, ip
 8003ec4:	8822      	ldrh	r2, [r4, #0]
 8003ec6:	490b      	ldr	r1, [pc, #44]	; (8003ef4 <HAL_PCD_EP_Close+0x1c0>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <HAL_PCD_EP_Close+0x1c4>)
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	6802      	ldr	r2, [r0, #0]
 8003ed6:	4694      	mov	ip, r2
 8003ed8:	4463      	add	r3, ip
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	4c08      	ldr	r4, [pc, #32]	; (8003f00 <HAL_PCD_EP_Close+0x1cc>)
 8003ede:	4022      	ands	r2, r4
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	8019      	strh	r1, [r3, #0]
 8003ee4:	e75f      	b.n	8003da6 <HAL_PCD_EP_Close+0x72>
  __HAL_LOCK(hpcd); 
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	e762      	b.n	8003db0 <HAL_PCD_EP_Close+0x7c>
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	00000f0f 	.word	0x00000f0f
 8003ef0:	ffff80c0 	.word	0xffff80c0
 8003ef4:	ffff8fbf 	.word	0xffff8fbf
 8003ef8:	ffff8080 	.word	0xffff8080
 8003efc:	ffffc080 	.word	0xffffc080
 8003f00:	ffffbf8f 	.word	0xffffbf8f

08003f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	247f      	movs	r4, #127	; 0x7f
 8003f08:	4021      	ands	r1, r4
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003f0a:	00cd      	lsls	r5, r1, #3
 8003f0c:	1a6d      	subs	r5, r5, r1
 8003f0e:	00ac      	lsls	r4, r5, #2
 8003f10:	1904      	adds	r4, r0, r4
 8003f12:	0025      	movs	r5, r4
 8003f14:	3519      	adds	r5, #25
 8003f16:	35ff      	adds	r5, #255	; 0xff
 8003f18:	602a      	str	r2, [r5, #0]
  ep->xfer_len = len;
 8003f1a:	0022      	movs	r2, r4
 8003f1c:	321d      	adds	r2, #29
 8003f1e:	32ff      	adds	r2, #255	; 0xff
 8003f20:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8003f22:	3508      	adds	r5, #8
 8003f24:	2200      	movs	r2, #0
 8003f26:	602a      	str	r2, [r5, #0]
  ep->is_in = 0U;
 8003f28:	3d17      	subs	r5, #23
 8003f2a:	702a      	strb	r2, [r5, #0]
  ep->num = ep_addr & 0x7FU;
 8003f2c:	0022      	movs	r2, r4
 8003f2e:	3209      	adds	r2, #9
 8003f30:	32ff      	adds	r2, #255	; 0xff
 8003f32:	7011      	strb	r1, [r2, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003f34:	3415      	adds	r4, #21
 8003f36:	34ff      	adds	r4, #255	; 0xff
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d940      	bls.n	8003fc0 <HAL_PCD_EP_Receive+0xbc>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003f3e:	00cd      	lsls	r5, r1, #3
 8003f40:	1a6d      	subs	r5, r5, r1
 8003f42:	00ac      	lsls	r4, r5, #2
 8003f44:	1904      	adds	r4, r0, r4
 8003f46:	341d      	adds	r4, #29
 8003f48:	34ff      	adds	r4, #255	; 0xff
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	6023      	str	r3, [r4, #0]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003f4e:	00cc      	lsls	r4, r1, #3
 8003f50:	1a64      	subs	r4, r4, r1
 8003f52:	00a3      	lsls	r3, r4, #2
 8003f54:	001c      	movs	r4, r3
 8003f56:	18c3      	adds	r3, r0, r3
 8003f58:	3313      	adds	r3, #19
 8003f5a:	33ff      	adds	r3, #255	; 0xff
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d141      	bne.n	8003fe6 <HAL_PCD_EP_Receive+0xe2>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8003f62:	6805      	ldr	r5, [r0, #0]
 8003f64:	3350      	adds	r3, #80	; 0x50
 8003f66:	5aeb      	ldrh	r3, [r5, r3]
 8003f68:	1904      	adds	r4, r0, r4
 8003f6a:	3409      	adds	r4, #9
 8003f6c:	34ff      	adds	r4, #255	; 0xff
 8003f6e:	7824      	ldrb	r4, [r4, #0]
 8003f70:	00e4      	lsls	r4, r4, #3
 8003f72:	191b      	adds	r3, r3, r4
 8003f74:	195b      	adds	r3, r3, r5
 8003f76:	4c5e      	ldr	r4, [pc, #376]	; (80040f0 <HAL_PCD_EP_Receive+0x1ec>)
 8003f78:	46a4      	mov	ip, r4
 8003f7a:	4463      	add	r3, ip
 8003f7c:	2a3e      	cmp	r2, #62	; 0x3e
 8003f7e:	d929      	bls.n	8003fd4 <HAL_PCD_EP_Receive+0xd0>
 8003f80:	0954      	lsrs	r4, r2, #5
 8003f82:	b2a4      	uxth	r4, r4
 8003f84:	06d2      	lsls	r2, r2, #27
 8003f86:	d101      	bne.n	8003f8c <HAL_PCD_EP_Receive+0x88>
 8003f88:	3c01      	subs	r4, #1
 8003f8a:	b2a4      	uxth	r4, r4
 8003f8c:	02a4      	lsls	r4, r4, #10
 8003f8e:	b2a4      	uxth	r4, r4
 8003f90:	4a58      	ldr	r2, [pc, #352]	; (80040f4 <HAL_PCD_EP_Receive+0x1f0>)
 8003f92:	4314      	orrs	r4, r2
 8003f94:	801c      	strh	r4, [r3, #0]
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003f96:	6803      	ldr	r3, [r0, #0]
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	1a51      	subs	r1, r2, r1
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	1880      	adds	r0, r0, r2
 8003fa0:	3009      	adds	r0, #9
 8003fa2:	30ff      	adds	r0, #255	; 0xff
 8003fa4:	7802      	ldrb	r2, [r0, #0]
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	8819      	ldrh	r1, [r3, #0]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_PCD_EP_Receive+0x1f4>)
 8003fae:	4011      	ands	r1, r2
 8003fb0:	22c0      	movs	r2, #192	; 0xc0
 8003fb2:	0192      	lsls	r2, r2, #6
 8003fb4:	4051      	eors	r1, r2
 8003fb6:	4a51      	ldr	r2, [pc, #324]	; (80040fc <HAL_PCD_EP_Receive+0x1f8>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
}
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
    ep->xfer_len =0U;
 8003fc0:	00cc      	lsls	r4, r1, #3
 8003fc2:	1a64      	subs	r4, r4, r1
 8003fc4:	00a2      	lsls	r2, r4, #2
 8003fc6:	1882      	adds	r2, r0, r2
 8003fc8:	321d      	adds	r2, #29
 8003fca:	32ff      	adds	r2, #255	; 0xff
 8003fcc:	2400      	movs	r4, #0
 8003fce:	6014      	str	r4, [r2, #0]
    len=ep->xfer_len;
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	e7bc      	b.n	8003f4e <HAL_PCD_EP_Receive+0x4a>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8003fd4:	0854      	lsrs	r4, r2, #1
 8003fd6:	b2a4      	uxth	r4, r4
 8003fd8:	07d2      	lsls	r2, r2, #31
 8003fda:	d501      	bpl.n	8003fe0 <HAL_PCD_EP_Receive+0xdc>
 8003fdc:	3401      	adds	r4, #1
 8003fde:	b2a4      	uxth	r4, r4
 8003fe0:	02a4      	lsls	r4, r4, #10
 8003fe2:	801c      	strh	r4, [r3, #0]
 8003fe4:	e7d7      	b.n	8003f96 <HAL_PCD_EP_Receive+0x92>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8003fe6:	00cc      	lsls	r4, r1, #3
 8003fe8:	1a64      	subs	r4, r4, r1
 8003fea:	00a3      	lsls	r3, r4, #2
 8003fec:	001c      	movs	r4, r3
 8003fee:	18c3      	adds	r3, r0, r3
 8003ff0:	330a      	adds	r3, #10
 8003ff2:	33ff      	adds	r3, #255	; 0xff
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d123      	bne.n	8004042 <HAL_PCD_EP_Receive+0x13e>
 8003ffa:	6805      	ldr	r5, [r0, #0]
 8003ffc:	3350      	adds	r3, #80	; 0x50
 8003ffe:	5aeb      	ldrh	r3, [r5, r3]
 8004000:	1904      	adds	r4, r0, r4
 8004002:	3409      	adds	r4, #9
 8004004:	34ff      	adds	r4, #255	; 0xff
 8004006:	7824      	ldrb	r4, [r4, #0]
 8004008:	00e4      	lsls	r4, r4, #3
 800400a:	191b      	adds	r3, r3, r4
 800400c:	195b      	adds	r3, r3, r5
 800400e:	4c3c      	ldr	r4, [pc, #240]	; (8004100 <HAL_PCD_EP_Receive+0x1fc>)
 8004010:	46a4      	mov	ip, r4
 8004012:	4463      	add	r3, ip
 8004014:	2a3e      	cmp	r2, #62	; 0x3e
 8004016:	d90b      	bls.n	8004030 <HAL_PCD_EP_Receive+0x12c>
 8004018:	0954      	lsrs	r4, r2, #5
 800401a:	b2a4      	uxth	r4, r4
 800401c:	06d5      	lsls	r5, r2, #27
 800401e:	d101      	bne.n	8004024 <HAL_PCD_EP_Receive+0x120>
 8004020:	3c01      	subs	r4, #1
 8004022:	b2a4      	uxth	r4, r4
 8004024:	02a4      	lsls	r4, r4, #10
 8004026:	b2a4      	uxth	r4, r4
 8004028:	4d32      	ldr	r5, [pc, #200]	; (80040f4 <HAL_PCD_EP_Receive+0x1f0>)
 800402a:	432c      	orrs	r4, r5
 800402c:	801c      	strh	r4, [r3, #0]
 800402e:	e00a      	b.n	8004046 <HAL_PCD_EP_Receive+0x142>
 8004030:	0854      	lsrs	r4, r2, #1
 8004032:	b2a4      	uxth	r4, r4
 8004034:	07d5      	lsls	r5, r2, #31
 8004036:	d501      	bpl.n	800403c <HAL_PCD_EP_Receive+0x138>
 8004038:	3401      	adds	r4, #1
 800403a:	b2a4      	uxth	r4, r4
 800403c:	02a4      	lsls	r4, r4, #10
 800403e:	801c      	strh	r4, [r3, #0]
 8004040:	e001      	b.n	8004046 <HAL_PCD_EP_Receive+0x142>
 8004042:	2b01      	cmp	r3, #1
 8004044:	d024      	beq.n	8004090 <HAL_PCD_EP_Receive+0x18c>
 8004046:	00cc      	lsls	r4, r1, #3
 8004048:	1a64      	subs	r4, r4, r1
 800404a:	00a3      	lsls	r3, r4, #2
 800404c:	001c      	movs	r4, r3
 800404e:	18c3      	adds	r3, r0, r3
 8004050:	330a      	adds	r3, #10
 8004052:	33ff      	adds	r3, #255	; 0xff
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d135      	bne.n	80040c6 <HAL_PCD_EP_Receive+0x1c2>
 800405a:	6805      	ldr	r5, [r0, #0]
 800405c:	3350      	adds	r3, #80	; 0x50
 800405e:	5aeb      	ldrh	r3, [r5, r3]
 8004060:	1904      	adds	r4, r0, r4
 8004062:	3409      	adds	r4, #9
 8004064:	34ff      	adds	r4, #255	; 0xff
 8004066:	7824      	ldrb	r4, [r4, #0]
 8004068:	00e4      	lsls	r4, r4, #3
 800406a:	191b      	adds	r3, r3, r4
 800406c:	195b      	adds	r3, r3, r5
 800406e:	4c20      	ldr	r4, [pc, #128]	; (80040f0 <HAL_PCD_EP_Receive+0x1ec>)
 8004070:	46a4      	mov	ip, r4
 8004072:	4463      	add	r3, ip
 8004074:	2a3e      	cmp	r2, #62	; 0x3e
 8004076:	d91d      	bls.n	80040b4 <HAL_PCD_EP_Receive+0x1b0>
 8004078:	0954      	lsrs	r4, r2, #5
 800407a:	b2a4      	uxth	r4, r4
 800407c:	06d2      	lsls	r2, r2, #27
 800407e:	d101      	bne.n	8004084 <HAL_PCD_EP_Receive+0x180>
 8004080:	3c01      	subs	r4, #1
 8004082:	b2a4      	uxth	r4, r4
 8004084:	02a4      	lsls	r4, r4, #10
 8004086:	b2a4      	uxth	r4, r4
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_PCD_EP_Receive+0x1f0>)
 800408a:	4314      	orrs	r4, r2
 800408c:	801c      	strh	r4, [r3, #0]
 800408e:	e782      	b.n	8003f96 <HAL_PCD_EP_Receive+0x92>
 8004090:	6805      	ldr	r5, [r0, #0]
 8004092:	334f      	adds	r3, #79	; 0x4f
 8004094:	5aeb      	ldrh	r3, [r5, r3]
 8004096:	00ce      	lsls	r6, r1, #3
 8004098:	1a76      	subs	r6, r6, r1
 800409a:	00b4      	lsls	r4, r6, #2
 800409c:	1904      	adds	r4, r0, r4
 800409e:	3409      	adds	r4, #9
 80040a0:	34ff      	adds	r4, #255	; 0xff
 80040a2:	7824      	ldrb	r4, [r4, #0]
 80040a4:	00e4      	lsls	r4, r4, #3
 80040a6:	191b      	adds	r3, r3, r4
 80040a8:	195b      	adds	r3, r3, r5
 80040aa:	4c15      	ldr	r4, [pc, #84]	; (8004100 <HAL_PCD_EP_Receive+0x1fc>)
 80040ac:	46a4      	mov	ip, r4
 80040ae:	4463      	add	r3, ip
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e7c8      	b.n	8004046 <HAL_PCD_EP_Receive+0x142>
 80040b4:	0854      	lsrs	r4, r2, #1
 80040b6:	b2a4      	uxth	r4, r4
 80040b8:	07d2      	lsls	r2, r2, #31
 80040ba:	d501      	bpl.n	80040c0 <HAL_PCD_EP_Receive+0x1bc>
 80040bc:	3401      	adds	r4, #1
 80040be:	b2a4      	uxth	r4, r4
 80040c0:	02a4      	lsls	r4, r4, #10
 80040c2:	801c      	strh	r4, [r3, #0]
 80040c4:	e767      	b.n	8003f96 <HAL_PCD_EP_Receive+0x92>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d000      	beq.n	80040cc <HAL_PCD_EP_Receive+0x1c8>
 80040ca:	e764      	b.n	8003f96 <HAL_PCD_EP_Receive+0x92>
 80040cc:	6805      	ldr	r5, [r0, #0]
 80040ce:	334f      	adds	r3, #79	; 0x4f
 80040d0:	5aeb      	ldrh	r3, [r5, r3]
 80040d2:	00ce      	lsls	r6, r1, #3
 80040d4:	1a76      	subs	r6, r6, r1
 80040d6:	00b4      	lsls	r4, r6, #2
 80040d8:	1904      	adds	r4, r0, r4
 80040da:	3409      	adds	r4, #9
 80040dc:	34ff      	adds	r4, #255	; 0xff
 80040de:	7824      	ldrb	r4, [r4, #0]
 80040e0:	00e4      	lsls	r4, r4, #3
 80040e2:	191b      	adds	r3, r3, r4
 80040e4:	195b      	adds	r3, r3, r5
 80040e6:	4c02      	ldr	r4, [pc, #8]	; (80040f0 <HAL_PCD_EP_Receive+0x1ec>)
 80040e8:	46a4      	mov	ip, r4
 80040ea:	4463      	add	r3, ip
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	e752      	b.n	8003f96 <HAL_PCD_EP_Receive+0x92>
 80040f0:	00000406 	.word	0x00000406
 80040f4:	ffff8000 	.word	0xffff8000
 80040f8:	ffffbf8f 	.word	0xffffbf8f
 80040fc:	ffff8080 	.word	0xffff8080
 8004100:	00000402 	.word	0x00000402

08004104 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004104:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8004106:	23f4      	movs	r3, #244	; 0xf4
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	5cc3      	ldrb	r3, [r0, r3]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d04e      	beq.n	80041ae <HAL_PCD_EP_SetStall+0xaa>
 8004110:	2201      	movs	r2, #1
 8004112:	23f4      	movs	r3, #244	; 0xf4
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	54c2      	strb	r2, [r0, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8004118:	b24c      	sxtb	r4, r1
 800411a:	2c00      	cmp	r4, #0
 800411c:	db20      	blt.n	8004160 <HAL_PCD_EP_SetStall+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411e:	00ca      	lsls	r2, r1, #3
 8004120:	1a52      	subs	r2, r2, r1
 8004122:	0093      	lsls	r3, r2, #2
 8004124:	3309      	adds	r3, #9
 8004126:	33ff      	adds	r3, #255	; 0xff
 8004128:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 1;
 800412a:	2201      	movs	r2, #1
 800412c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800412e:	327e      	adds	r2, #126	; 0x7e
 8004130:	4011      	ands	r1, r2
 8004132:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8004134:	0fe4      	lsrs	r4, r4, #31
 8004136:	705c      	strb	r4, [r3, #1]
  
  if (ep->num == 0U)
 8004138:	2900      	cmp	r1, #0
 800413a:	d11a      	bne.n	8004172 <HAL_PCD_EP_SetStall+0x6e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 800413c:	0089      	lsls	r1, r1, #2
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	469c      	mov	ip, r3
 8004142:	4461      	add	r1, ip
 8004144:	880a      	ldrh	r2, [r1, #0]
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_PCD_EP_SetStall+0xb0>)
 8004148:	401a      	ands	r2, r3
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_PCD_EP_SetStall+0xb4>)
 800414c:	405a      	eors	r2, r3
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_PCD_EP_SetStall+0xb8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	800b      	strh	r3, [r1, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 8004154:	2200      	movs	r2, #0
 8004156:	23f4      	movs	r3, #244	; 0xf4
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 800415c:	2000      	movs	r0, #0
}
 800415e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004160:	3b6a      	subs	r3, #106	; 0x6a
 8004162:	3bff      	subs	r3, #255	; 0xff
 8004164:	400b      	ands	r3, r1
 8004166:	00da      	lsls	r2, r3, #3
 8004168:	1ad2      	subs	r2, r2, r3
 800416a:	0093      	lsls	r3, r2, #2
 800416c:	3328      	adds	r3, #40	; 0x28
 800416e:	18c3      	adds	r3, r0, r3
 8004170:	e7db      	b.n	800412a <HAL_PCD_EP_SetStall+0x26>
    if (ep->is_in)
 8004172:	2c00      	cmp	r4, #0
 8004174:	d00d      	beq.n	8004192 <HAL_PCD_EP_SetStall+0x8e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8004176:	0089      	lsls	r1, r1, #2
 8004178:	6803      	ldr	r3, [r0, #0]
 800417a:	469c      	mov	ip, r3
 800417c:	4461      	add	r1, ip
 800417e:	880b      	ldrh	r3, [r1, #0]
 8004180:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_PCD_EP_SetStall+0xbc>)
 8004182:	4013      	ands	r3, r2
 8004184:	2210      	movs	r2, #16
 8004186:	4053      	eors	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <HAL_PCD_EP_SetStall+0xb8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	800b      	strh	r3, [r1, #0]
 8004190:	e7e0      	b.n	8004154 <HAL_PCD_EP_SetStall+0x50>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8004192:	0089      	lsls	r1, r1, #2
 8004194:	6803      	ldr	r3, [r0, #0]
 8004196:	469c      	mov	ip, r3
 8004198:	4461      	add	r1, ip
 800419a:	880a      	ldrh	r2, [r1, #0]
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_PCD_EP_SetStall+0xc0>)
 800419e:	401a      	ands	r2, r3
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	015b      	lsls	r3, r3, #5
 80041a4:	405a      	eors	r2, r3
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PCD_EP_SetStall+0xb8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	800b      	strh	r3, [r1, #0]
 80041ac:	e7d2      	b.n	8004154 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd); 
 80041ae:	2002      	movs	r0, #2
 80041b0:	e7d5      	b.n	800415e <HAL_PCD_EP_SetStall+0x5a>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	ffffbfbf 	.word	0xffffbfbf
 80041b8:	00001010 	.word	0x00001010
 80041bc:	ffff8080 	.word	0xffff8080
 80041c0:	ffff8fbf 	.word	0xffff8fbf
 80041c4:	ffffbf8f 	.word	0xffffbf8f

080041c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c8:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80041ca:	b24a      	sxtb	r2, r1
 80041cc:	2a00      	cmp	r2, #0
 80041ce:	db39      	blt.n	8004244 <HAL_PCD_EP_ClrStall+0x7c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d0:	00cc      	lsls	r4, r1, #3
 80041d2:	1a64      	subs	r4, r4, r1
 80041d4:	00a3      	lsls	r3, r4, #2
 80041d6:	3309      	adds	r3, #9
 80041d8:	33ff      	adds	r3, #255	; 0xff
 80041da:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 0U;
 80041dc:	2400      	movs	r4, #0
 80041de:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80041e0:	347f      	adds	r4, #127	; 0x7f
 80041e2:	4021      	ands	r1, r4
 80041e4:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80041e6:	0fd2      	lsrs	r2, r2, #31
 80041e8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80041ea:	22f4      	movs	r2, #244	; 0xf4
 80041ec:	0052      	lsls	r2, r2, #1
 80041ee:	5c82      	ldrb	r2, [r0, r2]
 80041f0:	2a01      	cmp	r2, #1
 80041f2:	d04b      	beq.n	800428c <HAL_PCD_EP_ClrStall+0xc4>
 80041f4:	2101      	movs	r1, #1
 80041f6:	22f4      	movs	r2, #244	; 0xf4
 80041f8:	0052      	lsls	r2, r2, #1
 80041fa:	5481      	strb	r1, [r0, r2]
  
  if (ep->is_in)
 80041fc:	785a      	ldrb	r2, [r3, #1]
 80041fe:	2a00      	cmp	r2, #0
 8004200:	d028      	beq.n	8004254 <HAL_PCD_EP_ClrStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	6801      	ldr	r1, [r0, #0]
 8004208:	468c      	mov	ip, r1
 800420a:	4462      	add	r2, ip
 800420c:	8811      	ldrh	r1, [r2, #0]
 800420e:	064c      	lsls	r4, r1, #25
 8004210:	d504      	bpl.n	800421c <HAL_PCD_EP_ClrStall+0x54>
 8004212:	4c1f      	ldr	r4, [pc, #124]	; (8004290 <HAL_PCD_EP_ClrStall+0xc8>)
 8004214:	4021      	ands	r1, r4
 8004216:	4c1f      	ldr	r4, [pc, #124]	; (8004294 <HAL_PCD_EP_ClrStall+0xcc>)
 8004218:	4321      	orrs	r1, r4
 800421a:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	0092      	lsls	r2, r2, #2
 8004220:	6803      	ldr	r3, [r0, #0]
 8004222:	469c      	mov	ip, r3
 8004224:	4462      	add	r2, ip
 8004226:	8813      	ldrh	r3, [r2, #0]
 8004228:	491b      	ldr	r1, [pc, #108]	; (8004298 <HAL_PCD_EP_ClrStall+0xd0>)
 800422a:	400b      	ands	r3, r1
 800422c:	2130      	movs	r1, #48	; 0x30
 800422e:	404b      	eors	r3, r1
 8004230:	b29b      	uxth	r3, r3
 8004232:	491a      	ldr	r1, [pc, #104]	; (800429c <HAL_PCD_EP_ClrStall+0xd4>)
 8004234:	430b      	orrs	r3, r1
 8004236:	8013      	strh	r3, [r2, #0]
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
  }
  __HAL_UNLOCK(hpcd); 
 8004238:	2200      	movs	r2, #0
 800423a:	23f4      	movs	r3, #244	; 0xf4
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	54c2      	strb	r2, [r0, r3]
    
  return HAL_OK;
 8004240:	2000      	movs	r0, #0
}
 8004242:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004244:	237f      	movs	r3, #127	; 0x7f
 8004246:	400b      	ands	r3, r1
 8004248:	00dc      	lsls	r4, r3, #3
 800424a:	1ae4      	subs	r4, r4, r3
 800424c:	00a3      	lsls	r3, r4, #2
 800424e:	3328      	adds	r3, #40	; 0x28
 8004250:	18c3      	adds	r3, r0, r3
 8004252:	e7c3      	b.n	80041dc <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	0092      	lsls	r2, r2, #2
 8004258:	6801      	ldr	r1, [r0, #0]
 800425a:	468c      	mov	ip, r1
 800425c:	4462      	add	r2, ip
 800425e:	8811      	ldrh	r1, [r2, #0]
 8004260:	044c      	lsls	r4, r1, #17
 8004262:	d504      	bpl.n	800426e <HAL_PCD_EP_ClrStall+0xa6>
 8004264:	4c0a      	ldr	r4, [pc, #40]	; (8004290 <HAL_PCD_EP_ClrStall+0xc8>)
 8004266:	4021      	ands	r1, r4
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <HAL_PCD_EP_ClrStall+0xd8>)
 800426a:	4321      	orrs	r1, r4
 800426c:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	6802      	ldr	r2, [r0, #0]
 8004274:	4694      	mov	ip, r2
 8004276:	4463      	add	r3, ip
 8004278:	8819      	ldrh	r1, [r3, #0]
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <HAL_PCD_EP_ClrStall+0xdc>)
 800427c:	4011      	ands	r1, r2
 800427e:	22c0      	movs	r2, #192	; 0xc0
 8004280:	0192      	lsls	r2, r2, #6
 8004282:	4051      	eors	r1, r2
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <HAL_PCD_EP_ClrStall+0xd4>)
 8004286:	430a      	orrs	r2, r1
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e7d5      	b.n	8004238 <HAL_PCD_EP_ClrStall+0x70>
  __HAL_LOCK(hpcd); 
 800428c:	2002      	movs	r0, #2
 800428e:	e7d8      	b.n	8004242 <HAL_PCD_EP_ClrStall+0x7a>
 8004290:	00000f0f 	.word	0x00000f0f
 8004294:	ffff80c0 	.word	0xffff80c0
 8004298:	ffff8fbf 	.word	0xffff8fbf
 800429c:	ffff8080 	.word	0xffff8080
 80042a0:	ffffc080 	.word	0xffffc080
 80042a4:	ffffbf8f 	.word	0xffffbf8f

080042a8 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80042a8:	b510      	push	{r4, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80042aa:	3301      	adds	r3, #1
 80042ac:	085b      	lsrs	r3, r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80042ae:	1812      	adds	r2, r2, r0
 80042b0:	2080      	movs	r0, #128	; 0x80
 80042b2:	00c0      	lsls	r0, r0, #3
 80042b4:	1814      	adds	r4, r2, r0
  
  for (i = n; i != 0; i--)
 80042b6:	e007      	b.n	80042c8 <PCD_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80042b8:	780a      	ldrb	r2, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80042ba:	7848      	ldrb	r0, [r1, #1]
 80042bc:	0200      	lsls	r0, r0, #8
 80042be:	4302      	orrs	r2, r0
    *pdwVal++ = temp2;
 80042c0:	8022      	strh	r2, [r4, #0]
    pbUsrBuf++;
 80042c2:	3102      	adds	r1, #2
  for (i = n; i != 0; i--)
 80042c4:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 80042c6:	3402      	adds	r4, #2
  for (i = n; i != 0; i--)
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f5      	bne.n	80042b8 <PCD_WritePMA+0x10>
  }
}
 80042cc:	bd10      	pop	{r4, pc}
	...

080042d0 <HAL_PCD_EP_Transmit>:
{
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	0005      	movs	r5, r0
 80042d4:	247f      	movs	r4, #127	; 0x7f
 80042d6:	400c      	ands	r4, r1
  ep->xfer_buff = pBuf;  
 80042d8:	00e0      	lsls	r0, r4, #3
 80042da:	1b00      	subs	r0, r0, r4
 80042dc:	0081      	lsls	r1, r0, #2
 80042de:	1869      	adds	r1, r5, r1
 80042e0:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 80042e2:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0U;
 80042e4:	2200      	movs	r2, #0
 80042e6:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 80042e8:	000a      	movs	r2, r1
 80042ea:	3229      	adds	r2, #41	; 0x29
 80042ec:	2001      	movs	r0, #1
 80042ee:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & 0x7FU;
 80042f0:	3a01      	subs	r2, #1
 80042f2:	7014      	strb	r4, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 80042f4:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80042f6:	42bb      	cmp	r3, r7
 80042f8:	d933      	bls.n	8004362 <HAL_PCD_EP_Transmit+0x92>
    ep->xfer_len-=len; 
 80042fa:	1bdb      	subs	r3, r3, r7
 80042fc:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	1b12      	subs	r2, r2, r4
 8004302:	0093      	lsls	r3, r2, #2
 8004304:	001a      	movs	r2, r3
 8004306:	18eb      	adds	r3, r5, r3
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d030      	beq.n	8004372 <HAL_PCD_EP_Transmit+0xa2>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8004310:	6828      	ldr	r0, [r5, #0]
 8004312:	00e2      	lsls	r2, r4, #3
 8004314:	1b12      	subs	r2, r2, r4
 8004316:	0093      	lsls	r3, r2, #2
 8004318:	18eb      	adds	r3, r5, r3
 800431a:	3328      	adds	r3, #40	; 0x28
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	5a82      	ldrh	r2, [r0, r2]
 8004322:	0652      	lsls	r2, r2, #25
 8004324:	d574      	bpl.n	8004410 <HAL_PCD_EP_Transmit+0x140>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004326:	00e6      	lsls	r6, r4, #3
 8004328:	1b36      	subs	r6, r6, r4
 800432a:	00b2      	lsls	r2, r6, #2
 800432c:	18aa      	adds	r2, r5, r2
 800432e:	3229      	adds	r2, #41	; 0x29
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	2a00      	cmp	r2, #0
 8004334:	d13b      	bne.n	80043ae <HAL_PCD_EP_Transmit+0xde>
 8004336:	3250      	adds	r2, #80	; 0x50
 8004338:	5a82      	ldrh	r2, [r0, r2]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	1818      	adds	r0, r3, r0
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_PCD_EP_Transmit+0x1fc>)
 8004342:	469c      	mov	ip, r3
 8004344:	4460      	add	r0, ip
 8004346:	2f3e      	cmp	r7, #62	; 0x3e
 8004348:	d928      	bls.n	800439c <HAL_PCD_EP_Transmit+0xcc>
 800434a:	097b      	lsrs	r3, r7, #5
 800434c:	b29b      	uxth	r3, r3
 800434e:	06fa      	lsls	r2, r7, #27
 8004350:	d101      	bne.n	8004356 <HAL_PCD_EP_Transmit+0x86>
 8004352:	3b01      	subs	r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	b29b      	uxth	r3, r3
 800435a:	4a5d      	ldr	r2, [pc, #372]	; (80044d0 <HAL_PCD_EP_Transmit+0x200>)
 800435c:	4313      	orrs	r3, r2
 800435e:	8003      	strh	r3, [r0, #0]
 8004360:	e027      	b.n	80043b2 <HAL_PCD_EP_Transmit+0xe2>
    ep->xfer_len =0U;
 8004362:	00e1      	lsls	r1, r4, #3
 8004364:	1b09      	subs	r1, r1, r4
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	18aa      	adds	r2, r5, r2
 800436a:	2100      	movs	r1, #0
 800436c:	63d1      	str	r1, [r2, #60]	; 0x3c
    len=ep->xfer_len;
 800436e:	001f      	movs	r7, r3
 8004370:	e7c5      	b.n	80042fe <HAL_PCD_EP_Transmit+0x2e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8004372:	b2bf      	uxth	r7, r7
 8004374:	18ae      	adds	r6, r5, r2
 8004376:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 8004378:	003b      	movs	r3, r7
 800437a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800437c:	6828      	ldr	r0, [r5, #0]
 800437e:	f7ff ff93 	bl	80042a8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8004382:	682a      	ldr	r2, [r5, #0]
 8004384:	2350      	movs	r3, #80	; 0x50
 8004386:	5ad3      	ldrh	r3, [r2, r3]
 8004388:	3628      	adds	r6, #40	; 0x28
 800438a:	7831      	ldrb	r1, [r6, #0]
 800438c:	00c9      	lsls	r1, r1, #3
 800438e:	185b      	adds	r3, r3, r1
 8004390:	189b      	adds	r3, r3, r2
 8004392:	4a50      	ldr	r2, [pc, #320]	; (80044d4 <HAL_PCD_EP_Transmit+0x204>)
 8004394:	4694      	mov	ip, r2
 8004396:	4463      	add	r3, ip
 8004398:	801f      	strh	r7, [r3, #0]
 800439a:	e082      	b.n	80044a2 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800439c:	087b      	lsrs	r3, r7, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	07fa      	lsls	r2, r7, #31
 80043a2:	d501      	bpl.n	80043a8 <HAL_PCD_EP_Transmit+0xd8>
 80043a4:	3301      	adds	r3, #1
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	8003      	strh	r3, [r0, #0]
 80043ac:	e001      	b.n	80043b2 <HAL_PCD_EP_Transmit+0xe2>
 80043ae:	2a01      	cmp	r2, #1
 80043b0:	d024      	beq.n	80043fc <HAL_PCD_EP_Transmit+0x12c>
      pmabuffer = ep->pmaaddr1;
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	1b12      	subs	r2, r2, r4
 80043b6:	0093      	lsls	r3, r2, #2
 80043b8:	18eb      	adds	r3, r5, r3
 80043ba:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80043bc:	b2bb      	uxth	r3, r7
 80043be:	00e1      	lsls	r1, r4, #3
 80043c0:	1b09      	subs	r1, r1, r4
 80043c2:	008e      	lsls	r6, r1, #2
 80043c4:	19ae      	adds	r6, r5, r6
 80043c6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80043c8:	6828      	ldr	r0, [r5, #0]
 80043ca:	f7ff ff6d 	bl	80042a8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80043ce:	3629      	adds	r6, #41	; 0x29
 80043d0:	7833      	ldrb	r3, [r6, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d055      	beq.n	8004482 <HAL_PCD_EP_Transmit+0x1b2>
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d163      	bne.n	80044a2 <HAL_PCD_EP_Transmit+0x1d2>
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	1b12      	subs	r2, r2, r4
 80043de:	0093      	lsls	r3, r2, #2
 80043e0:	18eb      	adds	r3, r5, r3
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	682a      	ldr	r2, [r5, #0]
 80043ea:	4694      	mov	ip, r2
 80043ec:	4463      	add	r3, ip
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	4939      	ldr	r1, [pc, #228]	; (80044d8 <HAL_PCD_EP_Transmit+0x208>)
 80043f2:	4011      	ands	r1, r2
 80043f4:	4a39      	ldr	r2, [pc, #228]	; (80044dc <HAL_PCD_EP_Transmit+0x20c>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	e052      	b.n	80044a2 <HAL_PCD_EP_Transmit+0x1d2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80043fc:	324f      	adds	r2, #79	; 0x4f
 80043fe:	5a82      	ldrh	r2, [r0, r2]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	18d3      	adds	r3, r2, r3
 8004404:	1818      	adds	r0, r3, r0
 8004406:	4b31      	ldr	r3, [pc, #196]	; (80044cc <HAL_PCD_EP_Transmit+0x1fc>)
 8004408:	469c      	mov	ip, r3
 800440a:	4460      	add	r0, ip
 800440c:	8007      	strh	r7, [r0, #0]
 800440e:	e7d0      	b.n	80043b2 <HAL_PCD_EP_Transmit+0xe2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8004410:	00e6      	lsls	r6, r4, #3
 8004412:	1b36      	subs	r6, r6, r4
 8004414:	00b2      	lsls	r2, r6, #2
 8004416:	18aa      	adds	r2, r5, r2
 8004418:	3229      	adds	r2, #41	; 0x29
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	2a00      	cmp	r2, #0
 800441e:	d11e      	bne.n	800445e <HAL_PCD_EP_Transmit+0x18e>
 8004420:	3250      	adds	r2, #80	; 0x50
 8004422:	5a82      	ldrh	r2, [r0, r2]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	18d3      	adds	r3, r2, r3
 8004428:	1818      	adds	r0, r3, r0
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_PCD_EP_Transmit+0x204>)
 800442c:	469c      	mov	ip, r3
 800442e:	4460      	add	r0, ip
 8004430:	2f3e      	cmp	r7, #62	; 0x3e
 8004432:	d90b      	bls.n	800444c <HAL_PCD_EP_Transmit+0x17c>
 8004434:	097b      	lsrs	r3, r7, #5
 8004436:	b29b      	uxth	r3, r3
 8004438:	06fa      	lsls	r2, r7, #27
 800443a:	d101      	bne.n	8004440 <HAL_PCD_EP_Transmit+0x170>
 800443c:	3b01      	subs	r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	b29b      	uxth	r3, r3
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_PCD_EP_Transmit+0x200>)
 8004446:	4313      	orrs	r3, r2
 8004448:	8003      	strh	r3, [r0, #0]
 800444a:	e00a      	b.n	8004462 <HAL_PCD_EP_Transmit+0x192>
 800444c:	087b      	lsrs	r3, r7, #1
 800444e:	b29b      	uxth	r3, r3
 8004450:	07fa      	lsls	r2, r7, #31
 8004452:	d501      	bpl.n	8004458 <HAL_PCD_EP_Transmit+0x188>
 8004454:	3301      	adds	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	8003      	strh	r3, [r0, #0]
 800445c:	e001      	b.n	8004462 <HAL_PCD_EP_Transmit+0x192>
 800445e:	2a01      	cmp	r2, #1
 8004460:	d005      	beq.n	800446e <HAL_PCD_EP_Transmit+0x19e>
      pmabuffer = ep->pmaaddr0;
 8004462:	00e2      	lsls	r2, r4, #3
 8004464:	1b12      	subs	r2, r2, r4
 8004466:	0093      	lsls	r3, r2, #2
 8004468:	18eb      	adds	r3, r5, r3
 800446a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800446c:	e7a6      	b.n	80043bc <HAL_PCD_EP_Transmit+0xec>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800446e:	324f      	adds	r2, #79	; 0x4f
 8004470:	5a82      	ldrh	r2, [r0, r2]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	1818      	adds	r0, r3, r0
 8004478:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <HAL_PCD_EP_Transmit+0x204>)
 800447a:	469c      	mov	ip, r3
 800447c:	4460      	add	r0, ip
 800447e:	8007      	strh	r7, [r0, #0]
 8004480:	e7ef      	b.n	8004462 <HAL_PCD_EP_Transmit+0x192>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8004482:	00e2      	lsls	r2, r4, #3
 8004484:	1b12      	subs	r2, r2, r4
 8004486:	0093      	lsls	r3, r2, #2
 8004488:	18eb      	adds	r3, r5, r3
 800448a:	3328      	adds	r3, #40	; 0x28
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	682a      	ldr	r2, [r5, #0]
 8004492:	4694      	mov	ip, r2
 8004494:	4463      	add	r3, ip
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	490f      	ldr	r1, [pc, #60]	; (80044d8 <HAL_PCD_EP_Transmit+0x208>)
 800449a:	4011      	ands	r1, r2
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <HAL_PCD_EP_Transmit+0x210>)
 800449e:	430a      	orrs	r2, r1
 80044a0:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80044a2:	682a      	ldr	r2, [r5, #0]
 80044a4:	00e1      	lsls	r1, r4, #3
 80044a6:	1b0c      	subs	r4, r1, r4
 80044a8:	00a3      	lsls	r3, r4, #2
 80044aa:	18ed      	adds	r5, r5, r3
 80044ac:	3528      	adds	r5, #40	; 0x28
 80044ae:	782b      	ldrb	r3, [r5, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	18d2      	adds	r2, r2, r3
 80044b4:	8813      	ldrh	r3, [r2, #0]
 80044b6:	490b      	ldr	r1, [pc, #44]	; (80044e4 <HAL_PCD_EP_Transmit+0x214>)
 80044b8:	400b      	ands	r3, r1
 80044ba:	2130      	movs	r1, #48	; 0x30
 80044bc:	404b      	eors	r3, r1
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4909      	ldr	r1, [pc, #36]	; (80044e8 <HAL_PCD_EP_Transmit+0x218>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	8013      	strh	r3, [r2, #0]
}
 80044c6:	2000      	movs	r0, #0
 80044c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	00000406 	.word	0x00000406
 80044d0:	ffff8000 	.word	0xffff8000
 80044d4:	00000402 	.word	0x00000402
 80044d8:	00000f0f 	.word	0x00000f0f
 80044dc:	ffffc080 	.word	0xffffc080
 80044e0:	ffff80c0 	.word	0xffff80c0
 80044e4:	ffff8fbf 	.word	0xffff8fbf
 80044e8:	ffff8080 	.word	0xffff8080

080044ec <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80044ec:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
 80044ee:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80044f0:	1810      	adds	r0, r2, r0
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	00d2      	lsls	r2, r2, #3
 80044f6:	4694      	mov	ip, r2
 80044f8:	4460      	add	r0, ip
  
  for (i = n; i != 0U; i--)
 80044fa:	e006      	b.n	800450a <PCD_ReadPMA+0x1e>
  {
    temp = *pdwVal++;
 80044fc:	8802      	ldrh	r2, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80044fe:	700a      	strb	r2, [r1, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8004500:	0a12      	lsrs	r2, r2, #8
 8004502:	704a      	strb	r2, [r1, #1]
  for (i = n; i != 0U; i--)
 8004504:	3c01      	subs	r4, #1
    temp = *pdwVal++;
 8004506:	3002      	adds	r0, #2
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8004508:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800450a:	2c00      	cmp	r4, #0
 800450c:	d1f6      	bne.n	80044fc <PCD_ReadPMA+0x10>
  }
  
  if (wNBytes % 2)
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d501      	bpl.n	8004516 <PCD_ReadPMA+0x2a>
  {
    temp = *pdwVal++;
 8004512:	8803      	ldrh	r3, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8004514:	700b      	strb	r3, [r1, #0]
  }
}
 8004516:	bd10      	pop	{r4, pc}

08004518 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b083      	sub	sp, #12
 800451c:	0005      	movs	r5, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 800451e:	2200      	movs	r2, #0
 8004520:	ab01      	add	r3, sp, #4
 8004522:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8004524:	e1b5      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004526:	8803      	ldrh	r3, [r0, #0]
 8004528:	4aa9      	ldr	r2, [pc, #676]	; (80047d0 <PCD_EP_ISR_Handler+0x2b8>)
 800452a:	4013      	ands	r3, r2
 800452c:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800452e:	6829      	ldr	r1, [r5, #0]
 8004530:	2350      	movs	r3, #80	; 0x50
 8004532:	5acb      	ldrh	r3, [r1, r3]
 8004534:	2228      	movs	r2, #40	; 0x28
 8004536:	5caa      	ldrb	r2, [r5, r2]
 8004538:	00d2      	lsls	r2, r2, #3
 800453a:	189b      	adds	r3, r3, r2
 800453c:	185b      	adds	r3, r3, r1
 800453e:	4aa5      	ldr	r2, [pc, #660]	; (80047d4 <PCD_EP_ISR_Handler+0x2bc>)
 8004540:	4694      	mov	ip, r2
 8004542:	4463      	add	r3, ip
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	059b      	lsls	r3, r3, #22
 8004548:	0d9b      	lsrs	r3, r3, #22
 800454a:	642b      	str	r3, [r5, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800454c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800454e:	4694      	mov	ip, r2
 8004550:	4463      	add	r3, ip
 8004552:	63ab      	str	r3, [r5, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004554:	2100      	movs	r1, #0
 8004556:	0028      	movs	r0, r5
 8004558:	f002 ffc7 	bl	80074ea <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800455c:	2324      	movs	r3, #36	; 0x24
 800455e:	5ceb      	ldrb	r3, [r5, r3]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d100      	bne.n	8004566 <PCD_EP_ISR_Handler+0x4e>
 8004564:	e195      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
 8004566:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d000      	beq.n	800456e <PCD_EP_ISR_Handler+0x56>
 800456c:	e191      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	5cab      	ldrb	r3, [r5, r2]
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	4249      	negs	r1, r1
 8004576:	430b      	orrs	r3, r1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	31cc      	adds	r1, #204	; 0xcc
 800457c:	6828      	ldr	r0, [r5, #0]
 800457e:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	54ab      	strb	r3, [r5, r2]
 8004584:	e185      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004586:	2350      	movs	r3, #80	; 0x50
 8004588:	5ac3      	ldrh	r3, [r0, r3]
 800458a:	2284      	movs	r2, #132	; 0x84
 800458c:	0052      	lsls	r2, r2, #1
 800458e:	5caa      	ldrb	r2, [r5, r2]
 8004590:	00d2      	lsls	r2, r2, #3
 8004592:	189b      	adds	r3, r3, r2
 8004594:	181b      	adds	r3, r3, r0
 8004596:	4a90      	ldr	r2, [pc, #576]	; (80047d8 <PCD_EP_ISR_Handler+0x2c0>)
 8004598:	4694      	mov	ip, r2
 800459a:	4463      	add	r3, ip
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	059b      	lsls	r3, r3, #22
 80045a0:	0d9b      	lsrs	r3, r3, #22
 80045a2:	002a      	movs	r2, r5
 80045a4:	3209      	adds	r2, #9
 80045a6:	32ff      	adds	r2, #255	; 0xff
 80045a8:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80045aa:	0029      	movs	r1, r5
 80045ac:	31ed      	adds	r1, #237	; 0xed
 80045ae:	31ff      	adds	r1, #255	; 0xff
 80045b0:	8892      	ldrh	r2, [r2, #4]
 80045b2:	f7ff ff9b 	bl	80044ec <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80045b6:	682a      	ldr	r2, [r5, #0]
 80045b8:	8813      	ldrh	r3, [r2, #0]
 80045ba:	4988      	ldr	r1, [pc, #544]	; (80047dc <PCD_EP_ISR_Handler+0x2c4>)
 80045bc:	400b      	ands	r3, r1
 80045be:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80045c0:	0028      	movs	r0, r5
 80045c2:	f002 ff79 	bl	80074b8 <HAL_PCD_SetupStageCallback>
 80045c6:	e164      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80045c8:	0014      	movs	r4, r2
 80045ca:	8892      	ldrh	r2, [r2, #4]
 80045cc:	6921      	ldr	r1, [r4, #16]
 80045ce:	f7ff ff8d 	bl	80044ec <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	69a2      	ldr	r2, [r4, #24]
 80045d6:	4694      	mov	ip, r2
 80045d8:	4463      	add	r3, ip
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	e195      	b.n	800490a <PCD_EP_ISR_Handler+0x3f2>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80045de:	084b      	lsrs	r3, r1, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	07c9      	lsls	r1, r1, #31
 80045e4:	d501      	bpl.n	80045ea <PCD_EP_ISR_Handler+0xd2>
 80045e6:	3301      	adds	r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	8013      	strh	r3, [r2, #0]
 80045ee:	e1a9      	b.n	8004944 <PCD_EP_ISR_Handler+0x42c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80045f0:	00a6      	lsls	r6, r4, #2
 80045f2:	1980      	adds	r0, r0, r6
 80045f4:	8802      	ldrh	r2, [r0, #0]
 80045f6:	ab01      	add	r3, sp, #4
 80045f8:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b21b      	sxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db31      	blt.n	8004666 <PCD_EP_ISR_Handler+0x14e>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004602:	ab01      	add	r3, sp, #4
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	d400      	bmi.n	800460c <PCD_EP_ISR_Handler+0xf4>
 800460a:	e142      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	469c      	mov	ip, r3
 8004610:	4466      	add	r6, ip
 8004612:	8833      	ldrh	r3, [r6, #0]
 8004614:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <PCD_EP_ISR_Handler+0x2b8>)
 8004616:	4013      	ands	r3, r2
 8004618:	8033      	strh	r3, [r6, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800461a:	00e2      	lsls	r2, r4, #3
 800461c:	1b12      	subs	r2, r2, r4
 800461e:	0093      	lsls	r3, r2, #2
 8004620:	001a      	movs	r2, r3
 8004622:	18eb      	adds	r3, r5, r3
 8004624:	3332      	adds	r3, #50	; 0x32
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d000      	beq.n	800462e <PCD_EP_ISR_Handler+0x116>
 800462c:	e0dc      	b.n	80047e8 <PCD_EP_ISR_Handler+0x2d0>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800462e:	6828      	ldr	r0, [r5, #0]
 8004630:	3350      	adds	r3, #80	; 0x50
 8004632:	5ac3      	ldrh	r3, [r0, r3]
 8004634:	18aa      	adds	r2, r5, r2
 8004636:	0011      	movs	r1, r2
 8004638:	3128      	adds	r1, #40	; 0x28
 800463a:	7809      	ldrb	r1, [r1, #0]
 800463c:	00c9      	lsls	r1, r1, #3
 800463e:	185b      	adds	r3, r3, r1
 8004640:	181b      	adds	r3, r3, r0
 8004642:	4964      	ldr	r1, [pc, #400]	; (80047d4 <PCD_EP_ISR_Handler+0x2bc>)
 8004644:	468c      	mov	ip, r1
 8004646:	4463      	add	r3, ip
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	059b      	lsls	r3, r3, #22
 800464c:	0d9b      	lsrs	r3, r3, #22
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8004650:	d100      	bne.n	8004654 <PCD_EP_ISR_Handler+0x13c>
 8004652:	e0f9      	b.n	8004848 <PCD_EP_ISR_Handler+0x330>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004654:	00e2      	lsls	r2, r4, #3
 8004656:	1b12      	subs	r2, r2, r4
 8004658:	0091      	lsls	r1, r2, #2
 800465a:	1869      	adds	r1, r5, r1
 800465c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800465e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004660:	f7ff fe22 	bl	80042a8 <PCD_WritePMA>
 8004664:	e0f0      	b.n	8004848 <PCD_EP_ISR_Handler+0x330>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <PCD_EP_ISR_Handler+0x2c4>)
 8004668:	401a      	ands	r2, r3
 800466a:	8002      	strh	r2, [r0, #0]
        if (ep->doublebuffer == 0U)
 800466c:	00e2      	lsls	r2, r4, #3
 800466e:	1b12      	subs	r2, r2, r4
 8004670:	0093      	lsls	r3, r2, #2
 8004672:	001a      	movs	r2, r3
 8004674:	18eb      	adds	r3, r5, r3
 8004676:	3313      	adds	r3, #19
 8004678:	33ff      	adds	r3, #255	; 0xff
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <PCD_EP_ISR_Handler+0x1a4>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004680:	6828      	ldr	r0, [r5, #0]
 8004682:	3350      	adds	r3, #80	; 0x50
 8004684:	5ac3      	ldrh	r3, [r0, r3]
 8004686:	0011      	movs	r1, r2
 8004688:	18aa      	adds	r2, r5, r2
 800468a:	3209      	adds	r2, #9
 800468c:	32ff      	adds	r2, #255	; 0xff
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	00d2      	lsls	r2, r2, #3
 8004692:	189b      	adds	r3, r3, r2
 8004694:	181b      	adds	r3, r3, r0
 8004696:	4a50      	ldr	r2, [pc, #320]	; (80047d8 <PCD_EP_ISR_Handler+0x2c0>)
 8004698:	4694      	mov	ip, r2
 800469a:	4463      	add	r3, ip
 800469c:	881f      	ldrh	r7, [r3, #0]
 800469e:	05bf      	lsls	r7, r7, #22
 80046a0:	0dbf      	lsrs	r7, r7, #22
          if (count != 0U)
 80046a2:	d034      	beq.n	800470e <PCD_EP_ISR_Handler+0x1f6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80046a4:	186b      	adds	r3, r5, r1
 80046a6:	001a      	movs	r2, r3
 80046a8:	320d      	adds	r2, #13
 80046aa:	32ff      	adds	r2, #255	; 0xff
 80046ac:	8812      	ldrh	r2, [r2, #0]
 80046ae:	3319      	adds	r3, #25
 80046b0:	33ff      	adds	r3, #255	; 0xff
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	003b      	movs	r3, r7
 80046b6:	f7ff ff19 	bl	80044ec <PCD_ReadPMA>
 80046ba:	e028      	b.n	800470e <PCD_EP_ISR_Handler+0x1f6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 80046bc:	6828      	ldr	r0, [r5, #0]
 80046be:	00e2      	lsls	r2, r4, #3
 80046c0:	1b12      	subs	r2, r2, r4
 80046c2:	0093      	lsls	r3, r2, #2
 80046c4:	18eb      	adds	r3, r5, r3
 80046c6:	3309      	adds	r3, #9
 80046c8:	33ff      	adds	r3, #255	; 0xff
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009a      	lsls	r2, r3, #2
 80046ce:	5a82      	ldrh	r2, [r0, r2]
 80046d0:	0452      	lsls	r2, r2, #17
 80046d2:	d556      	bpl.n	8004782 <PCD_EP_ISR_Handler+0x26a>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046d4:	2250      	movs	r2, #80	; 0x50
 80046d6:	5a82      	ldrh	r2, [r0, r2]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	181b      	adds	r3, r3, r0
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <PCD_EP_ISR_Handler+0x2bc>)
 80046e0:	4694      	mov	ip, r2
 80046e2:	4463      	add	r3, ip
 80046e4:	881f      	ldrh	r7, [r3, #0]
 80046e6:	05bf      	lsls	r7, r7, #22
 80046e8:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 80046ea:	d13b      	bne.n	8004764 <PCD_EP_ISR_Handler+0x24c>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 80046ec:	00e2      	lsls	r2, r4, #3
 80046ee:	1b12      	subs	r2, r2, r4
 80046f0:	0093      	lsls	r3, r2, #2
 80046f2:	18eb      	adds	r3, r5, r3
 80046f4:	3309      	adds	r3, #9
 80046f6:	33ff      	adds	r3, #255	; 0xff
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	682a      	ldr	r2, [r5, #0]
 80046fe:	4694      	mov	ip, r2
 8004700:	4463      	add	r3, ip
 8004702:	881a      	ldrh	r2, [r3, #0]
 8004704:	4936      	ldr	r1, [pc, #216]	; (80047e0 <PCD_EP_ISR_Handler+0x2c8>)
 8004706:	4011      	ands	r1, r2
 8004708:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <PCD_EP_ISR_Handler+0x2cc>)
 800470a:	430a      	orrs	r2, r1
 800470c:	801a      	strh	r2, [r3, #0]
        ep->xfer_count+=count;
 800470e:	0039      	movs	r1, r7
 8004710:	00e2      	lsls	r2, r4, #3
 8004712:	1b12      	subs	r2, r2, r4
 8004714:	0093      	lsls	r3, r2, #2
 8004716:	18eb      	adds	r3, r5, r3
 8004718:	0018      	movs	r0, r3
 800471a:	3021      	adds	r0, #33	; 0x21
 800471c:	30ff      	adds	r0, #255	; 0xff
 800471e:	6802      	ldr	r2, [r0, #0]
 8004720:	19d2      	adds	r2, r2, r7
 8004722:	6002      	str	r2, [r0, #0]
        ep->xfer_buff+=count;
 8004724:	001a      	movs	r2, r3
 8004726:	3219      	adds	r2, #25
 8004728:	32ff      	adds	r2, #255	; 0xff
 800472a:	6810      	ldr	r0, [r2, #0]
 800472c:	4684      	mov	ip, r0
 800472e:	4467      	add	r7, ip
 8004730:	6017      	str	r7, [r2, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004732:	331d      	adds	r3, #29
 8004734:	33ff      	adds	r3, #255	; 0xff
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <PCD_EP_ISR_Handler+0x236>
 800473c:	00e2      	lsls	r2, r4, #3
 800473e:	1b12      	subs	r2, r2, r4
 8004740:	0090      	lsls	r0, r2, #2
 8004742:	1828      	adds	r0, r5, r0
 8004744:	3015      	adds	r0, #21
 8004746:	30ff      	adds	r0, #255	; 0xff
 8004748:	6802      	ldr	r2, [r0, #0]
 800474a:	4291      	cmp	r1, r2
 800474c:	d234      	bcs.n	80047b8 <PCD_EP_ISR_Handler+0x2a0>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	1b12      	subs	r2, r2, r4
 8004752:	0093      	lsls	r3, r2, #2
 8004754:	18eb      	adds	r3, r5, r3
 8004756:	3309      	adds	r3, #9
 8004758:	33ff      	adds	r3, #255	; 0xff
 800475a:	7819      	ldrb	r1, [r3, #0]
 800475c:	0028      	movs	r0, r5
 800475e:	f002 feb5 	bl	80074cc <HAL_PCD_DataOutStageCallback>
 8004762:	e74e      	b.n	8004602 <PCD_EP_ISR_Handler+0xea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004764:	00e2      	lsls	r2, r4, #3
 8004766:	1b12      	subs	r2, r2, r4
 8004768:	0093      	lsls	r3, r2, #2
 800476a:	18eb      	adds	r3, r5, r3
 800476c:	001a      	movs	r2, r3
 800476e:	320f      	adds	r2, #15
 8004770:	32ff      	adds	r2, #255	; 0xff
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	3319      	adds	r3, #25
 8004776:	33ff      	adds	r3, #255	; 0xff
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	003b      	movs	r3, r7
 800477c:	f7ff feb6 	bl	80044ec <PCD_ReadPMA>
 8004780:	e7b4      	b.n	80046ec <PCD_EP_ISR_Handler+0x1d4>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004782:	2250      	movs	r2, #80	; 0x50
 8004784:	5a82      	ldrh	r2, [r0, r2]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	18d3      	adds	r3, r2, r3
 800478a:	181b      	adds	r3, r3, r0
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <PCD_EP_ISR_Handler+0x2c0>)
 800478e:	4694      	mov	ip, r2
 8004790:	4463      	add	r3, ip
 8004792:	881f      	ldrh	r7, [r3, #0]
 8004794:	05bf      	lsls	r7, r7, #22
 8004796:	0dbf      	lsrs	r7, r7, #22
            if (count != 0U)
 8004798:	d0a8      	beq.n	80046ec <PCD_EP_ISR_Handler+0x1d4>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800479a:	00e2      	lsls	r2, r4, #3
 800479c:	1b12      	subs	r2, r2, r4
 800479e:	0093      	lsls	r3, r2, #2
 80047a0:	18eb      	adds	r3, r5, r3
 80047a2:	001a      	movs	r2, r3
 80047a4:	3211      	adds	r2, #17
 80047a6:	32ff      	adds	r2, #255	; 0xff
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	3319      	adds	r3, #25
 80047ac:	33ff      	adds	r3, #255	; 0xff
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	003b      	movs	r3, r7
 80047b2:	f7ff fe9b 	bl	80044ec <PCD_ReadPMA>
 80047b6:	e799      	b.n	80046ec <PCD_EP_ISR_Handler+0x1d4>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80047b8:	00e1      	lsls	r1, r4, #3
 80047ba:	1b09      	subs	r1, r1, r4
 80047bc:	008a      	lsls	r2, r1, #2
 80047be:	18aa      	adds	r2, r5, r2
 80047c0:	3209      	adds	r2, #9
 80047c2:	32ff      	adds	r2, #255	; 0xff
 80047c4:	7811      	ldrb	r1, [r2, #0]
 80047c6:	003a      	movs	r2, r7
 80047c8:	0028      	movs	r0, r5
 80047ca:	f7ff fb9b 	bl	8003f04 <HAL_PCD_EP_Receive>
 80047ce:	e718      	b.n	8004602 <PCD_EP_ISR_Handler+0xea>
 80047d0:	ffff8f0f 	.word	0xffff8f0f
 80047d4:	00000402 	.word	0x00000402
 80047d8:	00000406 	.word	0x00000406
 80047dc:	00000f8f 	.word	0x00000f8f
 80047e0:	00000f0f 	.word	0x00000f0f
 80047e4:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80047e8:	6828      	ldr	r0, [r5, #0]
 80047ea:	00e2      	lsls	r2, r4, #3
 80047ec:	1b12      	subs	r2, r2, r4
 80047ee:	0093      	lsls	r3, r2, #2
 80047f0:	18eb      	adds	r3, r5, r3
 80047f2:	3328      	adds	r3, #40	; 0x28
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	5a82      	ldrh	r2, [r0, r2]
 80047fa:	0652      	lsls	r2, r2, #25
 80047fc:	d400      	bmi.n	8004800 <PCD_EP_ISR_Handler+0x2e8>
 80047fe:	e0b2      	b.n	8004966 <PCD_EP_ISR_Handler+0x44e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004800:	2250      	movs	r2, #80	; 0x50
 8004802:	5a82      	ldrh	r2, [r0, r2]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	181b      	adds	r3, r3, r0
 800480a:	4a6a      	ldr	r2, [pc, #424]	; (80049b4 <PCD_EP_ISR_Handler+0x49c>)
 800480c:	4694      	mov	ip, r2
 800480e:	4463      	add	r3, ip
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	059b      	lsls	r3, r3, #22
 8004814:	0d9b      	lsrs	r3, r3, #22
 8004816:	00e1      	lsls	r1, r4, #3
 8004818:	1b09      	subs	r1, r1, r4
 800481a:	008a      	lsls	r2, r1, #2
 800481c:	0011      	movs	r1, r2
 800481e:	18aa      	adds	r2, r5, r2
 8004820:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8004822:	2b00      	cmp	r3, #0
 8004824:	d000      	beq.n	8004828 <PCD_EP_ISR_Handler+0x310>
 8004826:	e098      	b.n	800495a <PCD_EP_ISR_Handler+0x442>
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8004828:	00e2      	lsls	r2, r4, #3
 800482a:	1b12      	subs	r2, r2, r4
 800482c:	0093      	lsls	r3, r2, #2
 800482e:	18eb      	adds	r3, r5, r3
 8004830:	3328      	adds	r3, #40	; 0x28
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	682a      	ldr	r2, [r5, #0]
 8004838:	4694      	mov	ip, r2
 800483a:	4463      	add	r3, ip
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	495e      	ldr	r1, [pc, #376]	; (80049b8 <PCD_EP_ISR_Handler+0x4a0>)
 8004840:	4011      	ands	r1, r2
 8004842:	4a5e      	ldr	r2, [pc, #376]	; (80049bc <PCD_EP_ISR_Handler+0x4a4>)
 8004844:	430a      	orrs	r2, r1
 8004846:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004848:	6828      	ldr	r0, [r5, #0]
 800484a:	2350      	movs	r3, #80	; 0x50
 800484c:	5ac2      	ldrh	r2, [r0, r3]
 800484e:	00e1      	lsls	r1, r4, #3
 8004850:	1b09      	subs	r1, r1, r4
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	18eb      	adds	r3, r5, r3
 8004856:	0019      	movs	r1, r3
 8004858:	3128      	adds	r1, #40	; 0x28
 800485a:	7809      	ldrb	r1, [r1, #0]
 800485c:	00c9      	lsls	r1, r1, #3
 800485e:	1852      	adds	r2, r2, r1
 8004860:	1812      	adds	r2, r2, r0
 8004862:	4954      	ldr	r1, [pc, #336]	; (80049b4 <PCD_EP_ISR_Handler+0x49c>)
 8004864:	468c      	mov	ip, r1
 8004866:	4462      	add	r2, ip
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	0592      	lsls	r2, r2, #22
 800486c:	0d92      	lsrs	r2, r2, #22
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8004870:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004872:	468c      	mov	ip, r1
 8004874:	4462      	add	r2, ip
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d000      	beq.n	8004880 <PCD_EP_ISR_Handler+0x368>
 800487e:	e08c      	b.n	800499a <PCD_EP_ISR_Handler+0x482>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004880:	00e3      	lsls	r3, r4, #3
 8004882:	1b1c      	subs	r4, r3, r4
 8004884:	00a3      	lsls	r3, r4, #2
 8004886:	18eb      	adds	r3, r5, r3
 8004888:	3328      	adds	r3, #40	; 0x28
 800488a:	7819      	ldrb	r1, [r3, #0]
 800488c:	0028      	movs	r0, r5
 800488e:	f002 fe2c 	bl	80074ea <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8004892:	6828      	ldr	r0, [r5, #0]
 8004894:	2344      	movs	r3, #68	; 0x44
 8004896:	5ac3      	ldrh	r3, [r0, r3]
 8004898:	b29b      	uxth	r3, r3
 800489a:	466a      	mov	r2, sp
 800489c:	80d3      	strh	r3, [r2, #6]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db00      	blt.n	80048a6 <PCD_EP_ISR_Handler+0x38e>
 80048a4:	e083      	b.n	80049ae <PCD_EP_ISR_Handler+0x496>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048a6:	466b      	mov	r3, sp
 80048a8:	88dc      	ldrh	r4, [r3, #6]
 80048aa:	230f      	movs	r3, #15
 80048ac:	401c      	ands	r4, r3
    if (EPindex == 0U)
 80048ae:	d000      	beq.n	80048b2 <PCD_EP_ISR_Handler+0x39a>
 80048b0:	e69e      	b.n	80045f0 <PCD_EP_ISR_Handler+0xd8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048b2:	466b      	mov	r3, sp
 80048b4:	3306      	adds	r3, #6
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	06db      	lsls	r3, r3, #27
 80048ba:	d400      	bmi.n	80048be <PCD_EP_ISR_Handler+0x3a6>
 80048bc:	e633      	b.n	8004526 <PCD_EP_ISR_Handler+0xe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048be:	8802      	ldrh	r2, [r0, #0]
 80048c0:	ab01      	add	r3, sp, #4
 80048c2:	801a      	strh	r2, [r3, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	051b      	lsls	r3, r3, #20
 80048c8:	d500      	bpl.n	80048cc <PCD_EP_ISR_Handler+0x3b4>
 80048ca:	e65c      	b.n	8004586 <PCD_EP_ISR_Handler+0x6e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048cc:	ab01      	add	r3, sp, #4
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dadd      	bge.n	8004892 <PCD_EP_ISR_Handler+0x37a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048d6:	8803      	ldrh	r3, [r0, #0]
 80048d8:	4a39      	ldr	r2, [pc, #228]	; (80049c0 <PCD_EP_ISR_Handler+0x4a8>)
 80048da:	4013      	ands	r3, r2
 80048dc:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048de:	6828      	ldr	r0, [r5, #0]
 80048e0:	2350      	movs	r3, #80	; 0x50
 80048e2:	5ac3      	ldrh	r3, [r0, r3]
 80048e4:	2284      	movs	r2, #132	; 0x84
 80048e6:	0052      	lsls	r2, r2, #1
 80048e8:	5caa      	ldrb	r2, [r5, r2]
 80048ea:	00d2      	lsls	r2, r2, #3
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	181b      	adds	r3, r3, r0
 80048f0:	4a34      	ldr	r2, [pc, #208]	; (80049c4 <PCD_EP_ISR_Handler+0x4ac>)
 80048f2:	4694      	mov	ip, r2
 80048f4:	4463      	add	r3, ip
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	059b      	lsls	r3, r3, #22
 80048fa:	0d9b      	lsrs	r3, r3, #22
 80048fc:	002a      	movs	r2, r5
 80048fe:	3209      	adds	r2, #9
 8004900:	32ff      	adds	r2, #255	; 0xff
 8004902:	6193      	str	r3, [r2, #24]
          if (ep->xfer_count != 0U)
 8004904:	2b00      	cmp	r3, #0
 8004906:	d000      	beq.n	800490a <PCD_EP_ISR_Handler+0x3f2>
 8004908:	e65e      	b.n	80045c8 <PCD_EP_ISR_Handler+0xb0>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800490a:	2100      	movs	r1, #0
 800490c:	0028      	movs	r0, r5
 800490e:	f002 fddd 	bl	80074cc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8004912:	682b      	ldr	r3, [r5, #0]
 8004914:	2250      	movs	r2, #80	; 0x50
 8004916:	5a9a      	ldrh	r2, [r3, r2]
 8004918:	189a      	adds	r2, r3, r2
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <PCD_EP_ISR_Handler+0x4ac>)
 800491c:	469c      	mov	ip, r3
 800491e:	4462      	add	r2, ip
 8004920:	002b      	movs	r3, r5
 8004922:	3309      	adds	r3, #9
 8004924:	33ff      	adds	r3, #255	; 0xff
 8004926:	68d9      	ldr	r1, [r3, #12]
 8004928:	293e      	cmp	r1, #62	; 0x3e
 800492a:	d800      	bhi.n	800492e <PCD_EP_ISR_Handler+0x416>
 800492c:	e657      	b.n	80045de <PCD_EP_ISR_Handler+0xc6>
 800492e:	094b      	lsrs	r3, r1, #5
 8004930:	b29b      	uxth	r3, r3
 8004932:	06c9      	lsls	r1, r1, #27
 8004934:	d101      	bne.n	800493a <PCD_EP_ISR_Handler+0x422>
 8004936:	3b01      	subs	r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	b29b      	uxth	r3, r3
 800493e:	4922      	ldr	r1, [pc, #136]	; (80049c8 <PCD_EP_ISR_Handler+0x4b0>)
 8004940:	430b      	orrs	r3, r1
 8004942:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8004944:	6829      	ldr	r1, [r5, #0]
 8004946:	880a      	ldrh	r2, [r1, #0]
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <PCD_EP_ISR_Handler+0x4b4>)
 800494a:	401a      	ands	r2, r3
 800494c:	23c0      	movs	r3, #192	; 0xc0
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	405a      	eors	r2, r3
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <PCD_EP_ISR_Handler+0x4b8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	800b      	strh	r3, [r1, #0]
 8004958:	e79b      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800495a:	1869      	adds	r1, r5, r1
 800495c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800495e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004960:	f7ff fca2 	bl	80042a8 <PCD_WritePMA>
 8004964:	e760      	b.n	8004828 <PCD_EP_ISR_Handler+0x310>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004966:	2250      	movs	r2, #80	; 0x50
 8004968:	5a82      	ldrh	r2, [r0, r2]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	18d3      	adds	r3, r2, r3
 800496e:	181b      	adds	r3, r3, r0
 8004970:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <PCD_EP_ISR_Handler+0x4ac>)
 8004972:	4694      	mov	ip, r2
 8004974:	4463      	add	r3, ip
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	059b      	lsls	r3, r3, #22
 800497a:	0d9b      	lsrs	r3, r3, #22
 800497c:	00e1      	lsls	r1, r4, #3
 800497e:	1b09      	subs	r1, r1, r4
 8004980:	008a      	lsls	r2, r1, #2
 8004982:	0011      	movs	r1, r2
 8004984:	18aa      	adds	r2, r5, r2
 8004986:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8004988:	2b00      	cmp	r3, #0
 800498a:	d100      	bne.n	800498e <PCD_EP_ISR_Handler+0x476>
 800498c:	e74c      	b.n	8004828 <PCD_EP_ISR_Handler+0x310>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800498e:	1869      	adds	r1, r5, r1
 8004990:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8004992:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8004994:	f7ff fc88 	bl	80042a8 <PCD_WritePMA>
 8004998:	e746      	b.n	8004828 <PCD_EP_ISR_Handler+0x310>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800499a:	00e1      	lsls	r1, r4, #3
 800499c:	1b0c      	subs	r4, r1, r4
 800499e:	00a1      	lsls	r1, r4, #2
 80049a0:	1869      	adds	r1, r5, r1
 80049a2:	3128      	adds	r1, #40	; 0x28
 80049a4:	7809      	ldrb	r1, [r1, #0]
 80049a6:	0028      	movs	r0, r5
 80049a8:	f7ff fc92 	bl	80042d0 <HAL_PCD_EP_Transmit>
 80049ac:	e771      	b.n	8004892 <PCD_EP_ISR_Handler+0x37a>
        }
      } 
    }
  }
  return HAL_OK;
}
 80049ae:	2000      	movs	r0, #0
 80049b0:	b003      	add	sp, #12
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b4:	00000402 	.word	0x00000402
 80049b8:	00000f0f 	.word	0x00000f0f
 80049bc:	ffffc080 	.word	0xffffc080
 80049c0:	00000f8f 	.word	0x00000f8f
 80049c4:	00000406 	.word	0x00000406
 80049c8:	ffff8000 	.word	0xffff8000
 80049cc:	ffffbf8f 	.word	0xffffbf8f
 80049d0:	ffff8080 	.word	0xffff8080

080049d4 <HAL_PCD_IRQHandler>:
{
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80049d8:	2344      	movs	r3, #68	; 0x44
 80049da:	6802      	ldr	r2, [r0, #0]
 80049dc:	5ad3      	ldrh	r3, [r2, r3]
 80049de:	b21b      	sxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db48      	blt.n	8004a76 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	2244      	movs	r2, #68	; 0x44
 80049e8:	5a9a      	ldrh	r2, [r3, r2]
 80049ea:	0552      	lsls	r2, r2, #21
 80049ec:	d446      	bmi.n	8004a7c <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	2244      	movs	r2, #68	; 0x44
 80049f2:	5a9a      	ldrh	r2, [r3, r2]
 80049f4:	0452      	lsls	r2, r2, #17
 80049f6:	d504      	bpl.n	8004a02 <HAL_PCD_IRQHandler+0x2e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80049f8:	2144      	movs	r1, #68	; 0x44
 80049fa:	5a5a      	ldrh	r2, [r3, r1]
 80049fc:	4835      	ldr	r0, [pc, #212]	; (8004ad4 <HAL_PCD_IRQHandler+0x100>)
 80049fe:	4002      	ands	r2, r0
 8004a00:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	2244      	movs	r2, #68	; 0x44
 8004a06:	5a9a      	ldrh	r2, [r3, r2]
 8004a08:	0492      	lsls	r2, r2, #18
 8004a0a:	d504      	bpl.n	8004a16 <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8004a0c:	2144      	movs	r1, #68	; 0x44
 8004a0e:	5a5a      	ldrh	r2, [r3, r1]
 8004a10:	4831      	ldr	r0, [pc, #196]	; (8004ad8 <HAL_PCD_IRQHandler+0x104>)
 8004a12:	4002      	ands	r2, r0
 8004a14:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	2244      	movs	r2, #68	; 0x44
 8004a1a:	5a9a      	ldrh	r2, [r3, r2]
 8004a1c:	04d2      	lsls	r2, r2, #19
 8004a1e:	d43a      	bmi.n	8004a96 <HAL_PCD_IRQHandler+0xc2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	2244      	movs	r2, #68	; 0x44
 8004a24:	5a9a      	ldrh	r2, [r3, r2]
 8004a26:	0512      	lsls	r2, r2, #20
 8004a28:	d515      	bpl.n	8004a56 <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8004a2a:	2144      	movs	r1, #68	; 0x44
 8004a2c:	5a5a      	ldrh	r2, [r3, r1]
 8004a2e:	482b      	ldr	r0, [pc, #172]	; (8004adc <HAL_PCD_IRQHandler+0x108>)
 8004a30:	4002      	ands	r2, r0
 8004a32:	525a      	strh	r2, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	5a83      	ldrh	r3, [r0, r2]
 8004a3a:	2508      	movs	r5, #8
 8004a3c:	432b      	orrs	r3, r5
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	5283      	strh	r3, [r0, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	5a83      	ldrh	r3, [r0, r2]
 8004a46:	2504      	movs	r5, #4
 8004a48:	432b      	orrs	r3, r5
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	5283      	strh	r3, [r0, r2]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	5a5b      	ldrh	r3, [r3, r1]
 8004a52:	04db      	lsls	r3, r3, #19
 8004a54:	d531      	bpl.n	8004aba <HAL_PCD_IRQHandler+0xe6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	2244      	movs	r2, #68	; 0x44
 8004a5a:	5a9a      	ldrh	r2, [r3, r2]
 8004a5c:	0592      	lsls	r2, r2, #22
 8004a5e:	d430      	bmi.n	8004ac2 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	2244      	movs	r2, #68	; 0x44
 8004a64:	5a9a      	ldrh	r2, [r3, r2]
 8004a66:	05d2      	lsls	r2, r2, #23
 8004a68:	d504      	bpl.n	8004a74 <HAL_PCD_IRQHandler+0xa0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8004a6a:	2144      	movs	r1, #68	; 0x44
 8004a6c:	5a5a      	ldrh	r2, [r3, r1]
 8004a6e:	481c      	ldr	r0, [pc, #112]	; (8004ae0 <HAL_PCD_IRQHandler+0x10c>)
 8004a70:	4002      	ands	r2, r0
 8004a72:	525a      	strh	r2, [r3, r1]
}
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
    PCD_EP_ISR_Handler(hpcd);
 8004a76:	f7ff fd4f 	bl	8004518 <PCD_EP_ISR_Handler>
 8004a7a:	e7b3      	b.n	80049e4 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a7c:	2144      	movs	r1, #68	; 0x44
 8004a7e:	5a5a      	ldrh	r2, [r3, r1]
 8004a80:	4818      	ldr	r0, [pc, #96]	; (8004ae4 <HAL_PCD_IRQHandler+0x110>)
 8004a82:	4002      	ands	r2, r0
 8004a84:	525a      	strh	r2, [r3, r1]
    HAL_PCD_ResetCallback(hpcd);
 8004a86:	0020      	movs	r0, r4
 8004a88:	f002 fd43 	bl	8007512 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f7fe ff8a 	bl	80039a8 <HAL_PCD_SetAddress>
 8004a94:	e7ab      	b.n	80049ee <HAL_PCD_IRQHandler+0x1a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	5a99      	ldrh	r1, [r3, r2]
 8004a9a:	2004      	movs	r0, #4
 8004a9c:	4381      	bics	r1, r0
 8004a9e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_PCD_IRQHandler+0x114>)
 8004aa2:	6821      	ldr	r1, [r4, #0]
 8004aa4:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResumeCallback(hpcd);
 8004aa6:	0020      	movs	r0, r4
 8004aa8:	f002 fd56 	bl	8007558 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8004aac:	6821      	ldr	r1, [r4, #0]
 8004aae:	2244      	movs	r2, #68	; 0x44
 8004ab0:	5a8b      	ldrh	r3, [r1, r2]
 8004ab2:	480e      	ldr	r0, [pc, #56]	; (8004aec <HAL_PCD_IRQHandler+0x118>)
 8004ab4:	4003      	ands	r3, r0
 8004ab6:	528b      	strh	r3, [r1, r2]
 8004ab8:	e7b2      	b.n	8004a20 <HAL_PCD_IRQHandler+0x4c>
      HAL_PCD_SuspendCallback(hpcd);
 8004aba:	0020      	movs	r0, r4
 8004abc:	f002 fd3a 	bl	8007534 <HAL_PCD_SuspendCallback>
 8004ac0:	e7c9      	b.n	8004a56 <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8004ac2:	2144      	movs	r1, #68	; 0x44
 8004ac4:	5a5a      	ldrh	r2, [r3, r1]
 8004ac6:	480a      	ldr	r0, [pc, #40]	; (8004af0 <HAL_PCD_IRQHandler+0x11c>)
 8004ac8:	4002      	ands	r2, r0
 8004aca:	525a      	strh	r2, [r3, r1]
    HAL_PCD_SOFCallback(hpcd);
 8004acc:	0020      	movs	r0, r4
 8004ace:	f002 fd19 	bl	8007504 <HAL_PCD_SOFCallback>
 8004ad2:	e7c5      	b.n	8004a60 <HAL_PCD_IRQHandler+0x8c>
 8004ad4:	ffffbfff 	.word	0xffffbfff
 8004ad8:	ffffdfff 	.word	0xffffdfff
 8004adc:	fffff7ff 	.word	0xfffff7ff
 8004ae0:	fffffeff 	.word	0xfffffeff
 8004ae4:	fffffbff 	.word	0xfffffbff
 8004ae8:	ffffbd00 	.word	0xffffbd00
 8004aec:	ffffefff 	.word	0xffffefff
 8004af0:	fffffdff 	.word	0xfffffdff

08004af4 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004af4:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004af6:	060c      	lsls	r4, r1, #24
 8004af8:	d50f      	bpl.n	8004b1a <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004afa:	247f      	movs	r4, #127	; 0x7f
 8004afc:	4021      	ands	r1, r4
 8004afe:	00cc      	lsls	r4, r1, #3
 8004b00:	1a61      	subs	r1, r4, r1
 8004b02:	008c      	lsls	r4, r1, #2
 8004b04:	3428      	adds	r4, #40	; 0x28
 8004b06:	1900      	adds	r0, r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_PCDEx_PMAConfig+0x34>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8004b10:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK;
}
 8004b16:	2000      	movs	r0, #0
 8004b18:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004b1a:	00cc      	lsls	r4, r1, #3
 8004b1c:	1a61      	subs	r1, r4, r1
 8004b1e:	008c      	lsls	r4, r1, #2
 8004b20:	3409      	adds	r4, #9
 8004b22:	34ff      	adds	r4, #255	; 0xff
 8004b24:	1900      	adds	r0, r0, r4
 8004b26:	e7ef      	b.n	8004b08 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 8004b28:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8004b2a:	8083      	strh	r3, [r0, #4]
 8004b2c:	e7f3      	b.n	8004b16 <HAL_PCDEx_PMAConfig+0x22>
	...

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	07db      	lsls	r3, r3, #31
 8004b3a:	d53b      	bpl.n	8004bb4 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b3c:	4bc3      	ldr	r3, [pc, #780]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	230c      	movs	r3, #12
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d02d      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b48:	4bc0      	ldr	r3, [pc, #768]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d01e      	beq.n	8004b92 <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d050      	beq.n	8004bfc <HAL_RCC_OscConfig+0xcc>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d155      	bne.n	8004c0a <HAL_RCC_OscConfig+0xda>
 8004b5e:	4bbb      	ldr	r3, [pc, #748]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	49bb      	ldr	r1, [pc, #748]	; (8004e50 <HAL_RCC_OscConfig+0x320>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	49ba      	ldr	r1, [pc, #744]	; (8004e54 <HAL_RCC_OscConfig+0x324>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d061      	beq.n	8004c3a <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fe fc8d 	bl	8003494 <HAL_GetTick>
 8004b7a:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7c:	4bb3      	ldr	r3, [pc, #716]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	039b      	lsls	r3, r3, #14
 8004b82:	d417      	bmi.n	8004bb4 <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fc86 	bl	8003494 <HAL_GetTick>
 8004b88:	1b40      	subs	r0, r0, r5
 8004b8a:	2864      	cmp	r0, #100	; 0x64
 8004b8c:	d9f6      	bls.n	8004b7c <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8004b8e:	2003      	movs	r0, #3
 8004b90:	e23b      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b92:	4bae      	ldr	r3, [pc, #696]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	22c0      	movs	r2, #192	; 0xc0
 8004b98:	0252      	lsls	r2, r2, #9
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	0252      	lsls	r2, r2, #9
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d1d7      	bne.n	8004b54 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	4ba9      	ldr	r3, [pc, #676]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	039b      	lsls	r3, r3, #14
 8004baa:	d503      	bpl.n	8004bb4 <HAL_RCC_OscConfig+0x84>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d100      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x84>
 8004bb2:	e227      	b.n	8005004 <HAL_RCC_OscConfig+0x4d4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	079b      	lsls	r3, r3, #30
 8004bb8:	d567      	bpl.n	8004c8a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bba:	4ba4      	ldr	r3, [pc, #656]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	421a      	tst	r2, r3
 8004bc2:	d051      	beq.n	8004c68 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bc4:	4ba1      	ldr	r3, [pc, #644]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	230c      	movs	r3, #12
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d042      	beq.n	8004c56 <HAL_RCC_OscConfig+0x126>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd0:	68e3      	ldr	r3, [r4, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d07b      	beq.n	8004cce <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd6:	4a9d      	ldr	r2, [pc, #628]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004bd8:	6813      	ldr	r3, [r2, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fe fc58 	bl	8003494 <HAL_GetTick>
 8004be4:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	4b99      	ldr	r3, [pc, #612]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	079b      	lsls	r3, r3, #30
 8004bec:	d466      	bmi.n	8004cbc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fe fc51 	bl	8003494 <HAL_GetTick>
 8004bf2:	1b40      	subs	r0, r0, r5
 8004bf4:	2802      	cmp	r0, #2
 8004bf6:	d9f6      	bls.n	8004be6 <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	e206      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	4a93      	ldr	r2, [pc, #588]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004bfe:	6811      	ldr	r1, [r2, #0]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	025b      	lsls	r3, r3, #9
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e7b2      	b.n	8004b70 <HAL_RCC_OscConfig+0x40>
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_OscConfig+0xf2>
 8004c0e:	4b8f      	ldr	r3, [pc, #572]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	498f      	ldr	r1, [pc, #572]	; (8004e50 <HAL_RCC_OscConfig+0x320>)
 8004c14:	400a      	ands	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	498e      	ldr	r1, [pc, #568]	; (8004e54 <HAL_RCC_OscConfig+0x324>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e7a6      	b.n	8004b70 <HAL_RCC_OscConfig+0x40>
 8004c22:	4b8a      	ldr	r3, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	02d2      	lsls	r2, r2, #11
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0252      	lsls	r2, r2, #9
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e79a      	b.n	8004b70 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8004c3a:	f7fe fc2b 	bl	8003494 <HAL_GetTick>
 8004c3e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c40:	4b82      	ldr	r3, [pc, #520]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	039b      	lsls	r3, r3, #14
 8004c46:	d5b5      	bpl.n	8004bb4 <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe fc24 	bl	8003494 <HAL_GetTick>
 8004c4c:	1b40      	subs	r0, r0, r5
 8004c4e:	2864      	cmp	r0, #100	; 0x64
 8004c50:	d9f6      	bls.n	8004c40 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004c52:	2003      	movs	r0, #3
 8004c54:	e1d9      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c56:	4b7d      	ldr	r3, [pc, #500]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	22c0      	movs	r2, #192	; 0xc0
 8004c5c:	0252      	lsls	r2, r2, #9
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	0212      	lsls	r2, r2, #8
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d1b3      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c68:	4b78      	ldr	r3, [pc, #480]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d504      	bpl.n	8004c7a <HAL_RCC_OscConfig+0x14a>
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 8004c76:	2001      	movs	r0, #1
 8004c78:	e1c7      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4974      	ldr	r1, [pc, #464]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c7c:	680b      	ldr	r3, [r1, #0]
 8004c7e:	22f8      	movs	r2, #248	; 0xf8
 8004c80:	4393      	bics	r3, r2
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	00d2      	lsls	r2, r2, #3
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	d544      	bpl.n	8004d1a <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c90:	69e3      	ldr	r3, [r4, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02e      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4a6d      	ldr	r2, [pc, #436]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004c98:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca0:	f7fe fbf8 	bl	8003494 <HAL_GetTick>
 8004ca4:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca6:	4b69      	ldr	r3, [pc, #420]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d435      	bmi.n	8004d1a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cae:	f7fe fbf1 	bl	8003494 <HAL_GetTick>
 8004cb2:	1b40      	subs	r0, r0, r5
 8004cb4:	2802      	cmp	r0, #2
 8004cb6:	d9f6      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8004cb8:	2003      	movs	r0, #3
 8004cba:	e1a6      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4963      	ldr	r1, [pc, #396]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	22f8      	movs	r2, #248	; 0xf8
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	6922      	ldr	r2, [r4, #16]
 8004cc6:	00d2      	lsls	r2, r2, #3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e7dd      	b.n	8004c8a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4a5f      	ldr	r2, [pc, #380]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004cd0:	6813      	ldr	r3, [r2, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	438b      	bics	r3, r1
 8004cd6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fbdc 	bl	8003494 <HAL_GetTick>
 8004cdc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	079b      	lsls	r3, r3, #30
 8004ce4:	d5d1      	bpl.n	8004c8a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce6:	f7fe fbd5 	bl	8003494 <HAL_GetTick>
 8004cea:	1b40      	subs	r0, r0, r5
 8004cec:	2802      	cmp	r0, #2
 8004cee:	d9f6      	bls.n	8004cde <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8004cf0:	2003      	movs	r0, #3
 8004cf2:	e18a      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4a55      	ldr	r2, [pc, #340]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004cf6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	438b      	bics	r3, r1
 8004cfc:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfe:	f7fe fbc9 	bl	8003494 <HAL_GetTick>
 8004d02:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b51      	ldr	r3, [pc, #324]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	079b      	lsls	r3, r3, #30
 8004d0a:	d506      	bpl.n	8004d1a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fe fbc2 	bl	8003494 <HAL_GetTick>
 8004d10:	1b40      	subs	r0, r0, r5
 8004d12:	2802      	cmp	r0, #2
 8004d14:	d9f6      	bls.n	8004d04 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8004d16:	2003      	movs	r0, #3
 8004d18:	e177      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	075b      	lsls	r3, r3, #29
 8004d1e:	d575      	bpl.n	8004e0c <HAL_RCC_OscConfig+0x2dc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d20:	4b4a      	ldr	r3, [pc, #296]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	d40b      	bmi.n	8004d40 <HAL_RCC_OscConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004d2a:	69d1      	ldr	r1, [r2, #28]
 8004d2c:	2080      	movs	r0, #128	; 0x80
 8004d2e:	0540      	lsls	r0, r0, #21
 8004d30:	4301      	orrs	r1, r0
 8004d32:	61d1      	str	r1, [r2, #28]
 8004d34:	69d3      	ldr	r3, [r2, #28]
 8004d36:	4003      	ands	r3, r0
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d3c:	2501      	movs	r5, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
    FlagStatus       pwrclkchanged = RESET;
 8004d40:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d42:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <HAL_RCC_OscConfig+0x328>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	d51f      	bpl.n	8004d8a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	68a3      	ldr	r3, [r4, #8]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d030      	beq.n	8004db2 <HAL_RCC_OscConfig+0x282>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d134      	bne.n	8004dbe <HAL_RCC_OscConfig+0x28e>
 8004d54:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	438a      	bics	r2, r1
 8004d5c:	621a      	str	r2, [r3, #32]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	3103      	adds	r1, #3
 8004d62:	438a      	bics	r2, r1
 8004d64:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03e      	beq.n	8004dea <HAL_RCC_OscConfig+0x2ba>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fe fb92 	bl	8003494 <HAL_GetTick>
 8004d70:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	079b      	lsls	r3, r3, #30
 8004d78:	d446      	bmi.n	8004e08 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fe fb8b 	bl	8003494 <HAL_GetTick>
 8004d7e:	1b80      	subs	r0, r0, r6
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x32c>)
 8004d82:	4298      	cmp	r0, r3
 8004d84:	d9f5      	bls.n	8004d72 <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 8004d86:	2003      	movs	r0, #3
 8004d88:	e13f      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d8a:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <HAL_RCC_OscConfig+0x328>)
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	430b      	orrs	r3, r1
 8004d94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d96:	f7fe fb7d 	bl	8003494 <HAL_GetTick>
 8004d9a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <HAL_RCC_OscConfig+0x328>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	05db      	lsls	r3, r3, #23
 8004da2:	d4d2      	bmi.n	8004d4a <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fe fb76 	bl	8003494 <HAL_GetTick>
 8004da8:	1b80      	subs	r0, r0, r6
 8004daa:	2864      	cmp	r0, #100	; 0x64
 8004dac:	d9f6      	bls.n	8004d9c <HAL_RCC_OscConfig+0x26c>
          return HAL_TIMEOUT;
 8004dae:	2003      	movs	r0, #3
 8004db0:	e12b      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db2:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004db4:	6a13      	ldr	r3, [r2, #32]
 8004db6:	2101      	movs	r1, #1
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6213      	str	r3, [r2, #32]
 8004dbc:	e7d3      	b.n	8004d66 <HAL_RCC_OscConfig+0x236>
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2a6>
 8004dc2:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	621a      	str	r2, [r3, #32]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	3103      	adds	r1, #3
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	621a      	str	r2, [r3, #32]
 8004dd4:	e7c7      	b.n	8004d66 <HAL_RCC_OscConfig+0x236>
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	2104      	movs	r1, #4
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	621a      	str	r2, [r3, #32]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	3903      	subs	r1, #3
 8004de4:	430a      	orrs	r2, r1
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e7bd      	b.n	8004d66 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fe fb53 	bl	8003494 <HAL_GetTick>
 8004dee:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	079b      	lsls	r3, r3, #30
 8004df6:	d507      	bpl.n	8004e08 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fe fb4c 	bl	8003494 <HAL_GetTick>
 8004dfc:	1b80      	subs	r0, r0, r6
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <HAL_RCC_OscConfig+0x32c>)
 8004e00:	4298      	cmp	r0, r3
 8004e02:	d9f5      	bls.n	8004df0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004e04:	2003      	movs	r0, #3
 8004e06:	e100      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e08:	2d01      	cmp	r5, #1
 8004e0a:	d029      	beq.n	8004e60 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	06db      	lsls	r3, r3, #27
 8004e10:	d558      	bpl.n	8004ec4 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d029      	beq.n	8004e6c <HAL_RCC_OscConfig+0x33c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e18:	3305      	adds	r3, #5
 8004e1a:	d047      	beq.n	8004eac <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	2104      	movs	r1, #4
 8004e22:	430a      	orrs	r2, r1
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e28:	3903      	subs	r1, #3
 8004e2a:	438a      	bics	r2, r1
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2e:	f7fe fb31 	bl	8003494 <HAL_GetTick>
 8004e32:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_OscConfig+0x31c>)
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	079b      	lsls	r3, r3, #30
 8004e3a:	d543      	bpl.n	8004ec4 <HAL_RCC_OscConfig+0x394>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e3c:	f7fe fb2a 	bl	8003494 <HAL_GetTick>
 8004e40:	1b40      	subs	r0, r0, r5
 8004e42:	2802      	cmp	r0, #2
 8004e44:	d9f6      	bls.n	8004e34 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8004e46:	2003      	movs	r0, #3
 8004e48:	e0df      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	fffeffff 	.word	0xfffeffff
 8004e54:	fffbffff 	.word	0xfffbffff
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	00001388 	.word	0x00001388
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e60:	4a6c      	ldr	r2, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004e62:	69d3      	ldr	r3, [r2, #28]
 8004e64:	496c      	ldr	r1, [pc, #432]	; (8005018 <HAL_RCC_OscConfig+0x4e8>)
 8004e66:	400b      	ands	r3, r1
 8004e68:	61d3      	str	r3, [r2, #28]
 8004e6a:	e7cf      	b.n	8004e0c <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e6c:	4b69      	ldr	r3, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e70:	2104      	movs	r1, #4
 8004e72:	430a      	orrs	r2, r1
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e78:	3903      	subs	r1, #3
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004e7e:	f7fe fb09 	bl	8003494 <HAL_GetTick>
 8004e82:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e84:	4b63      	ldr	r3, [pc, #396]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	079b      	lsls	r3, r3, #30
 8004e8a:	d406      	bmi.n	8004e9a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e8c:	f7fe fb02 	bl	8003494 <HAL_GetTick>
 8004e90:	1b40      	subs	r0, r0, r5
 8004e92:	2802      	cmp	r0, #2
 8004e94:	d9f6      	bls.n	8004e84 <HAL_RCC_OscConfig+0x354>
          return HAL_TIMEOUT;
 8004e96:	2003      	movs	r0, #3
 8004e98:	e0b7      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e9a:	495e      	ldr	r1, [pc, #376]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004e9c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e9e:	22f8      	movs	r2, #248	; 0xf8
 8004ea0:	4393      	bics	r3, r2
 8004ea2:	69a2      	ldr	r2, [r4, #24]
 8004ea4:	00d2      	lsls	r2, r2, #3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	634b      	str	r3, [r1, #52]	; 0x34
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x394>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004eac:	4a59      	ldr	r2, [pc, #356]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004eae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	438b      	bics	r3, r1
 8004eb4:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004eb6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004eb8:	31f4      	adds	r1, #244	; 0xf4
 8004eba:	438b      	bics	r3, r1
 8004ebc:	69a1      	ldr	r1, [r4, #24]
 8004ebe:	00c9      	lsls	r1, r1, #3
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	069b      	lsls	r3, r3, #26
 8004ec8:	d545      	bpl.n	8004f56 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004eca:	4b52      	ldr	r3, [pc, #328]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	230c      	movs	r3, #12
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d023      	beq.n	8004f1e <HAL_RCC_OscConfig+0x3ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ed6:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	230c      	movs	r3, #12
 8004edc:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCC_OscConfig+0x3e0>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ee2:	6a23      	ldr	r3, [r4, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ee8:	4a4a      	ldr	r2, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004eea:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	025b      	lsls	r3, r3, #9
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe face 	bl	8003494 <HAL_GetTick>
 8004ef8:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004efa:	4b46      	ldr	r3, [pc, #280]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	03db      	lsls	r3, r3, #15
 8004f00:	d429      	bmi.n	8004f56 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f02:	f7fe fac7 	bl	8003494 <HAL_GetTick>
 8004f06:	1b40      	subs	r0, r0, r5
 8004f08:	2802      	cmp	r0, #2
 8004f0a:	d9f6      	bls.n	8004efa <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	e07c      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f10:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	22c0      	movs	r2, #192	; 0xc0
 8004f16:	0252      	lsls	r2, r2, #9
 8004f18:	4013      	ands	r3, r2
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d1e1      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3b2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	03db      	lsls	r3, r3, #15
 8004f24:	d517      	bpl.n	8004f56 <HAL_RCC_OscConfig+0x426>
 8004f26:	6a23      	ldr	r3, [r4, #32]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d014      	beq.n	8004f56 <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	e06c      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004f30:	4a38      	ldr	r2, [pc, #224]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004f34:	4939      	ldr	r1, [pc, #228]	; (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004f36:	400b      	ands	r3, r1
 8004f38:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fe faab 	bl	8003494 <HAL_GetTick>
 8004f3e:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004f40:	4b34      	ldr	r3, [pc, #208]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	03db      	lsls	r3, r3, #15
 8004f46:	d506      	bpl.n	8004f56 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f48:	f7fe faa4 	bl	8003494 <HAL_GetTick>
 8004f4c:	1b40      	subs	r0, r0, r5
 8004f4e:	2802      	cmp	r0, #2
 8004f50:	d9f6      	bls.n	8004f40 <HAL_RCC_OscConfig+0x410>
          {
            return HAL_TIMEOUT;
 8004f52:	2003      	movs	r0, #3
 8004f54:	e059      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d055      	beq.n	8005008 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f5e:	6851      	ldr	r1, [r2, #4]
 8004f60:	220c      	movs	r2, #12
 8004f62:	400a      	ands	r2, r1
 8004f64:	2a08      	cmp	r2, #8
 8004f66:	d052      	beq.n	800500e <HAL_RCC_OscConfig+0x4de>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d012      	beq.n	8004f92 <HAL_RCC_OscConfig+0x462>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	492b      	ldr	r1, [pc, #172]	; (8005020 <HAL_RCC_OscConfig+0x4f0>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f76:	f7fe fa8d 	bl	8003494 <HAL_GetTick>
 8004f7a:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	d53d      	bpl.n	8005000 <HAL_RCC_OscConfig+0x4d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe fa86 	bl	8003494 <HAL_GetTick>
 8004f88:	1b00      	subs	r0, r0, r4
 8004f8a:	2802      	cmp	r0, #2
 8004f8c:	d9f6      	bls.n	8004f7c <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8004f8e:	2003      	movs	r0, #3
 8004f90:	e03b      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4a20      	ldr	r2, [pc, #128]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004f94:	6813      	ldr	r3, [r2, #0]
 8004f96:	4922      	ldr	r1, [pc, #136]	; (8005020 <HAL_RCC_OscConfig+0x4f0>)
 8004f98:	400b      	ands	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fa7a 	bl	8003494 <HAL_GetTick>
 8004fa0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	019b      	lsls	r3, r3, #6
 8004fa8:	d506      	bpl.n	8004fb8 <HAL_RCC_OscConfig+0x488>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fe fa73 	bl	8003494 <HAL_GetTick>
 8004fae:	1b40      	subs	r0, r0, r5
 8004fb0:	2802      	cmp	r0, #2
 8004fb2:	d9f6      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x472>
            return HAL_TIMEOUT;
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	e028      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	438a      	bics	r2, r1
 8004fc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RCC_OscConfig+0x4f4>)
 8004fca:	400a      	ands	r2, r1
 8004fcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004fce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004fd0:	4301      	orrs	r1, r0
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	0452      	lsls	r2, r2, #17
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004fe0:	f7fe fa58 	bl	8003494 <HAL_GetTick>
 8004fe4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x4e4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	019b      	lsls	r3, r3, #6
 8004fec:	d406      	bmi.n	8004ffc <HAL_RCC_OscConfig+0x4cc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fe fa51 	bl	8003494 <HAL_GetTick>
 8004ff2:	1b00      	subs	r0, r0, r4
 8004ff4:	2802      	cmp	r0, #2
 8004ff6:	d9f6      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8004ff8:	2003      	movs	r0, #3
 8004ffa:	e006      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e004      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
 8005000:	2000      	movs	r0, #0
 8005002:	e002      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 8005004:	2001      	movs	r0, #1
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 8005008:	2000      	movs	r0, #0
}
 800500a:	b002      	add	sp, #8
 800500c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
 8005010:	e7fb      	b.n	800500a <HAL_RCC_OscConfig+0x4da>
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	40021000 	.word	0x40021000
 8005018:	efffffff 	.word	0xefffffff
 800501c:	fffeffff 	.word	0xfffeffff
 8005020:	feffffff 	.word	0xfeffffff
 8005024:	ffc27fff 	.word	0xffc27fff

08005028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005028:	b530      	push	{r4, r5, lr}
 800502a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800502c:	aa04      	add	r2, sp, #16
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <HAL_RCC_GetSysClockFreq+0x84>)
 8005030:	0018      	movs	r0, r3
 8005032:	c832      	ldmia	r0!, {r1, r4, r5}
 8005034:	c232      	stmia	r2!, {r1, r4, r5}
 8005036:	0011      	movs	r1, r2
 8005038:	6802      	ldr	r2, [r0, #0]
 800503a:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800503c:	466a      	mov	r2, sp
 800503e:	3310      	adds	r3, #16
 8005040:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005042:	c213      	stmia	r2!, {r0, r1, r4}
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x88>)
 800504a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800504c:	230c      	movs	r3, #12
 800504e:	4013      	ands	r3, r2
 8005050:	2b08      	cmp	r3, #8
 8005052:	d004      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0x36>
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d026      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005058:	4816      	ldr	r0, [pc, #88]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800505a:	b009      	add	sp, #36	; 0x24
 800505c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800505e:	0c91      	lsrs	r1, r2, #18
 8005060:	230f      	movs	r3, #15
 8005062:	4019      	ands	r1, r3
 8005064:	a804      	add	r0, sp, #16
 8005066:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005068:	4911      	ldr	r1, [pc, #68]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x88>)
 800506a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800506c:	400b      	ands	r3, r1
 800506e:	4669      	mov	r1, sp
 8005070:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005072:	23c0      	movs	r3, #192	; 0xc0
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	401a      	ands	r2, r3
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	025b      	lsls	r3, r3, #9
 800507c:	429a      	cmp	r2, r3
 800507e:	d008      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005080:	23c0      	movs	r3, #192	; 0xc0
 8005082:	025b      	lsls	r3, r3, #9
 8005084:	429a      	cmp	r2, r3
 8005086:	d009      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8005088:	480a      	ldr	r0, [pc, #40]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800508a:	f7fb f83d 	bl	8000108 <__udivsi3>
 800508e:	4360      	muls	r0, r4
 8005090:	e7e3      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8005092:	4808      	ldr	r0, [pc, #32]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005094:	f7fb f838 	bl	8000108 <__udivsi3>
 8005098:	4360      	muls	r0, r4
 800509a:	e7de      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 800509c:	4806      	ldr	r0, [pc, #24]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x90>)
 800509e:	f7fb f833 	bl	8000108 <__udivsi3>
 80050a2:	4360      	muls	r0, r4
 80050a4:	e7d9      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 80050a6:	4804      	ldr	r0, [pc, #16]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 80050a8:	e7d7      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x32>
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	08007c30 	.word	0x08007c30
 80050b0:	40021000 	.word	0x40021000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	02dc6c00 	.word	0x02dc6c00

080050bc <HAL_RCC_ClockConfig>:
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	0005      	movs	r5, r0
 80050c0:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80050c2:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCC_ClockConfig+0x16c>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2301      	movs	r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	428b      	cmp	r3, r1
 80050cc:	d20b      	bcs.n	80050e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4956      	ldr	r1, [pc, #344]	; (8005228 <HAL_RCC_ClockConfig+0x16c>)
 80050d0:	680b      	ldr	r3, [r1, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	4393      	bics	r3, r2
 80050d6:	4323      	orrs	r3, r4
 80050d8:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050da:	680b      	ldr	r3, [r1, #0]
 80050dc:	401a      	ands	r2, r3
 80050de:	4294      	cmp	r4, r2
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80050e2:	2001      	movs	r0, #1
 80050e4:	e09d      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d506      	bpl.n	80050fa <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4a4f      	ldr	r2, [pc, #316]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 80050ee:	6853      	ldr	r3, [r2, #4]
 80050f0:	21f0      	movs	r1, #240	; 0xf0
 80050f2:	438b      	bics	r3, r1
 80050f4:	68a9      	ldr	r1, [r5, #8]
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	07db      	lsls	r3, r3, #31
 80050fe:	d564      	bpl.n	80051ca <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005100:	686b      	ldr	r3, [r5, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d025      	beq.n	8005152 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005106:	2b02      	cmp	r3, #2
 8005108:	d029      	beq.n	800515e <HAL_RCC_ClockConfig+0xa2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800510a:	2b03      	cmp	r3, #3
 800510c:	d02d      	beq.n	800516a <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4a47      	ldr	r2, [pc, #284]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	0792      	lsls	r2, r2, #30
 8005114:	d400      	bmi.n	8005118 <HAL_RCC_ClockConfig+0x5c>
 8005116:	e085      	b.n	8005224 <HAL_RCC_ClockConfig+0x168>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005118:	4944      	ldr	r1, [pc, #272]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 800511a:	684a      	ldr	r2, [r1, #4]
 800511c:	2003      	movs	r0, #3
 800511e:	4382      	bics	r2, r0
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005124:	f7fe f9b6 	bl	8003494 <HAL_GetTick>
 8005128:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512a:	686b      	ldr	r3, [r5, #4]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d022      	beq.n	8005176 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005130:	2b02      	cmp	r3, #2
 8005132:	d02e      	beq.n	8005192 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005134:	2b03      	cmp	r3, #3
 8005136:	d03a      	beq.n	80051ae <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005138:	4b3c      	ldr	r3, [pc, #240]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	220c      	movs	r2, #12
 800513e:	421a      	tst	r2, r3
 8005140:	d043      	beq.n	80051ca <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005142:	f7fe f9a7 	bl	8003494 <HAL_GetTick>
 8005146:	1b80      	subs	r0, r0, r6
 8005148:	4b39      	ldr	r3, [pc, #228]	; (8005230 <HAL_RCC_ClockConfig+0x174>)
 800514a:	4298      	cmp	r0, r3
 800514c:	d9f4      	bls.n	8005138 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800514e:	2003      	movs	r0, #3
 8005150:	e067      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4a36      	ldr	r2, [pc, #216]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	0392      	lsls	r2, r2, #14
 8005158:	d4de      	bmi.n	8005118 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 800515a:	2001      	movs	r0, #1
 800515c:	e061      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4a33      	ldr	r2, [pc, #204]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	0192      	lsls	r2, r2, #6
 8005164:	d4d8      	bmi.n	8005118 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8005166:	2001      	movs	r0, #1
 8005168:	e05b      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800516a:	4a30      	ldr	r2, [pc, #192]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 800516c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800516e:	03d2      	lsls	r2, r2, #15
 8005170:	d4d2      	bmi.n	8005118 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8005172:	2001      	movs	r0, #1
 8005174:	e055      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005176:	4b2d      	ldr	r3, [pc, #180]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	230c      	movs	r3, #12
 800517c:	4013      	ands	r3, r2
 800517e:	2b04      	cmp	r3, #4
 8005180:	d023      	beq.n	80051ca <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005182:	f7fe f987 	bl	8003494 <HAL_GetTick>
 8005186:	1b80      	subs	r0, r0, r6
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCC_ClockConfig+0x174>)
 800518a:	4298      	cmp	r0, r3
 800518c:	d9f3      	bls.n	8005176 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800518e:	2003      	movs	r0, #3
 8005190:	e047      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005192:	4b26      	ldr	r3, [pc, #152]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	230c      	movs	r3, #12
 8005198:	4013      	ands	r3, r2
 800519a:	2b08      	cmp	r3, #8
 800519c:	d015      	beq.n	80051ca <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519e:	f7fe f979 	bl	8003494 <HAL_GetTick>
 80051a2:	1b80      	subs	r0, r0, r6
 80051a4:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_RCC_ClockConfig+0x174>)
 80051a6:	4298      	cmp	r0, r3
 80051a8:	d9f3      	bls.n	8005192 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80051aa:	2003      	movs	r0, #3
 80051ac:	e039      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80051ae:	4b1f      	ldr	r3, [pc, #124]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	230c      	movs	r3, #12
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d007      	beq.n	80051ca <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ba:	f7fe f96b 	bl	8003494 <HAL_GetTick>
 80051be:	1b80      	subs	r0, r0, r6
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_RCC_ClockConfig+0x174>)
 80051c2:	4298      	cmp	r0, r3
 80051c4:	d9f3      	bls.n	80051ae <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 80051c6:	2003      	movs	r0, #3
 80051c8:	e02b      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_RCC_ClockConfig+0x16c>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	2301      	movs	r3, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	429c      	cmp	r4, r3
 80051d4:	d20b      	bcs.n	80051ee <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4914      	ldr	r1, [pc, #80]	; (8005228 <HAL_RCC_ClockConfig+0x16c>)
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	4393      	bics	r3, r2
 80051de:	4323      	orrs	r3, r4
 80051e0:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e2:	680b      	ldr	r3, [r1, #0]
 80051e4:	401a      	ands	r2, r3
 80051e6:	4294      	cmp	r4, r2
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
 80051ec:	e019      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	075b      	lsls	r3, r3, #29
 80051f2:	d506      	bpl.n	8005202 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 80051f6:	6853      	ldr	r3, [r2, #4]
 80051f8:	490e      	ldr	r1, [pc, #56]	; (8005234 <HAL_RCC_ClockConfig+0x178>)
 80051fa:	400b      	ands	r3, r1
 80051fc:	68e9      	ldr	r1, [r5, #12]
 80051fe:	430b      	orrs	r3, r1
 8005200:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005202:	f7ff ff11 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x170>)
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	0912      	lsrs	r2, r2, #4
 800520c:	230f      	movs	r3, #15
 800520e:	4013      	ands	r3, r2
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <HAL_RCC_ClockConfig+0x17c>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	40d8      	lsrs	r0, r3
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <HAL_RCC_ClockConfig+0x180>)
 8005218:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800521a:	2000      	movs	r0, #0
 800521c:	f7fe f884 	bl	8003328 <HAL_InitTick>
  return HAL_OK;
 8005220:	2000      	movs	r0, #0
}
 8005222:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005224:	2001      	movs	r0, #1
 8005226:	e7fc      	b.n	8005222 <HAL_RCC_ClockConfig+0x166>
 8005228:	40022000 	.word	0x40022000
 800522c:	40021000 	.word	0x40021000
 8005230:	00001388 	.word	0x00001388
 8005234:	fffff8ff 	.word	0xfffff8ff
 8005238:	08007d90 	.word	0x08007d90
 800523c:	20000000 	.word	0x20000000

08005240 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005240:	4b01      	ldr	r3, [pc, #4]	; (8005248 <HAL_RCC_GetHCLKFreq+0x8>)
 8005242:	6818      	ldr	r0, [r3, #0]
}
 8005244:	4770      	bx	lr
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	20000000 	.word	0x20000000

0800524c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800524c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800524e:	f7ff fff7 	bl	8005240 <HAL_RCC_GetHCLKFreq>
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	0a12      	lsrs	r2, r2, #8
 8005258:	2307      	movs	r3, #7
 800525a:	4013      	ands	r3, r2
 800525c:	4a02      	ldr	r2, [pc, #8]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800525e:	5cd3      	ldrb	r3, [r2, r3]
 8005260:	40d8      	lsrs	r0, r3
}    
 8005262:	bd10      	pop	{r4, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	08007da0 	.word	0x08007da0

0800526c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800526c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800526e:	2307      	movs	r3, #7
 8005270:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_RCC_GetClockConfig+0x30>)
 8005274:	685c      	ldr	r4, [r3, #4]
 8005276:	2203      	movs	r2, #3
 8005278:	4022      	ands	r2, r4
 800527a:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800527c:	685c      	ldr	r4, [r3, #4]
 800527e:	22f0      	movs	r2, #240	; 0xf0
 8005280:	4022      	ands	r2, r4
 8005282:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	22e0      	movs	r2, #224	; 0xe0
 8005288:	00d2      	lsls	r2, r2, #3
 800528a:	4013      	ands	r3, r2
 800528c:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCC_GetClockConfig+0x34>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	2301      	movs	r3, #1
 8005294:	4013      	ands	r3, r2
 8005296:	600b      	str	r3, [r1, #0]
}
 8005298:	bd10      	pop	{r4, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	40021000 	.word	0x40021000
 80052a0:	40022000 	.word	0x40022000

080052a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052aa:	6803      	ldr	r3, [r0, #0]
 80052ac:	03db      	lsls	r3, r3, #15
 80052ae:	d535      	bpl.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b0:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	d466      	bmi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b8:	4a49      	ldr	r2, [pc, #292]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052ba:	69d1      	ldr	r1, [r2, #28]
 80052bc:	2080      	movs	r0, #128	; 0x80
 80052be:	0540      	lsls	r0, r0, #21
 80052c0:	4301      	orrs	r1, r0
 80052c2:	61d1      	str	r1, [r2, #28]
 80052c4:	69d3      	ldr	r3, [r2, #28]
 80052c6:	4003      	ands	r3, r0
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052cc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b45      	ldr	r3, [pc, #276]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	05db      	lsls	r3, r3, #23
 80052d4:	d559      	bpl.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xe6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	22c0      	movs	r2, #192	; 0xc0
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e0:	d013      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x66>
 80052e2:	6861      	ldr	r1, [r4, #4]
 80052e4:	400a      	ands	r2, r1
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00f      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ea:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052ec:	6a18      	ldr	r0, [r3, #32]
 80052ee:	4a3e      	ldr	r2, [pc, #248]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80052f0:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052f2:	6a1e      	ldr	r6, [r3, #32]
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	0249      	lsls	r1, r1, #9
 80052f8:	4331      	orrs	r1, r6
 80052fa:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052fc:	6a19      	ldr	r1, [r3, #32]
 80052fe:	4e3b      	ldr	r6, [pc, #236]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005300:	4031      	ands	r1, r6
 8005302:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005304:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005306:	07c3      	lsls	r3, r0, #31
 8005308:	d453      	bmi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	4a35      	ldr	r2, [pc, #212]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800530c:	6a13      	ldr	r3, [r2, #32]
 800530e:	4936      	ldr	r1, [pc, #216]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005310:	400b      	ands	r3, r1
 8005312:	6861      	ldr	r1, [r4, #4]
 8005314:	430b      	orrs	r3, r1
 8005316:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005318:	2d01      	cmp	r5, #1
 800531a:	d059      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d506      	bpl.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005322:	4a2f      	ldr	r2, [pc, #188]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005324:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005326:	2103      	movs	r1, #3
 8005328:	438b      	bics	r3, r1
 800532a:	68a1      	ldr	r1, [r4, #8]
 800532c:	430b      	orrs	r3, r1
 800532e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d506      	bpl.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005336:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005338:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800533a:	492d      	ldr	r1, [pc, #180]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800533c:	400b      	ands	r3, r1
 800533e:	68e1      	ldr	r1, [r4, #12]
 8005340:	430b      	orrs	r3, r1
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	069b      	lsls	r3, r3, #26
 8005348:	d506      	bpl.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800534c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800534e:	2110      	movs	r1, #16
 8005350:	438b      	bics	r3, r1
 8005352:	6921      	ldr	r1, [r4, #16]
 8005354:	430b      	orrs	r3, r1
 8005356:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	039b      	lsls	r3, r3, #14
 800535c:	d506      	bpl.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800535e:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005360:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	438b      	bics	r3, r1
 8005366:	69a1      	ldr	r1, [r4, #24]
 8005368:	430b      	orrs	r3, r1
 800536a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	055b      	lsls	r3, r3, #21
 8005370:	d533      	bpl.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005372:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005374:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005376:	2140      	movs	r1, #64	; 0x40
 8005378:	438b      	bics	r3, r1
 800537a:	6961      	ldr	r1, [r4, #20]
 800537c:	430b      	orrs	r3, r1
 800537e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005380:	2000      	movs	r0, #0
}
 8005382:	b002      	add	sp, #8
 8005384:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2500      	movs	r5, #0
 8005388:	e7a1      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	430b      	orrs	r3, r1
 8005394:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005396:	f7fe f87d 	bl	8003494 <HAL_GetTick>
 800539a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	05db      	lsls	r3, r3, #23
 80053a2:	d498      	bmi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fe f876 	bl	8003494 <HAL_GetTick>
 80053a8:	1b80      	subs	r0, r0, r6
 80053aa:	2864      	cmp	r0, #100	; 0x64
 80053ac:	d9f6      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 80053ae:	2003      	movs	r0, #3
 80053b0:	e7e7      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xde>
        tickstart = HAL_GetTick();
 80053b2:	f7fe f86f 	bl	8003494 <HAL_GetTick>
 80053b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	079b      	lsls	r3, r3, #30
 80053be:	d4a4      	bmi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fe f868 	bl	8003494 <HAL_GetTick>
 80053c4:	1b80      	subs	r0, r0, r6
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80053c8:	4298      	cmp	r0, r3
 80053ca:	d9f5      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
 80053cc:	2003      	movs	r0, #3
 80053ce:	e7d8      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xde>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d0:	69d3      	ldr	r3, [r2, #28]
 80053d2:	4909      	ldr	r1, [pc, #36]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	61d3      	str	r3, [r2, #28]
 80053d8:	e7a0      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80053da:	2000      	movs	r0, #0
 80053dc:	e7d1      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40007000 	.word	0x40007000
 80053e8:	fffffcff 	.word	0xfffffcff
 80053ec:	fffeffff 	.word	0xfffeffff
 80053f0:	fffcffff 	.word	0xfffcffff
 80053f4:	00001388 	.word	0x00001388
 80053f8:	efffffff 	.word	0xefffffff

080053fc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	0006      	movs	r6, r0
 8005400:	000c      	movs	r4, r1
 8005402:	0017      	movs	r7, r2
 8005404:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005406:	e03e      	b.n	8005486 <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005408:	2d00      	cmp	r5, #0
 800540a:	d005      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x1c>
 800540c:	f7fe f842 	bl	8003494 <HAL_GetTick>
 8005410:	9b06      	ldr	r3, [sp, #24]
 8005412:	1ac0      	subs	r0, r0, r3
 8005414:	4285      	cmp	r5, r0
 8005416:	d836      	bhi.n	8005486 <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005418:	6832      	ldr	r2, [r6, #0]
 800541a:	6853      	ldr	r3, [r2, #4]
 800541c:	21e0      	movs	r1, #224	; 0xe0
 800541e:	438b      	bics	r3, r1
 8005420:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	2382      	movs	r3, #130	; 0x82
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	6872      	ldr	r2, [r6, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d00c      	beq.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005432:	429a      	cmp	r2, r3
 8005434:	d016      	beq.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005436:	2201      	movs	r2, #1
 8005438:	235d      	movs	r3, #93	; 0x5d
 800543a:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543c:	2200      	movs	r2, #0
 800543e:	3b01      	subs	r3, #1
 8005440:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8005442:	2003      	movs	r0, #3
 8005444:	e027      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005446:	68b3      	ldr	r3, [r6, #8]
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	0212      	lsls	r2, r2, #8
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4293      	cmp	r3, r2
 8005456:	d1e9      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 8005458:	6832      	ldr	r2, [r6, #0]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	438b      	bics	r3, r1
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e7e3      	b.n	800542c <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 8005464:	6832      	ldr	r2, [r6, #0]
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	490b      	ldr	r1, [pc, #44]	; (8005498 <SPI_WaitFlagStateUntilTimeout+0x9c>)
 800546a:	400b      	ands	r3, r1
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	6832      	ldr	r2, [r6, #0]
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	430b      	orrs	r3, r1
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e7dc      	b.n	8005436 <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547c:	2301      	movs	r3, #1
 800547e:	42bb      	cmp	r3, r7
 8005480:	d008      	beq.n	8005494 <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8005482:	1c6b      	adds	r3, r5, #1
 8005484:	d1c0      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4023      	ands	r3, r4
 800548c:	429c      	cmp	r4, r3
 800548e:	d0f5      	beq.n	800547c <SPI_WaitFlagStateUntilTimeout+0x80>
 8005490:	2300      	movs	r3, #0
 8005492:	e7f4      	b.n	800547e <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 8005494:	2000      	movs	r0, #0
}
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005498:	ffffdfff 	.word	0xffffdfff

0800549c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549e:	b083      	sub	sp, #12
 80054a0:	0007      	movs	r7, r0
 80054a2:	000c      	movs	r4, r1
 80054a4:	0015      	movs	r5, r2
 80054a6:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80054a8:	e001      	b.n	80054ae <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80054aa:	1c73      	adds	r3, r6, #1
 80054ac:	d110      	bne.n	80054d0 <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	6893      	ldr	r3, [r2, #8]
 80054b2:	4023      	ands	r3, r4
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	d045      	beq.n	8005544 <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054b8:	23c0      	movs	r3, #192	; 0xc0
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	429c      	cmp	r4, r3
 80054be:	d1f4      	bne.n	80054aa <SPI_WaitFifoStateUntilTimeout+0xe>
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	d1f2      	bne.n	80054aa <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80054c4:	7b13      	ldrb	r3, [r2, #12]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	466a      	mov	r2, sp
 80054ca:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 80054cc:	79d3      	ldrb	r3, [r2, #7]
 80054ce:	e7ec      	b.n	80054aa <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80054d0:	2e00      	cmp	r6, #0
 80054d2:	d005      	beq.n	80054e0 <SPI_WaitFifoStateUntilTimeout+0x44>
 80054d4:	f7fd ffde 	bl	8003494 <HAL_GetTick>
 80054d8:	9b08      	ldr	r3, [sp, #32]
 80054da:	1ac0      	subs	r0, r0, r3
 80054dc:	4286      	cmp	r6, r0
 80054de:	d8e6      	bhi.n	80054ae <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	6853      	ldr	r3, [r2, #4]
 80054e4:	21e0      	movs	r1, #224	; 0xe0
 80054e6:	438b      	bics	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ea:	2382      	movs	r3, #130	; 0x82
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d00c      	beq.n	800550e <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	019b      	lsls	r3, r3, #6
 80054f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d016      	beq.n	800552c <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fe:	2201      	movs	r2, #1
 8005500:	235d      	movs	r3, #93	; 0x5d
 8005502:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005504:	2200      	movs	r2, #0
 8005506:	3b01      	subs	r3, #1
 8005508:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 800550a:	2003      	movs	r0, #3
 800550c:	e01b      	b.n	8005546 <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	0212      	lsls	r2, r2, #8
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	00d2      	lsls	r2, r2, #3
 800551c:	4293      	cmp	r3, r2
 800551e:	d1e9      	bne.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	2140      	movs	r1, #64	; 0x40
 8005526:	438b      	bics	r3, r1
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	e7e3      	b.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	4906      	ldr	r1, [pc, #24]	; (800554c <SPI_WaitFifoStateUntilTimeout+0xb0>)
 8005532:	400b      	ands	r3, r1
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	6811      	ldr	r1, [r2, #0]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	430b      	orrs	r3, r1
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e7dc      	b.n	80054fe <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8005544:	2000      	movs	r0, #0
}
 8005546:	b003      	add	sp, #12
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	ffffdfff 	.word	0xffffdfff

08005550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	0004      	movs	r4, r0
 8005556:	000d      	movs	r5, r1
 8005558:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800555a:	9200      	str	r2, [sp, #0]
 800555c:	000b      	movs	r3, r1
 800555e:	2200      	movs	r2, #0
 8005560:	21c0      	movs	r1, #192	; 0xc0
 8005562:	0149      	lsls	r1, r1, #5
 8005564:	f7ff ff9a 	bl	800549c <SPI_WaitFifoStateUntilTimeout>
 8005568:	2800      	cmp	r0, #0
 800556a:	d006      	beq.n	800557a <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800556c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800556e:	2220      	movs	r2, #32
 8005570:	4313      	orrs	r3, r2
 8005572:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005574:	2003      	movs	r0, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8005576:	b002      	add	sp, #8
 8005578:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800557a:	9600      	str	r6, [sp, #0]
 800557c:	002b      	movs	r3, r5
 800557e:	2200      	movs	r2, #0
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	0020      	movs	r0, r4
 8005584:	f7ff ff3a 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 8005588:	2800      	cmp	r0, #0
 800558a:	d005      	beq.n	8005598 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800558e:	2220      	movs	r2, #32
 8005590:	4313      	orrs	r3, r2
 8005592:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005594:	2003      	movs	r0, #3
 8005596:	e7ee      	b.n	8005576 <SPI_EndRxTxTransaction+0x26>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005598:	9600      	str	r6, [sp, #0]
 800559a:	002b      	movs	r3, r5
 800559c:	2200      	movs	r2, #0
 800559e:	21c0      	movs	r1, #192	; 0xc0
 80055a0:	00c9      	lsls	r1, r1, #3
 80055a2:	0020      	movs	r0, r4
 80055a4:	f7ff ff7a 	bl	800549c <SPI_WaitFifoStateUntilTimeout>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d0e4      	beq.n	8005576 <SPI_EndRxTxTransaction+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055ae:	2220      	movs	r2, #32
 80055b0:	4313      	orrs	r3, r2
 80055b2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b4:	2003      	movs	r0, #3
 80055b6:	e7de      	b.n	8005576 <SPI_EndRxTxTransaction+0x26>

080055b8 <SPI_EndRxTransaction>:
{
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	0004      	movs	r4, r0
 80055be:	000d      	movs	r5, r1
 80055c0:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c2:	2382      	movs	r3, #130	; 0x82
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	6842      	ldr	r2, [r0, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d00f      	beq.n	80055ec <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055cc:	9600      	str	r6, [sp, #0]
 80055ce:	002b      	movs	r3, r5
 80055d0:	2200      	movs	r2, #0
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	0020      	movs	r0, r4
 80055d6:	f7ff ff11 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d015      	beq.n	800560a <SPI_EndRxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055e0:	2220      	movs	r2, #32
 80055e2:	4313      	orrs	r3, r2
 80055e4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80055e6:	2003      	movs	r0, #3
}
 80055e8:	b002      	add	sp, #8
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ec:	6883      	ldr	r3, [r0, #8]
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	0212      	lsls	r2, r2, #8
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055f6:	2280      	movs	r2, #128	; 0x80
 80055f8:	00d2      	lsls	r2, r2, #3
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d1e6      	bne.n	80055cc <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	6813      	ldr	r3, [r2, #0]
 8005602:	2140      	movs	r1, #64	; 0x40
 8005604:	438b      	bics	r3, r1
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	e7e0      	b.n	80055cc <SPI_EndRxTransaction+0x14>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560a:	2382      	movs	r3, #130	; 0x82
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	6862      	ldr	r2, [r4, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d1e9      	bne.n	80055e8 <SPI_EndRxTransaction+0x30>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	0212      	lsls	r2, r2, #8
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <SPI_EndRxTransaction+0x6e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	00d2      	lsls	r2, r2, #3
 8005622:	4293      	cmp	r3, r2
 8005624:	d1e0      	bne.n	80055e8 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005626:	9600      	str	r6, [sp, #0]
 8005628:	002b      	movs	r3, r5
 800562a:	2200      	movs	r2, #0
 800562c:	21c0      	movs	r1, #192	; 0xc0
 800562e:	00c9      	lsls	r1, r1, #3
 8005630:	0020      	movs	r0, r4
 8005632:	f7ff ff33 	bl	800549c <SPI_WaitFifoStateUntilTimeout>
 8005636:	2800      	cmp	r0, #0
 8005638:	d0d6      	beq.n	80055e8 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800563c:	2220      	movs	r2, #32
 800563e:	4313      	orrs	r3, r2
 8005640:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8005642:	2003      	movs	r0, #3
 8005644:	e7d0      	b.n	80055e8 <SPI_EndRxTransaction+0x30>
	...

08005648 <HAL_SPI_Init>:
{
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 800564c:	d05e      	beq.n	800570c <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005652:	335d      	adds	r3, #93	; 0x5d
 8005654:	5cc3      	ldrb	r3, [r0, r3]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d04c      	beq.n	80056f4 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 800565a:	2202      	movs	r2, #2
 800565c:	235d      	movs	r3, #93	; 0x5d
 800565e:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	2140      	movs	r1, #64	; 0x40
 8005666:	438b      	bics	r3, r1
 8005668:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	22e0      	movs	r2, #224	; 0xe0
 800566e:	00d2      	lsls	r2, r2, #3
 8005670:	4293      	cmp	r3, r2
 8005672:	d945      	bls.n	8005700 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005674:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005676:	22f0      	movs	r2, #240	; 0xf0
 8005678:	0112      	lsls	r2, r2, #4
 800567a:	4293      	cmp	r3, r2
 800567c:	d005      	beq.n	800568a <HAL_SPI_Init+0x42>
 800567e:	22e0      	movs	r2, #224	; 0xe0
 8005680:	00d2      	lsls	r2, r2, #3
 8005682:	4293      	cmp	r3, r2
 8005684:	d001      	beq.n	800568a <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005686:	2200      	movs	r2, #0
 8005688:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800568a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800568c:	2a00      	cmp	r2, #0
 800568e:	d105      	bne.n	800569c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005690:	22e0      	movs	r2, #224	; 0xe0
 8005692:	00d2      	lsls	r2, r2, #3
 8005694:	4293      	cmp	r3, r2
 8005696:	d936      	bls.n	8005706 <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005698:	2302      	movs	r3, #2
 800569a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	6863      	ldr	r3, [r4, #4]
 80056a0:	68a0      	ldr	r0, [r4, #8]
 80056a2:	4303      	orrs	r3, r0
 80056a4:	6920      	ldr	r0, [r4, #16]
 80056a6:	4303      	orrs	r3, r0
 80056a8:	6960      	ldr	r0, [r4, #20]
 80056aa:	4303      	orrs	r3, r0
 80056ac:	2080      	movs	r0, #128	; 0x80
 80056ae:	0080      	lsls	r0, r0, #2
 80056b0:	69a5      	ldr	r5, [r4, #24]
 80056b2:	4028      	ands	r0, r5
 80056b4:	4303      	orrs	r3, r0
 80056b6:	69e0      	ldr	r0, [r4, #28]
 80056b8:	4303      	orrs	r3, r0
 80056ba:	6a20      	ldr	r0, [r4, #32]
 80056bc:	4303      	orrs	r3, r0
 80056be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80056c0:	4303      	orrs	r3, r0
 80056c2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	8b60      	ldrh	r0, [r4, #26]
 80056c8:	2304      	movs	r3, #4
 80056ca:	4003      	ands	r3, r0
 80056cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80056ce:	4303      	orrs	r3, r0
 80056d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80056d2:	4303      	orrs	r3, r0
 80056d4:	68e0      	ldr	r0, [r4, #12]
 80056d6:	4303      	orrs	r3, r0
 80056d8:	430b      	orrs	r3, r1
 80056da:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	69d3      	ldr	r3, [r2, #28]
 80056e0:	490b      	ldr	r1, [pc, #44]	; (8005710 <HAL_SPI_Init+0xc8>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056ea:	2201      	movs	r2, #1
 80056ec:	335d      	adds	r3, #93	; 0x5d
 80056ee:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80056f0:	2000      	movs	r0, #0
}
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80056f4:	2200      	movs	r2, #0
 80056f6:	335c      	adds	r3, #92	; 0x5c
 80056f8:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 80056fa:	f7fd fd5d 	bl	80031b8 <HAL_SPI_MspInit>
 80056fe:	e7ac      	b.n	800565a <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	0149      	lsls	r1, r1, #5
 8005704:	e7b7      	b.n	8005676 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005706:	2301      	movs	r3, #1
 8005708:	6323      	str	r3, [r4, #48]	; 0x30
 800570a:	e7c7      	b.n	800569c <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 800570c:	2001      	movs	r0, #1
 800570e:	e7f0      	b.n	80056f2 <HAL_SPI_Init+0xaa>
 8005710:	fffff7ff 	.word	0xfffff7ff

08005714 <HAL_SPI_TransmitReceive>:
{
 8005714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005716:	46c6      	mov	lr, r8
 8005718:	b500      	push	{lr}
 800571a:	0004      	movs	r4, r0
 800571c:	000e      	movs	r6, r1
 800571e:	0015      	movs	r5, r2
 8005720:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8005722:	235c      	movs	r3, #92	; 0x5c
 8005724:	5cc3      	ldrb	r3, [r0, r3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d103      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x1e>
 800572a:	2002      	movs	r0, #2
}
 800572c:	bc04      	pop	{r2}
 800572e:	4690      	mov	r8, r2
 8005730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8005732:	2201      	movs	r2, #1
 8005734:	235c      	movs	r3, #92	; 0x5c
 8005736:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005738:	f7fd feac 	bl	8003494 <HAL_GetTick>
 800573c:	4680      	mov	r8, r0
  tmp  = hspi->State;
 800573e:	235d      	movs	r3, #93	; 0x5d
 8005740:	5ce3      	ldrb	r3, [r4, r3]
 8005742:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 8005744:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8005746:	2b01      	cmp	r3, #1
 8005748:	d013      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x5e>
 800574a:	2182      	movs	r1, #130	; 0x82
 800574c:	0049      	lsls	r1, r1, #1
 800574e:	428a      	cmp	r2, r1
 8005750:	d007      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x4e>
    errorcode = HAL_BUSY;
 8005752:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005754:	2201      	movs	r2, #1
 8005756:	235d      	movs	r3, #93	; 0x5d
 8005758:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800575a:	2200      	movs	r2, #0
 800575c:	3b01      	subs	r3, #1
 800575e:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 8005760:	e7e4      	b.n	800572c <HAL_SPI_TransmitReceive+0x18>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005762:	68a2      	ldr	r2, [r4, #8]
 8005764:	2a00      	cmp	r2, #0
 8005766:	d000      	beq.n	800576a <HAL_SPI_TransmitReceive+0x56>
 8005768:	e118      	b.n	800599c <HAL_SPI_TransmitReceive+0x288>
 800576a:	2b04      	cmp	r3, #4
 800576c:	d001      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 800576e:	2002      	movs	r0, #2
 8005770:	e7f0      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005772:	2e00      	cmp	r6, #0
 8005774:	d100      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x64>
 8005776:	e113      	b.n	80059a0 <HAL_SPI_TransmitReceive+0x28c>
 8005778:	2d00      	cmp	r5, #0
 800577a:	d100      	bne.n	800577e <HAL_SPI_TransmitReceive+0x6a>
 800577c:	e112      	b.n	80059a4 <HAL_SPI_TransmitReceive+0x290>
 800577e:	2f00      	cmp	r7, #0
 8005780:	d100      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x70>
 8005782:	e111      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005784:	235d      	movs	r3, #93	; 0x5d
 8005786:	5ce3      	ldrb	r3, [r4, r3]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d002      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x7e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800578c:	2205      	movs	r2, #5
 800578e:	235d      	movs	r3, #93	; 0x5d
 8005790:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005792:	2300      	movs	r3, #0
 8005794:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005796:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005798:	2246      	movs	r2, #70	; 0x46
 800579a:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferSize  = Size;
 800579c:	3a02      	subs	r2, #2
 800579e:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057a0:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057a2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057a4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80057a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057a8:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80057aa:	23e0      	movs	r3, #224	; 0xe0
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	68e2      	ldr	r2, [r4, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d804      	bhi.n	80057be <HAL_SPI_TransmitReceive+0xaa>
 80057b4:	2346      	movs	r3, #70	; 0x46
 80057b6:	5ae3      	ldrh	r3, [r4, r3]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d922      	bls.n	8005804 <HAL_SPI_TransmitReceive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	6853      	ldr	r3, [r2, #4]
 80057c2:	497d      	ldr	r1, [pc, #500]	; (80059b8 <HAL_SPI_TransmitReceive+0x2a4>)
 80057c4:	400b      	ands	r3, r1
 80057c6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	0652      	lsls	r2, r2, #25
 80057ce:	d403      	bmi.n	80057d8 <HAL_SPI_TransmitReceive+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	2140      	movs	r1, #64	; 0x40
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d8:	23e0      	movs	r3, #224	; 0xe0
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	68e2      	ldr	r2, [r4, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d951      	bls.n	8005886 <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0xdc>
 80057e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	8832      	ldrh	r2, [r6, #0]
 80057f4:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80057f6:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 80057f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005800:	2701      	movs	r7, #1
 8005802:	e023      	b.n	800584c <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	6851      	ldr	r1, [r2, #4]
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	015b      	lsls	r3, r3, #5
 800580c:	430b      	orrs	r3, r1
 800580e:	6053      	str	r3, [r2, #4]
 8005810:	e7da      	b.n	80057c8 <HAL_SPI_TransmitReceive+0xb4>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005812:	2346      	movs	r3, #70	; 0x46
 8005814:	5ae3      	ldrh	r3, [r4, r3]
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x122>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	07d2      	lsls	r2, r2, #31
 8005822:	d508      	bpl.n	8005836 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	802b      	strh	r3, [r5, #0]
        pRxData += sizeof(uint16_t);
 8005828:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 800582a:	2246      	movs	r2, #70	; 0x46
 800582c:	5aa3      	ldrh	r3, [r4, r2]
 800582e:	3b01      	subs	r3, #1
 8005830:	b29b      	uxth	r3, r3
 8005832:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8005834:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005836:	9b06      	ldr	r3, [sp, #24]
 8005838:	3301      	adds	r3, #1
 800583a:	d007      	beq.n	800584c <HAL_SPI_TransmitReceive+0x138>
 800583c:	f7fd fe2a 	bl	8003494 <HAL_GetTick>
 8005840:	4643      	mov	r3, r8
 8005842:	1ac0      	subs	r0, r0, r3
 8005844:	9b06      	ldr	r3, [sp, #24]
 8005846:	4283      	cmp	r3, r0
 8005848:	d800      	bhi.n	800584c <HAL_SPI_TransmitReceive+0x138>
 800584a:	e0af      	b.n	80059ac <HAL_SPI_TransmitReceive+0x298>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x14c>
 8005854:	3346      	adds	r3, #70	; 0x46
 8005856:	5ae3      	ldrh	r3, [r4, r3]
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d100      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x14c>
 800585e:	e08f      	b.n	8005980 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005860:	2f00      	cmp	r7, #0
 8005862:	d0d6      	beq.n	8005812 <HAL_SPI_TransmitReceive+0xfe>
 8005864:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0d2      	beq.n	8005812 <HAL_SPI_TransmitReceive+0xfe>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	0792      	lsls	r2, r2, #30
 8005872:	d5ce      	bpl.n	8005812 <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005874:	8832      	ldrh	r2, [r6, #0]
 8005876:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005878:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 800587a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800587c:	3b01      	subs	r3, #1
 800587e:	b29b      	uxth	r3, r3
 8005880:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005882:	2700      	movs	r7, #0
 8005884:	e7c5      	b.n	8005812 <HAL_SPI_TransmitReceive+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x180>
 800588c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10b      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 8005894:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d909      	bls.n	80058b0 <HAL_SPI_TransmitReceive+0x19c>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	8832      	ldrh	r2, [r6, #0]
 80058a0:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80058a2:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 80058a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058a6:	3b02      	subs	r3, #2
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80058ac:	2701      	movs	r7, #1
 80058ae:	e035      	b.n	800591c <HAL_SPI_TransmitReceive+0x208>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80058b0:	7833      	ldrb	r3, [r6, #0]
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80058b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80058be:	3601      	adds	r6, #1
 80058c0:	e7f4      	b.n	80058ac <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80058c2:	7832      	ldrb	r2, [r6, #0]
 80058c4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80058c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80058ce:	3601      	adds	r6, #1
        txallowed = 0U;
 80058d0:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80058d2:	2346      	movs	r3, #70	; 0x46
 80058d4:	5ae3      	ldrh	r3, [r4, r3]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x1f4>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	07d2      	lsls	r2, r2, #31
 80058e2:	d511      	bpl.n	8005908 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80058e4:	2246      	movs	r2, #70	; 0x46
 80058e6:	5aa2      	ldrh	r2, [r4, r2]
 80058e8:	b292      	uxth	r2, r2
 80058ea:	2a01      	cmp	r2, #1
 80058ec:	d93e      	bls.n	800596c <HAL_SPI_TransmitReceive+0x258>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	802b      	strh	r3, [r5, #0]
          pRxData += sizeof(uint16_t);
 80058f2:	3502      	adds	r5, #2
          hspi->RxXferCount -= 2U;
 80058f4:	2246      	movs	r2, #70	; 0x46
 80058f6:	5aa3      	ldrh	r3, [r4, r2]
 80058f8:	3b02      	subs	r3, #2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 80058fe:	5aa3      	ldrh	r3, [r4, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d92a      	bls.n	800595c <HAL_SPI_TransmitReceive+0x248>
        txallowed = 1U;
 8005906:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	3301      	adds	r3, #1
 800590c:	d006      	beq.n	800591c <HAL_SPI_TransmitReceive+0x208>
 800590e:	f7fd fdc1 	bl	8003494 <HAL_GetTick>
 8005912:	4643      	mov	r3, r8
 8005914:	1ac0      	subs	r0, r0, r3
 8005916:	9b06      	ldr	r3, [sp, #24]
 8005918:	4283      	cmp	r3, r0
 800591a:	d949      	bls.n	80059b0 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <HAL_SPI_TransmitReceive+0x21a>
 8005924:	3346      	adds	r3, #70	; 0x46
 8005926:	5ae3      	ldrh	r3, [r4, r3]
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d028      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800592e:	2f00      	cmp	r7, #0
 8005930:	d0cf      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x1be>
 8005932:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0cb      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x1be>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	0792      	lsls	r2, r2, #30
 8005940:	d5c7      	bpl.n	80058d2 <HAL_SPI_TransmitReceive+0x1be>
        if (hspi->TxXferCount > 1U)
 8005942:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005944:	b292      	uxth	r2, r2
 8005946:	2a01      	cmp	r2, #1
 8005948:	d9bb      	bls.n	80058c2 <HAL_SPI_TransmitReceive+0x1ae>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800594a:	8832      	ldrh	r2, [r6, #0]
 800594c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800594e:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 8005950:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005952:	3b02      	subs	r3, #2
 8005954:	b29b      	uxth	r3, r3
 8005956:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005958:	2700      	movs	r7, #0
 800595a:	e7ba      	b.n	80058d2 <HAL_SPI_TransmitReceive+0x1be>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	6851      	ldr	r1, [r2, #4]
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	015b      	lsls	r3, r3, #5
 8005964:	430b      	orrs	r3, r1
 8005966:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005968:	2701      	movs	r7, #1
 800596a:	e7cd      	b.n	8005908 <HAL_SPI_TransmitReceive+0x1f4>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800596c:	7b1b      	ldrb	r3, [r3, #12]
 800596e:	702b      	strb	r3, [r5, #0]
          hspi->RxXferCount--;
 8005970:	2246      	movs	r2, #70	; 0x46
 8005972:	5aa3      	ldrh	r3, [r4, r2]
 8005974:	3b01      	subs	r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800597a:	3501      	adds	r5, #1
        txallowed = 1U;
 800597c:	2701      	movs	r7, #1
 800597e:	e7c3      	b.n	8005908 <HAL_SPI_TransmitReceive+0x1f4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005980:	4642      	mov	r2, r8
 8005982:	9906      	ldr	r1, [sp, #24]
 8005984:	0020      	movs	r0, r4
 8005986:	f7ff fde3 	bl	8005550 <SPI_EndRxTxTransaction>
 800598a:	2800      	cmp	r0, #0
 800598c:	d001      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	2320      	movs	r3, #32
 8005990:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x2a0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005998:	2000      	movs	r0, #0
 800599a:	e6db      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_BUSY;
 800599c:	2002      	movs	r0, #2
 800599e:	e6d9      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 80059a0:	2001      	movs	r0, #1
 80059a2:	e6d7      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
 80059a4:	2001      	movs	r0, #1
 80059a6:	e6d5      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
 80059a8:	2001      	movs	r0, #1
 80059aa:	e6d3      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 80059ac:	2003      	movs	r0, #3
 80059ae:	e6d1      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
        errorcode = HAL_TIMEOUT;
 80059b0:	2003      	movs	r0, #3
 80059b2:	e6cf      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
    errorcode = HAL_ERROR;
 80059b4:	2001      	movs	r0, #1
 80059b6:	e6cd      	b.n	8005754 <HAL_SPI_TransmitReceive+0x40>
 80059b8:	ffffefff 	.word	0xffffefff

080059bc <HAL_SPI_Receive>:
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b085      	sub	sp, #20
 80059c0:	0004      	movs	r4, r0
 80059c2:	000d      	movs	r5, r1
 80059c4:	0016      	movs	r6, r2
 80059c6:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059c8:	2382      	movs	r3, #130	; 0x82
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	6842      	ldr	r2, [r0, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d006      	beq.n	80059e0 <HAL_SPI_Receive+0x24>
  __HAL_LOCK(hspi);
 80059d2:	235c      	movs	r3, #92	; 0x5c
 80059d4:	5ce3      	ldrb	r3, [r4, r3]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10e      	bne.n	80059f8 <HAL_SPI_Receive+0x3c>
 80059da:	2002      	movs	r0, #2
}
 80059dc:	b005      	add	sp, #20
 80059de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059e0:	6883      	ldr	r3, [r0, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f5      	bne.n	80059d2 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059e6:	2204      	movs	r2, #4
 80059e8:	335d      	adds	r3, #93	; 0x5d
 80059ea:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059ec:	9700      	str	r7, [sp, #0]
 80059ee:	0033      	movs	r3, r6
 80059f0:	000a      	movs	r2, r1
 80059f2:	f7ff fe8f 	bl	8005714 <HAL_SPI_TransmitReceive>
 80059f6:	e7f1      	b.n	80059dc <HAL_SPI_Receive+0x20>
  __HAL_LOCK(hspi);
 80059f8:	2201      	movs	r2, #1
 80059fa:	235c      	movs	r3, #92	; 0x5c
 80059fc:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 80059fe:	f7fd fd49 	bl	8003494 <HAL_GetTick>
 8005a02:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a04:	235d      	movs	r3, #93	; 0x5d
 8005a06:	5ce3      	ldrb	r3, [r4, r3]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d007      	beq.n	8005a1c <HAL_SPI_Receive+0x60>
    errorcode = HAL_BUSY;
 8005a0c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	235d      	movs	r3, #93	; 0x5d
 8005a12:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8005a14:	2200      	movs	r2, #0
 8005a16:	3b01      	subs	r3, #1
 8005a18:	54e2      	strb	r2, [r4, r3]
  return errorcode;
 8005a1a:	e7df      	b.n	80059dc <HAL_SPI_Receive+0x20>
  if ((pData == NULL) || (Size == 0U))
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	d100      	bne.n	8005a22 <HAL_SPI_Receive+0x66>
 8005a20:	e081      	b.n	8005b26 <HAL_SPI_Receive+0x16a>
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d100      	bne.n	8005a28 <HAL_SPI_Receive+0x6c>
 8005a26:	e080      	b.n	8005b2a <HAL_SPI_Receive+0x16e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a28:	2204      	movs	r2, #4
 8005a2a:	335c      	adds	r3, #92	; 0x5c
 8005a2c:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a32:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a34:	3240      	adds	r2, #64	; 0x40
 8005a36:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 8005a38:	3202      	adds	r2, #2
 8005a3a:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a3c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a40:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a42:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a44:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a46:	23e0      	movs	r3, #224	; 0xe0
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	68e2      	ldr	r2, [r4, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d917      	bls.n	8005a80 <HAL_SPI_Receive+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	6853      	ldr	r3, [r2, #4]
 8005a54:	493b      	ldr	r1, [pc, #236]	; (8005b44 <HAL_SPI_Receive+0x188>)
 8005a56:	400b      	ands	r3, r1
 8005a58:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68a2      	ldr	r2, [r4, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d014      	beq.n	8005a8e <HAL_SPI_Receive+0xd2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	0652      	lsls	r2, r2, #25
 8005a6a:	d403      	bmi.n	8005a74 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	2140      	movs	r1, #64	; 0x40
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a74:	23e0      	movs	r3, #224	; 0xe0
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	68e2      	ldr	r2, [r4, #12]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d917      	bls.n	8005aae <HAL_SPI_Receive+0xf2>
 8005a7e:	e032      	b.n	8005ae6 <HAL_SPI_Receive+0x12a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6851      	ldr	r1, [r2, #4]
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	015b      	lsls	r3, r3, #5
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6053      	str	r3, [r2, #4]
 8005a8c:	e7e5      	b.n	8005a5a <HAL_SPI_Receive+0x9e>
    SPI_1LINE_RX(hspi);
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	492d      	ldr	r1, [pc, #180]	; (8005b48 <HAL_SPI_Receive+0x18c>)
 8005a94:	400b      	ands	r3, r1
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e7e4      	b.n	8005a64 <HAL_SPI_Receive+0xa8>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005a9a:	2f00      	cmp	r7, #0
 8005a9c:	d047      	beq.n	8005b2e <HAL_SPI_Receive+0x172>
 8005a9e:	1c7b      	adds	r3, r7, #1
 8005aa0:	d005      	beq.n	8005aae <HAL_SPI_Receive+0xf2>
 8005aa2:	f7fd fcf7 	bl	8003494 <HAL_GetTick>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	1ac0      	subs	r0, r0, r3
 8005aaa:	4287      	cmp	r7, r0
 8005aac:	d941      	bls.n	8005b32 <HAL_SPI_Receive+0x176>
    while (hspi->RxXferCount > 0U)
 8005aae:	2346      	movs	r3, #70	; 0x46
 8005ab0:	5ae3      	ldrh	r3, [r4, r3]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d028      	beq.n	8005b0a <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	07d2      	lsls	r2, r2, #31
 8005abe:	d5ec      	bpl.n	8005a9a <HAL_SPI_Receive+0xde>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 8005ac4:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 8005ac6:	2246      	movs	r2, #70	; 0x46
 8005ac8:	5aa3      	ldrh	r3, [r4, r2]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	52a3      	strh	r3, [r4, r2]
 8005ad0:	e7ed      	b.n	8005aae <HAL_SPI_Receive+0xf2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005ad2:	2f00      	cmp	r7, #0
 8005ad4:	d02f      	beq.n	8005b36 <HAL_SPI_Receive+0x17a>
 8005ad6:	1c7b      	adds	r3, r7, #1
 8005ad8:	d005      	beq.n	8005ae6 <HAL_SPI_Receive+0x12a>
 8005ada:	f7fd fcdb 	bl	8003494 <HAL_GetTick>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	4287      	cmp	r7, r0
 8005ae4:	d929      	bls.n	8005b3a <HAL_SPI_Receive+0x17e>
    while (hspi->RxXferCount > 0U)
 8005ae6:	2346      	movs	r3, #70	; 0x46
 8005ae8:	5ae3      	ldrh	r3, [r4, r3]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00c      	beq.n	8005b0a <HAL_SPI_Receive+0x14e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	07d2      	lsls	r2, r2, #31
 8005af6:	d5ec      	bpl.n	8005ad2 <HAL_SPI_Receive+0x116>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 8005afc:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 8005afe:	2246      	movs	r2, #70	; 0x46
 8005b00:	5aa3      	ldrh	r3, [r4, r2]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	52a3      	strh	r3, [r4, r2]
 8005b08:	e7ed      	b.n	8005ae6 <HAL_SPI_Receive+0x12a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0a:	9a03      	ldr	r2, [sp, #12]
 8005b0c:	0039      	movs	r1, r7
 8005b0e:	0020      	movs	r0, r4
 8005b10:	f7ff fd52 	bl	80055b8 <SPI_EndRxTransaction>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_SPI_Receive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b18:	2320      	movs	r3, #32
 8005b1a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10d      	bne.n	8005b3e <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b22:	2000      	movs	r0, #0
 8005b24:	e773      	b.n	8005a0e <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005b26:	2001      	movs	r0, #1
 8005b28:	e771      	b.n	8005a0e <HAL_SPI_Receive+0x52>
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e76f      	b.n	8005a0e <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005b2e:	2003      	movs	r0, #3
 8005b30:	e76d      	b.n	8005a0e <HAL_SPI_Receive+0x52>
 8005b32:	2003      	movs	r0, #3
 8005b34:	e76b      	b.n	8005a0e <HAL_SPI_Receive+0x52>
          errorcode = HAL_TIMEOUT;
 8005b36:	2003      	movs	r0, #3
 8005b38:	e769      	b.n	8005a0e <HAL_SPI_Receive+0x52>
 8005b3a:	2003      	movs	r0, #3
 8005b3c:	e767      	b.n	8005a0e <HAL_SPI_Receive+0x52>
    errorcode = HAL_ERROR;
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e765      	b.n	8005a0e <HAL_SPI_Receive+0x52>
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	ffffefff 	.word	0xffffefff
 8005b48:	ffffbfff 	.word	0xffffbfff

08005b4c <HAL_SPI_Transmit_DMA>:
{
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005b50:	235c      	movs	r3, #92	; 0x5c
 8005b52:	5cc3      	ldrb	r3, [r0, r3]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d100      	bne.n	8005b5a <HAL_SPI_Transmit_DMA+0xe>
 8005b58:	e07c      	b.n	8005c54 <HAL_SPI_Transmit_DMA+0x108>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	235c      	movs	r3, #92	; 0x5c
 8005b5e:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005b60:	3301      	adds	r3, #1
 8005b62:	5ce3      	ldrb	r3, [r4, r3]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d004      	beq.n	8005b72 <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 8005b68:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	235c      	movs	r3, #92	; 0x5c
 8005b6e:	54e2      	strb	r2, [r4, r3]
}
 8005b70:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d06a      	beq.n	8005c4c <HAL_SPI_Transmit_DMA+0x100>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d06a      	beq.n	8005c50 <HAL_SPI_Transmit_DMA+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b7a:	3002      	adds	r0, #2
 8005b7c:	335c      	adds	r3, #92	; 0x5c
 8005b7e:	54e0      	strb	r0, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b84:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b86:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b88:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b8a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b8c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b8e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005b90:	2244      	movs	r2, #68	; 0x44
 8005b92:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8005b94:	3202      	adds	r2, #2
 8005b96:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	68a2      	ldr	r2, [r4, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d037      	beq.n	8005c12 <HAL_SPI_Transmit_DMA+0xc6>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005ba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <HAL_SPI_Transmit_DMA+0x10c>)
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005baa:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <HAL_SPI_Transmit_DMA+0x110>)
 8005bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	; (8005c60 <HAL_SPI_Transmit_DMA+0x114>)
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8005bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	6853      	ldr	r3, [r2, #4]
 8005bbe:	4929      	ldr	r1, [pc, #164]	; (8005c64 <HAL_SPI_Transmit_DMA+0x118>)
 8005bc0:	400b      	ands	r3, r1
 8005bc2:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005bc4:	23e0      	movs	r3, #224	; 0xe0
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	68e2      	ldr	r2, [r4, #12]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d805      	bhi.n	8005bda <HAL_SPI_Transmit_DMA+0x8e>
 8005bce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d022      	beq.n	8005c20 <HAL_SPI_Transmit_DMA+0xd4>
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	320c      	adds	r2, #12
 8005bde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005be6:	f7fd fcff 	bl	80035e8 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	0652      	lsls	r2, r2, #25
 8005bf0:	d403      	bmi.n	8005bfa <HAL_SPI_Transmit_DMA+0xae>
    __HAL_SPI_ENABLE(hspi);
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	6853      	ldr	r3, [r2, #4]
 8005bfe:	2120      	movs	r1, #32
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	6853      	ldr	r3, [r2, #4]
 8005c08:	391e      	subs	r1, #30
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e7ab      	b.n	8005b6a <HAL_SPI_Transmit_DMA+0x1e>
    SPI_1LINE_TX(hspi);
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	01db      	lsls	r3, r3, #7
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e7c0      	b.n	8005ba2 <HAL_SPI_Transmit_DMA+0x56>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005c20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c22:	07db      	lsls	r3, r3, #31
 8005c24:	d407      	bmi.n	8005c36 <HAL_SPI_Transmit_DMA+0xea>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	6853      	ldr	r3, [r2, #4]
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005c2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c34:	e7d1      	b.n	8005bda <HAL_SPI_Transmit_DMA+0x8e>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	6851      	ldr	r1, [r2, #4]
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	01db      	lsls	r3, r3, #7
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005c42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	3301      	adds	r3, #1
 8005c48:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c4a:	e7c6      	b.n	8005bda <HAL_SPI_Transmit_DMA+0x8e>
    errorcode = HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e78c      	b.n	8005b6a <HAL_SPI_Transmit_DMA+0x1e>
 8005c50:	2001      	movs	r0, #1
 8005c52:	e78a      	b.n	8005b6a <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 8005c54:	2002      	movs	r0, #2
 8005c56:	e78b      	b.n	8005b70 <HAL_SPI_Transmit_DMA+0x24>
 8005c58:	08005fd5 	.word	0x08005fd5
 8005c5c:	0800601b 	.word	0x0800601b
 8005c60:	08005ff9 	.word	0x08005ff9
 8005c64:	ffffbfff 	.word	0xffffbfff

08005c68 <HAL_SPI_TransmitReceive_DMA>:
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8005c6c:	205c      	movs	r0, #92	; 0x5c
 8005c6e:	5c20      	ldrb	r0, [r4, r0]
 8005c70:	2801      	cmp	r0, #1
 8005c72:	d100      	bne.n	8005c76 <HAL_SPI_TransmitReceive_DMA+0xe>
 8005c74:	e0de      	b.n	8005e34 <HAL_SPI_TransmitReceive_DMA+0x1cc>
 8005c76:	2501      	movs	r5, #1
 8005c78:	205c      	movs	r0, #92	; 0x5c
 8005c7a:	5425      	strb	r5, [r4, r0]
  tmp  = hspi->State;
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	5c20      	ldrb	r0, [r4, r0]
 8005c80:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
 8005c82:	6865      	ldr	r5, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) ||
 8005c84:	2801      	cmp	r0, #1
 8005c86:	d010      	beq.n	8005caa <HAL_SPI_TransmitReceive_DMA+0x42>
 8005c88:	2682      	movs	r6, #130	; 0x82
 8005c8a:	0076      	lsls	r6, r6, #1
 8005c8c:	42b5      	cmp	r5, r6
 8005c8e:	d004      	beq.n	8005c9a <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 8005c90:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005c92:	2200      	movs	r2, #0
 8005c94:	235c      	movs	r3, #92	; 0x5c
 8005c96:	54e2      	strb	r2, [r4, r3]
}
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005c9a:	68a5      	ldr	r5, [r4, #8]
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	d000      	beq.n	8005ca2 <HAL_SPI_TransmitReceive_DMA+0x3a>
 8005ca0:	e0c0      	b.n	8005e24 <HAL_SPI_TransmitReceive_DMA+0x1bc>
 8005ca2:	2804      	cmp	r0, #4
 8005ca4:	d001      	beq.n	8005caa <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 8005ca6:	2002      	movs	r0, #2
 8005ca8:	e7f3      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d100      	bne.n	8005cb0 <HAL_SPI_TransmitReceive_DMA+0x48>
 8005cae:	e0bb      	b.n	8005e28 <HAL_SPI_TransmitReceive_DMA+0x1c0>
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	d100      	bne.n	8005cb6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005cb4:	e0ba      	b.n	8005e2c <HAL_SPI_TransmitReceive_DMA+0x1c4>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <HAL_SPI_TransmitReceive_DMA+0x54>
 8005cba:	e0b9      	b.n	8005e30 <HAL_SPI_TransmitReceive_DMA+0x1c8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cbc:	205d      	movs	r0, #93	; 0x5d
 8005cbe:	5c20      	ldrb	r0, [r4, r0]
 8005cc0:	2804      	cmp	r0, #4
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_TransmitReceive_DMA+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cc4:	2505      	movs	r5, #5
 8005cc6:	205d      	movs	r0, #93	; 0x5d
 8005cc8:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cca:	2000      	movs	r0, #0
 8005ccc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cce:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cd0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cd4:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005cd6:	2244      	movs	r2, #68	; 0x44
 8005cd8:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = Size;
 8005cda:	3202      	adds	r2, #2
 8005cdc:	52a3      	strh	r3, [r4, r2]
  hspi->RxISR       = NULL;
 8005cde:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ce0:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	6853      	ldr	r3, [r2, #4]
 8005ce6:	4954      	ldr	r1, [pc, #336]	; (8005e38 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 8005ce8:	400b      	ands	r3, r1
 8005cea:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cec:	23e0      	movs	r3, #224	; 0xe0
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	68e2      	ldr	r2, [r4, #12]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d947      	bls.n	8005d86 <HAL_SPI_TransmitReceive_DMA+0x11e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	6853      	ldr	r3, [r2, #4]
 8005cfa:	4950      	ldr	r1, [pc, #320]	; (8005e3c <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005d00:	235d      	movs	r3, #93	; 0x5d
 8005d02:	5ce3      	ldrb	r3, [r4, r3]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d100      	bne.n	8005d0a <HAL_SPI_TransmitReceive_DMA+0xa2>
 8005d08:	e085      	b.n	8005e16 <HAL_SPI_TransmitReceive_DMA+0x1ae>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d0c:	4a4c      	ldr	r2, [pc, #304]	; (8005e40 <HAL_SPI_TransmitReceive_DMA+0x1d8>)
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d12:	4a4c      	ldr	r2, [pc, #304]	; (8005e44 <HAL_SPI_TransmitReceive_DMA+0x1dc>)
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005d16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d18:	4a4b      	ldr	r2, [pc, #300]	; (8005e48 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8005d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d1e:	2500      	movs	r5, #0
 8005d20:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005d22:	6821      	ldr	r1, [r4, #0]
 8005d24:	310c      	adds	r1, #12
 8005d26:	2346      	movs	r3, #70	; 0x46
 8005d28:	5ae3      	ldrh	r3, [r4, r3]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d30:	f7fd fc5a 	bl	80035e8 <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	6853      	ldr	r3, [r2, #4]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005d3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d40:	62dd      	str	r5, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005d42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d44:	629d      	str	r5, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d48:	631d      	str	r5, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d4c:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	320c      	adds	r2, #12
 8005d52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d5a:	f7fd fc45 	bl	80035e8 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	0652      	lsls	r2, r2, #25
 8005d64:	d403      	bmi.n	8005d6e <HAL_SPI_TransmitReceive_DMA+0x106>
    __HAL_SPI_ENABLE(hspi);
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	6853      	ldr	r3, [r2, #4]
 8005d72:	2120      	movs	r1, #32
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	6853      	ldr	r3, [r2, #4]
 8005d7c:	391e      	subs	r1, #30
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d82:	2000      	movs	r0, #0
 8005d84:	e785      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	6851      	ldr	r1, [r2, #4]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	015b      	lsls	r3, r3, #5
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d018      	beq.n	8005dd0 <HAL_SPI_TransmitReceive_DMA+0x168>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d1aa      	bne.n	8005d00 <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	6853      	ldr	r3, [r2, #4]
 8005dae:	4923      	ldr	r1, [pc, #140]	; (8005e3c <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 8005db0:	400b      	ands	r3, r1
 8005db2:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005db4:	2346      	movs	r3, #70	; 0x46
 8005db6:	5ae3      	ldrh	r3, [r4, r3]
 8005db8:	07db      	lsls	r3, r3, #31
 8005dba:	d420      	bmi.n	8005dfe <HAL_SPI_TransmitReceive_DMA+0x196>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	6853      	ldr	r3, [r2, #4]
 8005dc0:	4922      	ldr	r1, [pc, #136]	; (8005e4c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005dc6:	2246      	movs	r2, #70	; 0x46
 8005dc8:	5aa3      	ldrh	r3, [r4, r2]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	52a3      	strh	r3, [r4, r2]
 8005dce:	e797      	b.n	8005d00 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005dd0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8005dd2:	07db      	lsls	r3, r3, #31
 8005dd4:	d408      	bmi.n	8005de8 <HAL_SPI_TransmitReceive_DMA+0x180>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005dd6:	6822      	ldr	r2, [r4, #0]
 8005dd8:	6853      	ldr	r3, [r2, #4]
 8005dda:	491d      	ldr	r1, [pc, #116]	; (8005e50 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005ddc:	400b      	ands	r3, r1
 8005dde:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005de0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005de6:	e7da      	b.n	8005d9e <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	6851      	ldr	r1, [r2, #4]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005df4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	3301      	adds	r3, #1
 8005dfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005dfc:	e7cf      	b.n	8005d9e <HAL_SPI_TransmitReceive_DMA+0x136>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	6851      	ldr	r1, [r2, #4]
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	019b      	lsls	r3, r3, #6
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005e0a:	2246      	movs	r2, #70	; 0x46
 8005e0c:	5aa3      	ldrh	r3, [r4, r2]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	3301      	adds	r3, #1
 8005e12:	52a3      	strh	r3, [r4, r2]
 8005e14:	e774      	b.n	8005d00 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e18:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005e1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e1e:	4a0e      	ldr	r2, [pc, #56]	; (8005e58 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005e20:	629a      	str	r2, [r3, #40]	; 0x28
 8005e22:	e778      	b.n	8005d16 <HAL_SPI_TransmitReceive_DMA+0xae>
    errorcode = HAL_BUSY;
 8005e24:	2002      	movs	r0, #2
 8005e26:	e734      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
    errorcode = HAL_ERROR;
 8005e28:	2001      	movs	r0, #1
 8005e2a:	e732      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	e730      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
 8005e30:	2001      	movs	r0, #1
 8005e32:	e72e      	b.n	8005c92 <HAL_SPI_TransmitReceive_DMA+0x2a>
  __HAL_LOCK(hspi);
 8005e34:	2002      	movs	r0, #2
 8005e36:	e72f      	b.n	8005c98 <HAL_SPI_TransmitReceive_DMA+0x30>
 8005e38:	ffff9fff 	.word	0xffff9fff
 8005e3c:	ffffefff 	.word	0xffffefff
 8005e40:	08005fed 	.word	0x08005fed
 8005e44:	080060e9 	.word	0x080060e9
 8005e48:	08005ff9 	.word	0x08005ff9
 8005e4c:	ffffdfff 	.word	0xffffdfff
 8005e50:	ffffbfff 	.word	0xffffbfff
 8005e54:	08005fe1 	.word	0x08005fe1
 8005e58:	0800608f 	.word	0x0800608f

08005e5c <HAL_SPI_Receive_DMA>:
{
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e60:	6880      	ldr	r0, [r0, #8]
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d104      	bne.n	8005e70 <HAL_SPI_Receive_DMA+0x14>
 8005e66:	2382      	movs	r3, #130	; 0x82
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	6865      	ldr	r5, [r4, #4]
 8005e6c:	429d      	cmp	r5, r3
 8005e6e:	d010      	beq.n	8005e92 <HAL_SPI_Receive_DMA+0x36>
  __HAL_LOCK(hspi);
 8005e70:	255c      	movs	r5, #92	; 0x5c
 8005e72:	5d65      	ldrb	r5, [r4, r5]
 8005e74:	2d01      	cmp	r5, #1
 8005e76:	d100      	bne.n	8005e7a <HAL_SPI_Receive_DMA+0x1e>
 8005e78:	e099      	b.n	8005fae <HAL_SPI_Receive_DMA+0x152>
 8005e7a:	2501      	movs	r5, #1
 8005e7c:	235c      	movs	r3, #92	; 0x5c
 8005e7e:	54e5      	strb	r5, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e80:	3301      	adds	r3, #1
 8005e82:	5ce3      	ldrb	r3, [r4, r3]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d00d      	beq.n	8005ea4 <HAL_SPI_Receive_DMA+0x48>
    errorcode = HAL_BUSY;
 8005e88:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	235c      	movs	r3, #92	; 0x5c
 8005e8e:	54e2      	strb	r2, [r4, r3]
}
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e92:	3004      	adds	r0, #4
 8005e94:	3ba7      	subs	r3, #167	; 0xa7
 8005e96:	54e0      	strb	r0, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005e98:	0013      	movs	r3, r2
 8005e9a:	000a      	movs	r2, r1
 8005e9c:	0020      	movs	r0, r4
 8005e9e:	f7ff fee3 	bl	8005c68 <HAL_SPI_TransmitReceive_DMA>
 8005ea2:	e7f5      	b.n	8005e90 <HAL_SPI_Receive_DMA+0x34>
  if ((pData == NULL) || (Size == 0U))
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d100      	bne.n	8005eaa <HAL_SPI_Receive_DMA+0x4e>
 8005ea8:	e07d      	b.n	8005fa6 <HAL_SPI_Receive_DMA+0x14a>
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	d100      	bne.n	8005eb0 <HAL_SPI_Receive_DMA+0x54>
 8005eae:	e07c      	b.n	8005faa <HAL_SPI_Receive_DMA+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eb0:	3503      	adds	r5, #3
 8005eb2:	335c      	adds	r3, #92	; 0x5c
 8005eb4:	54e5      	strb	r5, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005eba:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ebc:	2144      	movs	r1, #68	; 0x44
 8005ebe:	5262      	strh	r2, [r4, r1]
  hspi->RxXferCount = Size;
 8005ec0:	3102      	adds	r1, #2
 8005ec2:	5262      	strh	r2, [r4, r1]
  hspi->RxISR       = NULL;
 8005ec4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ec6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005ec8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005eca:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	4298      	cmp	r0, r3
 8005ed2:	d037      	beq.n	8005f44 <HAL_SPI_Receive_DMA+0xe8>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	6853      	ldr	r3, [r2, #4]
 8005ed8:	4936      	ldr	r1, [pc, #216]	; (8005fb4 <HAL_SPI_Receive_DMA+0x158>)
 8005eda:	400b      	ands	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ede:	23e0      	movs	r3, #224	; 0xe0
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	68e2      	ldr	r2, [r4, #12]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d933      	bls.n	8005f50 <HAL_SPI_Receive_DMA+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	6853      	ldr	r3, [r2, #4]
 8005eec:	4932      	ldr	r1, [pc, #200]	; (8005fb8 <HAL_SPI_Receive_DMA+0x15c>)
 8005eee:	400b      	ands	r3, r1
 8005ef0:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ef4:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <HAL_SPI_Receive_DMA+0x160>)
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005ef8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005efa:	4a31      	ldr	r2, [pc, #196]	; (8005fc0 <HAL_SPI_Receive_DMA+0x164>)
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f00:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <HAL_SPI_Receive_DMA+0x168>)
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8005f04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f06:	2200      	movs	r2, #0
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005f0a:	6821      	ldr	r1, [r4, #0]
 8005f0c:	310c      	adds	r1, #12
 8005f0e:	2346      	movs	r3, #70	; 0x46
 8005f10:	5ae3      	ldrh	r3, [r4, r3]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f18:	f7fd fb66 	bl	80035e8 <HAL_DMA_Start_IT>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	0652      	lsls	r2, r2, #25
 8005f22:	d403      	bmi.n	8005f2c <HAL_SPI_Receive_DMA+0xd0>
    __HAL_SPI_ENABLE(hspi);
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	6853      	ldr	r3, [r2, #4]
 8005f30:	2120      	movs	r1, #32
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	6853      	ldr	r3, [r2, #4]
 8005f3a:	391f      	subs	r1, #31
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7a2      	b.n	8005e8a <HAL_SPI_Receive_DMA+0x2e>
    SPI_1LINE_RX(hspi);
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	491f      	ldr	r1, [pc, #124]	; (8005fc8 <HAL_SPI_Receive_DMA+0x16c>)
 8005f4a:	400b      	ands	r3, r1
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	e7c1      	b.n	8005ed4 <HAL_SPI_Receive_DMA+0x78>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	6851      	ldr	r1, [r2, #4]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1c4      	bne.n	8005ef2 <HAL_SPI_Receive_DMA+0x96>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f68:	6822      	ldr	r2, [r4, #0]
 8005f6a:	6853      	ldr	r3, [r2, #4]
 8005f6c:	4912      	ldr	r1, [pc, #72]	; (8005fb8 <HAL_SPI_Receive_DMA+0x15c>)
 8005f6e:	400b      	ands	r3, r1
 8005f70:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005f72:	2346      	movs	r3, #70	; 0x46
 8005f74:	5ae3      	ldrh	r3, [r4, r3]
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d409      	bmi.n	8005f8e <HAL_SPI_Receive_DMA+0x132>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	6853      	ldr	r3, [r2, #4]
 8005f7e:	490d      	ldr	r1, [pc, #52]	; (8005fb4 <HAL_SPI_Receive_DMA+0x158>)
 8005f80:	400b      	ands	r3, r1
 8005f82:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005f84:	2246      	movs	r2, #70	; 0x46
 8005f86:	5aa3      	ldrh	r3, [r4, r2]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	52a3      	strh	r3, [r4, r2]
 8005f8c:	e7b1      	b.n	8005ef2 <HAL_SPI_Receive_DMA+0x96>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	6851      	ldr	r1, [r2, #4]
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	019b      	lsls	r3, r3, #6
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005f9a:	2246      	movs	r2, #70	; 0x46
 8005f9c:	5aa3      	ldrh	r3, [r4, r2]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	52a3      	strh	r3, [r4, r2]
 8005fa4:	e7a5      	b.n	8005ef2 <HAL_SPI_Receive_DMA+0x96>
    errorcode = HAL_ERROR;
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	e76f      	b.n	8005e8a <HAL_SPI_Receive_DMA+0x2e>
 8005faa:	2001      	movs	r0, #1
 8005fac:	e76d      	b.n	8005e8a <HAL_SPI_Receive_DMA+0x2e>
  __HAL_LOCK(hspi);
 8005fae:	2002      	movs	r0, #2
 8005fb0:	e76e      	b.n	8005e90 <HAL_SPI_Receive_DMA+0x34>
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	ffffdfff 	.word	0xffffdfff
 8005fb8:	ffffefff 	.word	0xffffefff
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	0800608f 	.word	0x0800608f
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	ffffbfff 	.word	0xffffbfff

08005fcc <HAL_SPI_TxCpltCallback>:
}
 8005fcc:	4770      	bx	lr

08005fce <HAL_SPI_RxCpltCallback>:
}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_SPI_TxRxCpltCallback>:
}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_SPI_TxHalfCpltCallback>:
}
 8005fd2:	4770      	bx	lr

08005fd4 <SPI_DMAHalfTransmitCplt>:
{
 8005fd4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005fd8:	f7ff fffb 	bl	8005fd2 <HAL_SPI_TxHalfCpltCallback>
}
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <HAL_SPI_RxHalfCpltCallback>:
}
 8005fde:	4770      	bx	lr

08005fe0 <SPI_DMAHalfReceiveCplt>:
{
 8005fe0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005fe4:	f7ff fffb 	bl	8005fde <HAL_SPI_RxHalfCpltCallback>
}
 8005fe8:	bd10      	pop	{r4, pc}

08005fea <HAL_SPI_TxRxHalfCpltCallback>:
}
 8005fea:	4770      	bx	lr

08005fec <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005fec:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fee:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005ff0:	f7ff fffb 	bl	8005fea <HAL_SPI_TxRxHalfCpltCallback>
}
 8005ff4:	bd10      	pop	{r4, pc}

08005ff6 <HAL_SPI_ErrorCallback>:
}
 8005ff6:	4770      	bx	lr

08005ff8 <SPI_DMAError>:
{
 8005ff8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ffc:	6802      	ldr	r2, [r0, #0]
 8005ffe:	6853      	ldr	r3, [r2, #4]
 8006000:	2103      	movs	r1, #3
 8006002:	438b      	bics	r3, r1
 8006004:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006006:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006008:	2210      	movs	r2, #16
 800600a:	4313      	orrs	r3, r2
 800600c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800600e:	3a0f      	subs	r2, #15
 8006010:	235d      	movs	r3, #93	; 0x5d
 8006012:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 8006014:	f7ff ffef 	bl	8005ff6 <HAL_SPI_ErrorCallback>
}
 8006018:	bd10      	pop	{r4, pc}

0800601a <SPI_DMATransmitCplt>:
{
 800601a:	b530      	push	{r4, r5, lr}
 800601c:	b083      	sub	sp, #12
 800601e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006020:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8006022:	f7fd fa37 	bl	8003494 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	069b      	lsls	r3, r3, #26
 800602c:	d426      	bmi.n	800607c <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	6853      	ldr	r3, [r2, #4]
 8006032:	2120      	movs	r1, #32
 8006034:	438b      	bics	r3, r1
 8006036:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	6853      	ldr	r3, [r2, #4]
 800603c:	391e      	subs	r1, #30
 800603e:	438b      	bics	r3, r1
 8006040:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006042:	0002      	movs	r2, r0
 8006044:	3162      	adds	r1, #98	; 0x62
 8006046:	0020      	movs	r0, r4
 8006048:	f7ff fa82 	bl	8005550 <SPI_EndRxTxTransaction>
 800604c:	2800      	cmp	r0, #0
 800604e:	d003      	beq.n	8006058 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006050:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006052:	2220      	movs	r2, #32
 8006054:	4313      	orrs	r3, r2
 8006056:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <SPI_DMATransmitCplt+0x52>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006070:	2201      	movs	r2, #1
 8006072:	335d      	adds	r3, #93	; 0x5d
 8006074:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006076:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <SPI_DMATransmitCplt+0x6c>
  HAL_SPI_TxCpltCallback(hspi);
 800607c:	0020      	movs	r0, r4
 800607e:	f7ff ffa5 	bl	8005fcc <HAL_SPI_TxCpltCallback>
}
 8006082:	b003      	add	sp, #12
 8006084:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8006086:	0020      	movs	r0, r4
 8006088:	f7ff ffb5 	bl	8005ff6 <HAL_SPI_ErrorCallback>
      return;
 800608c:	e7f9      	b.n	8006082 <SPI_DMATransmitCplt+0x68>

0800608e <SPI_DMAReceiveCplt>:
{
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006092:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8006094:	f7fd f9fe 	bl	8003494 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	069b      	lsls	r3, r3, #26
 800609e:	d41b      	bmi.n	80060d8 <SPI_DMAReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	6853      	ldr	r3, [r2, #4]
 80060a4:	2120      	movs	r1, #32
 80060a6:	438b      	bics	r3, r1
 80060a8:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	6853      	ldr	r3, [r2, #4]
 80060ae:	391d      	subs	r1, #29
 80060b0:	438b      	bics	r3, r1
 80060b2:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060b4:	0002      	movs	r2, r0
 80060b6:	3161      	adds	r1, #97	; 0x61
 80060b8:	0020      	movs	r0, r4
 80060ba:	f7ff fa7d 	bl	80055b8 <SPI_EndRxTransaction>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d001      	beq.n	80060c6 <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c2:	2320      	movs	r3, #32
 80060c4:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80060c6:	2200      	movs	r2, #0
 80060c8:	2346      	movs	r3, #70	; 0x46
 80060ca:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 80060cc:	3201      	adds	r2, #1
 80060ce:	3317      	adds	r3, #23
 80060d0:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <SPI_DMAReceiveCplt+0x52>
  HAL_SPI_RxCpltCallback(hspi);
 80060d8:	0020      	movs	r0, r4
 80060da:	f7ff ff78 	bl	8005fce <HAL_SPI_RxCpltCallback>
}
 80060de:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 80060e0:	0020      	movs	r0, r4
 80060e2:	f7ff ff88 	bl	8005ff6 <HAL_SPI_ErrorCallback>
      return;
 80060e6:	e7fa      	b.n	80060de <SPI_DMAReceiveCplt+0x50>

080060e8 <SPI_DMATransmitReceiveCplt>:
{
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80060ee:	f7fd f9d1 	bl	8003494 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	069b      	lsls	r3, r3, #26
 80060f8:	d41e      	bmi.n	8006138 <SPI_DMATransmitReceiveCplt+0x50>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	6853      	ldr	r3, [r2, #4]
 80060fe:	2120      	movs	r1, #32
 8006100:	438b      	bics	r3, r1
 8006102:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006104:	0002      	movs	r2, r0
 8006106:	3144      	adds	r1, #68	; 0x44
 8006108:	0020      	movs	r0, r4
 800610a:	f7ff fa21 	bl	8005550 <SPI_EndRxTxTransaction>
 800610e:	2800      	cmp	r0, #0
 8006110:	d003      	beq.n	800611a <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006112:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006114:	2220      	movs	r2, #32
 8006116:	4313      	orrs	r3, r2
 8006118:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	6853      	ldr	r3, [r2, #4]
 800611e:	2103      	movs	r1, #3
 8006120:	438b      	bics	r3, r1
 8006122:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006128:	2246      	movs	r2, #70	; 0x46
 800612a:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800612c:	3a45      	subs	r2, #69	; 0x45
 800612e:	335d      	adds	r3, #93	; 0x5d
 8006130:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006132:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <SPI_DMATransmitReceiveCplt+0x58>
  HAL_SPI_TxRxCpltCallback(hspi);
 8006138:	0020      	movs	r0, r4
 800613a:	f7ff ff49 	bl	8005fd0 <HAL_SPI_TxRxCpltCallback>
}
 800613e:	bd70      	pop	{r4, r5, r6, pc}
      HAL_SPI_ErrorCallback(hspi);
 8006140:	0020      	movs	r0, r4
 8006142:	f7ff ff58 	bl	8005ff6 <HAL_SPI_ErrorCallback>
      return;
 8006146:	e7fa      	b.n	800613e <SPI_DMATransmitReceiveCplt+0x56>

08006148 <HAL_SPI_GetState>:
  return hspi->State;
 8006148:	235d      	movs	r3, #93	; 0x5d
 800614a:	5cc0      	ldrb	r0, [r0, r3]
 800614c:	b2c0      	uxtb	r0, r0
}
 800614e:	4770      	bx	lr

08006150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006152:	6a03      	ldr	r3, [r0, #32]
 8006154:	2201      	movs	r2, #1
 8006156:	4393      	bics	r3, r2
 8006158:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800615e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	2573      	movs	r5, #115	; 0x73
 8006162:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	680d      	ldr	r5, [r1, #0]
 8006166:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006168:	2502      	movs	r5, #2
 800616a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800616c:	688d      	ldr	r5, [r1, #8]
 800616e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006170:	4d15      	ldr	r5, [pc, #84]	; (80061c8 <TIM_OC1_SetConfig+0x78>)
 8006172:	42a8      	cmp	r0, r5
 8006174:	d020      	beq.n	80061b8 <TIM_OC1_SetConfig+0x68>
 8006176:	4d15      	ldr	r5, [pc, #84]	; (80061cc <TIM_OC1_SetConfig+0x7c>)
 8006178:	42a8      	cmp	r0, r5
 800617a:	d01d      	beq.n	80061b8 <TIM_OC1_SetConfig+0x68>
 800617c:	4d14      	ldr	r5, [pc, #80]	; (80061d0 <TIM_OC1_SetConfig+0x80>)
 800617e:	42a8      	cmp	r0, r5
 8006180:	d01a      	beq.n	80061b8 <TIM_OC1_SetConfig+0x68>
 8006182:	4d14      	ldr	r5, [pc, #80]	; (80061d4 <TIM_OC1_SetConfig+0x84>)
 8006184:	42a8      	cmp	r0, r5
 8006186:	d017      	beq.n	80061b8 <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006188:	4d0f      	ldr	r5, [pc, #60]	; (80061c8 <TIM_OC1_SetConfig+0x78>)
 800618a:	42a8      	cmp	r0, r5
 800618c:	d008      	beq.n	80061a0 <TIM_OC1_SetConfig+0x50>
 800618e:	4d0f      	ldr	r5, [pc, #60]	; (80061cc <TIM_OC1_SetConfig+0x7c>)
 8006190:	42a8      	cmp	r0, r5
 8006192:	d005      	beq.n	80061a0 <TIM_OC1_SetConfig+0x50>
 8006194:	4d0e      	ldr	r5, [pc, #56]	; (80061d0 <TIM_OC1_SetConfig+0x80>)
 8006196:	42a8      	cmp	r0, r5
 8006198:	d002      	beq.n	80061a0 <TIM_OC1_SetConfig+0x50>
 800619a:	4d0e      	ldr	r5, [pc, #56]	; (80061d4 <TIM_OC1_SetConfig+0x84>)
 800619c:	42a8      	cmp	r0, r5
 800619e:	d105      	bne.n	80061ac <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a0:	4d0d      	ldr	r5, [pc, #52]	; (80061d8 <TIM_OC1_SetConfig+0x88>)
 80061a2:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a4:	694d      	ldr	r5, [r1, #20]
 80061a6:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	698d      	ldr	r5, [r1, #24]
 80061aa:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061b0:	684a      	ldr	r2, [r1, #4]
 80061b2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	6203      	str	r3, [r0, #32]
}
 80061b6:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b8:	2508      	movs	r5, #8
 80061ba:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80061bc:	68cd      	ldr	r5, [r1, #12]
 80061be:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80061c0:	2504      	movs	r5, #4
 80061c2:	43ab      	bics	r3, r5
 80061c4:	e7e0      	b.n	8006188 <TIM_OC1_SetConfig+0x38>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800
 80061d8:	fffffcff 	.word	0xfffffcff

080061dc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061de:	6a03      	ldr	r3, [r0, #32]
 80061e0:	4a1a      	ldr	r2, [pc, #104]	; (800624c <TIM_OC3_SetConfig+0x70>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ea:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061ec:	3275      	adds	r2, #117	; 0x75
 80061ee:	32ff      	adds	r2, #255	; 0xff
 80061f0:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f2:	680a      	ldr	r2, [r1, #0]
 80061f4:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <TIM_OC3_SetConfig+0x74>)
 80061f8:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fa:	688a      	ldr	r2, [r1, #8]
 80061fc:	0212      	lsls	r2, r2, #8
 80061fe:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <TIM_OC3_SetConfig+0x78>)
 8006202:	4290      	cmp	r0, r2
 8006204:	d019      	beq.n	800623a <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	4a13      	ldr	r2, [pc, #76]	; (8006254 <TIM_OC3_SetConfig+0x78>)
 8006208:	4290      	cmp	r0, r2
 800620a:	d008      	beq.n	800621e <TIM_OC3_SetConfig+0x42>
 800620c:	4a12      	ldr	r2, [pc, #72]	; (8006258 <TIM_OC3_SetConfig+0x7c>)
 800620e:	4290      	cmp	r0, r2
 8006210:	d005      	beq.n	800621e <TIM_OC3_SetConfig+0x42>
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <TIM_OC3_SetConfig+0x80>)
 8006214:	4290      	cmp	r0, r2
 8006216:	d002      	beq.n	800621e <TIM_OC3_SetConfig+0x42>
 8006218:	4a11      	ldr	r2, [pc, #68]	; (8006260 <TIM_OC3_SetConfig+0x84>)
 800621a:	4290      	cmp	r0, r2
 800621c:	d107      	bne.n	800622e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621e:	4a11      	ldr	r2, [pc, #68]	; (8006264 <TIM_OC3_SetConfig+0x88>)
 8006220:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006222:	694a      	ldr	r2, [r1, #20]
 8006224:	0112      	lsls	r2, r2, #4
 8006226:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006228:	698a      	ldr	r2, [r1, #24]
 800622a:	0112      	lsls	r2, r2, #4
 800622c:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006230:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006232:	684a      	ldr	r2, [r1, #4]
 8006234:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006236:	6203      	str	r3, [r0, #32]
}
 8006238:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 800623a:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <TIM_OC3_SetConfig+0x8c>)
 800623c:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800623e:	68ca      	ldr	r2, [r1, #12]
 8006240:	0212      	lsls	r2, r2, #8
 8006242:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <TIM_OC3_SetConfig+0x90>)
 8006246:	4013      	ands	r3, r2
 8006248:	e7dd      	b.n	8006206 <TIM_OC3_SetConfig+0x2a>
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	fffffeff 	.word	0xfffffeff
 8006250:	fffffdff 	.word	0xfffffdff
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800
 8006264:	ffffcfff 	.word	0xffffcfff
 8006268:	fffff7ff 	.word	0xfffff7ff
 800626c:	fffffbff 	.word	0xfffffbff

08006270 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006272:	6a03      	ldr	r3, [r0, #32]
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <TIM_OC4_SetConfig+0x54>)
 8006276:	4013      	ands	r3, r2
 8006278:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006280:	4c11      	ldr	r4, [pc, #68]	; (80062c8 <TIM_OC4_SetConfig+0x58>)
 8006282:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006284:	680c      	ldr	r4, [r1, #0]
 8006286:	0224      	lsls	r4, r4, #8
 8006288:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800628a:	4c10      	ldr	r4, [pc, #64]	; (80062cc <TIM_OC4_SetConfig+0x5c>)
 800628c:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800628e:	688c      	ldr	r4, [r1, #8]
 8006290:	0324      	lsls	r4, r4, #12
 8006292:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	4c0e      	ldr	r4, [pc, #56]	; (80062d0 <TIM_OC4_SetConfig+0x60>)
 8006296:	42a0      	cmp	r0, r4
 8006298:	d008      	beq.n	80062ac <TIM_OC4_SetConfig+0x3c>
 800629a:	4c0e      	ldr	r4, [pc, #56]	; (80062d4 <TIM_OC4_SetConfig+0x64>)
 800629c:	42a0      	cmp	r0, r4
 800629e:	d005      	beq.n	80062ac <TIM_OC4_SetConfig+0x3c>
 80062a0:	4c0d      	ldr	r4, [pc, #52]	; (80062d8 <TIM_OC4_SetConfig+0x68>)
 80062a2:	42a0      	cmp	r0, r4
 80062a4:	d002      	beq.n	80062ac <TIM_OC4_SetConfig+0x3c>
 80062a6:	4c0d      	ldr	r4, [pc, #52]	; (80062dc <TIM_OC4_SetConfig+0x6c>)
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d104      	bne.n	80062b6 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ac:	4c0c      	ldr	r4, [pc, #48]	; (80062e0 <TIM_OC4_SetConfig+0x70>)
 80062ae:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062b0:	694d      	ldr	r5, [r1, #20]
 80062b2:	01ad      	lsls	r5, r5, #6
 80062b4:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062ba:	684a      	ldr	r2, [r1, #4]
 80062bc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	6203      	str	r3, [r0, #32]
}
 80062c0:	bd30      	pop	{r4, r5, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	ffffefff 	.word	0xffffefff
 80062c8:	ffff8cff 	.word	0xffff8cff
 80062cc:	ffffdfff 	.word	0xffffdfff
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800
 80062e0:	ffffbfff 	.word	0xffffbfff

080062e4 <HAL_TIM_Base_MspInit>:
}
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062e6:	6803      	ldr	r3, [r0, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	2101      	movs	r1, #1
 80062ec:	430a      	orrs	r2, r1
 80062ee:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	2000      	movs	r0, #0
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_OC_DelayElapsedCallback>:
}
 80062fc:	4770      	bx	lr

080062fe <HAL_TIM_IC_CaptureCallback>:
}
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_TriggerCallback>:
}
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_IRQHandler>:
{
 8006304:	b510      	push	{r4, lr}
 8006306:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	0792      	lsls	r2, r2, #30
 800630e:	d50f      	bpl.n	8006330 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	0792      	lsls	r2, r2, #30
 8006314:	d50c      	bpl.n	8006330 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006316:	2203      	movs	r2, #3
 8006318:	4252      	negs	r2, r2
 800631a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631c:	2301      	movs	r3, #1
 800631e:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006320:	6803      	ldr	r3, [r0, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	079b      	lsls	r3, r3, #30
 8006326:	d063      	beq.n	80063f0 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8006328:	f7ff ffe9 	bl	80062fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632c:	2300      	movs	r3, #0
 800632e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	0752      	lsls	r2, r2, #29
 8006336:	d512      	bpl.n	800635e <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	0752      	lsls	r2, r2, #29
 800633c:	d50f      	bpl.n	800635e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800633e:	2205      	movs	r2, #5
 8006340:	4252      	negs	r2, r2
 8006342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006344:	2302      	movs	r3, #2
 8006346:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	23c0      	movs	r3, #192	; 0xc0
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	421a      	tst	r2, r3
 8006352:	d053      	beq.n	80063fc <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8006354:	0020      	movs	r0, r4
 8006356:	f7ff ffd2 	bl	80062fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	2300      	movs	r3, #0
 800635c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	0712      	lsls	r2, r2, #28
 8006364:	d510      	bpl.n	8006388 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	0712      	lsls	r2, r2, #28
 800636a:	d50d      	bpl.n	8006388 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800636c:	2209      	movs	r2, #9
 800636e:	4252      	negs	r2, r2
 8006370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006372:	2304      	movs	r3, #4
 8006374:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d045      	beq.n	800640a <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	0020      	movs	r0, r4
 8006380:	f7ff ffbd 	bl	80062fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006384:	2300      	movs	r3, #0
 8006386:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	06d2      	lsls	r2, r2, #27
 800638e:	d512      	bpl.n	80063b6 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	06d2      	lsls	r2, r2, #27
 8006394:	d50f      	bpl.n	80063b6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006396:	2211      	movs	r2, #17
 8006398:	4252      	negs	r2, r2
 800639a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639c:	2308      	movs	r3, #8
 800639e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	23c0      	movs	r3, #192	; 0xc0
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	421a      	tst	r2, r3
 80063aa:	d035      	beq.n	8006418 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80063ac:	0020      	movs	r0, r4
 80063ae:	f7ff ffa6 	bl	80062fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	2300      	movs	r3, #0
 80063b4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	07d2      	lsls	r2, r2, #31
 80063bc:	d502      	bpl.n	80063c4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	07d2      	lsls	r2, r2, #31
 80063c2:	d430      	bmi.n	8006426 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	0612      	lsls	r2, r2, #24
 80063ca:	d502      	bpl.n	80063d2 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	0612      	lsls	r2, r2, #24
 80063d0:	d430      	bmi.n	8006434 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	0652      	lsls	r2, r2, #25
 80063d8:	d502      	bpl.n	80063e0 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	0652      	lsls	r2, r2, #25
 80063de:	d430      	bmi.n	8006442 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d502      	bpl.n	80063ee <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	0692      	lsls	r2, r2, #26
 80063ec:	d430      	bmi.n	8006450 <HAL_TIM_IRQHandler+0x14c>
}
 80063ee:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f0:	f7ff ff84 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f4:	0020      	movs	r0, r4
 80063f6:	f7ff ff83 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
 80063fa:	e797      	b.n	800632c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fc:	0020      	movs	r0, r4
 80063fe:	f7ff ff7d 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006402:	0020      	movs	r0, r4
 8006404:	f7ff ff7c 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
 8006408:	e7a7      	b.n	800635a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	0020      	movs	r0, r4
 800640c:	f7ff ff76 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	0020      	movs	r0, r4
 8006412:	f7ff ff75 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
 8006416:	e7b5      	b.n	8006384 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006418:	0020      	movs	r0, r4
 800641a:	f7ff ff6f 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641e:	0020      	movs	r0, r4
 8006420:	f7ff ff6e 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
 8006424:	e7c5      	b.n	80063b2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006426:	2202      	movs	r2, #2
 8006428:	4252      	negs	r2, r2
 800642a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800642c:	0020      	movs	r0, r4
 800642e:	f7fc fe95 	bl	800315c <HAL_TIM_PeriodElapsedCallback>
 8006432:	e7c7      	b.n	80063c4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006434:	2281      	movs	r2, #129	; 0x81
 8006436:	4252      	negs	r2, r2
 8006438:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800643a:	0020      	movs	r0, r4
 800643c:	f000 f9b5 	bl	80067aa <HAL_TIMEx_BreakCallback>
 8006440:	e7c7      	b.n	80063d2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006442:	2241      	movs	r2, #65	; 0x41
 8006444:	4252      	negs	r2, r2
 8006446:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006448:	0020      	movs	r0, r4
 800644a:	f7ff ff5a 	bl	8006302 <HAL_TIM_TriggerCallback>
 800644e:	e7c7      	b.n	80063e0 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006450:	2221      	movs	r2, #33	; 0x21
 8006452:	4252      	negs	r2, r2
 8006454:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006456:	0020      	movs	r0, r4
 8006458:	f000 f9a6 	bl	80067a8 <HAL_TIMEx_CommutationCallback>
}
 800645c:	e7c7      	b.n	80063ee <HAL_TIM_IRQHandler+0xea>
	...

08006460 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006460:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <TIM_Base_SetConfig+0x88>)
 8006464:	4290      	cmp	r0, r2
 8006466:	d03a      	beq.n	80064de <TIM_Base_SetConfig+0x7e>
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	05d2      	lsls	r2, r2, #23
 800646c:	4290      	cmp	r0, r2
 800646e:	d036      	beq.n	80064de <TIM_Base_SetConfig+0x7e>
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <TIM_Base_SetConfig+0x8c>)
 8006472:	4290      	cmp	r0, r2
 8006474:	d033      	beq.n	80064de <TIM_Base_SetConfig+0x7e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <TIM_Base_SetConfig+0x88>)
 8006478:	4290      	cmp	r0, r2
 800647a:	d012      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 800647c:	2280      	movs	r2, #128	; 0x80
 800647e:	05d2      	lsls	r2, r2, #23
 8006480:	4290      	cmp	r0, r2
 8006482:	d00e      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 8006484:	4a19      	ldr	r2, [pc, #100]	; (80064ec <TIM_Base_SetConfig+0x8c>)
 8006486:	4290      	cmp	r0, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 800648a:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <TIM_Base_SetConfig+0x90>)
 800648c:	4290      	cmp	r0, r2
 800648e:	d008      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <TIM_Base_SetConfig+0x94>)
 8006492:	4290      	cmp	r0, r2
 8006494:	d005      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 8006496:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <TIM_Base_SetConfig+0x98>)
 8006498:	4290      	cmp	r0, r2
 800649a:	d002      	beq.n	80064a2 <TIM_Base_SetConfig+0x42>
 800649c:	4a17      	ldr	r2, [pc, #92]	; (80064fc <TIM_Base_SetConfig+0x9c>)
 800649e:	4290      	cmp	r0, r2
 80064a0:	d103      	bne.n	80064aa <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a2:	4a17      	ldr	r2, [pc, #92]	; (8006500 <TIM_Base_SetConfig+0xa0>)
 80064a4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	68ca      	ldr	r2, [r1, #12]
 80064a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	4393      	bics	r3, r2
 80064ae:	694a      	ldr	r2, [r1, #20]
 80064b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80064b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	688b      	ldr	r3, [r1, #8]
 80064b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80064b8:	680b      	ldr	r3, [r1, #0]
 80064ba:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <TIM_Base_SetConfig+0x88>)
 80064be:	4298      	cmp	r0, r3
 80064c0:	d008      	beq.n	80064d4 <TIM_Base_SetConfig+0x74>
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <TIM_Base_SetConfig+0x94>)
 80064c4:	4298      	cmp	r0, r3
 80064c6:	d005      	beq.n	80064d4 <TIM_Base_SetConfig+0x74>
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <TIM_Base_SetConfig+0x98>)
 80064ca:	4298      	cmp	r0, r3
 80064cc:	d002      	beq.n	80064d4 <TIM_Base_SetConfig+0x74>
 80064ce:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <TIM_Base_SetConfig+0x9c>)
 80064d0:	4298      	cmp	r0, r3
 80064d2:	d101      	bne.n	80064d8 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	690b      	ldr	r3, [r1, #16]
 80064d6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80064d8:	2301      	movs	r3, #1
 80064da:	6143      	str	r3, [r0, #20]
}
 80064dc:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064de:	2270      	movs	r2, #112	; 0x70
 80064e0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80064e2:	684a      	ldr	r2, [r1, #4]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	e7c6      	b.n	8006476 <TIM_Base_SetConfig+0x16>
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40002000 	.word	0x40002000
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800
 8006500:	fffffcff 	.word	0xfffffcff

08006504 <HAL_TIM_Base_Init>:
{
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8006508:	d014      	beq.n	8006534 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800650a:	233d      	movs	r3, #61	; 0x3d
 800650c:	5cc3      	ldrb	r3, [r0, r3]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8006512:	253d      	movs	r5, #61	; 0x3d
 8006514:	2302      	movs	r3, #2
 8006516:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006518:	1d21      	adds	r1, r4, #4
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	f7ff ffa0 	bl	8006460 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8006520:	2301      	movs	r3, #1
 8006522:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006524:	2000      	movs	r0, #0
}
 8006526:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006528:	2200      	movs	r2, #0
 800652a:	333c      	adds	r3, #60	; 0x3c
 800652c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800652e:	f7ff fed9 	bl	80062e4 <HAL_TIM_Base_MspInit>
 8006532:	e7ee      	b.n	8006512 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8006534:	2001      	movs	r0, #1
 8006536:	e7f6      	b.n	8006526 <HAL_TIM_Base_Init+0x22>

08006538 <HAL_TIM_PWM_Init>:
{
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800653c:	d014      	beq.n	8006568 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800653e:	233d      	movs	r3, #61	; 0x3d
 8006540:	5cc3      	ldrb	r3, [r0, r3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8006546:	253d      	movs	r5, #61	; 0x3d
 8006548:	2302      	movs	r3, #2
 800654a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654c:	1d21      	adds	r1, r4, #4
 800654e:	6820      	ldr	r0, [r4, #0]
 8006550:	f7ff ff86 	bl	8006460 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8006554:	2301      	movs	r3, #1
 8006556:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006558:	2000      	movs	r0, #0
}
 800655a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800655c:	2200      	movs	r2, #0
 800655e:	333c      	adds	r3, #60	; 0x3c
 8006560:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8006562:	f7fc fe9f 	bl	80032a4 <HAL_TIM_PWM_MspInit>
 8006566:	e7ee      	b.n	8006546 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8006568:	2001      	movs	r0, #1
 800656a:	e7f6      	b.n	800655a <HAL_TIM_PWM_Init+0x22>

0800656c <TIM_OC2_SetConfig>:
{
 800656c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656e:	6a03      	ldr	r3, [r0, #32]
 8006570:	2210      	movs	r2, #16
 8006572:	4393      	bics	r3, r2
 8006574:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006576:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006578:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800657a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <TIM_OC2_SetConfig+0x70>)
 800657e:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	680a      	ldr	r2, [r1, #0]
 8006582:	0212      	lsls	r2, r2, #8
 8006584:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8006586:	2220      	movs	r2, #32
 8006588:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800658a:	688a      	ldr	r2, [r1, #8]
 800658c:	0112      	lsls	r2, r2, #4
 800658e:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006590:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <TIM_OC2_SetConfig+0x74>)
 8006592:	4290      	cmp	r0, r2
 8006594:	d019      	beq.n	80065ca <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <TIM_OC2_SetConfig+0x74>)
 8006598:	4290      	cmp	r0, r2
 800659a:	d008      	beq.n	80065ae <TIM_OC2_SetConfig+0x42>
 800659c:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <TIM_OC2_SetConfig+0x78>)
 800659e:	4290      	cmp	r0, r2
 80065a0:	d005      	beq.n	80065ae <TIM_OC2_SetConfig+0x42>
 80065a2:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <TIM_OC2_SetConfig+0x7c>)
 80065a4:	4290      	cmp	r0, r2
 80065a6:	d002      	beq.n	80065ae <TIM_OC2_SetConfig+0x42>
 80065a8:	4a10      	ldr	r2, [pc, #64]	; (80065ec <TIM_OC2_SetConfig+0x80>)
 80065aa:	4290      	cmp	r0, r2
 80065ac:	d107      	bne.n	80065be <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <TIM_OC2_SetConfig+0x84>)
 80065b0:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b2:	694a      	ldr	r2, [r1, #20]
 80065b4:	0092      	lsls	r2, r2, #2
 80065b6:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b8:	698a      	ldr	r2, [r1, #24]
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 80065be:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80065c0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80065c2:	684a      	ldr	r2, [r1, #4]
 80065c4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80065c6:	6203      	str	r3, [r0, #32]
}
 80065c8:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065ce:	68ca      	ldr	r2, [r1, #12]
 80065d0:	0112      	lsls	r2, r2, #4
 80065d2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d4:	2240      	movs	r2, #64	; 0x40
 80065d6:	4393      	bics	r3, r2
 80065d8:	e7dd      	b.n	8006596 <TIM_OC2_SetConfig+0x2a>
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	ffff8cff 	.word	0xffff8cff
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	fffff3ff 	.word	0xfffff3ff

080065f4 <HAL_TIM_PWM_ConfigChannel>:
{
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	0004      	movs	r4, r0
 80065f8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80065fa:	233c      	movs	r3, #60	; 0x3c
 80065fc:	5cc3      	ldrb	r3, [r0, r3]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d069      	beq.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8006602:	2101      	movs	r1, #1
 8006604:	233c      	movs	r3, #60	; 0x3c
 8006606:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	3101      	adds	r1, #1
 800660a:	3301      	adds	r3, #1
 800660c:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800660e:	2a04      	cmp	r2, #4
 8006610:	d037      	beq.n	8006682 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006612:	d919      	bls.n	8006648 <HAL_TIM_PWM_ConfigChannel+0x54>
 8006614:	2a08      	cmp	r2, #8
 8006616:	d04a      	beq.n	80066ae <HAL_TIM_PWM_ConfigChannel+0xba>
 8006618:	2a0c      	cmp	r2, #12
 800661a:	d12a      	bne.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800661c:	0029      	movs	r1, r5
 800661e:	6800      	ldr	r0, [r0, #0]
 8006620:	f7ff fe26 	bl	8006270 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	69d1      	ldr	r1, [r2, #28]
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	430b      	orrs	r3, r1
 800662e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	69d3      	ldr	r3, [r2, #28]
 8006634:	4929      	ldr	r1, [pc, #164]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8006636:	400b      	ands	r3, r1
 8006638:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	69cb      	ldr	r3, [r1, #28]
 800663e:	692a      	ldr	r2, [r5, #16]
 8006640:	0212      	lsls	r2, r2, #8
 8006642:	4313      	orrs	r3, r2
 8006644:	61cb      	str	r3, [r1, #28]
    break;
 8006646:	e014      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8006648:	2a00      	cmp	r2, #0
 800664a:	d112      	bne.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800664c:	0029      	movs	r1, r5
 800664e:	6800      	ldr	r0, [r0, #0]
 8006650:	f7ff fd7e 	bl	8006150 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	6993      	ldr	r3, [r2, #24]
 8006658:	2108      	movs	r1, #8
 800665a:	430b      	orrs	r3, r1
 800665c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	6993      	ldr	r3, [r2, #24]
 8006662:	3904      	subs	r1, #4
 8006664:	438b      	bics	r3, r1
 8006666:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	6993      	ldr	r3, [r2, #24]
 800666c:	6929      	ldr	r1, [r5, #16]
 800666e:	430b      	orrs	r3, r1
 8006670:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006672:	2201      	movs	r2, #1
 8006674:	233d      	movs	r3, #61	; 0x3d
 8006676:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8006678:	2200      	movs	r2, #0
 800667a:	3b01      	subs	r3, #1
 800667c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800667e:	2000      	movs	r0, #0
}
 8006680:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006682:	0029      	movs	r1, r5
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f7ff ff71 	bl	800656c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	6991      	ldr	r1, [r2, #24]
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	430b      	orrs	r3, r1
 8006694:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	6993      	ldr	r3, [r2, #24]
 800669a:	4910      	ldr	r1, [pc, #64]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0xe8>)
 800669c:	400b      	ands	r3, r1
 800669e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a0:	6821      	ldr	r1, [r4, #0]
 80066a2:	698b      	ldr	r3, [r1, #24]
 80066a4:	692a      	ldr	r2, [r5, #16]
 80066a6:	0212      	lsls	r2, r2, #8
 80066a8:	4313      	orrs	r3, r2
 80066aa:	618b      	str	r3, [r1, #24]
    break;
 80066ac:	e7e1      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ae:	0029      	movs	r1, r5
 80066b0:	6800      	ldr	r0, [r0, #0]
 80066b2:	f7ff fd93 	bl	80061dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	69d3      	ldr	r3, [r2, #28]
 80066ba:	2108      	movs	r1, #8
 80066bc:	430b      	orrs	r3, r1
 80066be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	69d3      	ldr	r3, [r2, #28]
 80066c4:	3904      	subs	r1, #4
 80066c6:	438b      	bics	r3, r1
 80066c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	69d3      	ldr	r3, [r2, #28]
 80066ce:	6929      	ldr	r1, [r5, #16]
 80066d0:	430b      	orrs	r3, r1
 80066d2:	61d3      	str	r3, [r2, #28]
    break;
 80066d4:	e7cd      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 80066d6:	2002      	movs	r0, #2
 80066d8:	e7d2      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	fffffbff 	.word	0xfffffbff

080066e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80066e2:	2401      	movs	r4, #1
 80066e4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066e6:	6a03      	ldr	r3, [r0, #32]
 80066e8:	43a3      	bics	r3, r4
 80066ea:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80066ec:	6a03      	ldr	r3, [r0, #32]
 80066ee:	408a      	lsls	r2, r1
 80066f0:	431a      	orrs	r2, r3
 80066f2:	6202      	str	r2, [r0, #32]
}
 80066f4:	bd10      	pop	{r4, pc}
	...

080066f8 <HAL_TIM_PWM_Start>:
{
 80066f8:	b510      	push	{r4, lr}
 80066fa:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066fc:	2201      	movs	r2, #1
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	f7ff ffee 	bl	80066e0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	4a11      	ldr	r2, [pc, #68]	; (800674c <HAL_TIM_PWM_Start+0x54>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d019      	beq.n	8006740 <HAL_TIM_PWM_Start+0x48>
 800670c:	4a10      	ldr	r2, [pc, #64]	; (8006750 <HAL_TIM_PWM_Start+0x58>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_TIM_PWM_Start+0x4c>
 8006712:	4a10      	ldr	r2, [pc, #64]	; (8006754 <HAL_TIM_PWM_Start+0x5c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d017      	beq.n	8006748 <HAL_TIM_PWM_Start+0x50>
 8006718:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <HAL_TIM_PWM_Start+0x60>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_TIM_PWM_Start+0x44>
 800671e:	2200      	movs	r2, #0
 8006720:	2a00      	cmp	r2, #0
 8006722:	d004      	beq.n	800672e <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8006724:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006726:	2280      	movs	r2, #128	; 0x80
 8006728:	0212      	lsls	r2, r2, #8
 800672a:	430a      	orrs	r2, r1
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	6813      	ldr	r3, [r2, #0]
 8006732:	2101      	movs	r1, #1
 8006734:	430b      	orrs	r3, r1
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	2000      	movs	r0, #0
 800673a:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800673c:	2201      	movs	r2, #1
 800673e:	e7ef      	b.n	8006720 <HAL_TIM_PWM_Start+0x28>
 8006740:	2201      	movs	r2, #1
 8006742:	e7ed      	b.n	8006720 <HAL_TIM_PWM_Start+0x28>
 8006744:	2201      	movs	r2, #1
 8006746:	e7eb      	b.n	8006720 <HAL_TIM_PWM_Start+0x28>
 8006748:	2201      	movs	r2, #1
 800674a:	e7e9      	b.n	8006720 <HAL_TIM_PWM_Start+0x28>
 800674c:	40012c00 	.word	0x40012c00
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800

0800675c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800675c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800675e:	233c      	movs	r3, #60	; 0x3c
 8006760:	5cc3      	ldrb	r3, [r0, r3]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d01e      	beq.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8006766:	223c      	movs	r2, #60	; 0x3c
 8006768:	2501      	movs	r5, #1
 800676a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	243d      	movs	r4, #61	; 0x3d
 800676e:	2302      	movs	r3, #2
 8006770:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006772:	6806      	ldr	r6, [r0, #0]
 8006774:	6873      	ldr	r3, [r6, #4]
 8006776:	2770      	movs	r7, #112	; 0x70
 8006778:	43bb      	bics	r3, r7
 800677a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800677c:	6806      	ldr	r6, [r0, #0]
 800677e:	6873      	ldr	r3, [r6, #4]
 8006780:	680f      	ldr	r7, [r1, #0]
 8006782:	433b      	orrs	r3, r7
 8006784:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006786:	6806      	ldr	r6, [r0, #0]
 8006788:	68b3      	ldr	r3, [r6, #8]
 800678a:	2780      	movs	r7, #128	; 0x80
 800678c:	43bb      	bics	r3, r7
 800678e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006790:	6806      	ldr	r6, [r0, #0]
 8006792:	68b3      	ldr	r3, [r6, #8]
 8006794:	6849      	ldr	r1, [r1, #4]
 8006796:	430b      	orrs	r3, r1
 8006798:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 800679a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 800679c:	2300      	movs	r3, #0
 800679e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80067a0:	2000      	movs	r0, #0
}
 80067a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80067a4:	2002      	movs	r0, #2
 80067a6:	e7fc      	b.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x46>

080067a8 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80067a8:	4770      	bx	lr

080067aa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067aa:	4770      	bx	lr

080067ac <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 80067ac:	2329      	movs	r3, #41	; 0x29
 80067ae:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 80067b0:	4800      	ldr	r0, [pc, #0]	; (80067b4 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 80067b2:	4770      	bx	lr
 80067b4:	20000040 	.word	0x20000040

080067b8 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80067b8:	2386      	movs	r3, #134	; 0x86
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	58c2      	ldr	r2, [r0, r3]
 80067be:	2100      	movs	r1, #0
 80067c0:	3bc9      	subs	r3, #201	; 0xc9
 80067c2:	3bff      	subs	r3, #255	; 0xff
 80067c4:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
}
 80067c6:	2000      	movs	r0, #0
 80067c8:	4770      	bx	lr

080067ca <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067ca:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 80067cc:	2386      	movs	r3, #134	; 0x86
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	58c4      	ldr	r4, [r0, r3]

  if (hhid->IsReportAvailable == 1)
 80067d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d001      	beq.n	80067dc <USBD_CUSTOM_HID_EP0_RxReady+0x12>
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
  }

  return USBD_OK;
}
 80067d8:	2000      	movs	r0, #0
 80067da:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 80067dc:	2387      	movs	r3, #135	; 0x87
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	58c3      	ldr	r3, [r0, r3]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	7861      	ldrb	r1, [r4, #1]
 80067e6:	7820      	ldrb	r0, [r4, #0]
 80067e8:	4798      	blx	r3
    hhid->IsReportAvailable = 0;      
 80067ea:	2300      	movs	r3, #0
 80067ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80067ee:	e7f3      	b.n	80067d8 <USBD_CUSTOM_HID_EP0_RxReady+0xe>

080067f0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 80067f0:	230a      	movs	r3, #10
 80067f2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 80067f4:	4800      	ldr	r0, [pc, #0]	; (80067f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 80067f6:	4770      	bx	lr
 80067f8:	20000078 	.word	0x20000078

080067fc <USBD_CUSTOM_HID_DataOut>:
{
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	0004      	movs	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8006800:	2386      	movs	r3, #134	; 0x86
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	58c5      	ldr	r5, [r0, r3]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8006806:	3304      	adds	r3, #4
 8006808:	58c3      	ldr	r3, [r0, r3]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	7869      	ldrb	r1, [r5, #1]
 800680e:	7828      	ldrb	r0, [r5, #0]
 8006810:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	002a      	movs	r2, r5
 8006816:	2101      	movs	r1, #1
 8006818:	0020      	movs	r0, r4
 800681a:	f000 ff49 	bl	80076b0 <USBD_LL_PrepareReceive>
}
 800681e:	2000      	movs	r0, #0
 8006820:	bd70      	pop	{r4, r5, r6, pc}
	...

08006824 <USBD_CUSTOM_HID_Setup>:
{
 8006824:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006826:	2386      	movs	r3, #134	; 0x86
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	58c4      	ldr	r4, [r0, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800682c:	780a      	ldrb	r2, [r1, #0]
 800682e:	3bb9      	subs	r3, #185	; 0xb9
 8006830:	3bff      	subs	r3, #255	; 0xff
 8006832:	4013      	ands	r3, r2
 8006834:	d02d      	beq.n	8006892 <USBD_CUSTOM_HID_Setup+0x6e>
 8006836:	2b20      	cmp	r3, #32
 8006838:	d15e      	bne.n	80068f8 <USBD_CUSTOM_HID_Setup+0xd4>
    switch (req->bRequest)
 800683a:	784b      	ldrb	r3, [r1, #1]
 800683c:	2b0b      	cmp	r3, #11
 800683e:	d824      	bhi.n	800688a <USBD_CUSTOM_HID_Setup+0x66>
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a2e      	ldr	r2, [pc, #184]	; (80068fc <USBD_CUSTOM_HID_Setup+0xd8>)
 8006844:	58d3      	ldr	r3, [r2, r3]
 8006846:	469f      	mov	pc, r3
      hhid->Protocol = (uint8_t)(req->wValue);
 8006848:	788b      	ldrb	r3, [r1, #2]
 800684a:	6423      	str	r3, [r4, #64]	; 0x40
  return USBD_OK;
 800684c:	2000      	movs	r0, #0
      break;
 800684e:	e054      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->Protocol,
 8006850:	0021      	movs	r1, r4
 8006852:	3140      	adds	r1, #64	; 0x40
      USBD_CtlSendData (pdev, 
 8006854:	2201      	movs	r2, #1
 8006856:	f000 fcd9 	bl	800720c <USBD_CtlSendData>
  return USBD_OK;
 800685a:	2000      	movs	r0, #0
      break;
 800685c:	e04d      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800685e:	884b      	ldrh	r3, [r1, #2]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	6463      	str	r3, [r4, #68]	; 0x44
  return USBD_OK;
 8006864:	2000      	movs	r0, #0
      break;
 8006866:	e048      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
                        (uint8_t *)&hhid->IdleState,
 8006868:	0021      	movs	r1, r4
 800686a:	3144      	adds	r1, #68	; 0x44
      USBD_CtlSendData (pdev, 
 800686c:	2201      	movs	r2, #1
 800686e:	f000 fccd 	bl	800720c <USBD_CtlSendData>
  return USBD_OK;
 8006872:	2000      	movs	r0, #0
      break;      
 8006874:	e041      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->IsReportAvailable = 1;
 8006876:	2301      	movs	r3, #1
 8006878:	64e3      	str	r3, [r4, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 800687a:	88cb      	ldrh	r3, [r1, #6]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	401a      	ands	r2, r3
 8006880:	0021      	movs	r1, r4
 8006882:	f000 fcd9 	bl	8007238 <USBD_CtlPrepareRx>
  return USBD_OK;
 8006886:	2000      	movs	r0, #0
      break;
 8006888:	e037      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
      USBD_CtlError (pdev, req);
 800688a:	f000 fa2e 	bl	8006cea <USBD_CtlError>
      return USBD_FAIL; 
 800688e:	2002      	movs	r0, #2
 8006890:	e033      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
    switch (req->bRequest)
 8006892:	784b      	ldrb	r3, [r1, #1]
 8006894:	2b0a      	cmp	r3, #10
 8006896:	d024      	beq.n	80068e2 <USBD_CUSTOM_HID_Setup+0xbe>
 8006898:	2b0b      	cmp	r3, #11
 800689a:	d029      	beq.n	80068f0 <USBD_CUSTOM_HID_Setup+0xcc>
 800689c:	2b06      	cmp	r3, #6
 800689e:	d001      	beq.n	80068a4 <USBD_CUSTOM_HID_Setup+0x80>
  return USBD_OK;
 80068a0:	2000      	movs	r0, #0
 80068a2:	e02a      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80068a4:	884b      	ldrh	r3, [r1, #2]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	2b22      	cmp	r3, #34	; 0x22
 80068aa:	d007      	beq.n	80068bc <USBD_CUSTOM_HID_Setup+0x98>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80068ac:	2b21      	cmp	r3, #33	; 0x21
 80068ae:	d010      	beq.n	80068d2 <USBD_CUSTOM_HID_Setup+0xae>
  uint8_t  *pbuf = NULL;
 80068b0:	2100      	movs	r1, #0
  uint16_t len = 0;
 80068b2:	2200      	movs	r2, #0
      USBD_CtlSendData (pdev, 
 80068b4:	f000 fcaa 	bl	800720c <USBD_CtlSendData>
  return USBD_OK;
 80068b8:	2000      	movs	r0, #0
      break;
 80068ba:	e01e      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80068bc:	88cb      	ldrh	r3, [r1, #6]
 80068be:	1c1a      	adds	r2, r3, #0
 80068c0:	2b1d      	cmp	r3, #29
 80068c2:	d900      	bls.n	80068c6 <USBD_CUSTOM_HID_Setup+0xa2>
 80068c4:	221d      	movs	r2, #29
 80068c6:	b292      	uxth	r2, r2
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80068c8:	2387      	movs	r3, #135	; 0x87
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	58c3      	ldr	r3, [r0, r3]
 80068ce:	6819      	ldr	r1, [r3, #0]
 80068d0:	e7f0      	b.n	80068b4 <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80068d2:	88cb      	ldrh	r3, [r1, #6]
 80068d4:	1c1a      	adds	r2, r3, #0
 80068d6:	2b09      	cmp	r3, #9
 80068d8:	d900      	bls.n	80068dc <USBD_CUSTOM_HID_Setup+0xb8>
 80068da:	2209      	movs	r2, #9
 80068dc:	b292      	uxth	r2, r2
        pbuf = USBD_CUSTOM_HID_Desc;   
 80068de:	4908      	ldr	r1, [pc, #32]	; (8006900 <USBD_CUSTOM_HID_Setup+0xdc>)
 80068e0:	e7e8      	b.n	80068b4 <USBD_CUSTOM_HID_Setup+0x90>
                        (uint8_t *)&hhid->AltSetting,
 80068e2:	0021      	movs	r1, r4
 80068e4:	3148      	adds	r1, #72	; 0x48
      USBD_CtlSendData (pdev,
 80068e6:	2201      	movs	r2, #1
 80068e8:	f000 fc90 	bl	800720c <USBD_CtlSendData>
  return USBD_OK;
 80068ec:	2000      	movs	r0, #0
      break;
 80068ee:	e004      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
      hhid->AltSetting = (uint8_t)(req->wValue);
 80068f0:	788b      	ldrb	r3, [r1, #2]
 80068f2:	64a3      	str	r3, [r4, #72]	; 0x48
  return USBD_OK;
 80068f4:	2000      	movs	r0, #0
      break;
 80068f6:	e000      	b.n	80068fa <USBD_CUSTOM_HID_Setup+0xd6>
  return USBD_OK;
 80068f8:	2000      	movs	r0, #0
}
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	08007da8 	.word	0x08007da8
 8006900:	2000006c 	.word	0x2000006c

08006904 <USBD_CUSTOM_HID_DeInit>:
{
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev,
 8006908:	2181      	movs	r1, #129	; 0x81
 800690a:	f000 fe8a 	bl	8007622 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800690e:	2101      	movs	r1, #1
 8006910:	0020      	movs	r0, r4
 8006912:	f000 fe86 	bl	8007622 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8006916:	2386      	movs	r3, #134	; 0x86
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	58e3      	ldr	r3, [r4, r3]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006920:	2387      	movs	r3, #135	; 0x87
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	58e3      	ldr	r3, [r4, r3]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800692a:	2586      	movs	r5, #134	; 0x86
 800692c:	00ad      	lsls	r5, r5, #2
 800692e:	5960      	ldr	r0, [r4, r5]
 8006930:	f000 fecc 	bl	80076cc <USBD_static_free>
    pdev->pClassData = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	5163      	str	r3, [r4, r5]
}
 8006938:	2000      	movs	r0, #0
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <USBD_CUSTOM_HID_Init>:
{
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	2203      	movs	r2, #3
 8006944:	2181      	movs	r1, #129	; 0x81
 8006946:	f000 fe60 	bl	800760a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	2203      	movs	r2, #3
 800694e:	2101      	movs	r1, #1
 8006950:	0020      	movs	r0, r4
 8006952:	f000 fe5a 	bl	800760a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8006956:	2054      	movs	r0, #84	; 0x54
 8006958:	f000 feb4 	bl	80076c4 <USBD_static_malloc>
 800695c:	0005      	movs	r5, r0
 800695e:	2386      	movs	r3, #134	; 0x86
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	50e0      	str	r0, [r4, r3]
  if(pdev->pClassData == NULL)
 8006964:	2800      	cmp	r0, #0
 8006966:	d010      	beq.n	800698a <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 8006968:	2200      	movs	r2, #0
 800696a:	3bc9      	subs	r3, #201	; 0xc9
 800696c:	3bff      	subs	r3, #255	; 0xff
 800696e:	54c2      	strb	r2, [r0, r3]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006970:	33cd      	adds	r3, #205	; 0xcd
 8006972:	33ff      	adds	r3, #255	; 0xff
 8006974:	58e3      	ldr	r3, [r4, r3]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	002a      	movs	r2, r5
 800697e:	2101      	movs	r1, #1
 8006980:	0020      	movs	r0, r4
 8006982:	f000 fe95 	bl	80076b0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8006986:	2000      	movs	r0, #0
}
 8006988:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 800698a:	2001      	movs	r0, #1
 800698c:	e7fc      	b.n	8006988 <USBD_CUSTOM_HID_Init+0x4c>

0800698e <USBD_CUSTOM_HID_SendReport>:
{
 800698e:	b570      	push	{r4, r5, r6, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006990:	2486      	movs	r4, #134	; 0x86
 8006992:	00a4      	lsls	r4, r4, #2
 8006994:	5905      	ldr	r5, [r0, r4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8006996:	3c1c      	subs	r4, #28
 8006998:	5d04      	ldrb	r4, [r0, r4]
 800699a:	2c03      	cmp	r4, #3
 800699c:	d001      	beq.n	80069a2 <USBD_CUSTOM_HID_SendReport+0x14>
}
 800699e:	2000      	movs	r0, #0
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
    if(hhid->state == CUSTOM_HID_IDLE)
 80069a2:	2350      	movs	r3, #80	; 0x50
 80069a4:	5ceb      	ldrb	r3, [r5, r3]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f9      	bne.n	800699e <USBD_CUSTOM_HID_SendReport+0x10>
      hhid->state = CUSTOM_HID_BUSY;
 80069aa:	3c02      	subs	r4, #2
 80069ac:	3350      	adds	r3, #80	; 0x50
 80069ae:	54ec      	strb	r4, [r5, r3]
      USBD_LL_Transmit (pdev, 
 80069b0:	0013      	movs	r3, r2
 80069b2:	000a      	movs	r2, r1
 80069b4:	2181      	movs	r1, #129	; 0x81
 80069b6:	f000 fe72 	bl	800769e <USBD_LL_Transmit>
 80069ba:	e7f0      	b.n	800699e <USBD_CUSTOM_HID_SendReport+0x10>

080069bc <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80069bc:	2900      	cmp	r1, #0
 80069be:	d004      	beq.n	80069ca <USBD_CUSTOM_HID_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 80069c0:	2387      	movs	r3, #135	; 0x87
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 80069c6:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80069c8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80069ca:	2002      	movs	r0, #2
 80069cc:	e7fc      	b.n	80069c8 <USBD_CUSTOM_HID_RegisterInterface+0xc>

080069ce <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069ce:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d016      	beq.n	8006a02 <USBD_Init+0x34>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80069d4:	2385      	movs	r3, #133	; 0x85
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	58c3      	ldr	r3, [r0, r3]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 80069de:	2400      	movs	r4, #0
 80069e0:	2385      	movs	r3, #133	; 0x85
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d002      	beq.n	80069f0 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 80069ea:	2384      	movs	r3, #132	; 0x84
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80069f0:	2101      	movs	r1, #1
 80069f2:	23fe      	movs	r3, #254	; 0xfe
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80069f8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069fa:	f000 fdc3 	bl	8007584 <USBD_LL_Init>
  
  return USBD_OK; 
 80069fe:	2000      	movs	r0, #0
}
 8006a00:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8006a02:	2002      	movs	r0, #2
 8006a04:	e7fc      	b.n	8006a00 <USBD_Init+0x32>

08006a06 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d004      	beq.n	8006a14 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a0a:	2385      	movs	r3, #133	; 0x85
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8006a10:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8006a12:	4770      	bx	lr
    status = USBD_FAIL; 
 8006a14:	2002      	movs	r0, #2
 8006a16:	e7fc      	b.n	8006a12 <USBD_RegisterClass+0xc>

08006a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006a18:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006a1a:	f000 fded 	bl	80075f8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8006a1e:	2000      	movs	r0, #0
 8006a20:	bd10      	pop	{r4, pc}

08006a22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a22:	b510      	push	{r4, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8006a24:	2385      	movs	r3, #133	; 0x85
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	58c3      	ldr	r3, [r0, r3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4798      	blx	r3
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d003      	beq.n	8006a3e <USBD_SetClassConfig+0x1c>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006a36:	2002      	movs	r0, #2
 8006a38:	e000      	b.n	8006a3c <USBD_SetClassConfig+0x1a>
 8006a3a:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8006a3c:	bd10      	pop	{r4, pc}
      ret = USBD_OK;
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e7fc      	b.n	8006a3c <USBD_SetClassConfig+0x1a>

08006a42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a42:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8006a44:	2385      	movs	r3, #133	; 0x85
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	58c3      	ldr	r3, [r0, r3]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4798      	blx	r3
  return USBD_OK;
}
 8006a4e:	2000      	movs	r0, #0
 8006a50:	bd10      	pop	{r4, pc}
	...

08006a54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	0004      	movs	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a58:	2382      	movs	r3, #130	; 0x82
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	18c5      	adds	r5, r0, r3
 8006a5e:	0028      	movs	r0, r5
 8006a60:	f000 f92f 	bl	8006cc2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8006a64:	2201      	movs	r2, #1
 8006a66:	23fa      	movs	r3, #250	; 0xfa
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8006a6c:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <USBD_LL_SetupStage+0x64>)
 8006a6e:	5ae2      	ldrh	r2, [r4, r3]
 8006a70:	3b16      	subs	r3, #22
 8006a72:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8006a74:	3310      	adds	r3, #16
 8006a76:	5ce1      	ldrb	r1, [r4, r3]
 8006a78:	3bea      	subs	r3, #234	; 0xea
 8006a7a:	3bff      	subs	r3, #255	; 0xff
 8006a7c:	400b      	ands	r3, r1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d00f      	beq.n	8006aa2 <USBD_LL_SetupStage+0x4e>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <USBD_LL_SetupStage+0x42>
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d010      	beq.n	8006aac <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8006a8a:	237f      	movs	r3, #127	; 0x7f
 8006a8c:	4399      	bics	r1, r3
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f000 fdd0 	bl	8007634 <USBD_LL_StallEP>
    break;
 8006a94:	e003      	b.n	8006a9e <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 8006a96:	0029      	movs	r1, r5
 8006a98:	0020      	movs	r0, r4
 8006a9a:	f000 fabb 	bl	8007014 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8006aa2:	0029      	movs	r1, r5
 8006aa4:	0020      	movs	r0, r4
 8006aa6:	f000 fad9 	bl	800705c <USBD_StdItfReq>
    break;
 8006aaa:	e7f8      	b.n	8006a9e <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 8006aac:	0029      	movs	r1, r5
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f000 faf2 	bl	8007098 <USBD_StdEPReq>
    break;
 8006ab4:	e7f3      	b.n	8006a9e <USBD_LL_SetupStage+0x4a>
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	0000020e 	.word	0x0000020e

08006abc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8006abc:	b510      	push	{r4, lr}
 8006abe:	0004      	movs	r4, r0
 8006ac0:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8006ac2:	2900      	cmp	r1, #0
 8006ac4:	d128      	bne.n	8006b18 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ac6:	22fa      	movs	r2, #250	; 0xfa
 8006ac8:	0052      	lsls	r2, r2, #1
 8006aca:	5882      	ldr	r2, [r0, r2]
 8006acc:	2a03      	cmp	r2, #3
 8006ace:	d12e      	bne.n	8006b2e <USBD_LL_DataOutStage+0x72>
    {
      if(pep->rem_length > pep->maxpacket)
 8006ad0:	1d42      	adds	r2, r0, #5
 8006ad2:	32ff      	adds	r2, #255	; 0xff
 8006ad4:	6891      	ldr	r1, [r2, #8]
 8006ad6:	68d2      	ldr	r2, [r2, #12]
 8006ad8:	4291      	cmp	r1, r2
 8006ada:	d80e      	bhi.n	8006afa <USBD_LL_DataOutStage+0x3e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006adc:	2385      	movs	r3, #133	; 0x85
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	58c3      	ldr	r3, [r0, r3]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <USBD_LL_DataOutStage+0x36>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ae8:	22fe      	movs	r2, #254	; 0xfe
 8006aea:	0052      	lsls	r2, r2, #1
 8006aec:	5c82      	ldrb	r2, [r0, r2]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006aee:	2a03      	cmp	r2, #3
 8006af0:	d010      	beq.n	8006b14 <USBD_LL_DataOutStage+0x58>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8006af2:	0020      	movs	r0, r4
 8006af4:	f000 fbb8 	bl	8007268 <USBD_CtlSendStatus>
 8006af8:	e019      	b.n	8006b2e <USBD_LL_DataOutStage+0x72>
        pep->rem_length -=  pep->maxpacket;
 8006afa:	1a89      	subs	r1, r1, r2
 8006afc:	3005      	adds	r0, #5
 8006afe:	30ff      	adds	r0, #255	; 0xff
 8006b00:	6081      	str	r1, [r0, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8006b02:	428a      	cmp	r2, r1
 8006b04:	d900      	bls.n	8006b08 <USBD_LL_DataOutStage+0x4c>
 8006b06:	000a      	movs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	0020      	movs	r0, r4
 8006b0e:	f000 fba3 	bl	8007258 <USBD_CtlContinueRx>
 8006b12:	e00c      	b.n	8006b2e <USBD_LL_DataOutStage+0x72>
          pdev->pClass->EP0_RxReady(pdev); 
 8006b14:	4798      	blx	r3
 8006b16:	e7ec      	b.n	8006af2 <USBD_LL_DataOutStage+0x36>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006b18:	2385      	movs	r3, #133	; 0x85
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	58c3      	ldr	r3, [r0, r3]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <USBD_LL_DataOutStage+0x72>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b24:	22fe      	movs	r2, #254	; 0xfe
 8006b26:	0052      	lsls	r2, r2, #1
 8006b28:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataOut != NULL)&&
 8006b2a:	2a03      	cmp	r2, #3
 8006b2c:	d001      	beq.n	8006b32 <USBD_LL_DataOutStage+0x76>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006b2e:	2000      	movs	r0, #0
 8006b30:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8006b32:	4798      	blx	r3
 8006b34:	e7fb      	b.n	8006b2e <USBD_LL_DataOutStage+0x72>

08006b36 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	0004      	movs	r4, r0
 8006b3a:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d14f      	bne.n	8006be0 <USBD_LL_DataInStage+0xaa>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b40:	22fa      	movs	r2, #250	; 0xfa
 8006b42:	0052      	lsls	r2, r2, #1
 8006b44:	5882      	ldr	r2, [r0, r2]
 8006b46:	2a02      	cmp	r2, #2
 8006b48:	d006      	beq.n	8006b58 <USBD_LL_DataInStage+0x22>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	5ce3      	ldrb	r3, [r4, r3]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d040      	beq.n	8006bd6 <USBD_LL_DataInStage+0xa0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8006b54:	2000      	movs	r0, #0
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8006b58:	69c2      	ldr	r2, [r0, #28]
 8006b5a:	6a05      	ldr	r5, [r0, #32]
 8006b5c:	42aa      	cmp	r2, r5
 8006b5e:	d81c      	bhi.n	8006b9a <USBD_LL_DataInStage+0x64>
        if((pep->total_length % pep->maxpacket == 0) &&
 8006b60:	6986      	ldr	r6, [r0, #24]
 8006b62:	0029      	movs	r1, r5
 8006b64:	0030      	movs	r0, r6
 8006b66:	f7f9 fb55 	bl	8000214 <__aeabi_uidivmod>
 8006b6a:	2900      	cmp	r1, #0
 8006b6c:	d106      	bne.n	8006b7c <USBD_LL_DataInStage+0x46>
 8006b6e:	42b5      	cmp	r5, r6
 8006b70:	d804      	bhi.n	8006b7c <USBD_LL_DataInStage+0x46>
             (pep->total_length < pdev->ep0_data_len ))
 8006b72:	23fc      	movs	r3, #252	; 0xfc
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	58e3      	ldr	r3, [r4, r3]
           (pep->total_length >= pep->maxpacket) &&
 8006b78:	429e      	cmp	r6, r3
 8006b7a:	d31b      	bcc.n	8006bb4 <USBD_LL_DataInStage+0x7e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006b7c:	2385      	movs	r3, #133	; 0x85
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	58e3      	ldr	r3, [r4, r3]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b88:	22fe      	movs	r2, #254	; 0xfe
 8006b8a:	0052      	lsls	r2, r2, #1
 8006b8c:	5ca2      	ldrb	r2, [r4, r2]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006b8e:	2a03      	cmp	r2, #3
 8006b90:	d01e      	beq.n	8006bd0 <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 8006b92:	0020      	movs	r0, r4
 8006b94:	f000 fb74 	bl	8007280 <USBD_CtlReceiveStatus>
 8006b98:	e7d7      	b.n	8006b4a <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 8006b9a:	1b52      	subs	r2, r2, r5
 8006b9c:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8006b9e:	b292      	uxth	r2, r2
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	f000 fb41 	bl	8007228 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	0020      	movs	r0, r4
 8006bae:	f000 fd7f 	bl	80076b0 <USBD_LL_PrepareReceive>
 8006bb2:	e7ca      	b.n	8006b4a <USBD_LL_DataInStage+0x14>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	f000 fb36 	bl	8007228 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	23fc      	movs	r3, #252	; 0xfc
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	50e2      	str	r2, [r4, r3]
        USBD_LL_PrepareReceive (pdev,
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	0020      	movs	r0, r4
 8006bca:	f000 fd71 	bl	80076b0 <USBD_LL_PrepareReceive>
 8006bce:	e7bc      	b.n	8006b4a <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev); 
 8006bd0:	0020      	movs	r0, r4
 8006bd2:	4798      	blx	r3
 8006bd4:	e7dd      	b.n	8006b92 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0;
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2380      	movs	r3, #128	; 0x80
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	54e2      	strb	r2, [r4, r3]
 8006bde:	e7b9      	b.n	8006b54 <USBD_LL_DataInStage+0x1e>
  else if((pdev->pClass->DataIn != NULL)&& 
 8006be0:	2385      	movs	r3, #133	; 0x85
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	58c3      	ldr	r3, [r0, r3]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0b3      	beq.n	8006b54 <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bec:	22fe      	movs	r2, #254	; 0xfe
 8006bee:	0052      	lsls	r2, r2, #1
 8006bf0:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataIn != NULL)&& 
 8006bf2:	2a03      	cmp	r2, #3
 8006bf4:	d1ae      	bne.n	8006b54 <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 8006bf6:	4798      	blx	r3
 8006bf8:	e7ac      	b.n	8006b54 <USBD_LL_DataInStage+0x1e>

08006bfa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	f000 fd01 	bl	800760a <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c08:	2540      	movs	r5, #64	; 0x40
 8006c0a:	2388      	movs	r3, #136	; 0x88
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006c10:	3bd0      	subs	r3, #208	; 0xd0
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	0020      	movs	r0, r4
 8006c18:	f000 fcf7 	bl	800760a <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c1c:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1e:	2201      	movs	r2, #1
 8006c20:	23fe      	movs	r3, #254	; 0xfe
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 8006c26:	331c      	adds	r3, #28
 8006c28:	58e3      	ldr	r3, [r4, r3]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d006      	beq.n	8006c3c <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006c2e:	2385      	movs	r3, #133	; 0x85
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	58e3      	ldr	r3, [r4, r3]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	7921      	ldrb	r1, [r4, #4]
 8006c38:	0020      	movs	r0, r4
 8006c3a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}

08006c40 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006c40:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8006c42:	2000      	movs	r0, #0
 8006c44:	4770      	bx	lr

08006c46 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006c46:	23fe      	movs	r3, #254	; 0xfe
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	5cc1      	ldrb	r1, [r0, r3]
 8006c4c:	22fe      	movs	r2, #254	; 0xfe
 8006c4e:	32ff      	adds	r2, #255	; 0xff
 8006c50:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c52:	3afa      	subs	r2, #250	; 0xfa
 8006c54:	3aff      	subs	r2, #255	; 0xff
 8006c56:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8006c58:	2000      	movs	r0, #0
 8006c5a:	4770      	bx	lr

08006c5c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8006c5c:	23fe      	movs	r3, #254	; 0xfe
 8006c5e:	33ff      	adds	r3, #255	; 0xff
 8006c60:	5cc2      	ldrb	r2, [r0, r3]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8006c66:	2000      	movs	r0, #0
 8006c68:	4770      	bx	lr

08006c6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006c6a:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	23fe      	movs	r3, #254	; 0xfe
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	5cc3      	ldrb	r3, [r0, r3]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d001      	beq.n	8006c7a <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8006c76:	2000      	movs	r0, #0
 8006c78:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 8006c7a:	2385      	movs	r3, #133	; 0x85
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	58c3      	ldr	r3, [r0, r3]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f7      	beq.n	8006c76 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8006c86:	4798      	blx	r3
 8006c88:	e7f5      	b.n	8006c76 <USBD_LL_SOF+0xc>

08006c8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c8a:	0003      	movs	r3, r0
    uint8_t  len = 0;
 8006c8c:	2000      	movs	r0, #0

    while (*buf != '\0') 
 8006c8e:	e002      	b.n	8006c96 <USBD_GetLen+0xc>
    {
        len++;
 8006c90:	3001      	adds	r0, #1
 8006c92:	b2c0      	uxtb	r0, r0
        buf++;
 8006c94:	3301      	adds	r3, #1
    while (*buf != '\0') 
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	2a00      	cmp	r2, #0
 8006c9a:	d1f9      	bne.n	8006c90 <USBD_GetLen+0x6>
    }

    return len;
}
 8006c9c:	4770      	bx	lr

08006c9e <USBD_SetFeature>:
{
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	0004      	movs	r4, r0
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca2:	884b      	ldrh	r3, [r1, #2]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d000      	beq.n	8006caa <USBD_SetFeature+0xc>
}
 8006ca8:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1;  
 8006caa:	2201      	movs	r2, #1
 8006cac:	2381      	movs	r3, #129	; 0x81
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	50c2      	str	r2, [r0, r3]
    pdev->pClass->Setup (pdev, req);   
 8006cb2:	3310      	adds	r3, #16
 8006cb4:	58c3      	ldr	r3, [r0, r3]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006cba:	0020      	movs	r0, r4
 8006cbc:	f000 fad4 	bl	8007268 <USBD_CtlSendStatus>
}
 8006cc0:	e7f2      	b.n	8006ca8 <USBD_SetFeature+0xa>

08006cc2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006cc2:	780b      	ldrb	r3, [r1, #0]
 8006cc4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006cc6:	784b      	ldrb	r3, [r1, #1]
 8006cc8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006cca:	788b      	ldrb	r3, [r1, #2]
 8006ccc:	78ca      	ldrb	r2, [r1, #3]
 8006cce:	0212      	lsls	r2, r2, #8
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006cd4:	790b      	ldrb	r3, [r1, #4]
 8006cd6:	794a      	ldrb	r2, [r1, #5]
 8006cd8:	0212      	lsls	r2, r2, #8
 8006cda:	189b      	adds	r3, r3, r2
 8006cdc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006cde:	798b      	ldrb	r3, [r1, #6]
 8006ce0:	79ca      	ldrb	r2, [r1, #7]
 8006ce2:	0212      	lsls	r2, r2, #8
 8006ce4:	189b      	adds	r3, r3, r2
 8006ce6:	80c3      	strh	r3, [r0, #6]
}
 8006ce8:	4770      	bx	lr

08006cea <USBD_CtlError>:
{
 8006cea:	b510      	push	{r4, lr}
 8006cec:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	f000 fca0 	bl	8007634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	0020      	movs	r0, r4
 8006cf8:	f000 fc9c 	bl	8007634 <USBD_LL_StallEP>
}
 8006cfc:	bd10      	pop	{r4, pc}
	...

08006d00 <USBD_GetDescriptor>:
{
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	b083      	sub	sp, #12
 8006d04:	0004      	movs	r4, r0
 8006d06:	000d      	movs	r5, r1
  switch (req->wValue >> 8)
 8006d08:	8849      	ldrh	r1, [r1, #2]
 8006d0a:	0a0b      	lsrs	r3, r1, #8
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	d900      	bls.n	8006d12 <USBD_GetDescriptor+0x12>
 8006d10:	e092      	b.n	8006e38 <USBD_GetDescriptor+0x138>
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a51      	ldr	r2, [pc, #324]	; (8006e5c <USBD_GetDescriptor+0x15c>)
 8006d16:	58d3      	ldr	r3, [r2, r3]
 8006d18:	469f      	mov	pc, r3
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d1a:	2384      	movs	r3, #132	; 0x84
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	58c3      	ldr	r3, [r0, r3]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	7c00      	ldrb	r0, [r0, #16]
 8006d24:	466a      	mov	r2, sp
 8006d26:	1d91      	adds	r1, r2, #6
 8006d28:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8006d2a:	466b      	mov	r3, sp
 8006d2c:	3306      	adds	r3, #6
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <USBD_GetDescriptor+0x3c>
 8006d34:	88ea      	ldrh	r2, [r5, #6]
 8006d36:	2a00      	cmp	r2, #0
 8006d38:	d000      	beq.n	8006d3c <USBD_GetDescriptor+0x3c>
 8006d3a:	e082      	b.n	8006e42 <USBD_GetDescriptor+0x142>
}
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006d40:	7c03      	ldrb	r3, [r0, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006d46:	2385      	movs	r3, #133	; 0x85
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	58c3      	ldr	r3, [r0, r3]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	466a      	mov	r2, sp
 8006d50:	1d90      	adds	r0, r2, #6
 8006d52:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d54:	2302      	movs	r3, #2
 8006d56:	7043      	strb	r3, [r0, #1]
 8006d58:	e7e7      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d5a:	2385      	movs	r3, #133	; 0x85
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	58c3      	ldr	r3, [r0, r3]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	466a      	mov	r2, sp
 8006d64:	1d90      	adds	r0, r2, #6
 8006d66:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	7043      	strb	r3, [r0, #1]
 8006d6c:	e7dd      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
    switch ((uint8_t)(req->wValue))
 8006d6e:	b2c9      	uxtb	r1, r1
 8006d70:	2905      	cmp	r1, #5
 8006d72:	d839      	bhi.n	8006de8 <USBD_GetDescriptor+0xe8>
 8006d74:	0089      	lsls	r1, r1, #2
 8006d76:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <USBD_GetDescriptor+0x160>)
 8006d78:	585b      	ldr	r3, [r3, r1]
 8006d7a:	469f      	mov	pc, r3
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006d7c:	2384      	movs	r3, #132	; 0x84
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	58c3      	ldr	r3, [r0, r3]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	7c00      	ldrb	r0, [r0, #16]
 8006d86:	466a      	mov	r2, sp
 8006d88:	1d91      	adds	r1, r2, #6
 8006d8a:	4798      	blx	r3
      break;
 8006d8c:	e7cd      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d8e:	2384      	movs	r3, #132	; 0x84
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	58c3      	ldr	r3, [r0, r3]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	7c00      	ldrb	r0, [r0, #16]
 8006d98:	466a      	mov	r2, sp
 8006d9a:	1d91      	adds	r1, r2, #6
 8006d9c:	4798      	blx	r3
      break;
 8006d9e:	e7c4      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da0:	2384      	movs	r3, #132	; 0x84
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	58c3      	ldr	r3, [r0, r3]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	7c00      	ldrb	r0, [r0, #16]
 8006daa:	466a      	mov	r2, sp
 8006dac:	1d91      	adds	r1, r2, #6
 8006dae:	4798      	blx	r3
      break;
 8006db0:	e7bb      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006db2:	2384      	movs	r3, #132	; 0x84
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	58c3      	ldr	r3, [r0, r3]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	7c00      	ldrb	r0, [r0, #16]
 8006dbc:	466a      	mov	r2, sp
 8006dbe:	1d91      	adds	r1, r2, #6
 8006dc0:	4798      	blx	r3
      break;
 8006dc2:	e7b2      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006dc4:	2384      	movs	r3, #132	; 0x84
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	58c3      	ldr	r3, [r0, r3]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	7c00      	ldrb	r0, [r0, #16]
 8006dce:	466a      	mov	r2, sp
 8006dd0:	1d91      	adds	r1, r2, #6
 8006dd2:	4798      	blx	r3
      break;
 8006dd4:	e7a9      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd6:	2384      	movs	r3, #132	; 0x84
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	58c3      	ldr	r3, [r0, r3]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	7c00      	ldrb	r0, [r0, #16]
 8006de0:	466a      	mov	r2, sp
 8006de2:	1d91      	adds	r1, r2, #6
 8006de4:	4798      	blx	r3
      break;
 8006de6:	e7a0      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8006de8:	2385      	movs	r3, #133	; 0x85
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	58c3      	ldr	r3, [r0, r3]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	466a      	mov	r2, sp
 8006df2:	3206      	adds	r2, #6
 8006df4:	4798      	blx	r3
      break;
 8006df6:	e798      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006df8:	7c03      	ldrb	r3, [r0, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d107      	bne.n	8006e0e <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dfe:	2385      	movs	r3, #133	; 0x85
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	58c3      	ldr	r3, [r0, r3]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	466a      	mov	r2, sp
 8006e08:	1d90      	adds	r0, r2, #6
 8006e0a:	4798      	blx	r3
      break;
 8006e0c:	e78d      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8006e0e:	0029      	movs	r1, r5
 8006e10:	f7ff ff6b 	bl	8006cea <USBD_CtlError>
      return;
 8006e14:	e792      	b.n	8006d3c <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006e16:	7c03      	ldrb	r3, [r0, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <USBD_GetDescriptor+0x130>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e1c:	2385      	movs	r3, #133	; 0x85
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	58c3      	ldr	r3, [r0, r3]
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	466a      	mov	r2, sp
 8006e26:	1d90      	adds	r0, r2, #6
 8006e28:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	7043      	strb	r3, [r0, #1]
      break; 
 8006e2e:	e77c      	b.n	8006d2a <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8006e30:	0029      	movs	r1, r5
 8006e32:	f7ff ff5a 	bl	8006cea <USBD_CtlError>
      return;
 8006e36:	e781      	b.n	8006d3c <USBD_GetDescriptor+0x3c>
     USBD_CtlError(pdev , req);
 8006e38:	0029      	movs	r1, r5
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f7ff ff55 	bl	8006cea <USBD_CtlError>
    return;
 8006e40:	e77c      	b.n	8006d3c <USBD_GetDescriptor+0x3c>
    len = MIN(len , req->wLength);
 8006e42:	1c19      	adds	r1, r3, #0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d900      	bls.n	8006e4a <USBD_GetDescriptor+0x14a>
 8006e48:	1c11      	adds	r1, r2, #0
 8006e4a:	b28a      	uxth	r2, r1
 8006e4c:	466b      	mov	r3, sp
 8006e4e:	80d9      	strh	r1, [r3, #6]
    USBD_CtlSendData (pdev, 
 8006e50:	0001      	movs	r1, r0
 8006e52:	0020      	movs	r0, r4
 8006e54:	f000 f9da 	bl	800720c <USBD_CtlSendData>
 8006e58:	e770      	b.n	8006d3c <USBD_GetDescriptor+0x3c>
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	08007dd8 	.word	0x08007dd8
 8006e60:	08007df8 	.word	0x08007df8

08006e64 <USBD_SetAddress>:
{
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	0004      	movs	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006e68:	888b      	ldrh	r3, [r1, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d122      	bne.n	8006eb4 <USBD_SetAddress+0x50>
 8006e6e:	88cb      	ldrh	r3, [r1, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11f      	bne.n	8006eb4 <USBD_SetAddress+0x50>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006e74:	788b      	ldrb	r3, [r1, #2]
 8006e76:	257f      	movs	r5, #127	; 0x7f
 8006e78:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006e7a:	23fe      	movs	r3, #254	; 0xfe
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	5cc3      	ldrb	r3, [r0, r3]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d00f      	beq.n	8006ea4 <USBD_SetAddress+0x40>
      pdev->dev_address = dev_addr;
 8006e84:	23ff      	movs	r3, #255	; 0xff
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006e8a:	0029      	movs	r1, r5
 8006e8c:	f000 fbfe 	bl	800768c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006e90:	0020      	movs	r0, r4
 8006e92:	f000 f9e9 	bl	8007268 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	d007      	beq.n	8006eaa <USBD_SetAddress+0x46>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	23fe      	movs	r3, #254	; 0xfe
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	54e2      	strb	r2, [r4, r3]
 8006ea2:	e00a      	b.n	8006eba <USBD_SetAddress+0x56>
      USBD_CtlError(pdev , req);
 8006ea4:	f7ff ff21 	bl	8006cea <USBD_CtlError>
 8006ea8:	e007      	b.n	8006eba <USBD_SetAddress+0x56>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006eaa:	2201      	movs	r2, #1
 8006eac:	23fe      	movs	r3, #254	; 0xfe
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	54e2      	strb	r2, [r4, r3]
 8006eb2:	e002      	b.n	8006eba <USBD_SetAddress+0x56>
     USBD_CtlError(pdev , req);                        
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f7ff ff18 	bl	8006cea <USBD_CtlError>
}
 8006eba:	bd70      	pop	{r4, r5, r6, pc}

08006ebc <USBD_SetConfig>:
{
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	0004      	movs	r4, r0
 8006ec0:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8006ec2:	7889      	ldrb	r1, [r1, #2]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <USBD_SetConfig+0xac>)
 8006ec6:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006ec8:	2901      	cmp	r1, #1
 8006eca:	d80a      	bhi.n	8006ee2 <USBD_SetConfig+0x26>
    switch (pdev->dev_state) 
 8006ecc:	23fe      	movs	r3, #254	; 0xfe
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	5cc3      	ldrb	r3, [r0, r3]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d009      	beq.n	8006eea <USBD_SetConfig+0x2e>
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d01e      	beq.n	8006f18 <USBD_SetConfig+0x5c>
       USBD_CtlError(pdev , req);                     
 8006eda:	0029      	movs	r1, r5
 8006edc:	f7ff ff05 	bl	8006cea <USBD_CtlError>
      break;
 8006ee0:	e002      	b.n	8006ee8 <USBD_SetConfig+0x2c>
     USBD_CtlError(pdev , req);                              
 8006ee2:	0029      	movs	r1, r5
 8006ee4:	f7ff ff01 	bl	8006cea <USBD_CtlError>
}
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
      if (cfgidx) 
 8006eea:	2900      	cmp	r1, #0
 8006eec:	d011      	beq.n	8006f12 <USBD_SetConfig+0x56>
        pdev->dev_config = cfgidx;
 8006eee:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	23fe      	movs	r3, #254	; 0xfe
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	54c2      	strb	r2, [r0, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006ef8:	f7ff fd93 	bl	8006a22 <USBD_SetClassConfig>
 8006efc:	2802      	cmp	r0, #2
 8006efe:	d003      	beq.n	8006f08 <USBD_SetConfig+0x4c>
        USBD_CtlSendStatus(pdev);
 8006f00:	0020      	movs	r0, r4
 8006f02:	f000 f9b1 	bl	8007268 <USBD_CtlSendStatus>
 8006f06:	e7ef      	b.n	8006ee8 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8006f08:	0029      	movs	r1, r5
 8006f0a:	0020      	movs	r0, r4
 8006f0c:	f7ff feed 	bl	8006cea <USBD_CtlError>
          return;
 8006f10:	e7ea      	b.n	8006ee8 <USBD_SetConfig+0x2c>
         USBD_CtlSendStatus(pdev);
 8006f12:	f000 f9a9 	bl	8007268 <USBD_CtlSendStatus>
 8006f16:	e7e7      	b.n	8006ee8 <USBD_SetConfig+0x2c>
      if (cfgidx == 0) 
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d011      	beq.n	8006f40 <USBD_SetConfig+0x84>
      else  if (cfgidx != pdev->dev_config) 
 8006f1c:	6843      	ldr	r3, [r0, #4]
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d01e      	beq.n	8006f60 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006f22:	b2d9      	uxtb	r1, r3
 8006f24:	f7ff fd8d 	bl	8006a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <USBD_SetConfig+0xac>)
 8006f2a:	7819      	ldrb	r1, [r3, #0]
 8006f2c:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006f2e:	0020      	movs	r0, r4
 8006f30:	f7ff fd77 	bl	8006a22 <USBD_SetClassConfig>
 8006f34:	2802      	cmp	r0, #2
 8006f36:	d00e      	beq.n	8006f56 <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 8006f38:	0020      	movs	r0, r4
 8006f3a:	f000 f995 	bl	8007268 <USBD_CtlSendStatus>
 8006f3e:	e7d3      	b.n	8006ee8 <USBD_SetConfig+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f40:	2202      	movs	r2, #2
 8006f42:	23fe      	movs	r3, #254	; 0xfe
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	54c2      	strb	r2, [r0, r3]
        pdev->dev_config = cfgidx;          
 8006f48:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8006f4a:	f7ff fd7a 	bl	8006a42 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006f4e:	0020      	movs	r0, r4
 8006f50:	f000 f98a 	bl	8007268 <USBD_CtlSendStatus>
 8006f54:	e7c8      	b.n	8006ee8 <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 8006f56:	0029      	movs	r1, r5
 8006f58:	0020      	movs	r0, r4
 8006f5a:	f7ff fec6 	bl	8006cea <USBD_CtlError>
          return;
 8006f5e:	e7c3      	b.n	8006ee8 <USBD_SetConfig+0x2c>
        USBD_CtlSendStatus(pdev);
 8006f60:	f000 f982 	bl	8007268 <USBD_CtlSendStatus>
 8006f64:	e7c0      	b.n	8006ee8 <USBD_SetConfig+0x2c>
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	20000121 	.word	0x20000121

08006f6c <USBD_GetConfig>:
{
 8006f6c:	b510      	push	{r4, lr}
  if (req->wLength != 1) 
 8006f6e:	88cb      	ldrh	r3, [r1, #6]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d109      	bne.n	8006f88 <USBD_GetConfig+0x1c>
    switch (pdev->dev_state )  
 8006f74:	23fe      	movs	r3, #254	; 0xfe
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	5cc3      	ldrb	r3, [r0, r3]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d007      	beq.n	8006f8e <USBD_GetConfig+0x22>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d00d      	beq.n	8006f9e <USBD_GetConfig+0x32>
       USBD_CtlError(pdev , req);
 8006f82:	f7ff feb2 	bl	8006cea <USBD_CtlError>
}
 8006f86:	e001      	b.n	8006f8c <USBD_GetConfig+0x20>
     USBD_CtlError(pdev , req);
 8006f88:	f7ff feaf 	bl	8006cea <USBD_CtlError>
}
 8006f8c:	bd10      	pop	{r4, pc}
      pdev->dev_default_config = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006f92:	0001      	movs	r1, r0
 8006f94:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 8006f96:	2201      	movs	r2, #1
 8006f98:	f000 f938 	bl	800720c <USBD_CtlSendData>
      break;
 8006f9c:	e7f6      	b.n	8006f8c <USBD_GetConfig+0x20>
                        (uint8_t *)&pdev->dev_config,
 8006f9e:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f000 f933 	bl	800720c <USBD_CtlSendData>
      break;
 8006fa6:	e7f1      	b.n	8006f8c <USBD_GetConfig+0x20>

08006fa8 <USBD_GetStatus>:
{
 8006fa8:	b510      	push	{r4, lr}
  switch (pdev->dev_state) 
 8006faa:	23fe      	movs	r3, #254	; 0xfe
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	5cc3      	ldrb	r3, [r0, r3]
 8006fb0:	3b02      	subs	r3, #2
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d80e      	bhi.n	8006fd6 <USBD_GetStatus+0x2e>
    pdev->dev_config_status = 0;                                   
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8006fbc:	2381      	movs	r3, #129	; 0x81
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	58c3      	ldr	r3, [r0, r3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <USBD_GetStatus+0x22>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 8006fca:	0001      	movs	r1, r0
 8006fcc:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f000 f91c 	bl	800720c <USBD_CtlSendData>
}
 8006fd4:	bd10      	pop	{r4, pc}
    USBD_CtlError(pdev , req);                        
 8006fd6:	f7ff fe88 	bl	8006cea <USBD_CtlError>
}
 8006fda:	e7fb      	b.n	8006fd4 <USBD_GetStatus+0x2c>

08006fdc <USBD_ClrFeature>:
{
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	0004      	movs	r4, r0
  switch (pdev->dev_state)
 8006fe0:	23fe      	movs	r3, #254	; 0xfe
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	5cc3      	ldrb	r3, [r0, r3]
 8006fe6:	3b02      	subs	r3, #2
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d80f      	bhi.n	800700e <USBD_ClrFeature+0x32>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006fee:	884b      	ldrh	r3, [r1, #2]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d000      	beq.n	8006ff6 <USBD_ClrFeature+0x1a>
}
 8006ff4:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2381      	movs	r3, #129	; 0x81
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 8006ffe:	3310      	adds	r3, #16
 8007000:	58c3      	ldr	r3, [r0, r3]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007006:	0020      	movs	r0, r4
 8007008:	f000 f92e 	bl	8007268 <USBD_CtlSendStatus>
 800700c:	e7f2      	b.n	8006ff4 <USBD_ClrFeature+0x18>
     USBD_CtlError(pdev , req);
 800700e:	f7ff fe6c 	bl	8006cea <USBD_CtlError>
}
 8007012:	e7ef      	b.n	8006ff4 <USBD_ClrFeature+0x18>

08007014 <USBD_StdDevReq>:
{
 8007014:	b510      	push	{r4, lr}
  switch (req->bRequest) 
 8007016:	784b      	ldrb	r3, [r1, #1]
 8007018:	2b09      	cmp	r3, #9
 800701a:	d819      	bhi.n	8007050 <USBD_StdDevReq+0x3c>
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4a0e      	ldr	r2, [pc, #56]	; (8007058 <USBD_StdDevReq+0x44>)
 8007020:	58d3      	ldr	r3, [r2, r3]
 8007022:	469f      	mov	pc, r3
    USBD_GetDescriptor (pdev, req) ;
 8007024:	f7ff fe6c 	bl	8006d00 <USBD_GetDescriptor>
}
 8007028:	2000      	movs	r0, #0
 800702a:	bd10      	pop	{r4, pc}
    USBD_SetAddress(pdev, req);
 800702c:	f7ff ff1a 	bl	8006e64 <USBD_SetAddress>
    break;
 8007030:	e7fa      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_SetConfig (pdev , req);
 8007032:	f7ff ff43 	bl	8006ebc <USBD_SetConfig>
    break;
 8007036:	e7f7      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_GetConfig (pdev , req);
 8007038:	f7ff ff98 	bl	8006f6c <USBD_GetConfig>
    break;
 800703c:	e7f4      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_GetStatus (pdev , req);
 800703e:	f7ff ffb3 	bl	8006fa8 <USBD_GetStatus>
    break;
 8007042:	e7f1      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_SetFeature (pdev , req);    
 8007044:	f7ff fe2b 	bl	8006c9e <USBD_SetFeature>
    break;
 8007048:	e7ee      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_ClrFeature (pdev , req);
 800704a:	f7ff ffc7 	bl	8006fdc <USBD_ClrFeature>
    break;
 800704e:	e7eb      	b.n	8007028 <USBD_StdDevReq+0x14>
    USBD_CtlError(pdev , req);
 8007050:	f7ff fe4b 	bl	8006cea <USBD_CtlError>
    break;
 8007054:	e7e8      	b.n	8007028 <USBD_StdDevReq+0x14>
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	08007e10 	.word	0x08007e10

0800705c <USBD_StdItfReq>:
{
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	0004      	movs	r4, r0
 8007060:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8007062:	23fe      	movs	r3, #254	; 0xfe
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	5cc3      	ldrb	r3, [r0, r3]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d112      	bne.n	8007092 <USBD_StdItfReq+0x36>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800706c:	790b      	ldrb	r3, [r1, #4]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d903      	bls.n	800707a <USBD_StdItfReq+0x1e>
       USBD_CtlError(pdev , req);
 8007072:	f7ff fe3a 	bl	8006cea <USBD_CtlError>
}
 8007076:	2000      	movs	r0, #0
 8007078:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup (pdev, req); 
 800707a:	2385      	movs	r3, #133	; 0x85
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	58c3      	ldr	r3, [r0, r3]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007084:	88eb      	ldrh	r3, [r5, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f5      	bne.n	8007076 <USBD_StdItfReq+0x1a>
         USBD_CtlSendStatus(pdev);
 800708a:	0020      	movs	r0, r4
 800708c:	f000 f8ec 	bl	8007268 <USBD_CtlSendStatus>
 8007090:	e7f1      	b.n	8007076 <USBD_StdItfReq+0x1a>
     USBD_CtlError(pdev , req);
 8007092:	f7ff fe2a 	bl	8006cea <USBD_CtlError>
    break;
 8007096:	e7ee      	b.n	8007076 <USBD_StdItfReq+0x1a>

08007098 <USBD_StdEPReq>:
{
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	0005      	movs	r5, r0
 800709c:	000c      	movs	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800709e:	888a      	ldrh	r2, [r1, #4]
 80070a0:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 80070a2:	7820      	ldrb	r0, [r4, #0]
 80070a4:	2360      	movs	r3, #96	; 0x60
 80070a6:	4003      	ands	r3, r0
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d012      	beq.n	80070d2 <USBD_StdEPReq+0x3a>
  switch (req->bRequest) 
 80070ac:	7863      	ldrb	r3, [r4, #1]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d035      	beq.n	800711e <USBD_StdEPReq+0x86>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d05b      	beq.n	800716e <USBD_StdEPReq+0xd6>
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d112      	bne.n	80070e0 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 80070ba:	33fa      	adds	r3, #250	; 0xfa
 80070bc:	33ff      	adds	r3, #255	; 0xff
 80070be:	5ceb      	ldrb	r3, [r5, r3]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d00f      	beq.n	80070e4 <USBD_StdEPReq+0x4c>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d015      	beq.n	80070f4 <USBD_StdEPReq+0x5c>
      USBD_CtlError(pdev , req);
 80070c8:	0021      	movs	r1, r4
 80070ca:	0028      	movs	r0, r5
 80070cc:	f7ff fe0d 	bl	8006cea <USBD_CtlError>
      break;    
 80070d0:	e006      	b.n	80070e0 <USBD_StdEPReq+0x48>
    pdev->pClass->Setup (pdev, req);
 80070d2:	33f5      	adds	r3, #245	; 0xf5
 80070d4:	33ff      	adds	r3, #255	; 0xff
 80070d6:	58eb      	ldr	r3, [r5, r3]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	0021      	movs	r1, r4
 80070dc:	0028      	movs	r0, r5
 80070de:	4798      	blx	r3
}
 80070e0:	2000      	movs	r0, #0
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d0fb      	beq.n	80070e0 <USBD_StdEPReq+0x48>
 80070e8:	2980      	cmp	r1, #128	; 0x80
 80070ea:	d0f9      	beq.n	80070e0 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 80070ec:	0028      	movs	r0, r5
 80070ee:	f000 faa1 	bl	8007634 <USBD_LL_StallEP>
 80070f2:	e7f5      	b.n	80070e0 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80070f4:	8863      	ldrh	r3, [r4, #2]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <USBD_StdEPReq+0x70>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d004      	beq.n	8007108 <USBD_StdEPReq+0x70>
 80070fe:	2980      	cmp	r1, #128	; 0x80
 8007100:	d002      	beq.n	8007108 <USBD_StdEPReq+0x70>
          USBD_LL_StallEP(pdev , ep_addr);
 8007102:	0028      	movs	r0, r5
 8007104:	f000 fa96 	bl	8007634 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8007108:	2385      	movs	r3, #133	; 0x85
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	58eb      	ldr	r3, [r5, r3]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	0021      	movs	r1, r4
 8007112:	0028      	movs	r0, r5
 8007114:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007116:	0028      	movs	r0, r5
 8007118:	f000 f8a6 	bl	8007268 <USBD_CtlSendStatus>
      break;
 800711c:	e7e0      	b.n	80070e0 <USBD_StdEPReq+0x48>
    switch (pdev->dev_state) 
 800711e:	23fe      	movs	r3, #254	; 0xfe
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	5ceb      	ldrb	r3, [r5, r3]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d006      	beq.n	8007136 <USBD_StdEPReq+0x9e>
 8007128:	2b03      	cmp	r3, #3
 800712a:	d00c      	beq.n	8007146 <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 800712c:	0021      	movs	r1, r4
 800712e:	0028      	movs	r0, r5
 8007130:	f7ff fddb 	bl	8006cea <USBD_CtlError>
      break;    
 8007134:	e7d4      	b.n	80070e0 <USBD_StdEPReq+0x48>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007136:	2900      	cmp	r1, #0
 8007138:	d0d2      	beq.n	80070e0 <USBD_StdEPReq+0x48>
 800713a:	2980      	cmp	r1, #128	; 0x80
 800713c:	d0d0      	beq.n	80070e0 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 800713e:	0028      	movs	r0, r5
 8007140:	f000 fa78 	bl	8007634 <USBD_LL_StallEP>
 8007144:	e7cc      	b.n	80070e0 <USBD_StdEPReq+0x48>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007146:	8863      	ldrh	r3, [r4, #2]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1c9      	bne.n	80070e0 <USBD_StdEPReq+0x48>
        if ((ep_addr & 0x7F) != 0x00) 
 800714c:	064b      	lsls	r3, r1, #25
 800714e:	d103      	bne.n	8007158 <USBD_StdEPReq+0xc0>
        USBD_CtlSendStatus(pdev);
 8007150:	0028      	movs	r0, r5
 8007152:	f000 f889 	bl	8007268 <USBD_CtlSendStatus>
 8007156:	e7c3      	b.n	80070e0 <USBD_StdEPReq+0x48>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007158:	0028      	movs	r0, r5
 800715a:	f000 fa74 	bl	8007646 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800715e:	2385      	movs	r3, #133	; 0x85
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	58eb      	ldr	r3, [r5, r3]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	0021      	movs	r1, r4
 8007168:	0028      	movs	r0, r5
 800716a:	4798      	blx	r3
 800716c:	e7f0      	b.n	8007150 <USBD_StdEPReq+0xb8>
    switch (pdev->dev_state) 
 800716e:	23fe      	movs	r3, #254	; 0xfe
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	5ceb      	ldrb	r3, [r5, r3]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d006      	beq.n	8007186 <USBD_StdEPReq+0xee>
 8007178:	2b03      	cmp	r3, #3
 800717a:	d00a      	beq.n	8007192 <USBD_StdEPReq+0xfa>
      USBD_CtlError(pdev , req);
 800717c:	0021      	movs	r1, r4
 800717e:	0028      	movs	r0, r5
 8007180:	f7ff fdb3 	bl	8006cea <USBD_CtlError>
      break;
 8007184:	e7ac      	b.n	80070e0 <USBD_StdEPReq+0x48>
      if ((ep_addr & 0x7F) != 0x00) 
 8007186:	064b      	lsls	r3, r1, #25
 8007188:	d0aa      	beq.n	80070e0 <USBD_StdEPReq+0x48>
        USBD_LL_StallEP(pdev , ep_addr);
 800718a:	0028      	movs	r0, r5
 800718c:	f000 fa52 	bl	8007634 <USBD_LL_StallEP>
 8007190:	e7a6      	b.n	80070e0 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007192:	0613      	lsls	r3, r2, #24
 8007194:	d412      	bmi.n	80071bc <USBD_StdEPReq+0x124>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007196:	247f      	movs	r4, #127	; 0x7f
 8007198:	400c      	ands	r4, r1
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800719a:	3410      	adds	r4, #16
 800719c:	0124      	lsls	r4, r4, #4
 800719e:	192c      	adds	r4, r5, r4
 80071a0:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80071a2:	0028      	movs	r0, r5
 80071a4:	f000 fa58 	bl	8007658 <USBD_LL_IsStallEP>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d00e      	beq.n	80071ca <USBD_StdEPReq+0x132>
        pep->status = 0x0001;     
 80071ac:	2301      	movs	r3, #1
 80071ae:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80071b0:	2202      	movs	r2, #2
 80071b2:	0021      	movs	r1, r4
 80071b4:	0028      	movs	r0, r5
 80071b6:	f000 f829 	bl	800720c <USBD_CtlSendData>
      break;
 80071ba:	e791      	b.n	80070e0 <USBD_StdEPReq+0x48>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80071bc:	247f      	movs	r4, #127	; 0x7f
 80071be:	400c      	ands	r4, r1
 80071c0:	3401      	adds	r4, #1
 80071c2:	0124      	lsls	r4, r4, #4
 80071c4:	192c      	adds	r4, r5, r4
 80071c6:	3404      	adds	r4, #4
 80071c8:	e7eb      	b.n	80071a2 <USBD_StdEPReq+0x10a>
        pep->status = 0x0000;  
 80071ca:	2300      	movs	r3, #0
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	e7ef      	b.n	80071b0 <USBD_StdEPReq+0x118>

080071d0 <USBD_GetString>:
{
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	0004      	movs	r4, r0
 80071d4:	000d      	movs	r5, r1
 80071d6:	0016      	movs	r6, r2
  if (desc != NULL) 
 80071d8:	2800      	cmp	r0, #0
 80071da:	d016      	beq.n	800720a <USBD_GetString+0x3a>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80071dc:	f7ff fd55 	bl	8006c8a <USBD_GetLen>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *len;
 80071e8:	702b      	strb	r3, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80071ea:	2303      	movs	r3, #3
 80071ec:	706b      	strb	r3, [r5, #1]
 80071ee:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 80071f0:	e008      	b.n	8007204 <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	3401      	adds	r4, #1
 80071f8:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 80071fa:	3302      	adds	r3, #2
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	18aa      	adds	r2, r5, r2
 8007200:	2100      	movs	r1, #0
 8007202:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0') 
 8007204:	7821      	ldrb	r1, [r4, #0]
 8007206:	2900      	cmp	r1, #0
 8007208:	d1f3      	bne.n	80071f2 <USBD_GetString+0x22>
}
 800720a:	bd70      	pop	{r4, r5, r6, pc}

0800720c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800720c:	b510      	push	{r4, lr}
 800720e:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007210:	2402      	movs	r4, #2
 8007212:	22fa      	movs	r2, #250	; 0xfa
 8007214:	0052      	lsls	r2, r2, #1
 8007216:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8007218:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800721a:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800721c:	000a      	movs	r2, r1
 800721e:	2100      	movs	r1, #0
 8007220:	f000 fa3d 	bl	800769e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007224:	2000      	movs	r0, #0
 8007226:	bd10      	pop	{r4, pc}

08007228 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007228:	b510      	push	{r4, lr}
 800722a:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800722c:	000a      	movs	r2, r1
 800722e:	2100      	movs	r1, #0
 8007230:	f000 fa35 	bl	800769e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007234:	2000      	movs	r0, #0
 8007236:	bd10      	pop	{r4, pc}

08007238 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007238:	b510      	push	{r4, lr}
 800723a:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800723c:	2403      	movs	r4, #3
 800723e:	22fa      	movs	r2, #250	; 0xfa
 8007240:	0052      	lsls	r2, r2, #1
 8007242:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8007244:	3aec      	subs	r2, #236	; 0xec
 8007246:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8007248:	3204      	adds	r2, #4
 800724a:	5083      	str	r3, [r0, r2]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800724c:	000a      	movs	r2, r1
 800724e:	2100      	movs	r1, #0
 8007250:	f000 fa2e 	bl	80076b0 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8007254:	2000      	movs	r0, #0
 8007256:	bd10      	pop	{r4, pc}

08007258 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007258:	b510      	push	{r4, lr}
 800725a:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800725c:	000a      	movs	r2, r1
 800725e:	2100      	movs	r1, #0
 8007260:	f000 fa26 	bl	80076b0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007264:	2000      	movs	r0, #0
 8007266:	bd10      	pop	{r4, pc}

08007268 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007268:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800726a:	2204      	movs	r2, #4
 800726c:	23fa      	movs	r3, #250	; 0xfa
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007272:	2300      	movs	r3, #0
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	f000 fa11 	bl	800769e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800727c:	2000      	movs	r0, #0
 800727e:	bd10      	pop	{r4, pc}

08007280 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007280:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007282:	2205      	movs	r2, #5
 8007284:	23fa      	movs	r3, #250	; 0xfa
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800728a:	2300      	movs	r3, #0
 800728c:	2200      	movs	r2, #0
 800728e:	2100      	movs	r1, #0
 8007290:	f000 fa0e 	bl	80076b0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8007294:	2000      	movs	r0, #0
 8007296:	bd10      	pop	{r4, pc}

08007298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007298:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800729a:	2200      	movs	r2, #0
 800729c:	4911      	ldr	r1, [pc, #68]	; (80072e4 <MX_USB_DEVICE_Init+0x4c>)
 800729e:	4812      	ldr	r0, [pc, #72]	; (80072e8 <MX_USB_DEVICE_Init+0x50>)
 80072a0:	f7ff fb95 	bl	80069ce <USBD_Init>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d111      	bne.n	80072cc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80072a8:	4910      	ldr	r1, [pc, #64]	; (80072ec <MX_USB_DEVICE_Init+0x54>)
 80072aa:	480f      	ldr	r0, [pc, #60]	; (80072e8 <MX_USB_DEVICE_Init+0x50>)
 80072ac:	f7ff fbab 	bl	8006a06 <USBD_RegisterClass>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d10e      	bne.n	80072d2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80072b4:	490e      	ldr	r1, [pc, #56]	; (80072f0 <MX_USB_DEVICE_Init+0x58>)
 80072b6:	480c      	ldr	r0, [pc, #48]	; (80072e8 <MX_USB_DEVICE_Init+0x50>)
 80072b8:	f7ff fb80 	bl	80069bc <USBD_CUSTOM_HID_RegisterInterface>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d10b      	bne.n	80072d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072c0:	4809      	ldr	r0, [pc, #36]	; (80072e8 <MX_USB_DEVICE_Init+0x50>)
 80072c2:	f7ff fba9 	bl	8006a18 <USBD_Start>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d109      	bne.n	80072de <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80072cc:	f7fb ff52 	bl	8003174 <Error_Handler>
 80072d0:	e7ea      	b.n	80072a8 <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 80072d2:	f7fb ff4f 	bl	8003174 <Error_Handler>
 80072d6:	e7ed      	b.n	80072b4 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 80072d8:	f7fb ff4c 	bl	8003174 <Error_Handler>
 80072dc:	e7f0      	b.n	80072c0 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 80072de:	f7fb ff49 	bl	8003174 <Error_Handler>
}
 80072e2:	e7f2      	b.n	80072ca <MX_USB_DEVICE_Init+0x32>
 80072e4:	200000b4 	.word	0x200000b4
 80072e8:	2000041c 	.word	0x2000041c
 80072ec:	20000004 	.word	0x20000004
 80072f0:	200000a4 	.word	0x200000a4

080072f4 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80072f4:	2000      	movs	r0, #0
 80072f6:	4770      	bx	lr

080072f8 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 80072f8:	2000      	movs	r0, #0
 80072fa:	4770      	bx	lr

080072fc <CUSTOM_HID_OutEvent_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072fc:	2386      	movs	r3, #134	; 0x86
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <CUSTOM_HID_OutEvent_FS+0x28>)
 8007302:	58d3      	ldr	r3, [r2, r3]
	switch (hhid->Report_buf[0])
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d106      	bne.n	8007318 <CUSTOM_HID_OutEvent_FS+0x1c>
	{
		case 0x80:
		{
			if(usbOn == 0){
 800730a:	4b07      	ldr	r3, [pc, #28]	; (8007328 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <CUSTOM_HID_OutEvent_FS+0x20>
				usbOn = 1;
			}
			else{
				usbOn = 0;
 8007312:	2200      	movs	r2, #0
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007316:	701a      	strb	r2, [r3, #0]
//		break;

	}
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007318:	2000      	movs	r0, #0
 800731a:	4770      	bx	lr
				usbOn = 1;
 800731c:	2201      	movs	r2, #1
 800731e:	4b02      	ldr	r3, [pc, #8]	; (8007328 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	e7f9      	b.n	8007318 <CUSTOM_HID_OutEvent_FS+0x1c>
 8007324:	2000041c 	.word	0x2000041c
 8007328:	20000120 	.word	0x20000120

0800732c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800732c:	2312      	movs	r3, #18
 800732e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007330:	4800      	ldr	r0, [pc, #0]	; (8007334 <USBD_FS_DeviceDescriptor+0x8>)
 8007332:	4770      	bx	lr
 8007334:	200000d0 	.word	0x200000d0

08007338 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8007338:	2304      	movs	r3, #4
 800733a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800733c:	4800      	ldr	r0, [pc, #0]	; (8007340 <USBD_FS_LangIDStrDescriptor+0x8>)
 800733e:	4770      	bx	lr
 8007340:	200000e4 	.word	0x200000e4

08007344 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007344:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007346:	2300      	movs	r3, #0
 8007348:	e00a      	b.n	8007360 <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800734a:	005d      	lsls	r5, r3, #1
 800734c:	3437      	adds	r4, #55	; 0x37
 800734e:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 8007350:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007352:	005c      	lsls	r4, r3, #1
 8007354:	3401      	adds	r4, #1
 8007356:	190c      	adds	r4, r1, r4
 8007358:	2500      	movs	r5, #0
 800735a:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 800735c:	3301      	adds	r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4293      	cmp	r3, r2
 8007362:	d206      	bcs.n	8007372 <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 8007364:	0f04      	lsrs	r4, r0, #28
 8007366:	2c09      	cmp	r4, #9
 8007368:	d8ef      	bhi.n	800734a <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 800736a:	005d      	lsls	r5, r3, #1
 800736c:	3430      	adds	r4, #48	; 0x30
 800736e:	554c      	strb	r4, [r1, r5]
 8007370:	e7ee      	b.n	8007350 <IntToUnicode+0xc>
  }
}
 8007372:	bd30      	pop	{r4, r5, pc}

08007374 <Get_SerialNum>:
{
 8007374:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <Get_SerialNum+0x30>)
 8007378:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <Get_SerialNum+0x34>)
 800737c:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <Get_SerialNum+0x38>)
 8007380:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8007382:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8007384:	2800      	cmp	r0, #0
 8007386:	d100      	bne.n	800738a <Get_SerialNum+0x16>
}
 8007388:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800738a:	4c09      	ldr	r4, [pc, #36]	; (80073b0 <Get_SerialNum+0x3c>)
 800738c:	1ca1      	adds	r1, r4, #2
 800738e:	2208      	movs	r2, #8
 8007390:	f7ff ffd8 	bl	8007344 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007394:	0021      	movs	r1, r4
 8007396:	3112      	adds	r1, #18
 8007398:	2204      	movs	r2, #4
 800739a:	0028      	movs	r0, r5
 800739c:	f7ff ffd2 	bl	8007344 <IntToUnicode>
}
 80073a0:	e7f2      	b.n	8007388 <Get_SerialNum+0x14>
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	1ffff7ac 	.word	0x1ffff7ac
 80073a8:	1ffff7b0 	.word	0x1ffff7b0
 80073ac:	1ffff7b4 	.word	0x1ffff7b4
 80073b0:	200000e8 	.word	0x200000e8

080073b4 <USBD_FS_SerialStrDescriptor>:
{
 80073b4:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80073b6:	231a      	movs	r3, #26
 80073b8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80073ba:	f7ff ffdb 	bl	8007374 <Get_SerialNum>
}
 80073be:	4801      	ldr	r0, [pc, #4]	; (80073c4 <USBD_FS_SerialStrDescriptor+0x10>)
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	200000e8 	.word	0x200000e8

080073c8 <USBD_FS_ProductStrDescriptor>:
{
 80073c8:	b510      	push	{r4, lr}
 80073ca:	000a      	movs	r2, r1
  if(speed == 0)
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d005      	beq.n	80073dc <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073d0:	4905      	ldr	r1, [pc, #20]	; (80073e8 <USBD_FS_ProductStrDescriptor+0x20>)
 80073d2:	4806      	ldr	r0, [pc, #24]	; (80073ec <USBD_FS_ProductStrDescriptor+0x24>)
 80073d4:	f7ff fefc 	bl	80071d0 <USBD_GetString>
}
 80073d8:	4803      	ldr	r0, [pc, #12]	; (80073e8 <USBD_FS_ProductStrDescriptor+0x20>)
 80073da:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073dc:	4902      	ldr	r1, [pc, #8]	; (80073e8 <USBD_FS_ProductStrDescriptor+0x20>)
 80073de:	4803      	ldr	r0, [pc, #12]	; (80073ec <USBD_FS_ProductStrDescriptor+0x24>)
 80073e0:	f7ff fef6 	bl	80071d0 <USBD_GetString>
 80073e4:	e7f8      	b.n	80073d8 <USBD_FS_ProductStrDescriptor+0x10>
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	20000640 	.word	0x20000640
 80073ec:	08007e74 	.word	0x08007e74

080073f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80073f0:	b510      	push	{r4, lr}
 80073f2:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073f4:	4c03      	ldr	r4, [pc, #12]	; (8007404 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80073f6:	0021      	movs	r1, r4
 80073f8:	4803      	ldr	r0, [pc, #12]	; (8007408 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80073fa:	f7ff fee9 	bl	80071d0 <USBD_GetString>
}
 80073fe:	0020      	movs	r0, r4
 8007400:	bd10      	pop	{r4, pc}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	20000640 	.word	0x20000640
 8007408:	08007e64 	.word	0x08007e64

0800740c <USBD_FS_ConfigStrDescriptor>:
{
 800740c:	b510      	push	{r4, lr}
 800740e:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007410:	2800      	cmp	r0, #0
 8007412:	d005      	beq.n	8007420 <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007414:	4905      	ldr	r1, [pc, #20]	; (800742c <USBD_FS_ConfigStrDescriptor+0x20>)
 8007416:	4806      	ldr	r0, [pc, #24]	; (8007430 <USBD_FS_ConfigStrDescriptor+0x24>)
 8007418:	f7ff feda 	bl	80071d0 <USBD_GetString>
}
 800741c:	4803      	ldr	r0, [pc, #12]	; (800742c <USBD_FS_ConfigStrDescriptor+0x20>)
 800741e:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007420:	4902      	ldr	r1, [pc, #8]	; (800742c <USBD_FS_ConfigStrDescriptor+0x20>)
 8007422:	4803      	ldr	r0, [pc, #12]	; (8007430 <USBD_FS_ConfigStrDescriptor+0x24>)
 8007424:	f7ff fed4 	bl	80071d0 <USBD_GetString>
 8007428:	e7f8      	b.n	800741c <USBD_FS_ConfigStrDescriptor+0x10>
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	20000640 	.word	0x20000640
 8007430:	08007e38 	.word	0x08007e38

08007434 <USBD_FS_InterfaceStrDescriptor>:
{
 8007434:	b510      	push	{r4, lr}
 8007436:	000a      	movs	r2, r1
  if(speed == 0)
 8007438:	2800      	cmp	r0, #0
 800743a:	d005      	beq.n	8007448 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800743c:	4905      	ldr	r1, [pc, #20]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800743e:	4806      	ldr	r0, [pc, #24]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x24>)
 8007440:	f7ff fec6 	bl	80071d0 <USBD_GetString>
}
 8007444:	4803      	ldr	r0, [pc, #12]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007446:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007448:	4902      	ldr	r1, [pc, #8]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800744a:	4803      	ldr	r0, [pc, #12]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x24>)
 800744c:	f7ff fec0 	bl	80071d0 <USBD_GetString>
 8007450:	e7f8      	b.n	8007444 <USBD_FS_InterfaceStrDescriptor+0x10>
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	20000640 	.word	0x20000640
 8007458:	08007e4c 	.word	0x08007e4c

0800745c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800745c:	2800      	cmp	r0, #0
 800745e:	d003      	beq.n	8007468 <USBD_Get_USB_Status+0xc>
 8007460:	2802      	cmp	r0, #2
 8007462:	d003      	beq.n	800746c <USBD_Get_USB_Status+0x10>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007464:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007466:	4770      	bx	lr
      usb_status = USBD_OK;
 8007468:	2000      	movs	r0, #0
 800746a:	e7fc      	b.n	8007466 <USBD_Get_USB_Status+0xa>
      usb_status = USBD_BUSY;
 800746c:	2001      	movs	r0, #1
    break;
 800746e:	e7fa      	b.n	8007466 <USBD_Get_USB_Status+0xa>

08007470 <SystemClockConfig_Resume>:
{
 8007470:	b510      	push	{r4, lr}
  SystemClock_Config();
 8007472:	f7fb fdf3 	bl	800305c <SystemClock_Config>
}
 8007476:	bd10      	pop	{r4, pc}

08007478 <HAL_PCD_MspInit>:
{
 8007478:	b500      	push	{lr}
 800747a:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 800747c:	6802      	ldr	r2, [r0, #0]
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <HAL_PCD_MspInit+0x38>)
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_PCD_MspInit+0x10>
}
 8007484:	b003      	add	sp, #12
 8007486:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8007488:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <HAL_PCD_MspInit+0x3c>)
 800748a:	69d1      	ldr	r1, [r2, #28]
 800748c:	2080      	movs	r0, #128	; 0x80
 800748e:	0400      	lsls	r0, r0, #16
 8007490:	4301      	orrs	r1, r0
 8007492:	61d1      	str	r1, [r2, #28]
 8007494:	69d3      	ldr	r3, [r2, #28]
 8007496:	4003      	ands	r3, r0
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800749c:	2200      	movs	r2, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	201f      	movs	r0, #31
 80074a2:	f7fc f80f 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80074a6:	201f      	movs	r0, #31
 80074a8:	f7fc f83e 	bl	8003528 <HAL_NVIC_EnableIRQ>
}
 80074ac:	e7ea      	b.n	8007484 <HAL_PCD_MspInit+0xc>
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	40005c00 	.word	0x40005c00
 80074b4:	40021000 	.word	0x40021000

080074b8 <HAL_PCD_SetupStageCallback>:
{
 80074b8:	b510      	push	{r4, lr}
 80074ba:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074bc:	2387      	movs	r3, #135	; 0x87
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	58c0      	ldr	r0, [r0, r3]
 80074c2:	31ed      	adds	r1, #237	; 0xed
 80074c4:	31ff      	adds	r1, #255	; 0xff
 80074c6:	f7ff fac5 	bl	8006a54 <USBD_LL_SetupStage>
}
 80074ca:	bd10      	pop	{r4, pc}

080074cc <HAL_PCD_DataOutStageCallback>:
{
 80074cc:	b510      	push	{r4, lr}
 80074ce:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074d0:	2287      	movs	r2, #135	; 0x87
 80074d2:	0092      	lsls	r2, r2, #2
 80074d4:	5880      	ldr	r0, [r0, r2]
 80074d6:	00ca      	lsls	r2, r1, #3
 80074d8:	1a52      	subs	r2, r2, r1
 80074da:	0094      	lsls	r4, r2, #2
 80074dc:	191b      	adds	r3, r3, r4
 80074de:	3319      	adds	r3, #25
 80074e0:	33ff      	adds	r3, #255	; 0xff
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	f7ff faea 	bl	8006abc <USBD_LL_DataOutStage>
}
 80074e8:	bd10      	pop	{r4, pc}

080074ea <HAL_PCD_DataInStageCallback>:
{
 80074ea:	b510      	push	{r4, lr}
 80074ec:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074ee:	2287      	movs	r2, #135	; 0x87
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	5880      	ldr	r0, [r0, r2]
 80074f4:	00ca      	lsls	r2, r1, #3
 80074f6:	1a52      	subs	r2, r2, r1
 80074f8:	0094      	lsls	r4, r2, #2
 80074fa:	191b      	adds	r3, r3, r4
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	f7ff fb1a 	bl	8006b36 <USBD_LL_DataInStage>
}
 8007502:	bd10      	pop	{r4, pc}

08007504 <HAL_PCD_SOFCallback>:
{
 8007504:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007506:	2387      	movs	r3, #135	; 0x87
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	58c0      	ldr	r0, [r0, r3]
 800750c:	f7ff fbad 	bl	8006c6a <USBD_LL_SOF>
}
 8007510:	bd10      	pop	{r4, pc}

08007512 <HAL_PCD_ResetCallback>:
{ 
 8007512:	b570      	push	{r4, r5, r6, lr}
 8007514:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007516:	6883      	ldr	r3, [r0, #8]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d001      	beq.n	8007520 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800751c:	f7fb fe2a 	bl	8003174 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007520:	2587      	movs	r5, #135	; 0x87
 8007522:	00ad      	lsls	r5, r5, #2
 8007524:	2101      	movs	r1, #1
 8007526:	5960      	ldr	r0, [r4, r5]
 8007528:	f7ff fb8a 	bl	8006c40 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800752c:	5960      	ldr	r0, [r4, r5]
 800752e:	f7ff fb64 	bl	8006bfa <USBD_LL_Reset>
}
 8007532:	bd70      	pop	{r4, r5, r6, pc}

08007534 <HAL_PCD_SuspendCallback>:
{
 8007534:	b510      	push	{r4, lr}
 8007536:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007538:	2387      	movs	r3, #135	; 0x87
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	58c0      	ldr	r0, [r0, r3]
 800753e:	f7ff fb82 	bl	8006c46 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007542:	69a3      	ldr	r3, [r4, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007548:	4a02      	ldr	r2, [pc, #8]	; (8007554 <HAL_PCD_SuspendCallback+0x20>)
 800754a:	6913      	ldr	r3, [r2, #16]
 800754c:	2106      	movs	r1, #6
 800754e:	430b      	orrs	r3, r1
 8007550:	6113      	str	r3, [r2, #16]
}
 8007552:	bd10      	pop	{r4, pc}
 8007554:	e000ed00 	.word	0xe000ed00

08007558 <HAL_PCD_ResumeCallback>:
{
 8007558:	b510      	push	{r4, lr}
 800755a:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 800755c:	6983      	ldr	r3, [r0, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007562:	2387      	movs	r3, #135	; 0x87
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	58e0      	ldr	r0, [r4, r3]
 8007568:	f7ff fb78 	bl	8006c5c <USBD_LL_Resume>
}
 800756c:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800756e:	4a04      	ldr	r2, [pc, #16]	; (8007580 <HAL_PCD_ResumeCallback+0x28>)
 8007570:	6913      	ldr	r3, [r2, #16]
 8007572:	2106      	movs	r1, #6
 8007574:	438b      	bics	r3, r1
 8007576:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007578:	f7ff ff7a 	bl	8007470 <SystemClockConfig_Resume>
 800757c:	e7f1      	b.n	8007562 <HAL_PCD_ResumeCallback+0xa>
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <USBD_LL_Init>:
{
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007588:	4819      	ldr	r0, [pc, #100]	; (80075f0 <USBD_LL_Init+0x6c>)
 800758a:	2387      	movs	r3, #135	; 0x87
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8007590:	3304      	adds	r3, #4
 8007592:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <USBD_LL_Init+0x70>)
 8007596:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007598:	2308      	movs	r3, #8
 800759a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800759c:	3b06      	subs	r3, #6
 800759e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075a0:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80075a6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80075a8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80075aa:	f7fc f991 	bl	80038d0 <HAL_PCD_Init>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d11b      	bne.n	80075ea <USBD_LL_Init+0x66>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80075b2:	2588      	movs	r5, #136	; 0x88
 80075b4:	00ad      	lsls	r5, r5, #2
 80075b6:	2318      	movs	r3, #24
 80075b8:	2200      	movs	r2, #0
 80075ba:	2100      	movs	r1, #0
 80075bc:	5960      	ldr	r0, [r4, r5]
 80075be:	f7fd fa99 	bl	8004af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80075c2:	2358      	movs	r3, #88	; 0x58
 80075c4:	2200      	movs	r2, #0
 80075c6:	2180      	movs	r1, #128	; 0x80
 80075c8:	5960      	ldr	r0, [r4, r5]
 80075ca:	f7fd fa93 	bl	8004af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80075ce:	2398      	movs	r3, #152	; 0x98
 80075d0:	2200      	movs	r2, #0
 80075d2:	2181      	movs	r1, #129	; 0x81
 80075d4:	5960      	ldr	r0, [r4, r5]
 80075d6:	f7fd fa8d 	bl	8004af4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80075da:	5960      	ldr	r0, [r4, r5]
 80075dc:	23d8      	movs	r3, #216	; 0xd8
 80075de:	2200      	movs	r2, #0
 80075e0:	2101      	movs	r1, #1
 80075e2:	f7fd fa87 	bl	8004af4 <HAL_PCDEx_PMAConfig>
}
 80075e6:	2000      	movs	r0, #0
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80075ea:	f7fb fdc3 	bl	8003174 <Error_Handler>
 80075ee:	e7e0      	b.n	80075b2 <USBD_LL_Init+0x2e>
 80075f0:	20000840 	.word	0x20000840
 80075f4:	40005c00 	.word	0x40005c00

080075f8 <USBD_LL_Start>:
{
 80075f8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80075fa:	2388      	movs	r3, #136	; 0x88
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	58c0      	ldr	r0, [r0, r3]
 8007600:	f7fc f9c6 	bl	8003990 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007604:	f7ff ff2a 	bl	800745c <USBD_Get_USB_Status>
}
 8007608:	bd10      	pop	{r4, pc}

0800760a <USBD_LL_OpenEP>:
{
 800760a:	b510      	push	{r4, lr}
 800760c:	0014      	movs	r4, r2
 800760e:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007610:	2388      	movs	r3, #136	; 0x88
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	58c0      	ldr	r0, [r0, r3]
 8007616:	0023      	movs	r3, r4
 8007618:	f7fc f9e2 	bl	80039e0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800761c:	f7ff ff1e 	bl	800745c <USBD_Get_USB_Status>
}
 8007620:	bd10      	pop	{r4, pc}

08007622 <USBD_LL_CloseEP>:
{
 8007622:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007624:	2388      	movs	r3, #136	; 0x88
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	58c0      	ldr	r0, [r0, r3]
 800762a:	f7fc fb83 	bl	8003d34 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800762e:	f7ff ff15 	bl	800745c <USBD_Get_USB_Status>
}
 8007632:	bd10      	pop	{r4, pc}

08007634 <USBD_LL_StallEP>:
{
 8007634:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007636:	2388      	movs	r3, #136	; 0x88
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	58c0      	ldr	r0, [r0, r3]
 800763c:	f7fc fd62 	bl	8004104 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007640:	f7ff ff0c 	bl	800745c <USBD_Get_USB_Status>
}
 8007644:	bd10      	pop	{r4, pc}

08007646 <USBD_LL_ClearStallEP>:
{
 8007646:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007648:	2388      	movs	r3, #136	; 0x88
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	58c0      	ldr	r0, [r0, r3]
 800764e:	f7fc fdbb 	bl	80041c8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007652:	f7ff ff03 	bl	800745c <USBD_Get_USB_Status>
}
 8007656:	bd10      	pop	{r4, pc}

08007658 <USBD_LL_IsStallEP>:
{
 8007658:	000a      	movs	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800765a:	2388      	movs	r3, #136	; 0x88
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8007660:	b249      	sxtb	r1, r1
 8007662:	2900      	cmp	r1, #0
 8007664:	db09      	blt.n	800767a <USBD_LL_IsStallEP+0x22>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007666:	217f      	movs	r1, #127	; 0x7f
 8007668:	4011      	ands	r1, r2
 800766a:	00ca      	lsls	r2, r1, #3
 800766c:	1a51      	subs	r1, r2, r1
 800766e:	008a      	lsls	r2, r1, #2
 8007670:	189b      	adds	r3, r3, r2
 8007672:	330b      	adds	r3, #11
 8007674:	33ff      	adds	r3, #255	; 0xff
 8007676:	7818      	ldrb	r0, [r3, #0]
}
 8007678:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800767a:	217f      	movs	r1, #127	; 0x7f
 800767c:	4011      	ands	r1, r2
 800767e:	00c8      	lsls	r0, r1, #3
 8007680:	1a41      	subs	r1, r0, r1
 8007682:	008a      	lsls	r2, r1, #2
 8007684:	189b      	adds	r3, r3, r2
 8007686:	332a      	adds	r3, #42	; 0x2a
 8007688:	7818      	ldrb	r0, [r3, #0]
 800768a:	e7f5      	b.n	8007678 <USBD_LL_IsStallEP+0x20>

0800768c <USBD_LL_SetUSBAddress>:
{
 800768c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800768e:	2388      	movs	r3, #136	; 0x88
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	58c0      	ldr	r0, [r0, r3]
 8007694:	f7fc f988 	bl	80039a8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007698:	f7ff fee0 	bl	800745c <USBD_Get_USB_Status>
}
 800769c:	bd10      	pop	{r4, pc}

0800769e <USBD_LL_Transmit>:
{
 800769e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076a0:	2488      	movs	r4, #136	; 0x88
 80076a2:	00a4      	lsls	r4, r4, #2
 80076a4:	5900      	ldr	r0, [r0, r4]
 80076a6:	f7fc fe13 	bl	80042d0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076aa:	f7ff fed7 	bl	800745c <USBD_Get_USB_Status>
}
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <USBD_LL_PrepareReceive>:
{
 80076b0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b2:	2488      	movs	r4, #136	; 0x88
 80076b4:	00a4      	lsls	r4, r4, #2
 80076b6:	5900      	ldr	r0, [r0, r4]
 80076b8:	f7fc fc24 	bl	8003f04 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076bc:	f7ff fece 	bl	800745c <USBD_Get_USB_Status>
}
 80076c0:	bd10      	pop	{r4, pc}
	...

080076c4 <USBD_static_malloc>:
}
 80076c4:	4800      	ldr	r0, [pc, #0]	; (80076c8 <USBD_static_malloc+0x4>)
 80076c6:	4770      	bx	lr
 80076c8:	20000124 	.word	0x20000124

080076cc <USBD_static_free>:
}
 80076cc:	4770      	bx	lr
	...

080076d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80076d0:	480d      	ldr	r0, [pc, #52]	; (8007708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80076d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076d4:	480d      	ldr	r0, [pc, #52]	; (800770c <LoopForever+0x6>)
  ldr r1, =_edata
 80076d6:	490e      	ldr	r1, [pc, #56]	; (8007710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80076d8:	4a0e      	ldr	r2, [pc, #56]	; (8007714 <LoopForever+0xe>)
  movs r3, #0
 80076da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076dc:	e002      	b.n	80076e4 <LoopCopyDataInit>

080076de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076e2:	3304      	adds	r3, #4

080076e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076e8:	d3f9      	bcc.n	80076de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076ea:	4a0b      	ldr	r2, [pc, #44]	; (8007718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80076ec:	4c0b      	ldr	r4, [pc, #44]	; (800771c <LoopForever+0x16>)
  movs r3, #0
 80076ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076f0:	e001      	b.n	80076f6 <LoopFillZerobss>

080076f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076f4:	3204      	adds	r2, #4

080076f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076f8:	d3fb      	bcc.n	80076f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80076fa:	f7fb fe83 	bl	8003404 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80076fe:	f000 f811 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007702:	f7fb fcd7 	bl	80030b4 <main>

08007706 <LoopForever>:

LoopForever:
    b LoopForever
 8007706:	e7fe      	b.n	8007706 <LoopForever>
  ldr   r0, =_estack
 8007708:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800770c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007710:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8007714:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 8007718:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800771c:	20000a60 	.word	0x20000a60

08007720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007720:	e7fe      	b.n	8007720 <ADC1_COMP_IRQHandler>
	...

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	2600      	movs	r6, #0
 8007728:	4d0c      	ldr	r5, [pc, #48]	; (800775c <__libc_init_array+0x38>)
 800772a:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	2600      	movs	r6, #0
 8007736:	f000 fa6d 	bl	8007c14 <_init>
 800773a:	4d0a      	ldr	r5, [pc, #40]	; (8007764 <__libc_init_array+0x40>)
 800773c:	4c0a      	ldr	r4, [pc, #40]	; (8007768 <__libc_init_array+0x44>)
 800773e:	1b64      	subs	r4, r4, r5
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	00b3      	lsls	r3, r6, #2
 800774a:	58eb      	ldr	r3, [r5, r3]
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	00b3      	lsls	r3, r6, #2
 8007754:	58eb      	ldr	r3, [r5, r3]
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08007ed0 	.word	0x08007ed0
 8007760:	08007ed0 	.word	0x08007ed0
 8007764:	08007ed0 	.word	0x08007ed0
 8007768:	08007ed4 	.word	0x08007ed4

0800776c <memcpy>:
 800776c:	2300      	movs	r3, #0
 800776e:	b510      	push	{r4, lr}
 8007770:	429a      	cmp	r2, r3
 8007772:	d100      	bne.n	8007776 <memcpy+0xa>
 8007774:	bd10      	pop	{r4, pc}
 8007776:	5ccc      	ldrb	r4, [r1, r3]
 8007778:	54c4      	strb	r4, [r0, r3]
 800777a:	3301      	adds	r3, #1
 800777c:	e7f8      	b.n	8007770 <memcpy+0x4>

0800777e <memset>:
 800777e:	0003      	movs	r3, r0
 8007780:	1882      	adds	r2, r0, r2
 8007782:	4293      	cmp	r3, r2
 8007784:	d100      	bne.n	8007788 <memset+0xa>
 8007786:	4770      	bx	lr
 8007788:	7019      	strb	r1, [r3, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	e7f9      	b.n	8007782 <memset+0x4>

0800778e <atan2>:
 800778e:	b510      	push	{r4, lr}
 8007790:	f000 f802 	bl	8007798 <__ieee754_atan2>
 8007794:	bd10      	pop	{r4, pc}
	...

08007798 <__ieee754_atan2>:
 8007798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800779a:	4254      	negs	r4, r2
 800779c:	005e      	lsls	r6, r3, #1
 800779e:	4314      	orrs	r4, r2
 80077a0:	4d48      	ldr	r5, [pc, #288]	; (80078c4 <__ieee754_atan2+0x12c>)
 80077a2:	0876      	lsrs	r6, r6, #1
 80077a4:	0fe4      	lsrs	r4, r4, #31
 80077a6:	9001      	str	r0, [sp, #4]
 80077a8:	9100      	str	r1, [sp, #0]
 80077aa:	4334      	orrs	r4, r6
 80077ac:	42ac      	cmp	r4, r5
 80077ae:	d808      	bhi.n	80077c2 <__ieee754_atan2+0x2a>
 80077b0:	4244      	negs	r4, r0
 80077b2:	004d      	lsls	r5, r1, #1
 80077b4:	4304      	orrs	r4, r0
 80077b6:	4f43      	ldr	r7, [pc, #268]	; (80078c4 <__ieee754_atan2+0x12c>)
 80077b8:	086d      	lsrs	r5, r5, #1
 80077ba:	0fe4      	lsrs	r4, r4, #31
 80077bc:	432c      	orrs	r4, r5
 80077be:	42bc      	cmp	r4, r7
 80077c0:	d903      	bls.n	80077ca <__ieee754_atan2+0x32>
 80077c2:	f7f9 faa1 	bl	8000d08 <__aeabi_dadd>
 80077c6:	b003      	add	sp, #12
 80077c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ca:	4c3f      	ldr	r4, [pc, #252]	; (80078c8 <__ieee754_atan2+0x130>)
 80077cc:	191c      	adds	r4, r3, r4
 80077ce:	4314      	orrs	r4, r2
 80077d0:	d102      	bne.n	80077d8 <__ieee754_atan2+0x40>
 80077d2:	f000 f893 	bl	80078fc <atan>
 80077d6:	e7f6      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80077d8:	179c      	asrs	r4, r3, #30
 80077da:	46a4      	mov	ip, r4
 80077dc:	2402      	movs	r4, #2
 80077de:	4667      	mov	r7, ip
 80077e0:	403c      	ands	r4, r7
 80077e2:	9f00      	ldr	r7, [sp, #0]
 80077e4:	0fff      	lsrs	r7, r7, #31
 80077e6:	433c      	orrs	r4, r7
 80077e8:	9f01      	ldr	r7, [sp, #4]
 80077ea:	432f      	orrs	r7, r5
 80077ec:	d106      	bne.n	80077fc <__ieee754_atan2+0x64>
 80077ee:	2c02      	cmp	r4, #2
 80077f0:	d02c      	beq.n	800784c <__ieee754_atan2+0xb4>
 80077f2:	2c03      	cmp	r4, #3
 80077f4:	d1e7      	bne.n	80077c6 <__ieee754_atan2+0x2e>
 80077f6:	4835      	ldr	r0, [pc, #212]	; (80078cc <__ieee754_atan2+0x134>)
 80077f8:	4935      	ldr	r1, [pc, #212]	; (80078d0 <__ieee754_atan2+0x138>)
 80077fa:	e7e4      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80077fc:	0037      	movs	r7, r6
 80077fe:	4317      	orrs	r7, r2
 8007800:	d105      	bne.n	800780e <__ieee754_atan2+0x76>
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	4831      	ldr	r0, [pc, #196]	; (80078cc <__ieee754_atan2+0x134>)
 8007806:	2b00      	cmp	r3, #0
 8007808:	da59      	bge.n	80078be <__ieee754_atan2+0x126>
 800780a:	4932      	ldr	r1, [pc, #200]	; (80078d4 <__ieee754_atan2+0x13c>)
 800780c:	e7db      	b.n	80077c6 <__ieee754_atan2+0x2e>
 800780e:	4f2d      	ldr	r7, [pc, #180]	; (80078c4 <__ieee754_atan2+0x12c>)
 8007810:	42be      	cmp	r6, r7
 8007812:	d11e      	bne.n	8007852 <__ieee754_atan2+0xba>
 8007814:	42b5      	cmp	r5, r6
 8007816:	d10e      	bne.n	8007836 <__ieee754_atan2+0x9e>
 8007818:	2c02      	cmp	r4, #2
 800781a:	d006      	beq.n	800782a <__ieee754_atan2+0x92>
 800781c:	2c03      	cmp	r4, #3
 800781e:	d007      	beq.n	8007830 <__ieee754_atan2+0x98>
 8007820:	482a      	ldr	r0, [pc, #168]	; (80078cc <__ieee754_atan2+0x134>)
 8007822:	2c01      	cmp	r4, #1
 8007824:	d149      	bne.n	80078ba <__ieee754_atan2+0x122>
 8007826:	492c      	ldr	r1, [pc, #176]	; (80078d8 <__ieee754_atan2+0x140>)
 8007828:	e7cd      	b.n	80077c6 <__ieee754_atan2+0x2e>
 800782a:	482c      	ldr	r0, [pc, #176]	; (80078dc <__ieee754_atan2+0x144>)
 800782c:	492c      	ldr	r1, [pc, #176]	; (80078e0 <__ieee754_atan2+0x148>)
 800782e:	e7ca      	b.n	80077c6 <__ieee754_atan2+0x2e>
 8007830:	482a      	ldr	r0, [pc, #168]	; (80078dc <__ieee754_atan2+0x144>)
 8007832:	492c      	ldr	r1, [pc, #176]	; (80078e4 <__ieee754_atan2+0x14c>)
 8007834:	e7c7      	b.n	80077c6 <__ieee754_atan2+0x2e>
 8007836:	2c02      	cmp	r4, #2
 8007838:	d008      	beq.n	800784c <__ieee754_atan2+0xb4>
 800783a:	2c03      	cmp	r4, #3
 800783c:	d0db      	beq.n	80077f6 <__ieee754_atan2+0x5e>
 800783e:	2000      	movs	r0, #0
 8007840:	2100      	movs	r1, #0
 8007842:	2c01      	cmp	r4, #1
 8007844:	d1bf      	bne.n	80077c6 <__ieee754_atan2+0x2e>
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	0609      	lsls	r1, r1, #24
 800784a:	e7bc      	b.n	80077c6 <__ieee754_atan2+0x2e>
 800784c:	481f      	ldr	r0, [pc, #124]	; (80078cc <__ieee754_atan2+0x134>)
 800784e:	4926      	ldr	r1, [pc, #152]	; (80078e8 <__ieee754_atan2+0x150>)
 8007850:	e7b9      	b.n	80077c6 <__ieee754_atan2+0x2e>
 8007852:	4f1c      	ldr	r7, [pc, #112]	; (80078c4 <__ieee754_atan2+0x12c>)
 8007854:	42bd      	cmp	r5, r7
 8007856:	d0d4      	beq.n	8007802 <__ieee754_atan2+0x6a>
 8007858:	1bad      	subs	r5, r5, r6
 800785a:	152d      	asrs	r5, r5, #20
 800785c:	2d3c      	cmp	r5, #60	; 0x3c
 800785e:	dc16      	bgt.n	800788e <__ieee754_atan2+0xf6>
 8007860:	2b00      	cmp	r3, #0
 8007862:	da01      	bge.n	8007868 <__ieee754_atan2+0xd0>
 8007864:	353c      	adds	r5, #60	; 0x3c
 8007866:	db15      	blt.n	8007894 <__ieee754_atan2+0xfc>
 8007868:	f7f9 fd5e 	bl	8001328 <__aeabi_ddiv>
 800786c:	f000 f9ce 	bl	8007c0c <fabs>
 8007870:	f000 f844 	bl	80078fc <atan>
 8007874:	2c01      	cmp	r4, #1
 8007876:	d010      	beq.n	800789a <__ieee754_atan2+0x102>
 8007878:	2c02      	cmp	r4, #2
 800787a:	d013      	beq.n	80078a4 <__ieee754_atan2+0x10c>
 800787c:	2c00      	cmp	r4, #0
 800787e:	d0a2      	beq.n	80077c6 <__ieee754_atan2+0x2e>
 8007880:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <__ieee754_atan2+0x154>)
 8007882:	4b1b      	ldr	r3, [pc, #108]	; (80078f0 <__ieee754_atan2+0x158>)
 8007884:	f7fa fc04 	bl	8002090 <__aeabi_dsub>
 8007888:	4a10      	ldr	r2, [pc, #64]	; (80078cc <__ieee754_atan2+0x134>)
 800788a:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <__ieee754_atan2+0x150>)
 800788c:	e012      	b.n	80078b4 <__ieee754_atan2+0x11c>
 800788e:	480f      	ldr	r0, [pc, #60]	; (80078cc <__ieee754_atan2+0x134>)
 8007890:	4918      	ldr	r1, [pc, #96]	; (80078f4 <__ieee754_atan2+0x15c>)
 8007892:	e7ef      	b.n	8007874 <__ieee754_atan2+0xdc>
 8007894:	2000      	movs	r0, #0
 8007896:	2100      	movs	r1, #0
 8007898:	e7ec      	b.n	8007874 <__ieee754_atan2+0xdc>
 800789a:	2480      	movs	r4, #128	; 0x80
 800789c:	0624      	lsls	r4, r4, #24
 800789e:	190b      	adds	r3, r1, r4
 80078a0:	0019      	movs	r1, r3
 80078a2:	e790      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <__ieee754_atan2+0x154>)
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <__ieee754_atan2+0x158>)
 80078a8:	f7fa fbf2 	bl	8002090 <__aeabi_dsub>
 80078ac:	0002      	movs	r2, r0
 80078ae:	000b      	movs	r3, r1
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <__ieee754_atan2+0x134>)
 80078b2:	490d      	ldr	r1, [pc, #52]	; (80078e8 <__ieee754_atan2+0x150>)
 80078b4:	f7fa fbec 	bl	8002090 <__aeabi_dsub>
 80078b8:	e785      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <__ieee754_atan2+0x160>)
 80078bc:	e783      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80078be:	490d      	ldr	r1, [pc, #52]	; (80078f4 <__ieee754_atan2+0x15c>)
 80078c0:	e781      	b.n	80077c6 <__ieee754_atan2+0x2e>
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	7ff00000 	.word	0x7ff00000
 80078c8:	c0100000 	.word	0xc0100000
 80078cc:	54442d18 	.word	0x54442d18
 80078d0:	c00921fb 	.word	0xc00921fb
 80078d4:	bff921fb 	.word	0xbff921fb
 80078d8:	bfe921fb 	.word	0xbfe921fb
 80078dc:	7f3321d2 	.word	0x7f3321d2
 80078e0:	4002d97c 	.word	0x4002d97c
 80078e4:	c002d97c 	.word	0xc002d97c
 80078e8:	400921fb 	.word	0x400921fb
 80078ec:	33145c07 	.word	0x33145c07
 80078f0:	3ca1a626 	.word	0x3ca1a626
 80078f4:	3ff921fb 	.word	0x3ff921fb
 80078f8:	3fe921fb 	.word	0x3fe921fb

080078fc <atan>:
 80078fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fe:	4b9c      	ldr	r3, [pc, #624]	; (8007b70 <atan+0x274>)
 8007900:	b085      	sub	sp, #20
 8007902:	004e      	lsls	r6, r1, #1
 8007904:	0004      	movs	r4, r0
 8007906:	000d      	movs	r5, r1
 8007908:	9103      	str	r1, [sp, #12]
 800790a:	0876      	lsrs	r6, r6, #1
 800790c:	429e      	cmp	r6, r3
 800790e:	dd18      	ble.n	8007942 <atan+0x46>
 8007910:	4b98      	ldr	r3, [pc, #608]	; (8007b74 <atan+0x278>)
 8007912:	429e      	cmp	r6, r3
 8007914:	dc02      	bgt.n	800791c <atan+0x20>
 8007916:	d10a      	bne.n	800792e <atan+0x32>
 8007918:	2800      	cmp	r0, #0
 800791a:	d008      	beq.n	800792e <atan+0x32>
 800791c:	0022      	movs	r2, r4
 800791e:	002b      	movs	r3, r5
 8007920:	0020      	movs	r0, r4
 8007922:	0029      	movs	r1, r5
 8007924:	f7f9 f9f0 	bl	8000d08 <__aeabi_dadd>
 8007928:	0004      	movs	r4, r0
 800792a:	000d      	movs	r5, r1
 800792c:	e005      	b.n	800793a <atan+0x3e>
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	4c91      	ldr	r4, [pc, #580]	; (8007b78 <atan+0x27c>)
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd00      	ble.n	8007938 <atan+0x3c>
 8007936:	e118      	b.n	8007b6a <atan+0x26e>
 8007938:	4d90      	ldr	r5, [pc, #576]	; (8007b7c <atan+0x280>)
 800793a:	0020      	movs	r0, r4
 800793c:	0029      	movs	r1, r5
 800793e:	b005      	add	sp, #20
 8007940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007942:	4b8f      	ldr	r3, [pc, #572]	; (8007b80 <atan+0x284>)
 8007944:	429e      	cmp	r6, r3
 8007946:	dc0f      	bgt.n	8007968 <atan+0x6c>
 8007948:	4b8e      	ldr	r3, [pc, #568]	; (8007b84 <atan+0x288>)
 800794a:	429e      	cmp	r6, r3
 800794c:	dc09      	bgt.n	8007962 <atan+0x66>
 800794e:	4a8e      	ldr	r2, [pc, #568]	; (8007b88 <atan+0x28c>)
 8007950:	4b8e      	ldr	r3, [pc, #568]	; (8007b8c <atan+0x290>)
 8007952:	f7f9 f9d9 	bl	8000d08 <__aeabi_dadd>
 8007956:	2200      	movs	r2, #0
 8007958:	4b8d      	ldr	r3, [pc, #564]	; (8007b90 <atan+0x294>)
 800795a:	f7f8 fc8b 	bl	8000274 <__aeabi_dcmpgt>
 800795e:	2800      	cmp	r0, #0
 8007960:	d1eb      	bne.n	800793a <atan+0x3e>
 8007962:	2301      	movs	r3, #1
 8007964:	425b      	negs	r3, r3
 8007966:	e025      	b.n	80079b4 <atan+0xb8>
 8007968:	f000 f950 	bl	8007c0c <fabs>
 800796c:	4b89      	ldr	r3, [pc, #548]	; (8007b94 <atan+0x298>)
 800796e:	0004      	movs	r4, r0
 8007970:	000d      	movs	r5, r1
 8007972:	429e      	cmp	r6, r3
 8007974:	dd00      	ble.n	8007978 <atan+0x7c>
 8007976:	e0aa      	b.n	8007ace <atan+0x1d2>
 8007978:	4b87      	ldr	r3, [pc, #540]	; (8007b98 <atan+0x29c>)
 800797a:	429e      	cmp	r6, r3
 800797c:	dd00      	ble.n	8007980 <atan+0x84>
 800797e:	e090      	b.n	8007aa2 <atan+0x1a6>
 8007980:	0002      	movs	r2, r0
 8007982:	000b      	movs	r3, r1
 8007984:	f7f9 f9c0 	bl	8000d08 <__aeabi_dadd>
 8007988:	2200      	movs	r2, #0
 800798a:	4b81      	ldr	r3, [pc, #516]	; (8007b90 <atan+0x294>)
 800798c:	f7fa fb80 	bl	8002090 <__aeabi_dsub>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	0006      	movs	r6, r0
 8007994:	000f      	movs	r7, r1
 8007996:	2200      	movs	r2, #0
 8007998:	05db      	lsls	r3, r3, #23
 800799a:	0020      	movs	r0, r4
 800799c:	0029      	movs	r1, r5
 800799e:	f7f9 f9b3 	bl	8000d08 <__aeabi_dadd>
 80079a2:	000b      	movs	r3, r1
 80079a4:	0002      	movs	r2, r0
 80079a6:	0039      	movs	r1, r7
 80079a8:	0030      	movs	r0, r6
 80079aa:	f7f9 fcbd 	bl	8001328 <__aeabi_ddiv>
 80079ae:	2300      	movs	r3, #0
 80079b0:	0004      	movs	r4, r0
 80079b2:	000d      	movs	r5, r1
 80079b4:	9302      	str	r3, [sp, #8]
 80079b6:	0022      	movs	r2, r4
 80079b8:	002b      	movs	r3, r5
 80079ba:	0020      	movs	r0, r4
 80079bc:	0029      	movs	r1, r5
 80079be:	f7fa f8e7 	bl	8001b90 <__aeabi_dmul>
 80079c2:	0002      	movs	r2, r0
 80079c4:	000b      	movs	r3, r1
 80079c6:	9000      	str	r0, [sp, #0]
 80079c8:	9101      	str	r1, [sp, #4]
 80079ca:	f7fa f8e1 	bl	8001b90 <__aeabi_dmul>
 80079ce:	0006      	movs	r6, r0
 80079d0:	000f      	movs	r7, r1
 80079d2:	4a72      	ldr	r2, [pc, #456]	; (8007b9c <atan+0x2a0>)
 80079d4:	4b72      	ldr	r3, [pc, #456]	; (8007ba0 <atan+0x2a4>)
 80079d6:	f7fa f8db 	bl	8001b90 <__aeabi_dmul>
 80079da:	4a72      	ldr	r2, [pc, #456]	; (8007ba4 <atan+0x2a8>)
 80079dc:	4b72      	ldr	r3, [pc, #456]	; (8007ba8 <atan+0x2ac>)
 80079de:	f7f9 f993 	bl	8000d08 <__aeabi_dadd>
 80079e2:	0032      	movs	r2, r6
 80079e4:	003b      	movs	r3, r7
 80079e6:	f7fa f8d3 	bl	8001b90 <__aeabi_dmul>
 80079ea:	4a70      	ldr	r2, [pc, #448]	; (8007bac <atan+0x2b0>)
 80079ec:	4b70      	ldr	r3, [pc, #448]	; (8007bb0 <atan+0x2b4>)
 80079ee:	f7f9 f98b 	bl	8000d08 <__aeabi_dadd>
 80079f2:	0032      	movs	r2, r6
 80079f4:	003b      	movs	r3, r7
 80079f6:	f7fa f8cb 	bl	8001b90 <__aeabi_dmul>
 80079fa:	4a6e      	ldr	r2, [pc, #440]	; (8007bb4 <atan+0x2b8>)
 80079fc:	4b6e      	ldr	r3, [pc, #440]	; (8007bb8 <atan+0x2bc>)
 80079fe:	f7f9 f983 	bl	8000d08 <__aeabi_dadd>
 8007a02:	0032      	movs	r2, r6
 8007a04:	003b      	movs	r3, r7
 8007a06:	f7fa f8c3 	bl	8001b90 <__aeabi_dmul>
 8007a0a:	4a6c      	ldr	r2, [pc, #432]	; (8007bbc <atan+0x2c0>)
 8007a0c:	4b6c      	ldr	r3, [pc, #432]	; (8007bc0 <atan+0x2c4>)
 8007a0e:	f7f9 f97b 	bl	8000d08 <__aeabi_dadd>
 8007a12:	0032      	movs	r2, r6
 8007a14:	003b      	movs	r3, r7
 8007a16:	f7fa f8bb 	bl	8001b90 <__aeabi_dmul>
 8007a1a:	4a6a      	ldr	r2, [pc, #424]	; (8007bc4 <atan+0x2c8>)
 8007a1c:	4b6a      	ldr	r3, [pc, #424]	; (8007bc8 <atan+0x2cc>)
 8007a1e:	f7f9 f973 	bl	8000d08 <__aeabi_dadd>
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	f7fa f8b3 	bl	8001b90 <__aeabi_dmul>
 8007a2a:	4a68      	ldr	r2, [pc, #416]	; (8007bcc <atan+0x2d0>)
 8007a2c:	9000      	str	r0, [sp, #0]
 8007a2e:	9101      	str	r1, [sp, #4]
 8007a30:	4b67      	ldr	r3, [pc, #412]	; (8007bd0 <atan+0x2d4>)
 8007a32:	0030      	movs	r0, r6
 8007a34:	0039      	movs	r1, r7
 8007a36:	f7fa f8ab 	bl	8001b90 <__aeabi_dmul>
 8007a3a:	4a66      	ldr	r2, [pc, #408]	; (8007bd4 <atan+0x2d8>)
 8007a3c:	4b66      	ldr	r3, [pc, #408]	; (8007bd8 <atan+0x2dc>)
 8007a3e:	f7fa fb27 	bl	8002090 <__aeabi_dsub>
 8007a42:	0032      	movs	r2, r6
 8007a44:	003b      	movs	r3, r7
 8007a46:	f7fa f8a3 	bl	8001b90 <__aeabi_dmul>
 8007a4a:	4a64      	ldr	r2, [pc, #400]	; (8007bdc <atan+0x2e0>)
 8007a4c:	4b64      	ldr	r3, [pc, #400]	; (8007be0 <atan+0x2e4>)
 8007a4e:	f7fa fb1f 	bl	8002090 <__aeabi_dsub>
 8007a52:	0032      	movs	r2, r6
 8007a54:	003b      	movs	r3, r7
 8007a56:	f7fa f89b 	bl	8001b90 <__aeabi_dmul>
 8007a5a:	4a62      	ldr	r2, [pc, #392]	; (8007be4 <atan+0x2e8>)
 8007a5c:	4b62      	ldr	r3, [pc, #392]	; (8007be8 <atan+0x2ec>)
 8007a5e:	f7fa fb17 	bl	8002090 <__aeabi_dsub>
 8007a62:	0032      	movs	r2, r6
 8007a64:	003b      	movs	r3, r7
 8007a66:	f7fa f893 	bl	8001b90 <__aeabi_dmul>
 8007a6a:	4a60      	ldr	r2, [pc, #384]	; (8007bec <atan+0x2f0>)
 8007a6c:	4b60      	ldr	r3, [pc, #384]	; (8007bf0 <atan+0x2f4>)
 8007a6e:	f7fa fb0f 	bl	8002090 <__aeabi_dsub>
 8007a72:	0032      	movs	r2, r6
 8007a74:	003b      	movs	r3, r7
 8007a76:	f7fa f88b 	bl	8001b90 <__aeabi_dmul>
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	9902      	ldr	r1, [sp, #8]
 8007a7e:	0002      	movs	r2, r0
 8007a80:	3101      	adds	r1, #1
 8007a82:	d14b      	bne.n	8007b1c <atan+0x220>
 8007a84:	9800      	ldr	r0, [sp, #0]
 8007a86:	9901      	ldr	r1, [sp, #4]
 8007a88:	f7f9 f93e 	bl	8000d08 <__aeabi_dadd>
 8007a8c:	0022      	movs	r2, r4
 8007a8e:	002b      	movs	r3, r5
 8007a90:	f7fa f87e 	bl	8001b90 <__aeabi_dmul>
 8007a94:	0002      	movs	r2, r0
 8007a96:	000b      	movs	r3, r1
 8007a98:	0020      	movs	r0, r4
 8007a9a:	0029      	movs	r1, r5
 8007a9c:	f7fa faf8 	bl	8002090 <__aeabi_dsub>
 8007aa0:	e742      	b.n	8007928 <atan+0x2c>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4b3a      	ldr	r3, [pc, #232]	; (8007b90 <atan+0x294>)
 8007aa6:	f7fa faf3 	bl	8002090 <__aeabi_dsub>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	0006      	movs	r6, r0
 8007aae:	000f      	movs	r7, r1
 8007ab0:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <atan+0x294>)
 8007ab2:	0020      	movs	r0, r4
 8007ab4:	0029      	movs	r1, r5
 8007ab6:	f7f9 f927 	bl	8000d08 <__aeabi_dadd>
 8007aba:	000b      	movs	r3, r1
 8007abc:	0002      	movs	r2, r0
 8007abe:	0039      	movs	r1, r7
 8007ac0:	0030      	movs	r0, r6
 8007ac2:	f7f9 fc31 	bl	8001328 <__aeabi_ddiv>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	0004      	movs	r4, r0
 8007aca:	000d      	movs	r5, r1
 8007acc:	e772      	b.n	80079b4 <atan+0xb8>
 8007ace:	4b49      	ldr	r3, [pc, #292]	; (8007bf4 <atan+0x2f8>)
 8007ad0:	429e      	cmp	r6, r3
 8007ad2:	dc19      	bgt.n	8007b08 <atan+0x20c>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4b48      	ldr	r3, [pc, #288]	; (8007bf8 <atan+0x2fc>)
 8007ad8:	f7fa fada 	bl	8002090 <__aeabi_dsub>
 8007adc:	2200      	movs	r2, #0
 8007ade:	0006      	movs	r6, r0
 8007ae0:	000f      	movs	r7, r1
 8007ae2:	4b45      	ldr	r3, [pc, #276]	; (8007bf8 <atan+0x2fc>)
 8007ae4:	0020      	movs	r0, r4
 8007ae6:	0029      	movs	r1, r5
 8007ae8:	f7fa f852 	bl	8001b90 <__aeabi_dmul>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <atan+0x294>)
 8007af0:	f7f9 f90a 	bl	8000d08 <__aeabi_dadd>
 8007af4:	000b      	movs	r3, r1
 8007af6:	0002      	movs	r2, r0
 8007af8:	0039      	movs	r1, r7
 8007afa:	0030      	movs	r0, r6
 8007afc:	f7f9 fc14 	bl	8001328 <__aeabi_ddiv>
 8007b00:	2302      	movs	r3, #2
 8007b02:	0004      	movs	r4, r0
 8007b04:	000d      	movs	r5, r1
 8007b06:	e755      	b.n	80079b4 <atan+0xb8>
 8007b08:	000b      	movs	r3, r1
 8007b0a:	0002      	movs	r2, r0
 8007b0c:	493b      	ldr	r1, [pc, #236]	; (8007bfc <atan+0x300>)
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f7f9 fc0a 	bl	8001328 <__aeabi_ddiv>
 8007b14:	2303      	movs	r3, #3
 8007b16:	0004      	movs	r4, r0
 8007b18:	000d      	movs	r5, r1
 8007b1a:	e74b      	b.n	80079b4 <atan+0xb8>
 8007b1c:	9902      	ldr	r1, [sp, #8]
 8007b1e:	4f38      	ldr	r7, [pc, #224]	; (8007c00 <atan+0x304>)
 8007b20:	00ce      	lsls	r6, r1, #3
 8007b22:	9800      	ldr	r0, [sp, #0]
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	f7f9 f8ef 	bl	8000d08 <__aeabi_dadd>
 8007b2a:	0022      	movs	r2, r4
 8007b2c:	002b      	movs	r3, r5
 8007b2e:	f7fa f82f 	bl	8001b90 <__aeabi_dmul>
 8007b32:	4b34      	ldr	r3, [pc, #208]	; (8007c04 <atan+0x308>)
 8007b34:	19bf      	adds	r7, r7, r6
 8007b36:	199e      	adds	r6, r3, r6
 8007b38:	6832      	ldr	r2, [r6, #0]
 8007b3a:	6873      	ldr	r3, [r6, #4]
 8007b3c:	f7fa faa8 	bl	8002090 <__aeabi_dsub>
 8007b40:	0022      	movs	r2, r4
 8007b42:	002b      	movs	r3, r5
 8007b44:	f7fa faa4 	bl	8002090 <__aeabi_dsub>
 8007b48:	000b      	movs	r3, r1
 8007b4a:	0002      	movs	r2, r0
 8007b4c:	6838      	ldr	r0, [r7, #0]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	f7fa fa9e 	bl	8002090 <__aeabi_dsub>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	0004      	movs	r4, r0
 8007b58:	000d      	movs	r5, r1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	db00      	blt.n	8007b60 <atan+0x264>
 8007b5e:	e6ec      	b.n	800793a <atan+0x3e>
 8007b60:	2180      	movs	r1, #128	; 0x80
 8007b62:	0609      	lsls	r1, r1, #24
 8007b64:	186b      	adds	r3, r5, r1
 8007b66:	001d      	movs	r5, r3
 8007b68:	e6e7      	b.n	800793a <atan+0x3e>
 8007b6a:	4d27      	ldr	r5, [pc, #156]	; (8007c08 <atan+0x30c>)
 8007b6c:	e6e5      	b.n	800793a <atan+0x3e>
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	440fffff 	.word	0x440fffff
 8007b74:	7ff00000 	.word	0x7ff00000
 8007b78:	54442d18 	.word	0x54442d18
 8007b7c:	bff921fb 	.word	0xbff921fb
 8007b80:	3fdbffff 	.word	0x3fdbffff
 8007b84:	3e1fffff 	.word	0x3e1fffff
 8007b88:	8800759c 	.word	0x8800759c
 8007b8c:	7e37e43c 	.word	0x7e37e43c
 8007b90:	3ff00000 	.word	0x3ff00000
 8007b94:	3ff2ffff 	.word	0x3ff2ffff
 8007b98:	3fe5ffff 	.word	0x3fe5ffff
 8007b9c:	e322da11 	.word	0xe322da11
 8007ba0:	3f90ad3a 	.word	0x3f90ad3a
 8007ba4:	24760deb 	.word	0x24760deb
 8007ba8:	3fa97b4b 	.word	0x3fa97b4b
 8007bac:	a0d03d51 	.word	0xa0d03d51
 8007bb0:	3fb10d66 	.word	0x3fb10d66
 8007bb4:	c54c206e 	.word	0xc54c206e
 8007bb8:	3fb745cd 	.word	0x3fb745cd
 8007bbc:	920083ff 	.word	0x920083ff
 8007bc0:	3fc24924 	.word	0x3fc24924
 8007bc4:	5555550d 	.word	0x5555550d
 8007bc8:	3fd55555 	.word	0x3fd55555
 8007bcc:	2c6a6c2f 	.word	0x2c6a6c2f
 8007bd0:	bfa2b444 	.word	0xbfa2b444
 8007bd4:	52defd9a 	.word	0x52defd9a
 8007bd8:	3fadde2d 	.word	0x3fadde2d
 8007bdc:	af749a6d 	.word	0xaf749a6d
 8007be0:	3fb3b0f2 	.word	0x3fb3b0f2
 8007be4:	fe231671 	.word	0xfe231671
 8007be8:	3fbc71c6 	.word	0x3fbc71c6
 8007bec:	9998ebc4 	.word	0x9998ebc4
 8007bf0:	3fc99999 	.word	0x3fc99999
 8007bf4:	40037fff 	.word	0x40037fff
 8007bf8:	3ff80000 	.word	0x3ff80000
 8007bfc:	bff00000 	.word	0xbff00000
 8007c00:	08007e90 	.word	0x08007e90
 8007c04:	08007eb0 	.word	0x08007eb0
 8007c08:	3ff921fb 	.word	0x3ff921fb

08007c0c <fabs>:
 8007c0c:	0049      	lsls	r1, r1, #1
 8007c0e:	084b      	lsrs	r3, r1, #1
 8007c10:	0019      	movs	r1, r3
 8007c12:	4770      	bx	lr

08007c14 <_init>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1a:	bc08      	pop	{r3}
 8007c1c:	469e      	mov	lr, r3
 8007c1e:	4770      	bx	lr

08007c20 <_fini>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c26:	bc08      	pop	{r3}
 8007c28:	469e      	mov	lr, r3
 8007c2a:	4770      	bx	lr
